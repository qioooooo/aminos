using System;
using System.Collections;
using System.ComponentModel;
using System.Data.Common;
using System.Globalization;

namespace System.Data
{
	// Token: 0x02000062 RID: 98
	[DefaultEvent("CollectionChanged")]
	[Editor("Microsoft.VSDesigner.Data.Design.ConstraintsCollectionEditor, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	public sealed class ConstraintCollection : InternalDataCollectionBase
	{
		// Token: 0x0600048A RID: 1162 RVA: 0x001D5090 File Offset: 0x001D4490
		internal ConstraintCollection(DataTable table)
		{
			this.table = table;
		}

		// Token: 0x17000083 RID: 131
		// (get) Token: 0x0600048B RID: 1163 RVA: 0x001D50BC File Offset: 0x001D44BC
		protected override ArrayList List
		{
			get
			{
				return this.list;
			}
		}

		// Token: 0x17000084 RID: 132
		public Constraint this[int index]
		{
			get
			{
				if (index >= 0 && index < this.List.Count)
				{
					return (Constraint)this.List[index];
				}
				throw ExceptionBuilder.ConstraintOutOfRange(index);
			}
		}

		// Token: 0x17000085 RID: 133
		// (get) Token: 0x0600048D RID: 1165 RVA: 0x001D5108 File Offset: 0x001D4508
		internal DataTable Table
		{
			get
			{
				return this.table;
			}
		}

		// Token: 0x17000086 RID: 134
		public Constraint this[string name]
		{
			get
			{
				int num = this.InternalIndexOf(name);
				if (num == -2)
				{
					throw ExceptionBuilder.CaseInsensitiveNameConflict(name);
				}
				if (num >= 0)
				{
					return (Constraint)this.List[num];
				}
				return null;
			}
		}

		// Token: 0x0600048F RID: 1167 RVA: 0x001D5154 File Offset: 0x001D4554
		public void Add(Constraint constraint)
		{
			this.Add(constraint, true);
		}

		// Token: 0x06000490 RID: 1168 RVA: 0x001D516C File Offset: 0x001D456C
		internal void Add(Constraint constraint, bool addUniqueWhenAddingForeign)
		{
			if (constraint == null)
			{
				throw ExceptionBuilder.ArgumentNull("constraint");
			}
			if (this.FindConstraint(constraint) != null)
			{
				throw ExceptionBuilder.DuplicateConstraint(this.FindConstraint(constraint).ConstraintName);
			}
			if (1 < this.table.NestedParentRelations.Length && !this.AutoGenerated(constraint))
			{
				throw ExceptionBuilder.CantAddConstraintToMultipleNestedTable(this.table.TableName);
			}
			if (constraint is UniqueConstraint)
			{
				if (((UniqueConstraint)constraint).bPrimaryKey && this.Table.primaryKey != null)
				{
					throw ExceptionBuilder.AddPrimaryKeyConstraint();
				}
				this.AddUniqueConstraint((UniqueConstraint)constraint);
			}
			else if (constraint is ForeignKeyConstraint)
			{
				ForeignKeyConstraint foreignKeyConstraint = (ForeignKeyConstraint)constraint;
				if (addUniqueWhenAddingForeign && foreignKeyConstraint.RelatedTable.Constraints.FindKeyConstraint(foreignKeyConstraint.RelatedColumnsReference) == null)
				{
					if (constraint.ConstraintName.Length == 0)
					{
						constraint.ConstraintName = this.AssignName();
					}
					else
					{
						this.RegisterName(constraint.ConstraintName);
					}
					UniqueConstraint uniqueConstraint = new UniqueConstraint(foreignKeyConstraint.RelatedColumnsReference);
					foreignKeyConstraint.RelatedTable.Constraints.Add(uniqueConstraint);
				}
				this.AddForeignKeyConstraint((ForeignKeyConstraint)constraint);
			}
			this.BaseAdd(constraint);
			this.ArrayAdd(constraint);
			this.OnCollectionChanged(new CollectionChangeEventArgs(CollectionChangeAction.Add, constraint));
			if (constraint is UniqueConstraint && ((UniqueConstraint)constraint).bPrimaryKey)
			{
				this.Table.PrimaryKey = ((UniqueConstraint)constraint).ColumnsReference;
			}
		}

		// Token: 0x06000491 RID: 1169 RVA: 0x001D52CC File Offset: 0x001D46CC
		public Constraint Add(string name, DataColumn[] columns, bool primaryKey)
		{
			UniqueConstraint uniqueConstraint = new UniqueConstraint(name, columns);
			this.Add(uniqueConstraint);
			if (primaryKey)
			{
				this.Table.PrimaryKey = columns;
			}
			return uniqueConstraint;
		}

		// Token: 0x06000492 RID: 1170 RVA: 0x001D52F8 File Offset: 0x001D46F8
		public Constraint Add(string name, DataColumn column, bool primaryKey)
		{
			UniqueConstraint uniqueConstraint = new UniqueConstraint(name, column);
			this.Add(uniqueConstraint);
			if (primaryKey)
			{
				this.Table.PrimaryKey = uniqueConstraint.ColumnsReference;
			}
			return uniqueConstraint;
		}

		// Token: 0x06000493 RID: 1171 RVA: 0x001D532C File Offset: 0x001D472C
		public Constraint Add(string name, DataColumn primaryKeyColumn, DataColumn foreignKeyColumn)
		{
			ForeignKeyConstraint foreignKeyConstraint = new ForeignKeyConstraint(name, primaryKeyColumn, foreignKeyColumn);
			this.Add(foreignKeyConstraint);
			return foreignKeyConstraint;
		}

		// Token: 0x06000494 RID: 1172 RVA: 0x001D534C File Offset: 0x001D474C
		public Constraint Add(string name, DataColumn[] primaryKeyColumns, DataColumn[] foreignKeyColumns)
		{
			ForeignKeyConstraint foreignKeyConstraint = new ForeignKeyConstraint(name, primaryKeyColumns, foreignKeyColumns);
			this.Add(foreignKeyConstraint);
			return foreignKeyConstraint;
		}

		// Token: 0x06000495 RID: 1173 RVA: 0x001D536C File Offset: 0x001D476C
		public void AddRange(Constraint[] constraints)
		{
			if (this.table.fInitInProgress)
			{
				this.delayLoadingConstraints = constraints;
				this.fLoadForeignKeyConstraintsOnly = false;
				return;
			}
			if (constraints != null)
			{
				foreach (Constraint constraint in constraints)
				{
					if (constraint != null)
					{
						this.Add(constraint);
					}
				}
			}
		}

		// Token: 0x06000496 RID: 1174 RVA: 0x001D53B8 File Offset: 0x001D47B8
		private void AddUniqueConstraint(UniqueConstraint constraint)
		{
			DataColumn[] columnsReference = constraint.ColumnsReference;
			for (int i = 0; i < columnsReference.Length; i++)
			{
				if (columnsReference[i].Table != this.table)
				{
					throw ExceptionBuilder.ConstraintForeignTable();
				}
			}
			constraint.ConstraintIndexInitialize();
			if (!constraint.CanEnableConstraint())
			{
				constraint.ConstraintIndexClear();
				throw ExceptionBuilder.UniqueConstraintViolation();
			}
		}

		// Token: 0x06000497 RID: 1175 RVA: 0x001D540C File Offset: 0x001D480C
		private void AddForeignKeyConstraint(ForeignKeyConstraint constraint)
		{
			if (!constraint.CanEnableConstraint())
			{
				throw ExceptionBuilder.ConstraintParentValues();
			}
			constraint.CheckCanAddToCollection(this);
		}

		// Token: 0x06000498 RID: 1176 RVA: 0x001D5430 File Offset: 0x001D4830
		private bool AutoGenerated(Constraint constraint)
		{
			ForeignKeyConstraint foreignKeyConstraint = constraint as ForeignKeyConstraint;
			if (foreignKeyConstraint != null)
			{
				return XmlTreeGen.AutoGenerated(foreignKeyConstraint, false);
			}
			UniqueConstraint uniqueConstraint = (UniqueConstraint)constraint;
			return XmlTreeGen.AutoGenerated(uniqueConstraint);
		}

		// Token: 0x14000002 RID: 2
		// (add) Token: 0x06000499 RID: 1177 RVA: 0x001D545C File Offset: 0x001D485C
		// (remove) Token: 0x0600049A RID: 1178 RVA: 0x001D5480 File Offset: 0x001D4880
		public event CollectionChangeEventHandler CollectionChanged
		{
			add
			{
				this.onCollectionChanged = (CollectionChangeEventHandler)Delegate.Combine(this.onCollectionChanged, value);
			}
			remove
			{
				this.onCollectionChanged = (CollectionChangeEventHandler)Delegate.Remove(this.onCollectionChanged, value);
			}
		}

		// Token: 0x0600049B RID: 1179 RVA: 0x001D54A4 File Offset: 0x001D48A4
		private void ArrayAdd(Constraint constraint)
		{
			this.List.Add(constraint);
		}

		// Token: 0x0600049C RID: 1180 RVA: 0x001D54C0 File Offset: 0x001D48C0
		private void ArrayRemove(Constraint constraint)
		{
			this.List.Remove(constraint);
		}

		// Token: 0x0600049D RID: 1181 RVA: 0x001D54DC File Offset: 0x001D48DC
		internal string AssignName()
		{
			string text = this.MakeName(this.defaultNameIndex);
			this.defaultNameIndex++;
			return text;
		}

		// Token: 0x0600049E RID: 1182 RVA: 0x001D5508 File Offset: 0x001D4908
		private void BaseAdd(Constraint constraint)
		{
			if (constraint == null)
			{
				throw ExceptionBuilder.ArgumentNull("constraint");
			}
			if (constraint.ConstraintName.Length == 0)
			{
				constraint.ConstraintName = this.AssignName();
			}
			else
			{
				this.RegisterName(constraint.ConstraintName);
			}
			constraint.InCollection = true;
		}

		// Token: 0x0600049F RID: 1183 RVA: 0x001D5554 File Offset: 0x001D4954
		private void BaseGroupSwitch(Constraint[] oldArray, int oldLength, Constraint[] newArray, int newLength)
		{
			int num = 0;
			for (int i = 0; i < oldLength; i++)
			{
				bool flag = false;
				for (int j = num; j < newLength; j++)
				{
					if (oldArray[i] == newArray[j])
					{
						if (num == j)
						{
							num++;
						}
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					this.BaseRemove(oldArray[i]);
					this.List.Remove(oldArray[i]);
				}
			}
			for (int k = 0; k < newLength; k++)
			{
				if (!newArray[k].InCollection)
				{
					this.BaseAdd(newArray[k]);
				}
				this.List.Add(newArray[k]);
			}
		}

		// Token: 0x060004A0 RID: 1184 RVA: 0x001D55E0 File Offset: 0x001D49E0
		private void BaseRemove(Constraint constraint)
		{
			if (constraint == null)
			{
				throw ExceptionBuilder.ArgumentNull("constraint");
			}
			if (constraint.Table != this.table)
			{
				throw ExceptionBuilder.ConstraintRemoveFailed();
			}
			this.UnregisterName(constraint.ConstraintName);
			constraint.InCollection = false;
			if (constraint is UniqueConstraint)
			{
				for (int i = 0; i < this.Table.ChildRelations.Count; i++)
				{
					DataRelation dataRelation = this.Table.ChildRelations[i];
					if (dataRelation.ParentKeyConstraint == constraint)
					{
						dataRelation.SetParentKeyConstraint(null);
					}
				}
				((UniqueConstraint)constraint).ConstraintIndexClear();
				return;
			}
			if (constraint is ForeignKeyConstraint)
			{
				for (int j = 0; j < this.Table.ParentRelations.Count; j++)
				{
					DataRelation dataRelation2 = this.Table.ParentRelations[j];
					if (dataRelation2.ChildKeyConstraint == constraint)
					{
						dataRelation2.SetChildKeyConstraint(null);
					}
				}
			}
		}

		// Token: 0x060004A1 RID: 1185 RVA: 0x001D56B8 File Offset: 0x001D4AB8
		public bool CanRemove(Constraint constraint)
		{
			return this.CanRemove(constraint, false);
		}

		// Token: 0x060004A2 RID: 1186 RVA: 0x001D56D0 File Offset: 0x001D4AD0
		internal bool CanRemove(Constraint constraint, bool fThrowException)
		{
			return constraint.CanBeRemovedFromCollection(this, fThrowException);
		}

		// Token: 0x060004A3 RID: 1187 RVA: 0x001D56E8 File Offset: 0x001D4AE8
		public void Clear()
		{
			if (this.table != null)
			{
				this.table.PrimaryKey = null;
				for (int i = 0; i < this.table.ParentRelations.Count; i++)
				{
					this.table.ParentRelations[i].SetChildKeyConstraint(null);
				}
				for (int j = 0; j < this.table.ChildRelations.Count; j++)
				{
					this.table.ChildRelations[j].SetParentKeyConstraint(null);
				}
			}
			if (this.table.fInitInProgress && this.delayLoadingConstraints != null)
			{
				this.delayLoadingConstraints = null;
				this.fLoadForeignKeyConstraintsOnly = false;
			}
			int count = this.List.Count;
			Constraint[] array = new Constraint[this.List.Count];
			this.List.CopyTo(array, 0);
			try
			{
				this.BaseGroupSwitch(array, count, null, 0);
			}
			catch (Exception ex)
			{
				if (ADP.IsCatchableOrSecurityExceptionType(ex))
				{
					this.BaseGroupSwitch(null, 0, array, count);
					this.List.Clear();
					for (int k = 0; k < count; k++)
					{
						this.List.Add(array[k]);
					}
				}
				throw;
			}
			this.List.Clear();
			this.OnCollectionChanged(InternalDataCollectionBase.RefreshEventArgs);
		}

		// Token: 0x060004A4 RID: 1188 RVA: 0x001D583C File Offset: 0x001D4C3C
		public bool Contains(string name)
		{
			return this.InternalIndexOf(name) >= 0;
		}

		// Token: 0x060004A5 RID: 1189 RVA: 0x001D5858 File Offset: 0x001D4C58
		internal bool Contains(string name, bool caseSensitive)
		{
			if (!caseSensitive)
			{
				return this.Contains(name);
			}
			int num = this.InternalIndexOf(name);
			return num >= 0 && name == ((Constraint)this.List[num]).ConstraintName;
		}

		// Token: 0x060004A6 RID: 1190 RVA: 0x001D589C File Offset: 0x001D4C9C
		public void CopyTo(Constraint[] array, int index)
		{
			if (array == null)
			{
				throw ExceptionBuilder.ArgumentNull("array");
			}
			if (index < 0)
			{
				throw ExceptionBuilder.ArgumentOutOfRange("index");
			}
			if (array.Length - index < this.list.Count)
			{
				throw ExceptionBuilder.InvalidOffsetLength();
			}
			for (int i = 0; i < this.list.Count; i++)
			{
				array[index + i] = (Constraint)this.list[i];
			}
		}

		// Token: 0x060004A7 RID: 1191 RVA: 0x001D590C File Offset: 0x001D4D0C
		internal Constraint FindConstraint(Constraint constraint)
		{
			int count = this.List.Count;
			for (int i = 0; i < count; i++)
			{
				if (((Constraint)this.List[i]).Equals(constraint))
				{
					return (Constraint)this.List[i];
				}
			}
			return null;
		}

		// Token: 0x060004A8 RID: 1192 RVA: 0x001D5960 File Offset: 0x001D4D60
		internal UniqueConstraint FindKeyConstraint(DataColumn[] columns)
		{
			int count = this.List.Count;
			for (int i = 0; i < count; i++)
			{
				UniqueConstraint uniqueConstraint = this.List[i] as UniqueConstraint;
				if (uniqueConstraint != null && ConstraintCollection.CompareArrays(uniqueConstraint.Key.ColumnsReference, columns))
				{
					return uniqueConstraint;
				}
			}
			return null;
		}

		// Token: 0x060004A9 RID: 1193 RVA: 0x001D59B4 File Offset: 0x001D4DB4
		internal UniqueConstraint FindKeyConstraint(DataColumn column)
		{
			int count = this.List.Count;
			for (int i = 0; i < count; i++)
			{
				UniqueConstraint uniqueConstraint = this.List[i] as UniqueConstraint;
				if (uniqueConstraint != null && uniqueConstraint.Key.ColumnsReference.Length == 1 && uniqueConstraint.Key.ColumnsReference[0] == column)
				{
					return uniqueConstraint;
				}
			}
			return null;
		}

		// Token: 0x060004AA RID: 1194 RVA: 0x001D5A18 File Offset: 0x001D4E18
		internal ForeignKeyConstraint FindForeignKeyConstraint(DataColumn[] parentColumns, DataColumn[] childColumns)
		{
			int count = this.List.Count;
			for (int i = 0; i < count; i++)
			{
				ForeignKeyConstraint foreignKeyConstraint = this.List[i] as ForeignKeyConstraint;
				if (foreignKeyConstraint != null && ConstraintCollection.CompareArrays(foreignKeyConstraint.ParentKey.ColumnsReference, parentColumns) && ConstraintCollection.CompareArrays(foreignKeyConstraint.ChildKey.ColumnsReference, childColumns))
				{
					return foreignKeyConstraint;
				}
			}
			return null;
		}

		// Token: 0x060004AB RID: 1195 RVA: 0x001D5A84 File Offset: 0x001D4E84
		private static bool CompareArrays(DataColumn[] a1, DataColumn[] a2)
		{
			if (a1.Length != a2.Length)
			{
				return false;
			}
			for (int i = 0; i < a1.Length; i++)
			{
				bool flag = false;
				for (int j = 0; j < a2.Length; j++)
				{
					if (a1[i] == a2[j])
					{
						flag = true;
						break;
					}
				}
				if (!flag)
				{
					return false;
				}
			}
			return true;
		}

		// Token: 0x060004AC RID: 1196 RVA: 0x001D5ACC File Offset: 0x001D4ECC
		public int IndexOf(Constraint constraint)
		{
			if (constraint != null)
			{
				int count = this.Count;
				for (int i = 0; i < count; i++)
				{
					if (constraint == (Constraint)this.List[i])
					{
						return i;
					}
				}
			}
			return -1;
		}

		// Token: 0x060004AD RID: 1197 RVA: 0x001D5B08 File Offset: 0x001D4F08
		public int IndexOf(string constraintName)
		{
			int num = this.InternalIndexOf(constraintName);
			if (num >= 0)
			{
				return num;
			}
			return -1;
		}

		// Token: 0x060004AE RID: 1198 RVA: 0x001D5B24 File Offset: 0x001D4F24
		internal int InternalIndexOf(string constraintName)
		{
			int num = -1;
			if (constraintName != null && 0 < constraintName.Length)
			{
				int count = this.List.Count;
				for (int i = 0; i < count; i++)
				{
					Constraint constraint = (Constraint)this.List[i];
					int num2 = base.NamesEqual(constraint.ConstraintName, constraintName, false, this.table.Locale);
					if (num2 == 1)
					{
						return i;
					}
					if (num2 == -1)
					{
						num = ((num == -1) ? i : (-2));
					}
				}
			}
			return num;
		}

		// Token: 0x060004AF RID: 1199 RVA: 0x001D5B9C File Offset: 0x001D4F9C
		private string MakeName(int index)
		{
			if (1 == index)
			{
				return "Constraint1";
			}
			return "Constraint" + index.ToString(CultureInfo.InvariantCulture);
		}

		// Token: 0x060004B0 RID: 1200 RVA: 0x001D5BCC File Offset: 0x001D4FCC
		private void OnCollectionChanged(CollectionChangeEventArgs ccevent)
		{
			if (this.onCollectionChanged != null)
			{
				this.onCollectionChanged(this, ccevent);
			}
		}

		// Token: 0x060004B1 RID: 1201 RVA: 0x001D5BF0 File Offset: 0x001D4FF0
		internal void RegisterName(string name)
		{
			int count = this.List.Count;
			for (int i = 0; i < count; i++)
			{
				if (base.NamesEqual(name, ((Constraint)this.List[i]).ConstraintName, true, this.table.Locale) != 0)
				{
					throw ExceptionBuilder.DuplicateConstraintName(((Constraint)this.List[i]).ConstraintName);
				}
			}
			if (base.NamesEqual(name, this.MakeName(this.defaultNameIndex), true, this.table.Locale) != 0)
			{
				this.defaultNameIndex++;
			}
		}

		// Token: 0x060004B2 RID: 1202 RVA: 0x001D5C8C File Offset: 0x001D508C
		public void Remove(Constraint constraint)
		{
			if (constraint == null)
			{
				throw ExceptionBuilder.ArgumentNull("constraint");
			}
			if (this.CanRemove(constraint, true))
			{
				this.BaseRemove(constraint);
				this.ArrayRemove(constraint);
				if (constraint is UniqueConstraint && ((UniqueConstraint)constraint).IsPrimaryKey)
				{
					this.Table.PrimaryKey = null;
				}
				this.OnCollectionChanged(new CollectionChangeEventArgs(CollectionChangeAction.Remove, constraint));
			}
		}

		// Token: 0x060004B3 RID: 1203 RVA: 0x001D5CF0 File Offset: 0x001D50F0
		public void RemoveAt(int index)
		{
			Constraint constraint = this[index];
			if (constraint == null)
			{
				throw ExceptionBuilder.ConstraintOutOfRange(index);
			}
			this.Remove(constraint);
		}

		// Token: 0x060004B4 RID: 1204 RVA: 0x001D5D18 File Offset: 0x001D5118
		public void Remove(string name)
		{
			Constraint constraint = this[name];
			if (constraint == null)
			{
				throw ExceptionBuilder.ConstraintNotInTheTable(name);
			}
			this.Remove(constraint);
		}

		// Token: 0x060004B5 RID: 1205 RVA: 0x001D5D40 File Offset: 0x001D5140
		internal void UnregisterName(string name)
		{
			if (base.NamesEqual(name, this.MakeName(this.defaultNameIndex - 1), true, this.table.Locale) != 0)
			{
				do
				{
					this.defaultNameIndex--;
				}
				while (this.defaultNameIndex > 1 && !this.Contains(this.MakeName(this.defaultNameIndex - 1)));
			}
		}

		// Token: 0x060004B6 RID: 1206 RVA: 0x001D5DA0 File Offset: 0x001D51A0
		internal void FinishInitConstraints()
		{
			if (this.delayLoadingConstraints == null)
			{
				return;
			}
			for (int i = 0; i < this.delayLoadingConstraints.Length; i++)
			{
				if (this.delayLoadingConstraints[i] is UniqueConstraint)
				{
					if (!this.fLoadForeignKeyConstraintsOnly)
					{
						UniqueConstraint uniqueConstraint = (UniqueConstraint)this.delayLoadingConstraints[i];
						if (uniqueConstraint.columnNames == null)
						{
							this.Add(uniqueConstraint);
						}
						else
						{
							int num = uniqueConstraint.columnNames.Length;
							DataColumn[] array = new DataColumn[num];
							for (int j = 0; j < num; j++)
							{
								array[j] = this.table.Columns[uniqueConstraint.columnNames[j]];
							}
							if (uniqueConstraint.bPrimaryKey)
							{
								if (this.table.primaryKey != null)
								{
									throw ExceptionBuilder.AddPrimaryKeyConstraint();
								}
								this.Add(uniqueConstraint.ConstraintName, array, true);
							}
							else
							{
								UniqueConstraint uniqueConstraint2 = new UniqueConstraint(uniqueConstraint.constraintName, array);
								if (this.FindConstraint(uniqueConstraint2) == null)
								{
									this.Add(uniqueConstraint2);
								}
							}
						}
					}
				}
				else
				{
					ForeignKeyConstraint foreignKeyConstraint = (ForeignKeyConstraint)this.delayLoadingConstraints[i];
					if (foreignKeyConstraint.parentColumnNames == null || foreignKeyConstraint.childColumnNames == null)
					{
						this.Add(foreignKeyConstraint);
					}
					else if (this.table.DataSet == null)
					{
						this.fLoadForeignKeyConstraintsOnly = true;
					}
					else
					{
						int num = foreignKeyConstraint.parentColumnNames.Length;
						DataColumn[] array = new DataColumn[num];
						DataColumn[] array2 = new DataColumn[num];
						for (int k = 0; k < num; k++)
						{
							if (foreignKeyConstraint.parentTableNamespace == null)
							{
								array[k] = this.table.DataSet.Tables[foreignKeyConstraint.parentTableName].Columns[foreignKeyConstraint.parentColumnNames[k]];
							}
							else
							{
								array[k] = this.table.DataSet.Tables[foreignKeyConstraint.parentTableName, foreignKeyConstraint.parentTableNamespace].Columns[foreignKeyConstraint.parentColumnNames[k]];
							}
							array2[k] = this.table.Columns[foreignKeyConstraint.childColumnNames[k]];
						}
						this.Add(new ForeignKeyConstraint(foreignKeyConstraint.constraintName, array, array2)
						{
							AcceptRejectRule = foreignKeyConstraint.acceptRejectRule,
							DeleteRule = foreignKeyConstraint.deleteRule,
							UpdateRule = foreignKeyConstraint.updateRule
						});
					}
				}
			}
			if (!this.fLoadForeignKeyConstraintsOnly)
			{
				this.delayLoadingConstraints = null;
			}
		}

		// Token: 0x040006C8 RID: 1736
		private readonly DataTable table;

		// Token: 0x040006C9 RID: 1737
		private readonly ArrayList list = new ArrayList();

		// Token: 0x040006CA RID: 1738
		private int defaultNameIndex = 1;

		// Token: 0x040006CB RID: 1739
		private CollectionChangeEventHandler onCollectionChanged;

		// Token: 0x040006CC RID: 1740
		private Constraint[] delayLoadingConstraints;

		// Token: 0x040006CD RID: 1741
		private bool fLoadForeignKeyConstraintsOnly;
	}
}
