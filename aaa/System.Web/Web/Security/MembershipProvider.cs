using System;
using System.Configuration.Provider;
using System.Security.Cryptography;
using System.Security.Permissions;
using System.Text;
using System.Web.Configuration;

namespace System.Web.Security
{
	// Token: 0x02000317 RID: 791
	[AspNetHostingPermission(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)]
	[AspNetHostingPermission(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)]
	public abstract class MembershipProvider : ProviderBase
	{
		// Token: 0x17000814 RID: 2068
		// (get) Token: 0x060026C0 RID: 9920
		public abstract bool EnablePasswordRetrieval { get; }

		// Token: 0x17000815 RID: 2069
		// (get) Token: 0x060026C1 RID: 9921
		public abstract bool EnablePasswordReset { get; }

		// Token: 0x17000816 RID: 2070
		// (get) Token: 0x060026C2 RID: 9922
		public abstract bool RequiresQuestionAndAnswer { get; }

		// Token: 0x17000817 RID: 2071
		// (get) Token: 0x060026C3 RID: 9923
		// (set) Token: 0x060026C4 RID: 9924
		public abstract string ApplicationName { get; set; }

		// Token: 0x17000818 RID: 2072
		// (get) Token: 0x060026C5 RID: 9925
		public abstract int MaxInvalidPasswordAttempts { get; }

		// Token: 0x17000819 RID: 2073
		// (get) Token: 0x060026C6 RID: 9926
		public abstract int PasswordAttemptWindow { get; }

		// Token: 0x1700081A RID: 2074
		// (get) Token: 0x060026C7 RID: 9927
		public abstract bool RequiresUniqueEmail { get; }

		// Token: 0x1700081B RID: 2075
		// (get) Token: 0x060026C8 RID: 9928
		public abstract MembershipPasswordFormat PasswordFormat { get; }

		// Token: 0x1700081C RID: 2076
		// (get) Token: 0x060026C9 RID: 9929
		public abstract int MinRequiredPasswordLength { get; }

		// Token: 0x1700081D RID: 2077
		// (get) Token: 0x060026CA RID: 9930
		public abstract int MinRequiredNonAlphanumericCharacters { get; }

		// Token: 0x1700081E RID: 2078
		// (get) Token: 0x060026CB RID: 9931
		public abstract string PasswordStrengthRegularExpression { get; }

		// Token: 0x060026CC RID: 9932
		public abstract MembershipUser CreateUser(string username, string password, string email, string passwordQuestion, string passwordAnswer, bool isApproved, object providerUserKey, out MembershipCreateStatus status);

		// Token: 0x060026CD RID: 9933
		public abstract bool ChangePasswordQuestionAndAnswer(string username, string password, string newPasswordQuestion, string newPasswordAnswer);

		// Token: 0x060026CE RID: 9934
		public abstract string GetPassword(string username, string answer);

		// Token: 0x060026CF RID: 9935
		public abstract bool ChangePassword(string username, string oldPassword, string newPassword);

		// Token: 0x060026D0 RID: 9936
		public abstract string ResetPassword(string username, string answer);

		// Token: 0x060026D1 RID: 9937
		public abstract void UpdateUser(MembershipUser user);

		// Token: 0x060026D2 RID: 9938
		public abstract bool ValidateUser(string username, string password);

		// Token: 0x060026D3 RID: 9939
		public abstract bool UnlockUser(string userName);

		// Token: 0x060026D4 RID: 9940
		public abstract MembershipUser GetUser(object providerUserKey, bool userIsOnline);

		// Token: 0x060026D5 RID: 9941
		public abstract MembershipUser GetUser(string username, bool userIsOnline);

		// Token: 0x060026D6 RID: 9942 RVA: 0x000A67B4 File Offset: 0x000A57B4
		internal MembershipUser GetUser(string username, bool userIsOnline, bool throwOnError)
		{
			MembershipUser membershipUser = null;
			try
			{
				membershipUser = this.GetUser(username, userIsOnline);
			}
			catch (ArgumentException)
			{
				if (throwOnError)
				{
					throw;
				}
			}
			return membershipUser;
		}

		// Token: 0x060026D7 RID: 9943
		public abstract string GetUserNameByEmail(string email);

		// Token: 0x060026D8 RID: 9944
		public abstract bool DeleteUser(string username, bool deleteAllRelatedData);

		// Token: 0x060026D9 RID: 9945
		public abstract MembershipUserCollection GetAllUsers(int pageIndex, int pageSize, out int totalRecords);

		// Token: 0x060026DA RID: 9946
		public abstract int GetNumberOfUsersOnline();

		// Token: 0x060026DB RID: 9947
		public abstract MembershipUserCollection FindUsersByName(string usernameToMatch, int pageIndex, int pageSize, out int totalRecords);

		// Token: 0x060026DC RID: 9948
		public abstract MembershipUserCollection FindUsersByEmail(string emailToMatch, int pageIndex, int pageSize, out int totalRecords);

		// Token: 0x060026DD RID: 9949 RVA: 0x000A67E8 File Offset: 0x000A57E8
		protected virtual byte[] EncryptPassword(byte[] password)
		{
			if (MachineKeySection.IsDecryptionKeyAutogenerated)
			{
				throw new ProviderException(SR.GetString("Can_not_use_encrypted_passwords_with_autogen_keys"));
			}
			return MachineKeySection.EncryptOrDecryptData(true, password, null, 0, password.Length, IVType.None, false, false);
		}

		// Token: 0x060026DE RID: 9950 RVA: 0x000A6810 File Offset: 0x000A5810
		protected virtual byte[] DecryptPassword(byte[] encodedPassword)
		{
			if (MachineKeySection.IsDecryptionKeyAutogenerated)
			{
				throw new ProviderException(SR.GetString("Can_not_use_encrypted_passwords_with_autogen_keys"));
			}
			return MachineKeySection.EncryptOrDecryptData(false, encodedPassword, null, 0, encodedPassword.Length, IVType.None, false, false);
		}

		// Token: 0x060026DF RID: 9951 RVA: 0x000A6838 File Offset: 0x000A5838
		internal string EncodePassword(string pass, int passwordFormat, string salt)
		{
			if (passwordFormat == 0)
			{
				return pass;
			}
			byte[] bytes = Encoding.Unicode.GetBytes(pass);
			byte[] array = Convert.FromBase64String(salt);
			byte[] array2 = new byte[array.Length + bytes.Length];
			Buffer.BlockCopy(array, 0, array2, 0, array.Length);
			Buffer.BlockCopy(bytes, 0, array2, array.Length, bytes.Length);
			byte[] array3;
			if (passwordFormat == 1)
			{
				HashAlgorithm hashAlgorithm = HashAlgorithm.Create(Membership.HashAlgorithmType);
				if (hashAlgorithm == null && Membership.IsHashAlgorithmFromMembershipConfig)
				{
					MembershipSection membership = RuntimeConfig.GetAppConfig().Membership;
					membership.ThrowHashAlgorithmException();
				}
				array3 = hashAlgorithm.ComputeHash(array2);
			}
			else
			{
				array3 = this.EncryptPassword(array2);
			}
			return Convert.ToBase64String(array3);
		}

		// Token: 0x060026E0 RID: 9952 RVA: 0x000A68D0 File Offset: 0x000A58D0
		internal string UnEncodePassword(string pass, int passwordFormat)
		{
			switch (passwordFormat)
			{
			case 0:
				return pass;
			case 1:
				throw new ProviderException(SR.GetString("Provider_can_not_decode_hashed_password"));
			default:
			{
				byte[] array = Convert.FromBase64String(pass);
				byte[] array2 = this.DecryptPassword(array);
				if (array2 == null)
				{
					return null;
				}
				return Encoding.Unicode.GetString(array2, 16, array2.Length - 16);
			}
			}
		}

		// Token: 0x060026E1 RID: 9953 RVA: 0x000A6928 File Offset: 0x000A5928
		internal string GenerateSalt()
		{
			byte[] array = new byte[16];
			new RNGCryptoServiceProvider().GetBytes(array);
			return Convert.ToBase64String(array);
		}

		// Token: 0x14000023 RID: 35
		// (add) Token: 0x060026E2 RID: 9954 RVA: 0x000A694E File Offset: 0x000A594E
		// (remove) Token: 0x060026E3 RID: 9955 RVA: 0x000A6967 File Offset: 0x000A5967
		public event MembershipValidatePasswordEventHandler ValidatingPassword
		{
			add
			{
				this._EventHandler = (MembershipValidatePasswordEventHandler)Delegate.Combine(this._EventHandler, value);
			}
			remove
			{
				this._EventHandler = (MembershipValidatePasswordEventHandler)Delegate.Remove(this._EventHandler, value);
			}
		}

		// Token: 0x060026E4 RID: 9956 RVA: 0x000A6980 File Offset: 0x000A5980
		protected virtual void OnValidatingPassword(ValidatePasswordEventArgs e)
		{
			if (this._EventHandler != null)
			{
				this._EventHandler(this, e);
			}
		}

		// Token: 0x04001DE2 RID: 7650
		private const int SALT_SIZE_IN_BYTES = 16;

		// Token: 0x04001DE3 RID: 7651
		private MembershipValidatePasswordEventHandler _EventHandler;
	}
}
