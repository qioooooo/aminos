using System;
using System.Collections;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Drawing.Design;
using System.Globalization;
using System.IO;
using System.Reflection;
using System.Security.Permissions;
using System.Text;
using System.Web.Util;

namespace System.Web.UI.WebControls
{
	// Token: 0x02000599 RID: 1433
	[SupportsEventValidation]
	[Designer("System.Web.UI.Design.WebControls.GridViewDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[DefaultEvent("SelectedIndexChanged")]
	[ControlValueProperty("SelectedValue")]
	[AspNetHostingPermission(SecurityAction.InheritanceDemand, Level = AspNetHostingPermissionLevel.Minimal)]
	[AspNetHostingPermission(SecurityAction.LinkDemand, Level = AspNetHostingPermissionLevel.Minimal)]
	public class GridView : CompositeDataBoundControl, IPostBackContainer, IPostBackEventHandler, ICallbackContainer, ICallbackEventHandler, IPersistedSelector
	{
		// Token: 0x17001135 RID: 4405
		// (get) Token: 0x06004613 RID: 17939 RVA: 0x0011EC6C File Offset: 0x0011DC6C
		// (set) Token: 0x06004614 RID: 17940 RVA: 0x0011EC98 File Offset: 0x0011DC98
		[WebSysDescription("GridView_AllowPaging")]
		[DefaultValue(false)]
		[WebCategory("Paging")]
		public virtual bool AllowPaging
		{
			get
			{
				object obj = this.ViewState["AllowPaging"];
				return obj != null && (bool)obj;
			}
			set
			{
				bool allowPaging = this.AllowPaging;
				if (value != allowPaging)
				{
					this.ViewState["AllowPaging"] = value;
					if (base.Initialized)
					{
						base.RequiresDataBinding = true;
					}
				}
			}
		}

		// Token: 0x17001136 RID: 4406
		// (get) Token: 0x06004615 RID: 17941 RVA: 0x0011ECD8 File Offset: 0x0011DCD8
		// (set) Token: 0x06004616 RID: 17942 RVA: 0x0011ED04 File Offset: 0x0011DD04
		[WebCategory("Behavior")]
		[WebSysDescription("GridView_AllowSorting")]
		[DefaultValue(false)]
		public virtual bool AllowSorting
		{
			get
			{
				object obj = this.ViewState["AllowSorting"];
				return obj != null && (bool)obj;
			}
			set
			{
				bool allowSorting = this.AllowSorting;
				if (value != allowSorting)
				{
					this.ViewState["AllowSorting"] = value;
					if (base.Initialized)
					{
						base.RequiresDataBinding = true;
					}
				}
			}
		}

		// Token: 0x17001137 RID: 4407
		// (get) Token: 0x06004617 RID: 17943 RVA: 0x0011ED41 File Offset: 0x0011DD41
		[WebSysDescription("GridView_AlternatingRowStyle")]
		[WebCategory("Styles")]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		[NotifyParentProperty(true)]
		[PersistenceMode(PersistenceMode.InnerProperty)]
		public TableItemStyle AlternatingRowStyle
		{
			get
			{
				if (this._alternatingRowStyle == null)
				{
					this._alternatingRowStyle = new TableItemStyle();
					if (base.IsTrackingViewState)
					{
						((IStateManager)this._alternatingRowStyle).TrackViewState();
					}
				}
				return this._alternatingRowStyle;
			}
		}

		// Token: 0x17001138 RID: 4408
		// (get) Token: 0x06004618 RID: 17944 RVA: 0x0011ED70 File Offset: 0x0011DD70
		// (set) Token: 0x06004619 RID: 17945 RVA: 0x0011ED9C File Offset: 0x0011DD9C
		[DefaultValue(false)]
		[WebCategory("Behavior")]
		[WebSysDescription("GridView_AutoGenerateDeleteButton")]
		public virtual bool AutoGenerateDeleteButton
		{
			get
			{
				object obj = this.ViewState["AutoGenerateDeleteButton"];
				return obj != null && (bool)obj;
			}
			set
			{
				bool autoGenerateDeleteButton = this.AutoGenerateDeleteButton;
				if (value != autoGenerateDeleteButton)
				{
					this.ViewState["AutoGenerateDeleteButton"] = value;
					if (base.Initialized)
					{
						base.RequiresDataBinding = true;
					}
				}
			}
		}

		// Token: 0x17001139 RID: 4409
		// (get) Token: 0x0600461A RID: 17946 RVA: 0x0011EDDC File Offset: 0x0011DDDC
		// (set) Token: 0x0600461B RID: 17947 RVA: 0x0011EE08 File Offset: 0x0011DE08
		[WebCategory("Behavior")]
		[WebSysDescription("GridView_AutoGenerateEditButton")]
		[DefaultValue(false)]
		public virtual bool AutoGenerateEditButton
		{
			get
			{
				object obj = this.ViewState["AutoGenerateEditButton"];
				return obj != null && (bool)obj;
			}
			set
			{
				bool autoGenerateEditButton = this.AutoGenerateEditButton;
				if (value != autoGenerateEditButton)
				{
					this.ViewState["AutoGenerateEditButton"] = value;
					if (base.Initialized)
					{
						base.RequiresDataBinding = true;
					}
				}
			}
		}

		// Token: 0x1700113A RID: 4410
		// (get) Token: 0x0600461C RID: 17948 RVA: 0x0011EE48 File Offset: 0x0011DE48
		// (set) Token: 0x0600461D RID: 17949 RVA: 0x0011EE74 File Offset: 0x0011DE74
		[DefaultValue(false)]
		[WebSysDescription("GridView_AutoGenerateSelectButton")]
		[WebCategory("Behavior")]
		public virtual bool AutoGenerateSelectButton
		{
			get
			{
				object obj = this.ViewState["AutoGenerateSelectButton"];
				return obj != null && (bool)obj;
			}
			set
			{
				bool autoGenerateSelectButton = this.AutoGenerateSelectButton;
				if (value != autoGenerateSelectButton)
				{
					this.ViewState["AutoGenerateSelectButton"] = value;
					if (base.Initialized)
					{
						base.RequiresDataBinding = true;
					}
				}
			}
		}

		// Token: 0x1700113B RID: 4411
		// (get) Token: 0x0600461E RID: 17950 RVA: 0x0011EEB4 File Offset: 0x0011DEB4
		// (set) Token: 0x0600461F RID: 17951 RVA: 0x0011EEE0 File Offset: 0x0011DEE0
		[DefaultValue(true)]
		[WebCategory("Behavior")]
		[WebSysDescription("DataControls_AutoGenerateColumns")]
		public virtual bool AutoGenerateColumns
		{
			get
			{
				object obj = this.ViewState["AutoGenerateColumns"];
				return obj == null || (bool)obj;
			}
			set
			{
				bool autoGenerateColumns = this.AutoGenerateColumns;
				if (value != autoGenerateColumns)
				{
					this.ViewState["AutoGenerateColumns"] = value;
					if (base.Initialized)
					{
						base.RequiresDataBinding = true;
					}
				}
			}
		}

		// Token: 0x1700113C RID: 4412
		// (get) Token: 0x06004620 RID: 17952 RVA: 0x0011EF1D File Offset: 0x0011DF1D
		// (set) Token: 0x06004621 RID: 17953 RVA: 0x0011EF3D File Offset: 0x0011DF3D
		[UrlProperty]
		[Editor("System.Web.UI.Design.ImageUrlEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(UITypeEditor))]
		[WebSysDescription("WebControl_BackImageUrl")]
		[WebCategory("Appearance")]
		[DefaultValue("")]
		public virtual string BackImageUrl
		{
			get
			{
				if (!base.ControlStyleCreated)
				{
					return string.Empty;
				}
				return ((TableStyle)base.ControlStyle).BackImageUrl;
			}
			set
			{
				((TableStyle)base.ControlStyle).BackImageUrl = value;
			}
		}

		// Token: 0x1700113D RID: 4413
		// (get) Token: 0x06004622 RID: 17954 RVA: 0x0011EF50 File Offset: 0x0011DF50
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public virtual GridViewRow BottomPagerRow
		{
			get
			{
				if (this._bottomPagerRow == null)
				{
					this.EnsureChildControls();
				}
				return this._bottomPagerRow;
			}
		}

		// Token: 0x1700113E RID: 4414
		// (get) Token: 0x06004623 RID: 17955 RVA: 0x0011EF68 File Offset: 0x0011DF68
		private IOrderedDictionary BoundFieldValues
		{
			get
			{
				if (this._boundFieldValues == null)
				{
					int num = this.Columns.Count;
					if (this.AutoGenerateColumns)
					{
						num += 10;
					}
					this._boundFieldValues = new OrderedDictionary(num);
				}
				return this._boundFieldValues;
			}
		}

		// Token: 0x1700113F RID: 4415
		// (get) Token: 0x06004624 RID: 17956 RVA: 0x0011EFA8 File Offset: 0x0011DFA8
		// (set) Token: 0x06004625 RID: 17957 RVA: 0x0011EFD5 File Offset: 0x0011DFD5
		[WebCategory("Accessibility")]
		[Localizable(true)]
		[DefaultValue("")]
		[WebSysDescription("DataControls_Caption")]
		public virtual string Caption
		{
			get
			{
				string text = (string)this.ViewState["Caption"];
				if (text == null)
				{
					return string.Empty;
				}
				return text;
			}
			set
			{
				this.ViewState["Caption"] = value;
			}
		}

		// Token: 0x17001140 RID: 4416
		// (get) Token: 0x06004626 RID: 17958 RVA: 0x0011EFE8 File Offset: 0x0011DFE8
		// (set) Token: 0x06004627 RID: 17959 RVA: 0x0011F011 File Offset: 0x0011E011
		[DefaultValue(TableCaptionAlign.NotSet)]
		[WebSysDescription("WebControl_CaptionAlign")]
		[WebCategory("Accessibility")]
		public virtual TableCaptionAlign CaptionAlign
		{
			get
			{
				object obj = this.ViewState["CaptionAlign"];
				if (obj == null)
				{
					return TableCaptionAlign.NotSet;
				}
				return (TableCaptionAlign)obj;
			}
			set
			{
				if (value < TableCaptionAlign.NotSet || value > TableCaptionAlign.Right)
				{
					throw new ArgumentOutOfRangeException("value");
				}
				this.ViewState["CaptionAlign"] = value;
			}
		}

		// Token: 0x17001141 RID: 4417
		// (get) Token: 0x06004628 RID: 17960 RVA: 0x0011F03C File Offset: 0x0011E03C
		// (set) Token: 0x06004629 RID: 17961 RVA: 0x0011F058 File Offset: 0x0011E058
		[DefaultValue(-1)]
		[WebSysDescription("GridView_CellPadding")]
		[WebCategory("Layout")]
		public virtual int CellPadding
		{
			get
			{
				if (!base.ControlStyleCreated)
				{
					return -1;
				}
				return ((TableStyle)base.ControlStyle).CellPadding;
			}
			set
			{
				((TableStyle)base.ControlStyle).CellPadding = value;
			}
		}

		// Token: 0x17001142 RID: 4418
		// (get) Token: 0x0600462A RID: 17962 RVA: 0x0011F06B File Offset: 0x0011E06B
		// (set) Token: 0x0600462B RID: 17963 RVA: 0x0011F087 File Offset: 0x0011E087
		[WebSysDescription("GridView_CellSpacing")]
		[DefaultValue(0)]
		[WebCategory("Layout")]
		public virtual int CellSpacing
		{
			get
			{
				if (!base.ControlStyleCreated)
				{
					return 0;
				}
				return ((TableStyle)base.ControlStyle).CellSpacing;
			}
			set
			{
				((TableStyle)base.ControlStyle).CellSpacing = value;
			}
		}

		// Token: 0x17001143 RID: 4419
		// (get) Token: 0x0600462C RID: 17964 RVA: 0x0011F09C File Offset: 0x0011E09C
		[MergableProperty(false)]
		[Editor("System.Web.UI.Design.WebControls.DataControlFieldTypeEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(UITypeEditor))]
		[WebSysDescription("DataControls_Columns")]
		[DefaultValue(null)]
		[WebCategory("Default")]
		[PersistenceMode(PersistenceMode.InnerProperty)]
		public virtual DataControlFieldCollection Columns
		{
			get
			{
				if (this._fieldCollection == null)
				{
					this._fieldCollection = new DataControlFieldCollection();
					this._fieldCollection.FieldsChanged += this.OnFieldsChanged;
					if (base.IsTrackingViewState)
					{
						((IStateManager)this._fieldCollection).TrackViewState();
					}
				}
				return this._fieldCollection;
			}
		}

		// Token: 0x17001144 RID: 4420
		// (get) Token: 0x0600462D RID: 17965 RVA: 0x0011F0EC File Offset: 0x0011E0EC
		// (set) Token: 0x0600462E RID: 17966 RVA: 0x0011F0F4 File Offset: 0x0011E0F4
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public IAutoFieldGenerator ColumnsGenerator
		{
			get
			{
				return this._columnsGenerator;
			}
			set
			{
				this._columnsGenerator = value;
			}
		}

		// Token: 0x17001145 RID: 4421
		// (get) Token: 0x0600462F RID: 17967 RVA: 0x0011F0FD File Offset: 0x0011E0FD
		private ArrayList DataKeysArrayList
		{
			get
			{
				if (this._dataKeysArrayList == null)
				{
					this._dataKeysArrayList = new ArrayList();
				}
				return this._dataKeysArrayList;
			}
		}

		// Token: 0x17001146 RID: 4422
		// (get) Token: 0x06004630 RID: 17968 RVA: 0x0011F118 File Offset: 0x0011E118
		[Browsable(false)]
		[WebSysDescription("GridView_DataKeys")]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public virtual DataKeyArray DataKeys
		{
			get
			{
				if (this._dataKeyArray == null)
				{
					this._dataKeyArray = new DataKeyArray(this.DataKeysArrayList);
					if (base.IsTrackingViewState)
					{
						((IStateManager)this._dataKeyArray).TrackViewState();
					}
				}
				return this._dataKeyArray;
			}
		}

		// Token: 0x17001147 RID: 4423
		// (get) Token: 0x06004631 RID: 17969 RVA: 0x0011F14C File Offset: 0x0011E14C
		// (set) Token: 0x06004632 RID: 17970 RVA: 0x0011F17C File Offset: 0x0011E17C
		[TypeConverter(typeof(StringArrayConverter))]
		[DefaultValue(null)]
		[Editor("System.Web.UI.Design.WebControls.DataFieldEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(UITypeEditor))]
		[WebCategory("Data")]
		[WebSysDescription("DataControls_DataKeyNames")]
		public virtual string[] DataKeyNames
		{
			get
			{
				object dataKeyNames = this._dataKeyNames;
				if (dataKeyNames != null)
				{
					return (string[])((string[])dataKeyNames).Clone();
				}
				return new string[0];
			}
			set
			{
				if (!DataBoundControlHelper.CompareStringArrays(value, this.DataKeyNamesInternal))
				{
					if (value != null)
					{
						this._dataKeyNames = (string[])value.Clone();
					}
					else
					{
						this._dataKeyNames = null;
					}
					this.ClearDataKeys();
					if (base.Initialized)
					{
						base.RequiresDataBinding = true;
					}
				}
			}
		}

		// Token: 0x17001148 RID: 4424
		// (get) Token: 0x06004633 RID: 17971 RVA: 0x0011F1CC File Offset: 0x0011E1CC
		private string[] DataKeyNamesInternal
		{
			get
			{
				object dataKeyNames = this._dataKeyNames;
				if (dataKeyNames != null)
				{
					return (string[])dataKeyNames;
				}
				return new string[0];
			}
		}

		// Token: 0x17001149 RID: 4425
		// (get) Token: 0x06004634 RID: 17972 RVA: 0x0011F1F0 File Offset: 0x0011E1F0
		// (set) Token: 0x06004635 RID: 17973 RVA: 0x0011F1F8 File Offset: 0x0011E1F8
		[WebSysDescription("GridView_EditIndex")]
		[DefaultValue(-1)]
		[WebCategory("Default")]
		public virtual int EditIndex
		{
			get
			{
				return this._editIndex;
			}
			set
			{
				if (value < -1)
				{
					throw new ArgumentOutOfRangeException("value");
				}
				int editIndex = this.EditIndex;
				if (editIndex != value)
				{
					if (value == -1)
					{
						this.BoundFieldValues.Clear();
					}
					this._editIndex = value;
					if (base.Initialized)
					{
						base.RequiresDataBinding = true;
					}
				}
			}
		}

		// Token: 0x1700114A RID: 4426
		// (get) Token: 0x06004636 RID: 17974 RVA: 0x0011F244 File Offset: 0x0011E244
		[PersistenceMode(PersistenceMode.InnerProperty)]
		[WebCategory("Styles")]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		[NotifyParentProperty(true)]
		[WebSysDescription("GridView_EditRowStyle")]
		public TableItemStyle EditRowStyle
		{
			get
			{
				if (this._editRowStyle == null)
				{
					this._editRowStyle = new TableItemStyle();
					if (base.IsTrackingViewState)
					{
						((IStateManager)this._editRowStyle).TrackViewState();
					}
				}
				return this._editRowStyle;
			}
		}

		// Token: 0x1700114B RID: 4427
		// (get) Token: 0x06004637 RID: 17975 RVA: 0x0011F274 File Offset: 0x0011E274
		// (set) Token: 0x06004638 RID: 17976 RVA: 0x0011F29D File Offset: 0x0011E29D
		[WebCategory("Behavior")]
		[WebSysDescription("DataBoundControl_EnableModelValidation")]
		[DefaultValue(false)]
		public virtual bool EnableModelValidation
		{
			get
			{
				object obj = this.ViewState["EnableModelValidation"];
				return obj != null && (bool)obj;
			}
			set
			{
				this.ViewState["EnableModelValidation"] = value;
			}
		}

		// Token: 0x1700114C RID: 4428
		// (get) Token: 0x06004639 RID: 17977 RVA: 0x0011F2B8 File Offset: 0x0011E2B8
		// (set) Token: 0x0600463A RID: 17978 RVA: 0x0011F2E1 File Offset: 0x0011E2E1
		[WebSysDescription("GridView_EnableSortingAndPagingCallbacks")]
		[WebCategory("Behavior")]
		[DefaultValue(false)]
		public virtual bool EnableSortingAndPagingCallbacks
		{
			get
			{
				object obj = this.ViewState["EnableSortingAndPagingCallbacks"];
				return obj != null && (bool)obj;
			}
			set
			{
				this.ViewState["EnableSortingAndPagingCallbacks"] = value;
			}
		}

		// Token: 0x1700114D RID: 4429
		// (get) Token: 0x0600463B RID: 17979 RVA: 0x0011F2FC File Offset: 0x0011E2FC
		// (set) Token: 0x0600463C RID: 17980 RVA: 0x0011F325 File Offset: 0x0011E325
		private int FirstDisplayedPageIndex
		{
			get
			{
				object obj = this.ViewState["FirstDisplayedPageIndex"];
				if (obj != null)
				{
					return (int)obj;
				}
				return -1;
			}
			set
			{
				this.ViewState["FirstDisplayedPageIndex"] = value;
			}
		}

		// Token: 0x1700114E RID: 4430
		// (get) Token: 0x0600463D RID: 17981 RVA: 0x0011F33D File Offset: 0x0011E33D
		[PersistenceMode(PersistenceMode.InnerProperty)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		[WebSysDescription("GridView_EmptyDataRowStyle")]
		[NotifyParentProperty(true)]
		[WebCategory("Styles")]
		public TableItemStyle EmptyDataRowStyle
		{
			get
			{
				if (this._emptyDataRowStyle == null)
				{
					this._emptyDataRowStyle = new TableItemStyle();
					if (base.IsTrackingViewState)
					{
						((IStateManager)this._emptyDataRowStyle).TrackViewState();
					}
				}
				return this._emptyDataRowStyle;
			}
		}

		// Token: 0x1700114F RID: 4431
		// (get) Token: 0x0600463E RID: 17982 RVA: 0x0011F36B File Offset: 0x0011E36B
		// (set) Token: 0x0600463F RID: 17983 RVA: 0x0011F373 File Offset: 0x0011E373
		[TemplateContainer(typeof(GridViewRow))]
		[WebSysDescription("View_EmptyDataTemplate")]
		[PersistenceMode(PersistenceMode.InnerProperty)]
		[DefaultValue(null)]
		[Browsable(false)]
		public virtual ITemplate EmptyDataTemplate
		{
			get
			{
				return this._emptyDataTemplate;
			}
			set
			{
				this._emptyDataTemplate = value;
			}
		}

		// Token: 0x17001150 RID: 4432
		// (get) Token: 0x06004640 RID: 17984 RVA: 0x0011F37C File Offset: 0x0011E37C
		// (set) Token: 0x06004641 RID: 17985 RVA: 0x0011F3A9 File Offset: 0x0011E3A9
		[WebCategory("Appearance")]
		[Localizable(true)]
		[DefaultValue("")]
		[WebSysDescription("View_EmptyDataText")]
		public virtual string EmptyDataText
		{
			get
			{
				object obj = this.ViewState["EmptyDataText"];
				if (obj != null)
				{
					return (string)obj;
				}
				return string.Empty;
			}
			set
			{
				this.ViewState["EmptyDataText"] = value;
			}
		}

		// Token: 0x17001151 RID: 4433
		// (get) Token: 0x06004642 RID: 17986 RVA: 0x0011F3BC File Offset: 0x0011E3BC
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public virtual GridViewRow FooterRow
		{
			get
			{
				if (this._footerRow == null)
				{
					this.EnsureChildControls();
				}
				return this._footerRow;
			}
		}

		// Token: 0x17001152 RID: 4434
		// (get) Token: 0x06004643 RID: 17987 RVA: 0x0011F3D2 File Offset: 0x0011E3D2
		[WebCategory("Styles")]
		[WebSysDescription("DataControls_FooterStyle")]
		[DefaultValue(null)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		[NotifyParentProperty(true)]
		[PersistenceMode(PersistenceMode.InnerProperty)]
		public TableItemStyle FooterStyle
		{
			get
			{
				if (this._footerStyle == null)
				{
					this._footerStyle = new TableItemStyle();
					if (base.IsTrackingViewState)
					{
						((IStateManager)this._footerStyle).TrackViewState();
					}
				}
				return this._footerStyle;
			}
		}

		// Token: 0x17001153 RID: 4435
		// (get) Token: 0x06004644 RID: 17988 RVA: 0x0011F400 File Offset: 0x0011E400
		// (set) Token: 0x06004645 RID: 17989 RVA: 0x0011F41C File Offset: 0x0011E41C
		[WebCategory("Appearance")]
		[DefaultValue(GridLines.Both)]
		[WebSysDescription("DataControls_GridLines")]
		public virtual GridLines GridLines
		{
			get
			{
				if (!base.ControlStyleCreated)
				{
					return GridLines.Both;
				}
				return ((TableStyle)base.ControlStyle).GridLines;
			}
			set
			{
				((TableStyle)base.ControlStyle).GridLines = value;
			}
		}

		// Token: 0x17001154 RID: 4436
		// (get) Token: 0x06004646 RID: 17990 RVA: 0x0011F42F File Offset: 0x0011E42F
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public virtual GridViewRow HeaderRow
		{
			get
			{
				if (this._headerRow == null)
				{
					this.EnsureChildControls();
				}
				return this._headerRow;
			}
		}

		// Token: 0x17001155 RID: 4437
		// (get) Token: 0x06004647 RID: 17991 RVA: 0x0011F445 File Offset: 0x0011E445
		[WebSysDescription("DataControls_HeaderStyle")]
		[PersistenceMode(PersistenceMode.InnerProperty)]
		[NotifyParentProperty(true)]
		[WebCategory("Styles")]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		[DefaultValue(null)]
		public TableItemStyle HeaderStyle
		{
			get
			{
				if (this._headerStyle == null)
				{
					this._headerStyle = new TableItemStyle();
					if (base.IsTrackingViewState)
					{
						((IStateManager)this._headerStyle).TrackViewState();
					}
				}
				return this._headerStyle;
			}
		}

		// Token: 0x17001156 RID: 4438
		// (get) Token: 0x06004648 RID: 17992 RVA: 0x0011F473 File Offset: 0x0011E473
		// (set) Token: 0x06004649 RID: 17993 RVA: 0x0011F48F File Offset: 0x0011E48F
		[WebSysDescription("WebControl_HorizontalAlign")]
		[Category("Layout")]
		[DefaultValue(HorizontalAlign.NotSet)]
		public virtual HorizontalAlign HorizontalAlign
		{
			get
			{
				if (!base.ControlStyleCreated)
				{
					return HorizontalAlign.NotSet;
				}
				return ((TableStyle)base.ControlStyle).HorizontalAlign;
			}
			set
			{
				((TableStyle)base.ControlStyle).HorizontalAlign = value;
			}
		}

		// Token: 0x0600464A RID: 17994 RVA: 0x0011F4A2 File Offset: 0x0011E4A2
		public virtual bool IsBindableType(Type type)
		{
			return DataBoundControlHelper.IsBindableType(type);
		}

		// Token: 0x17001157 RID: 4439
		// (get) Token: 0x0600464B RID: 17995 RVA: 0x0011F4AA File Offset: 0x0011E4AA
		[WebSysDescription("GridView_PageCount")]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public virtual int PageCount
		{
			get
			{
				if (this._pageCount < 0)
				{
					return 0;
				}
				return this._pageCount;
			}
		}

		// Token: 0x17001158 RID: 4440
		// (get) Token: 0x0600464C RID: 17996 RVA: 0x0011F4BD File Offset: 0x0011E4BD
		// (set) Token: 0x0600464D RID: 17997 RVA: 0x0011F4C8 File Offset: 0x0011E4C8
		[WebSysDescription("GridView_PageIndex")]
		[Browsable(true)]
		[WebCategory("Paging")]
		[DefaultValue(0)]
		public virtual int PageIndex
		{
			get
			{
				return this._pageIndex;
			}
			set
			{
				if (value < 0)
				{
					throw new ArgumentOutOfRangeException("value");
				}
				int pageIndex = this.PageIndex;
				if (pageIndex != value)
				{
					this._pageIndex = value;
					if (base.Initialized)
					{
						base.RequiresDataBinding = true;
					}
				}
			}
		}

		// Token: 0x17001159 RID: 4441
		// (get) Token: 0x0600464E RID: 17998 RVA: 0x0011F508 File Offset: 0x0011E508
		[NotifyParentProperty(true)]
		[PersistenceMode(PersistenceMode.InnerProperty)]
		[WebSysDescription("GridView_PagerSettings")]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		[WebCategory("Paging")]
		public virtual PagerSettings PagerSettings
		{
			get
			{
				if (this._pagerSettings == null)
				{
					this._pagerSettings = new PagerSettings();
					if (base.IsTrackingViewState)
					{
						((IStateManager)this._pagerSettings).TrackViewState();
					}
					this._pagerSettings.PropertyChanged += this.OnPagerPropertyChanged;
				}
				return this._pagerSettings;
			}
		}

		// Token: 0x1700115A RID: 4442
		// (get) Token: 0x0600464F RID: 17999 RVA: 0x0011F558 File Offset: 0x0011E558
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		[NotifyParentProperty(true)]
		[PersistenceMode(PersistenceMode.InnerProperty)]
		[WebCategory("Styles")]
		[WebSysDescription("WebControl_PagerStyle")]
		public TableItemStyle PagerStyle
		{
			get
			{
				if (this._pagerStyle == null)
				{
					this._pagerStyle = new TableItemStyle();
					if (base.IsTrackingViewState)
					{
						((IStateManager)this._pagerStyle).TrackViewState();
					}
				}
				return this._pagerStyle;
			}
		}

		// Token: 0x1700115B RID: 4443
		// (get) Token: 0x06004650 RID: 18000 RVA: 0x0011F586 File Offset: 0x0011E586
		// (set) Token: 0x06004651 RID: 18001 RVA: 0x0011F58E File Offset: 0x0011E58E
		[Browsable(false)]
		[DefaultValue(null)]
		[PersistenceMode(PersistenceMode.InnerProperty)]
		[TemplateContainer(typeof(GridViewRow))]
		[WebSysDescription("View_PagerTemplate")]
		public virtual ITemplate PagerTemplate
		{
			get
			{
				return this._pagerTemplate;
			}
			set
			{
				this._pagerTemplate = value;
			}
		}

		// Token: 0x1700115C RID: 4444
		// (get) Token: 0x06004652 RID: 18002 RVA: 0x0011F598 File Offset: 0x0011E598
		// (set) Token: 0x06004653 RID: 18003 RVA: 0x0011F5C4 File Offset: 0x0011E5C4
		[WebSysDescription("GridView_PageSize")]
		[WebCategory("Paging")]
		[DefaultValue(10)]
		public virtual int PageSize
		{
			get
			{
				object obj = this.ViewState["PageSize"];
				if (obj != null)
				{
					return (int)obj;
				}
				return 10;
			}
			set
			{
				if (value < 1)
				{
					throw new ArgumentOutOfRangeException("value");
				}
				int pageSize = this.PageSize;
				if (pageSize != value)
				{
					this.ViewState["PageSize"] = value;
					if (base.Initialized)
					{
						base.RequiresDataBinding = true;
					}
				}
			}
		}

		// Token: 0x1700115D RID: 4445
		// (get) Token: 0x06004654 RID: 18004 RVA: 0x0011F610 File Offset: 0x0011E610
		// (set) Token: 0x06004655 RID: 18005 RVA: 0x0011F63D File Offset: 0x0011E63D
		[DefaultValue("")]
		[WebSysDescription("GridView_RowHeaderColumn")]
		[TypeConverter("System.Web.UI.Design.DataColumnSelectionConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
		[WebCategory("Accessibility")]
		public virtual string RowHeaderColumn
		{
			get
			{
				object obj = this.ViewState["RowHeaderColumn"];
				if (obj != null)
				{
					return (string)obj;
				}
				return string.Empty;
			}
			set
			{
				this.ViewState["RowHeaderColumn"] = value;
			}
		}

		// Token: 0x1700115E RID: 4446
		// (get) Token: 0x06004656 RID: 18006 RVA: 0x0011F650 File Offset: 0x0011E650
		[Browsable(false)]
		[WebSysDescription("GridView_Rows")]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public virtual GridViewRowCollection Rows
		{
			get
			{
				if (this._rowsCollection == null)
				{
					if (this._rowsArray == null)
					{
						this.EnsureChildControls();
					}
					if (this._rowsArray == null)
					{
						this._rowsArray = new ArrayList();
					}
					this._rowsCollection = new GridViewRowCollection(this._rowsArray);
				}
				return this._rowsCollection;
			}
		}

		// Token: 0x1700115F RID: 4447
		// (get) Token: 0x06004657 RID: 18007 RVA: 0x0011F69D File Offset: 0x0011E69D
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		[WebCategory("Styles")]
		[PersistenceMode(PersistenceMode.InnerProperty)]
		[WebSysDescription("View_RowStyle")]
		[NotifyParentProperty(true)]
		public TableItemStyle RowStyle
		{
			get
			{
				if (this._rowStyle == null)
				{
					this._rowStyle = new TableItemStyle();
					if (base.IsTrackingViewState)
					{
						((IStateManager)this._rowStyle).TrackViewState();
					}
				}
				return this._rowStyle;
			}
		}

		// Token: 0x17001160 RID: 4448
		// (get) Token: 0x06004658 RID: 18008 RVA: 0x0011F6CC File Offset: 0x0011E6CC
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public virtual DataKey SelectedDataKey
		{
			get
			{
				if (this.DataKeyNamesInternal == null || this.DataKeyNamesInternal.Length == 0)
				{
					throw new InvalidOperationException(SR.GetString("GridView_DataKeyNamesMustBeSpecified", new object[] { this.ID }));
				}
				DataKeyArray dataKeys = this.DataKeys;
				int selectedIndex = this.SelectedIndex;
				if (dataKeys != null && selectedIndex < dataKeys.Count && selectedIndex > -1)
				{
					return dataKeys[selectedIndex];
				}
				return null;
			}
		}

		// Token: 0x17001161 RID: 4449
		// (get) Token: 0x06004659 RID: 18009 RVA: 0x0011F733 File Offset: 0x0011E733
		// (set) Token: 0x0600465A RID: 18010 RVA: 0x0011F73C File Offset: 0x0011E73C
		[DefaultValue(-1)]
		[WebSysDescription("GridView_SelectedIndex")]
		[Bindable(true)]
		public virtual int SelectedIndex
		{
			get
			{
				return this._selectedIndex;
			}
			set
			{
				if (value < -1)
				{
					throw new ArgumentOutOfRangeException("value");
				}
				int selectedIndex = this._selectedIndex;
				this._selectedIndex = value;
				if (this._rowsArray != null)
				{
					if (selectedIndex != -1 && this._rowsArray.Count > selectedIndex)
					{
						GridViewRow gridViewRow = (GridViewRow)this._rowsArray[selectedIndex];
						gridViewRow.RowType = DataControlRowType.DataRow;
						gridViewRow.RowState &= ~DataControlRowState.Selected;
					}
					if (value != -1 && this._rowsArray.Count > value)
					{
						GridViewRow gridViewRow = (GridViewRow)this._rowsArray[value];
						gridViewRow.RowState |= DataControlRowState.Selected;
					}
				}
			}
		}

		// Token: 0x17001162 RID: 4450
		// (get) Token: 0x0600465B RID: 18011 RVA: 0x0011F7DC File Offset: 0x0011E7DC
		[Browsable(false)]
		public object SelectedValue
		{
			get
			{
				DataKey selectedDataKey = this.SelectedDataKey;
				if (selectedDataKey != null)
				{
					return this.SelectedDataKey.Value;
				}
				return null;
			}
		}

		// Token: 0x17001163 RID: 4451
		// (get) Token: 0x0600465C RID: 18012 RVA: 0x0011F800 File Offset: 0x0011E800
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		[WebSysDescription("GridView_SelectedRow")]
		public virtual GridViewRow SelectedRow
		{
			get
			{
				int selectedIndex = this.SelectedIndex;
				GridViewRow gridViewRow = null;
				if (selectedIndex != -1)
				{
					gridViewRow = this.Rows[selectedIndex];
				}
				return gridViewRow;
			}
		}

		// Token: 0x17001164 RID: 4452
		// (get) Token: 0x0600465D RID: 18013 RVA: 0x0011F828 File Offset: 0x0011E828
		[WebSysDescription("GridView_SelectedRowStyle")]
		[NotifyParentProperty(true)]
		[WebCategory("Styles")]
		[PersistenceMode(PersistenceMode.InnerProperty)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		public TableItemStyle SelectedRowStyle
		{
			get
			{
				if (this._selectedRowStyle == null)
				{
					this._selectedRowStyle = new TableItemStyle();
					if (base.IsTrackingViewState)
					{
						((IStateManager)this._selectedRowStyle).TrackViewState();
					}
				}
				return this._selectedRowStyle;
			}
		}

		// Token: 0x17001165 RID: 4453
		// (get) Token: 0x0600465E RID: 18014 RVA: 0x0011F858 File Offset: 0x0011E858
		// (set) Token: 0x0600465F RID: 18015 RVA: 0x0011F884 File Offset: 0x0011E884
		[WebSysDescription("DataControls_ShowFooter")]
		[WebCategory("Appearance")]
		[DefaultValue(false)]
		public virtual bool ShowFooter
		{
			get
			{
				object obj = this.ViewState["ShowFooter"];
				return obj != null && (bool)obj;
			}
			set
			{
				bool showFooter = this.ShowFooter;
				if (value != showFooter)
				{
					this.ViewState["ShowFooter"] = value;
					if (base.Initialized)
					{
						base.RequiresDataBinding = true;
					}
				}
			}
		}

		// Token: 0x17001166 RID: 4454
		// (get) Token: 0x06004660 RID: 18016 RVA: 0x0011F8C4 File Offset: 0x0011E8C4
		// (set) Token: 0x06004661 RID: 18017 RVA: 0x0011F8F0 File Offset: 0x0011E8F0
		[WebCategory("Appearance")]
		[DefaultValue(true)]
		[WebSysDescription("DataControls_ShowHeader")]
		public virtual bool ShowHeader
		{
			get
			{
				object obj = this.ViewState["ShowHeader"];
				return obj == null || (bool)obj;
			}
			set
			{
				bool showHeader = this.ShowHeader;
				if (value != showHeader)
				{
					this.ViewState["ShowHeader"] = value;
					if (base.Initialized)
					{
						base.RequiresDataBinding = true;
					}
				}
			}
		}

		// Token: 0x17001167 RID: 4455
		// (get) Token: 0x06004662 RID: 18018 RVA: 0x0011F92D File Offset: 0x0011E92D
		[PersistenceMode(PersistenceMode.InnerProperty)]
		[Browsable(false)]
		[WebSysDescription("GridView_SortDirection")]
		[DefaultValue(SortDirection.Ascending)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public virtual SortDirection SortDirection
		{
			get
			{
				return this.SortDirectionInternal;
			}
		}

		// Token: 0x17001168 RID: 4456
		// (get) Token: 0x06004663 RID: 18019 RVA: 0x0011F935 File Offset: 0x0011E935
		// (set) Token: 0x06004664 RID: 18020 RVA: 0x0011F93D File Offset: 0x0011E93D
		private SortDirection SortDirectionInternal
		{
			get
			{
				return this._sortDirection;
			}
			set
			{
				if (value < SortDirection.Ascending || value > SortDirection.Descending)
				{
					throw new ArgumentOutOfRangeException("value");
				}
				if (this._sortDirection != value)
				{
					this._sortDirection = value;
					if (base.Initialized)
					{
						base.RequiresDataBinding = true;
					}
				}
			}
		}

		// Token: 0x17001169 RID: 4457
		// (get) Token: 0x06004665 RID: 18021 RVA: 0x0011F971 File Offset: 0x0011E971
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[WebSysDescription("GridView_SortExpression")]
		[Browsable(false)]
		public virtual string SortExpression
		{
			get
			{
				return this.SortExpressionInternal;
			}
		}

		// Token: 0x1700116A RID: 4458
		// (get) Token: 0x06004666 RID: 18022 RVA: 0x0011F979 File Offset: 0x0011E979
		// (set) Token: 0x06004667 RID: 18023 RVA: 0x0011F981 File Offset: 0x0011E981
		private string SortExpressionInternal
		{
			get
			{
				return this._sortExpression;
			}
			set
			{
				if (this._sortExpression != value)
				{
					this._sortExpression = value;
					if (base.Initialized)
					{
						base.RequiresDataBinding = true;
					}
				}
			}
		}

		// Token: 0x1700116B RID: 4459
		// (get) Token: 0x06004668 RID: 18024 RVA: 0x0011F9A7 File Offset: 0x0011E9A7
		private IStateFormatter StateFormatter
		{
			get
			{
				if (this._stateFormatter == null)
				{
					this._stateFormatter = this.Page.CreateStateFormatter();
				}
				return this._stateFormatter;
			}
		}

		// Token: 0x1700116C RID: 4460
		// (get) Token: 0x06004669 RID: 18025 RVA: 0x0011F9C8 File Offset: 0x0011E9C8
		protected override HtmlTextWriterTag TagKey
		{
			get
			{
				if (!this.EnableSortingAndPagingCallbacks)
				{
					return HtmlTextWriterTag.Table;
				}
				return HtmlTextWriterTag.Div;
			}
		}

		// Token: 0x1700116D RID: 4461
		// (get) Token: 0x0600466A RID: 18026 RVA: 0x0011F9D7 File Offset: 0x0011E9D7
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public virtual GridViewRow TopPagerRow
		{
			get
			{
				if (this._topPagerRow == null)
				{
					this.EnsureChildControls();
				}
				return this._topPagerRow;
			}
		}

		// Token: 0x1700116E RID: 4462
		// (get) Token: 0x0600466B RID: 18027 RVA: 0x0011F9F0 File Offset: 0x0011E9F0
		// (set) Token: 0x0600466C RID: 18028 RVA: 0x0011FA1C File Offset: 0x0011EA1C
		[WebSysDescription("Table_UseAccessibleHeader")]
		[DefaultValue(true)]
		[WebCategory("Accessibility")]
		public virtual bool UseAccessibleHeader
		{
			get
			{
				object obj = this.ViewState["UseAccessibleHeader"];
				return obj == null || (bool)obj;
			}
			set
			{
				bool useAccessibleHeader = this.UseAccessibleHeader;
				if (useAccessibleHeader != value)
				{
					this.ViewState["UseAccessibleHeader"] = value;
					if (base.Initialized)
					{
						base.RequiresDataBinding = true;
					}
				}
			}
		}

		// Token: 0x1700116F RID: 4463
		// (get) Token: 0x0600466D RID: 18029 RVA: 0x0011FA59 File Offset: 0x0011EA59
		// (set) Token: 0x0600466E RID: 18030 RVA: 0x0011FA61 File Offset: 0x0011EA61
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public virtual DataKey SelectedPersistedDataKey
		{
			get
			{
				return this._persistedDataKey;
			}
			set
			{
				this._persistedDataKey = value;
				if (base.IsTrackingViewState && this._persistedDataKey != null)
				{
					((IStateManager)this._persistedDataKey).TrackViewState();
				}
			}
		}

		// Token: 0x140000BD RID: 189
		// (add) Token: 0x0600466F RID: 18031 RVA: 0x0011FA85 File Offset: 0x0011EA85
		// (remove) Token: 0x06004670 RID: 18032 RVA: 0x0011FA98 File Offset: 0x0011EA98
		[WebSysDescription("DataControls_OnRowDeleted")]
		[WebCategory("Action")]
		public event GridViewDeletedEventHandler RowDeleted
		{
			add
			{
				base.Events.AddHandler(GridView.EventRowDeleted, value);
			}
			remove
			{
				base.Events.RemoveHandler(GridView.EventRowDeleted, value);
			}
		}

		// Token: 0x140000BE RID: 190
		// (add) Token: 0x06004671 RID: 18033 RVA: 0x0011FAAB File Offset: 0x0011EAAB
		// (remove) Token: 0x06004672 RID: 18034 RVA: 0x0011FABE File Offset: 0x0011EABE
		[WebCategory("Action")]
		[WebSysDescription("DataControls_OnItemUpdated")]
		public event GridViewUpdatedEventHandler RowUpdated
		{
			add
			{
				base.Events.AddHandler(GridView.EventRowUpdated, value);
			}
			remove
			{
				base.Events.RemoveHandler(GridView.EventRowUpdated, value);
			}
		}

		// Token: 0x140000BF RID: 191
		// (add) Token: 0x06004673 RID: 18035 RVA: 0x0011FAD1 File Offset: 0x0011EAD1
		// (remove) Token: 0x06004674 RID: 18036 RVA: 0x0011FAE4 File Offset: 0x0011EAE4
		[WebCategory("Action")]
		[WebSysDescription("GridView_OnRowCancelingEdit")]
		public event GridViewCancelEditEventHandler RowCancelingEdit
		{
			add
			{
				base.Events.AddHandler(GridView.EventRowCancelingEdit, value);
			}
			remove
			{
				base.Events.RemoveHandler(GridView.EventRowCancelingEdit, value);
			}
		}

		// Token: 0x140000C0 RID: 192
		// (add) Token: 0x06004675 RID: 18037 RVA: 0x0011FAF7 File Offset: 0x0011EAF7
		// (remove) Token: 0x06004676 RID: 18038 RVA: 0x0011FB0A File Offset: 0x0011EB0A
		[WebCategory("Action")]
		[WebSysDescription("DataControls_OnItemDeleting")]
		public event GridViewDeleteEventHandler RowDeleting
		{
			add
			{
				base.Events.AddHandler(GridView.EventRowDeleting, value);
			}
			remove
			{
				base.Events.RemoveHandler(GridView.EventRowDeleting, value);
			}
		}

		// Token: 0x140000C1 RID: 193
		// (add) Token: 0x06004677 RID: 18039 RVA: 0x0011FB1D File Offset: 0x0011EB1D
		// (remove) Token: 0x06004678 RID: 18040 RVA: 0x0011FB30 File Offset: 0x0011EB30
		[WebCategory("Action")]
		[WebSysDescription("GridView_OnRowEditing")]
		public event GridViewEditEventHandler RowEditing
		{
			add
			{
				base.Events.AddHandler(GridView.EventRowEditing, value);
			}
			remove
			{
				base.Events.RemoveHandler(GridView.EventRowEditing, value);
			}
		}

		// Token: 0x140000C2 RID: 194
		// (add) Token: 0x06004679 RID: 18041 RVA: 0x0011FB43 File Offset: 0x0011EB43
		// (remove) Token: 0x0600467A RID: 18042 RVA: 0x0011FB56 File Offset: 0x0011EB56
		[WebSysDescription("GridView_OnPageIndexChanged")]
		[WebCategory("Action")]
		public event EventHandler PageIndexChanged
		{
			add
			{
				base.Events.AddHandler(GridView.EventPageIndexChanged, value);
			}
			remove
			{
				base.Events.RemoveHandler(GridView.EventPageIndexChanged, value);
			}
		}

		// Token: 0x140000C3 RID: 195
		// (add) Token: 0x0600467B RID: 18043 RVA: 0x0011FB69 File Offset: 0x0011EB69
		// (remove) Token: 0x0600467C RID: 18044 RVA: 0x0011FB7C File Offset: 0x0011EB7C
		[WebSysDescription("GridView_OnPageIndexChanging")]
		[WebCategory("Action")]
		public event GridViewPageEventHandler PageIndexChanging
		{
			add
			{
				base.Events.AddHandler(GridView.EventPageIndexChanging, value);
			}
			remove
			{
				base.Events.RemoveHandler(GridView.EventPageIndexChanging, value);
			}
		}

		// Token: 0x140000C4 RID: 196
		// (add) Token: 0x0600467D RID: 18045 RVA: 0x0011FB8F File Offset: 0x0011EB8F
		// (remove) Token: 0x0600467E RID: 18046 RVA: 0x0011FBA2 File Offset: 0x0011EBA2
		[WebSysDescription("GridView_OnSelectedIndexChanged")]
		[WebCategory("Action")]
		public event EventHandler SelectedIndexChanged
		{
			add
			{
				base.Events.AddHandler(GridView.EventSelectedIndexChanged, value);
			}
			remove
			{
				base.Events.RemoveHandler(GridView.EventSelectedIndexChanged, value);
			}
		}

		// Token: 0x140000C5 RID: 197
		// (add) Token: 0x0600467F RID: 18047 RVA: 0x0011FBB5 File Offset: 0x0011EBB5
		// (remove) Token: 0x06004680 RID: 18048 RVA: 0x0011FBC8 File Offset: 0x0011EBC8
		[WebCategory("Action")]
		[WebSysDescription("GridView_OnSelectedIndexChanging")]
		public event GridViewSelectEventHandler SelectedIndexChanging
		{
			add
			{
				base.Events.AddHandler(GridView.EventSelectedIndexChanging, value);
			}
			remove
			{
				base.Events.RemoveHandler(GridView.EventSelectedIndexChanging, value);
			}
		}

		// Token: 0x140000C6 RID: 198
		// (add) Token: 0x06004681 RID: 18049 RVA: 0x0011FBDB File Offset: 0x0011EBDB
		// (remove) Token: 0x06004682 RID: 18050 RVA: 0x0011FBEE File Offset: 0x0011EBEE
		[WebCategory("Action")]
		[WebSysDescription("GridView_OnSorted")]
		public event EventHandler Sorted
		{
			add
			{
				base.Events.AddHandler(GridView.EventSorted, value);
			}
			remove
			{
				base.Events.RemoveHandler(GridView.EventSorted, value);
			}
		}

		// Token: 0x140000C7 RID: 199
		// (add) Token: 0x06004683 RID: 18051 RVA: 0x0011FC01 File Offset: 0x0011EC01
		// (remove) Token: 0x06004684 RID: 18052 RVA: 0x0011FC14 File Offset: 0x0011EC14
		[WebSysDescription("GridView_OnSorting")]
		[WebCategory("Action")]
		public event GridViewSortEventHandler Sorting
		{
			add
			{
				base.Events.AddHandler(GridView.EventSorting, value);
			}
			remove
			{
				base.Events.RemoveHandler(GridView.EventSorting, value);
			}
		}

		// Token: 0x140000C8 RID: 200
		// (add) Token: 0x06004685 RID: 18053 RVA: 0x0011FC27 File Offset: 0x0011EC27
		// (remove) Token: 0x06004686 RID: 18054 RVA: 0x0011FC3A File Offset: 0x0011EC3A
		[WebSysDescription("DataControls_OnItemUpdating")]
		[WebCategory("Action")]
		public event GridViewUpdateEventHandler RowUpdating
		{
			add
			{
				base.Events.AddHandler(GridView.EventRowUpdating, value);
			}
			remove
			{
				base.Events.RemoveHandler(GridView.EventRowUpdating, value);
			}
		}

		// Token: 0x140000C9 RID: 201
		// (add) Token: 0x06004687 RID: 18055 RVA: 0x0011FC4D File Offset: 0x0011EC4D
		// (remove) Token: 0x06004688 RID: 18056 RVA: 0x0011FC60 File Offset: 0x0011EC60
		[WebSysDescription("GridView_OnRowCommand")]
		[WebCategory("Action")]
		public event GridViewCommandEventHandler RowCommand
		{
			add
			{
				base.Events.AddHandler(GridView.EventRowCommand, value);
			}
			remove
			{
				base.Events.RemoveHandler(GridView.EventRowCommand, value);
			}
		}

		// Token: 0x140000CA RID: 202
		// (add) Token: 0x06004689 RID: 18057 RVA: 0x0011FC73 File Offset: 0x0011EC73
		// (remove) Token: 0x0600468A RID: 18058 RVA: 0x0011FC86 File Offset: 0x0011EC86
		[WebCategory("Behavior")]
		[WebSysDescription("GridView_OnRowCreated")]
		public event GridViewRowEventHandler RowCreated
		{
			add
			{
				base.Events.AddHandler(GridView.EventRowCreated, value);
			}
			remove
			{
				base.Events.RemoveHandler(GridView.EventRowCreated, value);
			}
		}

		// Token: 0x140000CB RID: 203
		// (add) Token: 0x0600468B RID: 18059 RVA: 0x0011FC99 File Offset: 0x0011EC99
		// (remove) Token: 0x0600468C RID: 18060 RVA: 0x0011FCAC File Offset: 0x0011ECAC
		[WebSysDescription("GridView_OnRowDataBound")]
		[WebCategory("Data")]
		public event GridViewRowEventHandler RowDataBound
		{
			add
			{
				base.Events.AddHandler(GridView.EventRowDataBound, value);
			}
			remove
			{
				base.Events.RemoveHandler(GridView.EventRowDataBound, value);
			}
		}

		// Token: 0x0600468D RID: 18061 RVA: 0x0011FCBF File Offset: 0x0011ECBF
		private void StoreEnumerator(IEnumerator dataSource, object firstDataRow)
		{
			this._storedData = dataSource;
			this._firstDataRow = firstDataRow;
			this._storedDataValid = true;
		}

		// Token: 0x0600468E RID: 18062 RVA: 0x0011FCD8 File Offset: 0x0011ECD8
		private string BuildCallbackArgument(string sortExpression, SortDirection sortDirection)
		{
			return string.Concat(new object[]
			{
				"\"",
				this.PageIndex,
				"|",
				(int)sortDirection,
				"|",
				this.StateFormatter.Serialize(sortExpression),
				"|\""
			});
		}

		// Token: 0x0600468F RID: 18063 RVA: 0x0011FD38 File Offset: 0x0011ED38
		private string BuildCallbackArgument(int pageIndex)
		{
			if (string.IsNullOrEmpty(this._sortExpressionSerialized))
			{
				this._sortExpressionSerialized = this.StateFormatter.Serialize(this.SortExpression);
			}
			return string.Concat(new object[]
			{
				"\"",
				pageIndex,
				"|",
				(int)this.SortDirection,
				"|",
				this._sortExpressionSerialized,
				"|\""
			});
		}

		// Token: 0x06004690 RID: 18064 RVA: 0x0011FDB6 File Offset: 0x0011EDB6
		private void ClearDataKeys()
		{
			this._dataKeysArrayList = null;
		}

		// Token: 0x06004691 RID: 18065 RVA: 0x0011FDC0 File Offset: 0x0011EDC0
		protected virtual AutoGeneratedField CreateAutoGeneratedColumn(AutoGeneratedFieldProperties fieldProperties)
		{
			AutoGeneratedField autoGeneratedField = new AutoGeneratedField(fieldProperties.DataField);
			string name = fieldProperties.Name;
			((IStateManager)autoGeneratedField).TrackViewState();
			autoGeneratedField.HeaderText = name;
			autoGeneratedField.SortExpression = name;
			autoGeneratedField.ReadOnly = fieldProperties.IsReadOnly;
			autoGeneratedField.DataType = fieldProperties.Type;
			return autoGeneratedField;
		}

		// Token: 0x06004692 RID: 18066 RVA: 0x0011FE10 File Offset: 0x0011EE10
		private ICollection CreateAutoGeneratedColumns(PagedDataSource dataSource)
		{
			if (dataSource == null)
			{
				return null;
			}
			ArrayList arrayList = new ArrayList();
			this._autoGenFieldProps = new ArrayList();
			bool flag = true;
			PropertyDescriptorCollection propertyDescriptorCollection = ((ITypedList)dataSource).GetItemProperties(new PropertyDescriptor[0]);
			if (propertyDescriptorCollection == null)
			{
				Type type = null;
				object obj = null;
				IEnumerable dataSource2 = dataSource.DataSource;
				Type type2 = dataSource2.GetType();
				PropertyInfo property = type2.GetProperty("Item", BindingFlags.Instance | BindingFlags.Public, null, null, new Type[] { typeof(int) }, null);
				if (property != null)
				{
					type = property.PropertyType;
				}
				if (type == null || type == typeof(object))
				{
					IEnumerator enumerator = dataSource.GetEnumerator();
					if (enumerator.MoveNext())
					{
						obj = enumerator.Current;
					}
					else
					{
						flag = false;
					}
					if (obj != null)
					{
						type = obj.GetType();
					}
					this.StoreEnumerator(enumerator, obj);
				}
				if (obj != null && obj is ICustomTypeDescriptor)
				{
					propertyDescriptorCollection = TypeDescriptor.GetProperties(obj);
				}
				else if (type != null)
				{
					if (this.IsBindableType(type))
					{
						AutoGeneratedFieldProperties autoGeneratedFieldProperties = new AutoGeneratedFieldProperties();
						((IStateManager)autoGeneratedFieldProperties).TrackViewState();
						autoGeneratedFieldProperties.Type = type;
						autoGeneratedFieldProperties.Name = "Item";
						autoGeneratedFieldProperties.DataField = BoundField.ThisExpression;
						AutoGeneratedField autoGeneratedField = this.CreateAutoGeneratedColumn(autoGeneratedFieldProperties);
						if (autoGeneratedField != null)
						{
							arrayList.Add(autoGeneratedField);
							this._autoGenFieldProps.Add(autoGeneratedFieldProperties);
						}
					}
					else
					{
						propertyDescriptorCollection = TypeDescriptor.GetProperties(type);
					}
				}
			}
			else if (propertyDescriptorCollection.Count == 0)
			{
				flag = false;
			}
			if (propertyDescriptorCollection != null && propertyDescriptorCollection.Count != 0)
			{
				string[] dataKeyNames = this.DataKeyNames;
				int num = dataKeyNames.Length;
				string[] array = new string[num];
				for (int i = 0; i < num; i++)
				{
					array[i] = dataKeyNames[i].ToLowerInvariant();
				}
				foreach (object obj2 in propertyDescriptorCollection)
				{
					PropertyDescriptor propertyDescriptor = (PropertyDescriptor)obj2;
					Type propertyType = propertyDescriptor.PropertyType;
					if (this.IsBindableType(propertyType))
					{
						string name = propertyDescriptor.Name;
						bool flag2 = ((IList)array).Contains(name.ToLowerInvariant());
						AutoGeneratedFieldProperties autoGeneratedFieldProperties2 = new AutoGeneratedFieldProperties();
						((IStateManager)autoGeneratedFieldProperties2).TrackViewState();
						autoGeneratedFieldProperties2.Name = name;
						autoGeneratedFieldProperties2.IsReadOnly = flag2;
						autoGeneratedFieldProperties2.Type = propertyType;
						autoGeneratedFieldProperties2.DataField = name;
						AutoGeneratedField autoGeneratedField2 = this.CreateAutoGeneratedColumn(autoGeneratedFieldProperties2);
						if (autoGeneratedField2 != null)
						{
							arrayList.Add(autoGeneratedField2);
							this._autoGenFieldProps.Add(autoGeneratedFieldProperties2);
						}
					}
				}
			}
			if (arrayList.Count == 0 && flag)
			{
				throw new HttpException(SR.GetString("GridView_NoAutoGenFields", new object[] { this.ID }));
			}
			return arrayList;
		}

		// Token: 0x06004693 RID: 18067 RVA: 0x001200B0 File Offset: 0x0011F0B0
		protected override int CreateChildControls(IEnumerable dataSource, bool dataBinding)
		{
			PagedDataSource pagedDataSource;
			IEnumerator enumerator;
			int num2;
			ArrayList dataKeysArrayList;
			ICollection collection2;
			int num3;
			int num4;
			ICollection collection3;
			checked
			{
				if (dataBinding)
				{
					bool allowPaging = this.AllowPaging;
					DataSourceView data = this.GetData();
					DataSourceSelectArguments selectArguments = base.SelectArguments;
					if (data == null)
					{
						throw new HttpException(SR.GetString("DataBoundControl_NullView", new object[] { this.ID }));
					}
					bool flag = allowPaging && data.CanPage;
					if (allowPaging && !data.CanPage && dataSource != null && !(dataSource is ICollection))
					{
						selectArguments.StartRowIndex = this.PageSize * this.PageIndex;
						selectArguments.MaximumRows = this.PageSize;
						data.Select(selectArguments, new DataSourceViewSelectCallback(this.SelectCallback));
					}
					if (flag)
					{
						if (data.CanRetrieveTotalRowCount)
						{
							pagedDataSource = this.CreateServerPagedDataSource(selectArguments.TotalRowCount);
						}
						else
						{
							ICollection collection = dataSource as ICollection;
							if (collection == null)
							{
								throw new HttpException(SR.GetString("DataBoundControl_NeedICollectionOrTotalRowCount", new object[] { base.GetType().Name }));
							}
							int num = this.PageIndex * this.PageSize;
							pagedDataSource = this.CreateServerPagedDataSource(num + collection.Count);
						}
					}
					else
					{
						pagedDataSource = this.CreatePagedDataSource();
					}
				}
				else
				{
					pagedDataSource = this.CreatePagedDataSource();
				}
				enumerator = null;
				num2 = 0;
				dataKeysArrayList = this.DataKeysArrayList;
				collection2 = null;
				num3 = -1;
				num4 = 0;
				collection3 = dataSource as ICollection;
				if (dataBinding)
				{
					dataKeysArrayList.Clear();
					if (dataSource != null && collection3 == null && pagedDataSource.IsPagingEnabled && !pagedDataSource.IsServerPagingEnabled)
					{
						throw new HttpException(SR.GetString("GridView_Missing_VirtualItemCount", new object[] { this.ID }));
					}
				}
				else if (collection3 == null)
				{
					throw new HttpException(SR.GetString("DataControls_DataSourceMustBeCollectionWhenNotDataBinding"));
				}
				this._pageCount = 0;
			}
			if (dataSource != null)
			{
				pagedDataSource.DataSource = dataSource;
				if (pagedDataSource.IsPagingEnabled)
				{
					int pageCount = pagedDataSource.PageCount;
					if (pagedDataSource.CurrentPageIndex >= pageCount)
					{
						int num5 = pageCount - 1;
						pagedDataSource.CurrentPageIndex = (this._pageIndex = num5);
					}
				}
				collection2 = this.CreateColumns(dataBinding ? pagedDataSource : null, dataBinding);
				if (collection3 != null)
				{
					num3 = collection3.Count;
					int num6 = (pagedDataSource.IsPagingEnabled ? pagedDataSource.PageSize : collection3.Count);
					num4 = num6;
					if (dataBinding)
					{
						dataKeysArrayList.Capacity = num6;
					}
					if (pagedDataSource.DataSourceCount == 0)
					{
						this._pageCount = 0;
					}
					else
					{
						this._pageCount = pagedDataSource.PageCount;
					}
				}
			}
			this._rowsArray = new ArrayList(num4);
			this._rowsCollection = null;
			this._dataKeyArray = null;
			Table table = this.CreateChildTable();
			this.Controls.Add(table);
			TableRowCollection rows = table.Rows;
			if (dataSource == null)
			{
				if (this.EmptyDataTemplate != null || this.EmptyDataText.Length > 0)
				{
					this.CreateRow(-1, -1, DataControlRowType.EmptyDataRow, DataControlRowState.Normal, dataBinding, null, new DataControlField[0], rows, null);
				}
				else
				{
					this.Controls.Clear();
				}
				return 0;
			}
			int num7 = 0;
			if (collection2 != null)
			{
				num7 = collection2.Count;
			}
			DataControlField[] array = new DataControlField[num7];
			if (num7 > 0)
			{
				collection2.CopyTo(array, 0);
				bool flag2 = false;
				for (int i = 0; i < array.Length; i++)
				{
					if (array[i].Initialize(this.AllowSorting, this))
					{
						flag2 = true;
					}
					if (this.DetermineRenderClientScript())
					{
						array[i].ValidateSupportsCallback();
					}
				}
				if (flag2)
				{
					base.RequiresDataBinding = true;
				}
			}
			int num8 = 0;
			int num9 = 0;
			string[] dataKeyNamesInternal = this.DataKeyNamesInternal;
			bool flag3 = dataBinding && dataKeyNamesInternal.Length != 0;
			bool isPagingEnabled = pagedDataSource.IsPagingEnabled;
			int editIndex = this.EditIndex;
			int selectedIndex = this.SelectedIndex;
			if (num3 == -1)
			{
				if (this._storedDataValid)
				{
					if (this._firstDataRow != null)
					{
						num3 = 1;
					}
					else
					{
						num3 = 0;
					}
				}
				else
				{
					IEnumerator enumerator2 = dataSource.GetEnumerator();
					if (enumerator2.MoveNext())
					{
						object obj = enumerator2.Current;
						this.StoreEnumerator(enumerator2, obj);
						num3 = 1;
					}
					else
					{
						num3 = 0;
					}
				}
			}
			if (num3 == 0)
			{
				if (this.EmptyDataTemplate != null || this.EmptyDataText.Length > 0)
				{
					this.CreateRow(-1, -1, DataControlRowType.EmptyDataRow, DataControlRowState.Normal, dataBinding, null, array, rows, null);
				}
				else
				{
					this.Controls.Clear();
				}
				this._storedDataValid = false;
				this._firstDataRow = null;
				return 0;
			}
			if (num7 > 0)
			{
				if (pagedDataSource.IsPagingEnabled)
				{
					num9 = pagedDataSource.FirstIndexInPage;
				}
				if (isPagingEnabled && this.PagerSettings.Visible && this._pagerSettings.IsPagerOnTop)
				{
					this._topPagerRow = this.CreateRow(-1, -1, DataControlRowType.Pager, DataControlRowState.Normal, dataBinding, null, array, rows, pagedDataSource);
				}
				this._headerRow = this.CreateRow(-1, -1, DataControlRowType.Header, DataControlRowState.Normal, dataBinding, null, array, rows, null);
				if (!this.ShowHeader)
				{
					this._headerRow.Visible = false;
				}
				DataControlRowType dataControlRowType;
				if (this._storedDataValid)
				{
					enumerator = this._storedData;
					if (this._firstDataRow != null)
					{
						if (flag3)
						{
							OrderedDictionary orderedDictionary = new OrderedDictionary(dataKeyNamesInternal.Length);
							foreach (string text in dataKeyNamesInternal)
							{
								object propertyValue = DataBinder.GetPropertyValue(this._firstDataRow, text);
								orderedDictionary.Add(text, propertyValue);
							}
							if (dataKeysArrayList.Count == num8)
							{
								dataKeysArrayList.Add(new DataKey(orderedDictionary, dataKeyNamesInternal));
							}
							else
							{
								dataKeysArrayList[num8] = new DataKey(orderedDictionary, dataKeyNamesInternal);
							}
						}
						dataControlRowType = DataControlRowType.DataRow;
						DataControlRowState dataControlRowState = DataControlRowState.Normal;
						if (num8 == editIndex)
						{
							dataControlRowState |= DataControlRowState.Edit;
						}
						if (num8 == selectedIndex)
						{
							dataControlRowState |= DataControlRowState.Selected;
						}
						GridViewRow gridViewRow = this.CreateRow(0, num9, dataControlRowType, dataControlRowState, dataBinding, this._firstDataRow, array, rows, null);
						this._rowsArray.Add(gridViewRow);
						num2++;
						num8++;
						num9++;
						this._storedDataValid = false;
						this._firstDataRow = null;
					}
				}
				else
				{
					enumerator = pagedDataSource.GetEnumerator();
				}
				dataControlRowType = DataControlRowType.DataRow;
				while (enumerator.MoveNext())
				{
					object obj2 = enumerator.Current;
					if (flag3)
					{
						OrderedDictionary orderedDictionary2 = new OrderedDictionary(dataKeyNamesInternal.Length);
						foreach (string text2 in dataKeyNamesInternal)
						{
							object propertyValue2 = DataBinder.GetPropertyValue(obj2, text2);
							orderedDictionary2.Add(text2, propertyValue2);
						}
						if (dataKeysArrayList.Count == num8)
						{
							dataKeysArrayList.Add(new DataKey(orderedDictionary2, dataKeyNamesInternal));
						}
						else
						{
							dataKeysArrayList[num8] = new DataKey(orderedDictionary2, dataKeyNamesInternal);
						}
					}
					DataControlRowState dataControlRowState = DataControlRowState.Normal;
					if (num8 == editIndex)
					{
						dataControlRowState |= DataControlRowState.Edit;
					}
					if (num8 == selectedIndex)
					{
						dataControlRowState |= DataControlRowState.Selected;
					}
					if (num8 % 2 != 0)
					{
						dataControlRowState |= DataControlRowState.Alternate;
					}
					GridViewRow gridViewRow = this.CreateRow(num8, num9, dataControlRowType, dataControlRowState, dataBinding, obj2, array, rows, null);
					this._rowsArray.Add(gridViewRow);
					num2++;
					num9++;
					num8++;
				}
				if (num8 == 0)
				{
					this.CreateRow(-1, -1, DataControlRowType.EmptyDataRow, DataControlRowState.Normal, dataBinding, null, array, rows, null);
				}
				this._footerRow = this.CreateRow(-1, -1, DataControlRowType.Footer, DataControlRowState.Normal, dataBinding, null, array, rows, null);
				if (!this.ShowFooter)
				{
					this._footerRow.Visible = false;
				}
				if (isPagingEnabled && this.PagerSettings.Visible && this._pagerSettings.IsPagerOnBottom)
				{
					this._bottomPagerRow = this.CreateRow(-1, -1, DataControlRowType.Pager, DataControlRowState.Normal, dataBinding, null, array, rows, pagedDataSource);
				}
			}
			int num10 = -1;
			if (dataBinding)
			{
				if (enumerator != null)
				{
					if (pagedDataSource.IsPagingEnabled)
					{
						this._pageCount = pagedDataSource.PageCount;
						num10 = pagedDataSource.DataSourceCount;
					}
					else
					{
						this._pageCount = 1;
						num10 = num2;
					}
				}
				else
				{
					this._pageCount = 0;
				}
			}
			if (this.PageCount == 1)
			{
				if (this._topPagerRow != null)
				{
					this._topPagerRow.Visible = false;
				}
				if (this._bottomPagerRow != null)
				{
					this._bottomPagerRow.Visible = false;
				}
			}
			return num10;
		}

		// Token: 0x06004694 RID: 18068 RVA: 0x00120801 File Offset: 0x0011F801
		protected virtual Table CreateChildTable()
		{
			return new ChildTable(string.IsNullOrEmpty(this.ID) ? null : this.ClientID);
		}

		// Token: 0x06004695 RID: 18069 RVA: 0x00120820 File Offset: 0x0011F820
		protected override Style CreateControlStyle()
		{
			return new TableStyle
			{
				GridLines = GridLines.Both,
				CellSpacing = 0
			};
		}

		// Token: 0x06004696 RID: 18070 RVA: 0x00120844 File Offset: 0x0011F844
		protected virtual ICollection CreateColumns(PagedDataSource dataSource, bool useDataSource)
		{
			ArrayList arrayList = new ArrayList();
			bool autoGenerateEditButton = this.AutoGenerateEditButton;
			bool autoGenerateDeleteButton = this.AutoGenerateDeleteButton;
			bool autoGenerateSelectButton = this.AutoGenerateSelectButton;
			if (autoGenerateEditButton || autoGenerateDeleteButton || autoGenerateSelectButton)
			{
				CommandField commandField = new CommandField();
				commandField.ButtonType = ButtonType.Link;
				if (autoGenerateEditButton)
				{
					commandField.ShowEditButton = true;
				}
				if (autoGenerateDeleteButton)
				{
					commandField.ShowDeleteButton = true;
				}
				if (autoGenerateSelectButton)
				{
					commandField.ShowSelectButton = true;
				}
				arrayList.Add(commandField);
			}
			foreach (object obj in this.Columns)
			{
				DataControlField dataControlField = (DataControlField)obj;
				arrayList.Add(dataControlField);
			}
			if (this.AutoGenerateColumns)
			{
				if (this.ColumnsGenerator == null)
				{
					object[] array = null;
					if (useDataSource)
					{
						ICollection collection = this.CreateAutoGeneratedColumns(dataSource);
						if (collection != null)
						{
							array = new DataControlField[collection.Count];
							collection.CopyTo(array, 0);
						}
					}
					else if (this._autoGenFieldProps != null)
					{
						int count = this._autoGenFieldProps.Count;
						array = new DataControlField[count];
						for (int i = 0; i < count; i++)
						{
							array[i] = this.CreateAutoGeneratedColumn((AutoGeneratedFieldProperties)this._autoGenFieldProps[i]);
						}
					}
					if (array != null)
					{
						int num = array.Length;
						for (int j = 0; j < num; j++)
						{
							arrayList.Add(array[j]);
						}
					}
				}
				else
				{
					arrayList.AddRange(this.ColumnsGenerator.GenerateFields(this));
				}
			}
			return arrayList;
		}

		// Token: 0x06004697 RID: 18071 RVA: 0x001209D0 File Offset: 0x0011F9D0
		protected override DataSourceSelectArguments CreateDataSourceSelectArguments()
		{
			DataSourceSelectArguments dataSourceSelectArguments = new DataSourceSelectArguments();
			DataSourceView data = this.GetData();
			bool flag = this.AllowPaging && data.CanPage;
			string text = this.SortExpressionInternal;
			if (this.SortDirectionInternal == SortDirection.Descending && !string.IsNullOrEmpty(text))
			{
				text += " DESC";
			}
			dataSourceSelectArguments.SortExpression = text;
			if (flag)
			{
				if (data.CanRetrieveTotalRowCount)
				{
					dataSourceSelectArguments.RetrieveTotalRowCount = true;
					dataSourceSelectArguments.MaximumRows = this.PageSize;
				}
				else
				{
					dataSourceSelectArguments.MaximumRows = -1;
				}
				dataSourceSelectArguments.StartRowIndex = checked(this.PageSize * this.PageIndex);
			}
			return dataSourceSelectArguments;
		}

		// Token: 0x06004698 RID: 18072 RVA: 0x00120A64 File Offset: 0x0011FA64
		private void CreateNextPrevPager(TableRow row, PagedDataSource pagedDataSource, bool addFirstLastPageButtons)
		{
			PagerSettings pagerSettings = this.PagerSettings;
			string previousPageImageUrl = pagerSettings.PreviousPageImageUrl;
			string nextPageImageUrl = pagerSettings.NextPageImageUrl;
			bool isFirstPage = pagedDataSource.IsFirstPage;
			bool isLastPage = pagedDataSource.IsLastPage;
			if (addFirstLastPageButtons && !isFirstPage)
			{
				TableCell tableCell = new TableCell();
				row.Cells.Add(tableCell);
				string firstPageImageUrl = pagerSettings.FirstPageImageUrl;
				IButtonControl buttonControl;
				if (firstPageImageUrl.Length > 0)
				{
					buttonControl = new DataControlImageButton(this);
					((DataControlImageButton)buttonControl).ImageUrl = firstPageImageUrl;
					((DataControlImageButton)buttonControl).AlternateText = HttpUtility.HtmlDecode(pagerSettings.FirstPageText);
					((DataControlImageButton)buttonControl).EnableCallback(this.BuildCallbackArgument(0));
				}
				else
				{
					buttonControl = new DataControlPagerLinkButton(this);
					((DataControlPagerLinkButton)buttonControl).Text = pagerSettings.FirstPageText;
					((DataControlPagerLinkButton)buttonControl).EnableCallback(this.BuildCallbackArgument(0));
				}
				buttonControl.CommandName = "Page";
				buttonControl.CommandArgument = "First";
				tableCell.Controls.Add((Control)buttonControl);
			}
			if (!isFirstPage)
			{
				TableCell tableCell2 = new TableCell();
				row.Cells.Add(tableCell2);
				IButtonControl buttonControl2;
				if (previousPageImageUrl.Length > 0)
				{
					buttonControl2 = new DataControlImageButton(this);
					((DataControlImageButton)buttonControl2).ImageUrl = previousPageImageUrl;
					((DataControlImageButton)buttonControl2).AlternateText = HttpUtility.HtmlDecode(pagerSettings.PreviousPageText);
					((DataControlImageButton)buttonControl2).EnableCallback(this.BuildCallbackArgument(this.PageIndex - 1));
				}
				else
				{
					buttonControl2 = new DataControlPagerLinkButton(this);
					((DataControlPagerLinkButton)buttonControl2).Text = pagerSettings.PreviousPageText;
					((DataControlPagerLinkButton)buttonControl2).EnableCallback(this.BuildCallbackArgument(this.PageIndex - 1));
				}
				buttonControl2.CommandName = "Page";
				buttonControl2.CommandArgument = "Prev";
				tableCell2.Controls.Add((Control)buttonControl2);
			}
			if (!isLastPage)
			{
				TableCell tableCell3 = new TableCell();
				row.Cells.Add(tableCell3);
				IButtonControl buttonControl3;
				if (nextPageImageUrl.Length > 0)
				{
					buttonControl3 = new DataControlImageButton(this);
					((DataControlImageButton)buttonControl3).ImageUrl = nextPageImageUrl;
					((DataControlImageButton)buttonControl3).AlternateText = HttpUtility.HtmlDecode(pagerSettings.NextPageText);
					((DataControlImageButton)buttonControl3).EnableCallback(this.BuildCallbackArgument(this.PageIndex + 1));
				}
				else
				{
					buttonControl3 = new DataControlPagerLinkButton(this);
					((DataControlPagerLinkButton)buttonControl3).Text = pagerSettings.NextPageText;
					((DataControlPagerLinkButton)buttonControl3).EnableCallback(this.BuildCallbackArgument(this.PageIndex + 1));
				}
				buttonControl3.CommandName = "Page";
				buttonControl3.CommandArgument = "Next";
				tableCell3.Controls.Add((Control)buttonControl3);
			}
			if (addFirstLastPageButtons && !isLastPage)
			{
				TableCell tableCell4 = new TableCell();
				row.Cells.Add(tableCell4);
				string lastPageImageUrl = pagerSettings.LastPageImageUrl;
				IButtonControl buttonControl4;
				if (lastPageImageUrl.Length > 0)
				{
					buttonControl4 = new DataControlImageButton(this);
					((DataControlImageButton)buttonControl4).ImageUrl = lastPageImageUrl;
					((DataControlImageButton)buttonControl4).AlternateText = HttpUtility.HtmlDecode(pagerSettings.LastPageText);
					((DataControlImageButton)buttonControl4).EnableCallback(this.BuildCallbackArgument(pagedDataSource.PageCount - 1));
				}
				else
				{
					buttonControl4 = new DataControlPagerLinkButton(this);
					((DataControlPagerLinkButton)buttonControl4).Text = pagerSettings.LastPageText;
					((DataControlPagerLinkButton)buttonControl4).EnableCallback(this.BuildCallbackArgument(pagedDataSource.PageCount - 1));
				}
				buttonControl4.CommandName = "Page";
				buttonControl4.CommandArgument = "Last";
				tableCell4.Controls.Add((Control)buttonControl4);
			}
		}

		// Token: 0x06004699 RID: 18073 RVA: 0x00120DD8 File Offset: 0x0011FDD8
		private void CreateNumericPager(TableRow row, PagedDataSource pagedDataSource, bool addFirstLastPageButtons)
		{
			PagerSettings pagerSettings = this.PagerSettings;
			int pageCount = pagedDataSource.PageCount;
			int num = pagedDataSource.CurrentPageIndex + 1;
			int pageButtonCount = pagerSettings.PageButtonCount;
			int num2 = pageButtonCount;
			int num3 = this.FirstDisplayedPageIndex + 1;
			if (pageCount < num2)
			{
				num2 = pageCount;
			}
			int num4 = 1;
			int num5 = num2;
			if (num > num5)
			{
				int num6 = pagedDataSource.CurrentPageIndex / pageButtonCount;
				bool flag = num - num3 >= 0 && num - num3 < pageButtonCount;
				if (num3 > 0 && flag)
				{
					num4 = num3;
				}
				else
				{
					num4 = num6 * pageButtonCount + 1;
				}
				num5 = num4 + pageButtonCount - 1;
				if (num5 > pageCount)
				{
					num5 = pageCount;
				}
				if (num5 - num4 + 1 < pageButtonCount)
				{
					num4 = Math.Max(1, num5 - pageButtonCount + 1);
				}
				this.FirstDisplayedPageIndex = num4 - 1;
			}
			if (addFirstLastPageButtons && num != 1 && num4 != 1)
			{
				TableCell tableCell = new TableCell();
				row.Cells.Add(tableCell);
				string firstPageImageUrl = pagerSettings.FirstPageImageUrl;
				IButtonControl buttonControl;
				if (firstPageImageUrl.Length > 0)
				{
					buttonControl = new DataControlImageButton(this);
					((DataControlImageButton)buttonControl).ImageUrl = firstPageImageUrl;
					((DataControlImageButton)buttonControl).AlternateText = HttpUtility.HtmlDecode(pagerSettings.FirstPageText);
					((DataControlImageButton)buttonControl).EnableCallback(this.BuildCallbackArgument(0));
				}
				else
				{
					buttonControl = new DataControlPagerLinkButton(this);
					((DataControlPagerLinkButton)buttonControl).Text = pagerSettings.FirstPageText;
					((DataControlPagerLinkButton)buttonControl).EnableCallback(this.BuildCallbackArgument(0));
				}
				buttonControl.CommandName = "Page";
				buttonControl.CommandArgument = "First";
				tableCell.Controls.Add((Control)buttonControl);
			}
			if (num4 != 1)
			{
				TableCell tableCell2 = new TableCell();
				row.Cells.Add(tableCell2);
				LinkButton linkButton = new DataControlPagerLinkButton(this);
				linkButton.Text = "...";
				linkButton.CommandName = "Page";
				linkButton.CommandArgument = (num4 - 1).ToString(NumberFormatInfo.InvariantInfo);
				((DataControlPagerLinkButton)linkButton).EnableCallback(this.BuildCallbackArgument(num4 - 2));
				tableCell2.Controls.Add(linkButton);
			}
			for (int i = num4; i <= num5; i++)
			{
				TableCell tableCell3 = new TableCell();
				row.Cells.Add(tableCell3);
				string text = i.ToString(NumberFormatInfo.InvariantInfo);
				if (i == num)
				{
					Label label = new Label();
					label.Text = text;
					tableCell3.Controls.Add(label);
				}
				else
				{
					LinkButton linkButton = new DataControlPagerLinkButton(this);
					linkButton.Text = text;
					linkButton.CommandName = "Page";
					linkButton.CommandArgument = text;
					((DataControlPagerLinkButton)linkButton).EnableCallback(this.BuildCallbackArgument(i - 1));
					tableCell3.Controls.Add(linkButton);
				}
			}
			if (pageCount > num5)
			{
				TableCell tableCell4 = new TableCell();
				row.Cells.Add(tableCell4);
				LinkButton linkButton = new DataControlPagerLinkButton(this);
				linkButton.Text = "...";
				linkButton.CommandName = "Page";
				linkButton.CommandArgument = (num5 + 1).ToString(NumberFormatInfo.InvariantInfo);
				((DataControlPagerLinkButton)linkButton).EnableCallback(this.BuildCallbackArgument(num5));
				tableCell4.Controls.Add(linkButton);
			}
			bool flag2 = num5 == pageCount;
			if (addFirstLastPageButtons && num != pageCount && !flag2)
			{
				TableCell tableCell5 = new TableCell();
				row.Cells.Add(tableCell5);
				string lastPageImageUrl = pagerSettings.LastPageImageUrl;
				IButtonControl buttonControl2;
				if (lastPageImageUrl.Length > 0)
				{
					buttonControl2 = new DataControlImageButton(this);
					((DataControlImageButton)buttonControl2).ImageUrl = lastPageImageUrl;
					((DataControlImageButton)buttonControl2).AlternateText = HttpUtility.HtmlDecode(pagerSettings.LastPageText);
					((DataControlImageButton)buttonControl2).EnableCallback(this.BuildCallbackArgument(pagedDataSource.PageCount - 1));
				}
				else
				{
					buttonControl2 = new DataControlPagerLinkButton(this);
					((DataControlPagerLinkButton)buttonControl2).Text = pagerSettings.LastPageText;
					((DataControlPagerLinkButton)buttonControl2).EnableCallback(this.BuildCallbackArgument(pagedDataSource.PageCount - 1));
				}
				buttonControl2.CommandName = "Page";
				buttonControl2.CommandArgument = "Last";
				tableCell5.Controls.Add((Control)buttonControl2);
			}
		}

		// Token: 0x0600469A RID: 18074 RVA: 0x001211E0 File Offset: 0x001201E0
		private GridViewRow CreateRow(int rowIndex, int dataSourceIndex, DataControlRowType rowType, DataControlRowState rowState, bool dataBind, object dataItem, DataControlField[] fields, TableRowCollection rows, PagedDataSource pagedDataSource)
		{
			GridViewRow gridViewRow = this.CreateRow(rowIndex, dataSourceIndex, rowType, rowState);
			GridViewRowEventArgs gridViewRowEventArgs = new GridViewRowEventArgs(gridViewRow);
			if (rowType != DataControlRowType.Pager)
			{
				this.InitializeRow(gridViewRow, fields);
			}
			else
			{
				this.InitializePager(gridViewRow, fields.Length, pagedDataSource);
			}
			if (dataBind)
			{
				gridViewRow.DataItem = dataItem;
			}
			this.OnRowCreated(gridViewRowEventArgs);
			rows.Add(gridViewRow);
			if (dataBind)
			{
				gridViewRow.DataBind();
				this.OnRowDataBound(gridViewRowEventArgs);
				gridViewRow.DataItem = null;
			}
			return gridViewRow;
		}

		// Token: 0x0600469B RID: 18075 RVA: 0x00121251 File Offset: 0x00120251
		protected virtual GridViewRow CreateRow(int rowIndex, int dataSourceIndex, DataControlRowType rowType, DataControlRowState rowState)
		{
			return new GridViewRow(rowIndex, dataSourceIndex, rowType, rowState);
		}

		// Token: 0x0600469C RID: 18076 RVA: 0x00121260 File Offset: 0x00120260
		private PagedDataSource CreatePagedDataSource()
		{
			return new PagedDataSource
			{
				CurrentPageIndex = this.PageIndex,
				PageSize = this.PageSize,
				AllowPaging = this.AllowPaging,
				AllowCustomPaging = false,
				AllowServerPaging = false,
				VirtualCount = 0
			};
		}

		// Token: 0x0600469D RID: 18077 RVA: 0x001212B0 File Offset: 0x001202B0
		private PagedDataSource CreateServerPagedDataSource(int totalRowCount)
		{
			return new PagedDataSource
			{
				CurrentPageIndex = this.PageIndex,
				PageSize = this.PageSize,
				AllowPaging = this.AllowPaging,
				AllowCustomPaging = false,
				AllowServerPaging = true,
				VirtualCount = totalRowCount
			};
		}

		// Token: 0x0600469E RID: 18078 RVA: 0x001212FD File Offset: 0x001202FD
		public sealed override void DataBind()
		{
			base.DataBind();
		}

		// Token: 0x0600469F RID: 18079 RVA: 0x00121305 File Offset: 0x00120305
		public virtual void DeleteRow(int rowIndex)
		{
			this.HandleDelete(null, rowIndex);
		}

		// Token: 0x060046A0 RID: 18080 RVA: 0x00121310 File Offset: 0x00120310
		private bool DetermineRenderClientScript()
		{
			if (!this._renderClientScriptValid)
			{
				this._renderClientScript = false;
				if (this.EnableSortingAndPagingCallbacks && this.Context != null && this.Page != null && this.Page.RequestInternal != null && this.Page.Request.Browser.SupportsCallback && !base.IsParentedToUpdatePanel)
				{
					HttpBrowserCapabilities browser = this.Page.Request.Browser;
					bool flag = browser.EcmaScriptVersion.Major > 0;
					bool flag2 = browser.W3CDomVersion.Major > 0;
					bool flag3 = !StringUtil.EqualsIgnoreCase(browser["tagwriter"], typeof(Html32TextWriter).FullName);
					this._renderClientScript = flag && flag2 && flag3;
				}
				this._renderClientScriptValid = true;
			}
			return this._renderClientScript;
		}

		// Token: 0x060046A1 RID: 18081 RVA: 0x001213F0 File Offset: 0x001203F0
		protected virtual void ExtractRowValues(IOrderedDictionary fieldValues, GridViewRow row, bool includeReadOnlyFields, bool includePrimaryKey)
		{
			if (fieldValues == null)
			{
				return;
			}
			ICollection collection = this.CreateColumns(null, false);
			int count = collection.Count;
			object[] array = new object[count];
			string[] dataKeyNamesInternal = this.DataKeyNamesInternal;
			collection.CopyTo(array, 0);
			int num = 0;
			while (num < count && num < row.Cells.Count)
			{
				if (((DataControlField)array[num]).Visible)
				{
					OrderedDictionary orderedDictionary = new OrderedDictionary();
					((DataControlField)array[num]).ExtractValuesFromCell(orderedDictionary, row.Cells[num] as DataControlFieldCell, row.RowState, includeReadOnlyFields);
					foreach (object obj in orderedDictionary)
					{
						DictionaryEntry dictionaryEntry = (DictionaryEntry)obj;
						if (includePrimaryKey || Array.IndexOf(dataKeyNamesInternal, dictionaryEntry.Key) == -1)
						{
							fieldValues[dictionaryEntry.Key] = dictionaryEntry.Value;
						}
					}
				}
				num++;
			}
		}

		// Token: 0x060046A2 RID: 18082 RVA: 0x00121500 File Offset: 0x00120500
		protected virtual string GetCallbackResult()
		{
			StringWriter stringWriter = new StringWriter(CultureInfo.InvariantCulture);
			HtmlTextWriter htmlTextWriter = new HtmlTextWriter(stringWriter);
			IStateFormatter stateFormatter = this.StateFormatter;
			this.RenderTableContents(htmlTextWriter);
			htmlTextWriter.Flush();
			htmlTextWriter.Close();
			string text = stateFormatter.Serialize(this.SaveDataKeysState());
			string text2 = stateFormatter.Serialize(this.SortExpression);
			return string.Concat(new string[]
			{
				Convert.ToString(this.PageIndex, CultureInfo.InvariantCulture),
				"|",
				Convert.ToString((int)this.SortDirection, CultureInfo.InvariantCulture),
				"|",
				text2,
				"|",
				text,
				"|",
				stringWriter.ToString()
			});
		}

		// Token: 0x060046A3 RID: 18083 RVA: 0x001215C8 File Offset: 0x001205C8
		protected virtual string GetCallbackScript(IButtonControl buttonControl, string argument)
		{
			if (this.DetermineRenderClientScript())
			{
				if (string.IsNullOrEmpty(argument) && buttonControl.CommandName == "Sort")
				{
					argument = this.BuildCallbackArgument(buttonControl.CommandArgument, this.SortDirection);
				}
				if (this.Page != null)
				{
					this.Page.ClientScript.RegisterForEventValidation(this.UniqueID, argument);
				}
				string text = "javascript:__gv" + this.ClientID + ".callback";
				return text + "(" + argument + "); return false;";
			}
			return null;
		}

		// Token: 0x060046A4 RID: 18084 RVA: 0x00121653 File Offset: 0x00120653
		private int GetRowIndex(GridViewRow row, string commandArgument)
		{
			if (row != null)
			{
				return row.RowIndex;
			}
			return Convert.ToInt32(commandArgument, CultureInfo.InvariantCulture);
		}

		// Token: 0x060046A5 RID: 18085 RVA: 0x0012166C File Offset: 0x0012066C
		private void HandleCancel(int rowIndex)
		{
			bool isBoundUsingDataSourceID = base.IsBoundUsingDataSourceID;
			GridViewCancelEditEventArgs gridViewCancelEditEventArgs = new GridViewCancelEditEventArgs(rowIndex);
			this.OnRowCancelingEdit(gridViewCancelEditEventArgs);
			if (gridViewCancelEditEventArgs.Cancel)
			{
				return;
			}
			if (isBoundUsingDataSourceID)
			{
				this.EditIndex = -1;
			}
			base.RequiresDataBinding = true;
		}

		// Token: 0x060046A6 RID: 18086 RVA: 0x001216A8 File Offset: 0x001206A8
		private void HandleDelete(GridViewRow row, int rowIndex)
		{
			DataSourceView dataSourceView = null;
			bool isBoundUsingDataSourceID = base.IsBoundUsingDataSourceID;
			if (isBoundUsingDataSourceID)
			{
				dataSourceView = this.GetData();
				if (dataSourceView == null)
				{
					throw new HttpException(SR.GetString("GridView_DataSourceReturnedNullView", new object[] { this.ID }));
				}
			}
			if (row == null && rowIndex < this.Rows.Count)
			{
				row = this.Rows[rowIndex];
			}
			GridViewDeleteEventArgs gridViewDeleteEventArgs = new GridViewDeleteEventArgs(rowIndex);
			if (isBoundUsingDataSourceID)
			{
				if (row != null)
				{
					this.ExtractRowValues(gridViewDeleteEventArgs.Values, row, true, false);
				}
				if (this.DataKeys.Count > rowIndex)
				{
					foreach (object obj in this.DataKeys[rowIndex].Values)
					{
						DictionaryEntry dictionaryEntry = (DictionaryEntry)obj;
						gridViewDeleteEventArgs.Keys.Add(dictionaryEntry.Key, dictionaryEntry.Value);
						if (gridViewDeleteEventArgs.Values.Contains(dictionaryEntry.Key))
						{
							gridViewDeleteEventArgs.Values.Remove(dictionaryEntry.Key);
						}
					}
				}
			}
			this.OnRowDeleting(gridViewDeleteEventArgs);
			if (gridViewDeleteEventArgs.Cancel)
			{
				return;
			}
			this._deletedRowIndex = rowIndex;
			if (isBoundUsingDataSourceID)
			{
				this._deleteKeys = gridViewDeleteEventArgs.Keys;
				this._deleteValues = gridViewDeleteEventArgs.Values;
				dataSourceView.Delete(gridViewDeleteEventArgs.Keys, gridViewDeleteEventArgs.Values, new DataSourceViewOperationCallback(this.HandleDeleteCallback));
			}
		}

		// Token: 0x060046A7 RID: 18087 RVA: 0x00121824 File Offset: 0x00120824
		private bool HandleDeleteCallback(int affectedRows, Exception ex)
		{
			GridViewDeletedEventArgs gridViewDeletedEventArgs = new GridViewDeletedEventArgs(affectedRows, ex);
			gridViewDeletedEventArgs.SetKeys(this._deleteKeys);
			gridViewDeletedEventArgs.SetValues(this._deleteValues);
			this.OnRowDeleted(gridViewDeletedEventArgs);
			this._deleteKeys = null;
			this._deleteValues = null;
			if (ex != null && !gridViewDeletedEventArgs.ExceptionHandled && this.PageIsValidAfterModelException())
			{
				return false;
			}
			this.EditIndex = -1;
			if (affectedRows > 0)
			{
				int num = (int)this.ViewState["_!ItemCount"];
				int deletedRowIndex = this._deletedRowIndex;
				int pageSize = this.PageSize;
				int pageIndex = this.PageIndex;
				int num2 = deletedRowIndex + pageSize * pageIndex;
				bool flag = deletedRowIndex == 0;
				if (deletedRowIndex == pageSize)
				{
					int pageCount = this.PageCount;
				}
				bool flag2 = num2 == num - 1;
				int num3 = num - 1 - affectedRows;
				if (this.AllowPaging)
				{
					num3 /= pageSize;
					if (num3 < pageIndex)
					{
						if (num3 < 0)
						{
							num3 = 0;
						}
						this._pageIndex = num3;
					}
				}
				if (this.PageIndex == this.PageCount - 1 && this.SelectedIndex >= num3)
				{
					this.SelectedIndex = num3;
				}
			}
			this._deletedRowIndex = -1;
			base.RequiresDataBinding = true;
			return true;
		}

		// Token: 0x060046A8 RID: 18088 RVA: 0x00121934 File Offset: 0x00120934
		private void HandleEdit(int rowIndex)
		{
			GridViewEditEventArgs gridViewEditEventArgs = new GridViewEditEventArgs(rowIndex);
			this.OnRowEditing(gridViewEditEventArgs);
			if (gridViewEditEventArgs.Cancel)
			{
				return;
			}
			if (base.IsBoundUsingDataSourceID)
			{
				this.EditIndex = gridViewEditEventArgs.NewEditIndex;
			}
			base.RequiresDataBinding = true;
		}

		// Token: 0x060046A9 RID: 18089 RVA: 0x00121974 File Offset: 0x00120974
		private bool HandleEvent(EventArgs e, bool causesValidation, string validationGroup)
		{
			bool flag = false;
			this._modelValidationGroup = null;
			if (causesValidation)
			{
				this.Page.Validate(validationGroup);
				if (this.EnableModelValidation)
				{
					this._modelValidationGroup = validationGroup;
				}
			}
			GridViewCommandEventArgs gridViewCommandEventArgs = e as GridViewCommandEventArgs;
			if (gridViewCommandEventArgs != null)
			{
				this.OnRowCommand(gridViewCommandEventArgs);
				flag = true;
				string commandName = gridViewCommandEventArgs.CommandName;
				if (StringUtil.EqualsIgnoreCase(commandName, "Select"))
				{
					this.HandleSelect(this.GetRowIndex(gridViewCommandEventArgs.Row, (string)gridViewCommandEventArgs.CommandArgument));
				}
				else if (StringUtil.EqualsIgnoreCase(commandName, "Page"))
				{
					string text = (string)gridViewCommandEventArgs.CommandArgument;
					int num = this.PageIndex;
					if (StringUtil.EqualsIgnoreCase(text, "Next"))
					{
						num++;
					}
					else if (StringUtil.EqualsIgnoreCase(text, "Prev"))
					{
						num--;
					}
					else if (StringUtil.EqualsIgnoreCase(text, "First"))
					{
						num = 0;
					}
					else if (StringUtil.EqualsIgnoreCase(text, "Last"))
					{
						num = this.PageCount - 1;
					}
					else
					{
						num = Convert.ToInt32(text, CultureInfo.InvariantCulture) - 1;
					}
					this.HandlePage(num);
				}
				else if (StringUtil.EqualsIgnoreCase(commandName, "Sort"))
				{
					this.HandleSort((string)gridViewCommandEventArgs.CommandArgument);
				}
				else if (StringUtil.EqualsIgnoreCase(commandName, "Edit"))
				{
					this.HandleEdit(this.GetRowIndex(gridViewCommandEventArgs.Row, (string)gridViewCommandEventArgs.CommandArgument));
				}
				else if (StringUtil.EqualsIgnoreCase(commandName, "Update"))
				{
					this.HandleUpdate(gridViewCommandEventArgs.Row, this.GetRowIndex(gridViewCommandEventArgs.Row, (string)gridViewCommandEventArgs.CommandArgument), causesValidation);
				}
				else if (StringUtil.EqualsIgnoreCase(commandName, "Cancel"))
				{
					this.HandleCancel(this.GetRowIndex(gridViewCommandEventArgs.Row, (string)gridViewCommandEventArgs.CommandArgument));
				}
				else if (StringUtil.EqualsIgnoreCase(commandName, "Delete"))
				{
					this.HandleDelete(gridViewCommandEventArgs.Row, this.GetRowIndex(gridViewCommandEventArgs.Row, (string)gridViewCommandEventArgs.CommandArgument));
				}
			}
			return flag;
		}

		// Token: 0x060046AA RID: 18090 RVA: 0x00121B6C File Offset: 0x00120B6C
		private void HandlePage(int newPage)
		{
			if (!this.AllowPaging)
			{
				return;
			}
			bool isBoundUsingDataSourceID = base.IsBoundUsingDataSourceID;
			GridViewPageEventArgs gridViewPageEventArgs = new GridViewPageEventArgs(newPage);
			this.OnPageIndexChanging(gridViewPageEventArgs);
			if (gridViewPageEventArgs.Cancel)
			{
				return;
			}
			if (isBoundUsingDataSourceID)
			{
				if (gridViewPageEventArgs.NewPageIndex <= -1)
				{
					return;
				}
				if (gridViewPageEventArgs.NewPageIndex >= this.PageCount && this._pageIndex == this.PageCount - 1)
				{
					return;
				}
				this.ClearDataKeys();
				this.EditIndex = -1;
				this._pageIndex = gridViewPageEventArgs.NewPageIndex;
			}
			this.OnPageIndexChanged(EventArgs.Empty);
			base.RequiresDataBinding = true;
		}

		// Token: 0x060046AB RID: 18091 RVA: 0x00121BFC File Offset: 0x00120BFC
		private void HandleSelect(int rowIndex)
		{
			GridViewSelectEventArgs gridViewSelectEventArgs = new GridViewSelectEventArgs(rowIndex);
			this.OnSelectedIndexChanging(gridViewSelectEventArgs);
			if (gridViewSelectEventArgs.Cancel)
			{
				return;
			}
			this.SelectedIndex = gridViewSelectEventArgs.NewSelectedIndex;
			this.OnSelectedIndexChanged(EventArgs.Empty);
		}

		// Token: 0x060046AC RID: 18092 RVA: 0x00121C38 File Offset: 0x00120C38
		private void HandleSort(string sortExpression)
		{
			if (!this.AllowSorting)
			{
				return;
			}
			SortDirection sortDirection = SortDirection.Ascending;
			if (this.SortExpressionInternal == sortExpression && this.SortDirectionInternal == SortDirection.Ascending)
			{
				sortDirection = SortDirection.Descending;
			}
			this.HandleSort(sortExpression, sortDirection);
		}

		// Token: 0x060046AD RID: 18093 RVA: 0x00121C70 File Offset: 0x00120C70
		private void HandleSort(string sortExpression, SortDirection sortDirection)
		{
			bool isBoundUsingDataSourceID = base.IsBoundUsingDataSourceID;
			GridViewSortEventArgs gridViewSortEventArgs = new GridViewSortEventArgs(sortExpression, sortDirection);
			this.OnSorting(gridViewSortEventArgs);
			if (gridViewSortEventArgs.Cancel)
			{
				return;
			}
			if (isBoundUsingDataSourceID)
			{
				this.ClearDataKeys();
				if (this.GetData() == null)
				{
					throw new HttpException(SR.GetString("GridView_DataSourceReturnedNullView", new object[] { this.ID }));
				}
				this.EditIndex = -1;
				this.SortExpressionInternal = gridViewSortEventArgs.SortExpression;
				this.SortDirectionInternal = gridViewSortEventArgs.SortDirection;
				this._pageIndex = 0;
			}
			this.OnSorted(EventArgs.Empty);
			base.RequiresDataBinding = true;
		}

		// Token: 0x060046AE RID: 18094 RVA: 0x00121D08 File Offset: 0x00120D08
		private void HandleUpdate(GridViewRow row, int rowIndex, bool causesValidation)
		{
			if (causesValidation && this.Page != null && !this.Page.IsValid)
			{
				return;
			}
			DataSourceView dataSourceView = null;
			bool isBoundUsingDataSourceID = base.IsBoundUsingDataSourceID;
			if (isBoundUsingDataSourceID)
			{
				dataSourceView = this.GetData();
				if (dataSourceView == null)
				{
					throw new HttpException(SR.GetString("GridView_DataSourceReturnedNullView", new object[] { this.ID }));
				}
			}
			GridViewUpdateEventArgs gridViewUpdateEventArgs = new GridViewUpdateEventArgs(rowIndex);
			if (isBoundUsingDataSourceID)
			{
				foreach (object obj in this.BoundFieldValues)
				{
					DictionaryEntry dictionaryEntry = (DictionaryEntry)obj;
					gridViewUpdateEventArgs.OldValues.Add(dictionaryEntry.Key, dictionaryEntry.Value);
				}
				if (this.DataKeys.Count > rowIndex)
				{
					foreach (object obj2 in this.DataKeys[rowIndex].Values)
					{
						DictionaryEntry dictionaryEntry2 = (DictionaryEntry)obj2;
						gridViewUpdateEventArgs.Keys.Add(dictionaryEntry2.Key, dictionaryEntry2.Value);
					}
				}
				if (row == null && this.Rows.Count > rowIndex)
				{
					row = this.Rows[rowIndex];
				}
				if (row != null)
				{
					this.ExtractRowValues(gridViewUpdateEventArgs.NewValues, row, false, true);
				}
			}
			this.OnRowUpdating(gridViewUpdateEventArgs);
			if (gridViewUpdateEventArgs.Cancel)
			{
				return;
			}
			if (isBoundUsingDataSourceID)
			{
				this._updateKeys = gridViewUpdateEventArgs.Keys;
				this._updateOldValues = gridViewUpdateEventArgs.OldValues;
				this._updateNewValues = gridViewUpdateEventArgs.NewValues;
				dataSourceView.Update(gridViewUpdateEventArgs.Keys, gridViewUpdateEventArgs.NewValues, gridViewUpdateEventArgs.OldValues, new DataSourceViewOperationCallback(this.HandleUpdateCallback));
			}
		}

		// Token: 0x060046AF RID: 18095 RVA: 0x00121EE4 File Offset: 0x00120EE4
		private bool HandleUpdateCallback(int affectedRows, Exception ex)
		{
			GridViewUpdatedEventArgs gridViewUpdatedEventArgs = new GridViewUpdatedEventArgs(affectedRows, ex);
			gridViewUpdatedEventArgs.SetKeys(this._updateKeys);
			gridViewUpdatedEventArgs.SetOldValues(this._updateOldValues);
			gridViewUpdatedEventArgs.SetNewValues(this._updateNewValues);
			this.OnRowUpdated(gridViewUpdatedEventArgs);
			this._updateKeys = null;
			this._updateOldValues = null;
			this._updateNewValues = null;
			if (ex != null && !gridViewUpdatedEventArgs.ExceptionHandled)
			{
				if (this.PageIsValidAfterModelException())
				{
					return false;
				}
				gridViewUpdatedEventArgs.KeepInEditMode = true;
			}
			if (!gridViewUpdatedEventArgs.KeepInEditMode)
			{
				this.EditIndex = -1;
				base.RequiresDataBinding = true;
			}
			return true;
		}

		// Token: 0x060046B0 RID: 18096 RVA: 0x00121F6C File Offset: 0x00120F6C
		protected virtual void InitializePager(GridViewRow row, int columnSpan, PagedDataSource pagedDataSource)
		{
			TableCell tableCell = new TableCell();
			if (columnSpan > 1)
			{
				tableCell.ColumnSpan = columnSpan;
			}
			PagerSettings pagerSettings = this.PagerSettings;
			if (this._pagerTemplate != null)
			{
				this.InitializeTemplateRow(row, columnSpan);
				return;
			}
			PagerTable pagerTable = new PagerTable();
			TableRow tableRow = new TableRow();
			switch (pagerSettings.Mode)
			{
			case PagerButtons.NextPrevious:
				this.CreateNextPrevPager(tableRow, pagedDataSource, false);
				break;
			case PagerButtons.Numeric:
				this.CreateNumericPager(tableRow, pagedDataSource, false);
				break;
			case PagerButtons.NextPreviousFirstLast:
				this.CreateNextPrevPager(tableRow, pagedDataSource, true);
				break;
			case PagerButtons.NumericFirstLast:
				this.CreateNumericPager(tableRow, pagedDataSource, true);
				break;
			}
			tableCell.Controls.Add(pagerTable);
			pagerTable.Rows.Add(tableRow);
			row.Cells.Add(tableCell);
		}

		// Token: 0x060046B1 RID: 18097 RVA: 0x00122020 File Offset: 0x00121020
		protected virtual void InitializeRow(GridViewRow row, DataControlField[] fields)
		{
			DataControlRowType rowType = row.RowType;
			DataControlRowState rowState = row.RowState;
			int rowIndex = row.RowIndex;
			bool flag = false;
			if (rowType == DataControlRowType.EmptyDataRow)
			{
				this.InitializeTemplateRow(row, fields.Length);
				return;
			}
			TableCellCollection cells = row.Cells;
			string rowHeaderColumn = this.RowHeaderColumn;
			if (rowType == DataControlRowType.Header)
			{
				flag = this.UseAccessibleHeader;
			}
			for (int i = 0; i < fields.Length; i++)
			{
				DataControlFieldCell dataControlFieldCell;
				if (rowType == DataControlRowType.Header && flag)
				{
					dataControlFieldCell = new DataControlFieldHeaderCell(fields[i]);
					((DataControlFieldHeaderCell)dataControlFieldCell).Scope = TableHeaderScope.Column;
					((DataControlFieldHeaderCell)dataControlFieldCell).AbbreviatedText = fields[i].AccessibleHeaderText;
				}
				else
				{
					BoundField boundField = fields[i] as BoundField;
					if (rowHeaderColumn.Length > 0 && boundField != null && boundField.DataField == rowHeaderColumn)
					{
						dataControlFieldCell = new DataControlFieldHeaderCell(fields[i]);
						((DataControlFieldHeaderCell)dataControlFieldCell).Scope = TableHeaderScope.Row;
					}
					else
					{
						dataControlFieldCell = new DataControlFieldCell(fields[i]);
					}
				}
				DataControlCellType dataControlCellType;
				switch (rowType)
				{
				case DataControlRowType.Header:
					dataControlCellType = DataControlCellType.Header;
					break;
				case DataControlRowType.Footer:
					dataControlCellType = DataControlCellType.Footer;
					break;
				default:
					dataControlCellType = DataControlCellType.DataCell;
					break;
				}
				fields[i].InitializeCell(dataControlFieldCell, dataControlCellType, rowState, rowIndex);
				cells.Add(dataControlFieldCell);
			}
		}

		// Token: 0x060046B2 RID: 18098 RVA: 0x00122144 File Offset: 0x00121144
		private void InitializeTemplateRow(GridViewRow row, int columnSpan)
		{
			TableCell tableCell = null;
			ITemplate template = null;
			switch (row.RowType)
			{
			case DataControlRowType.Pager:
				if (this._pagerTemplate != null)
				{
					tableCell = new TableCell();
					template = this._pagerTemplate;
				}
				break;
			case DataControlRowType.EmptyDataRow:
				if (this._emptyDataTemplate != null)
				{
					tableCell = new TableCell();
					template = this._emptyDataTemplate;
				}
				else
				{
					tableCell = new TableCell();
					string emptyDataText = this.EmptyDataText;
					if (emptyDataText.Length > 0)
					{
						tableCell.Text = emptyDataText;
					}
				}
				break;
			}
			if (tableCell != null)
			{
				if (columnSpan > 1)
				{
					tableCell.ColumnSpan = columnSpan;
				}
				if (template != null)
				{
					template.InstantiateIn(tableCell);
				}
				row.Cells.Add(tableCell);
			}
		}

		// Token: 0x060046B3 RID: 18099 RVA: 0x001221E0 File Offset: 0x001211E0
		protected internal override void LoadControlState(object savedState)
		{
			this._editIndex = -1;
			this._pageIndex = 0;
			this._selectedIndex = -1;
			this._sortExpression = string.Empty;
			this._sortDirection = SortDirection.Ascending;
			this._dataKeyNames = new string[0];
			this._pageCount = -1;
			object[] array = savedState as object[];
			if (array != null)
			{
				base.LoadControlState(array[0]);
				if (array[1] != null)
				{
					this._editIndex = (int)array[1];
				}
				if (array[2] != null)
				{
					this._pageIndex = (int)array[2];
				}
				if (array[3] != null)
				{
					this._selectedIndex = (int)array[3];
				}
				if (array[4] != null)
				{
					this._sortExpression = (string)array[4];
				}
				if (array[5] != null)
				{
					this._sortDirection = (SortDirection)array[5];
				}
				if (array[6] != null)
				{
					this._dataKeyNames = (string[])array[6];
				}
				if (array[7] != null)
				{
					this.LoadDataKeysState(array[7]);
				}
				if (array[8] != null)
				{
					this._pageCount = (int)array[8];
				}
				if (array[9] != null && this._dataKeyNames != null && this._dataKeyNames.Length > 0)
				{
					this._persistedDataKey = new DataKey(new OrderedDictionary(this._dataKeyNames.Length), this._dataKeyNames);
					((IStateManager)this._persistedDataKey).LoadViewState(array[9]);
					return;
				}
			}
			else
			{
				base.LoadControlState(null);
			}
		}

		// Token: 0x060046B4 RID: 18100 RVA: 0x00122320 File Offset: 0x00121320
		private void LoadDataKeysState(object state)
		{
			if (state != null)
			{
				object[] array = (object[])state;
				string[] dataKeyNamesInternal = this.DataKeyNamesInternal;
				int num = dataKeyNamesInternal.Length;
				this.ClearDataKeys();
				for (int i = 0; i < array.Length; i++)
				{
					this.DataKeysArrayList.Add(new DataKey(new OrderedDictionary(num), dataKeyNamesInternal));
					((IStateManager)this.DataKeysArrayList[i]).LoadViewState(array[i]);
				}
			}
		}

		// Token: 0x060046B5 RID: 18101 RVA: 0x00122388 File Offset: 0x00121388
		private bool LoadHiddenFieldState(string pageIndex, string sortDirection, string sortExpressionSerialized, string dataKeysSerialized)
		{
			bool flag = false;
			int num = int.Parse(pageIndex, CultureInfo.InvariantCulture);
			SortDirection sortDirection2 = (SortDirection)int.Parse(sortDirection, CultureInfo.InvariantCulture);
			string text = string.Empty;
			object obj = null;
			if (!string.IsNullOrEmpty(sortExpressionSerialized) || !string.IsNullOrEmpty(dataKeysSerialized))
			{
				if (this.Page == null)
				{
					throw new InvalidOperationException();
				}
				IStateFormatter stateFormatter = this.StateFormatter;
				if (!string.IsNullOrEmpty(sortExpressionSerialized))
				{
					text = (string)stateFormatter.Deserialize(sortExpressionSerialized);
				}
				if (!string.IsNullOrEmpty(dataKeysSerialized))
				{
					obj = stateFormatter.Deserialize(dataKeysSerialized);
				}
			}
			if (this._pageIndex != num || this._sortDirection != sortDirection2 || this._sortExpression != text)
			{
				flag = true;
				this._pageIndex = num;
				this._sortExpression = text;
				this._sortDirection = sortDirection2;
				if (obj != null)
				{
					if (this._dataKeysArrayList != null)
					{
						this._dataKeysArrayList.Clear();
					}
					this.LoadDataKeysState(obj);
				}
			}
			return flag;
		}

		// Token: 0x060046B6 RID: 18102 RVA: 0x00122464 File Offset: 0x00121464
		protected override void LoadViewState(object savedState)
		{
			if (savedState != null)
			{
				object[] array = (object[])savedState;
				base.LoadViewState(array[0]);
				if (array[1] != null)
				{
					((IStateManager)this.Columns).LoadViewState(array[1]);
				}
				if (array[2] != null)
				{
					((IStateManager)this.PagerStyle).LoadViewState(array[2]);
				}
				if (array[3] != null)
				{
					((IStateManager)this.HeaderStyle).LoadViewState(array[3]);
				}
				if (array[4] != null)
				{
					((IStateManager)this.FooterStyle).LoadViewState(array[4]);
				}
				if (array[5] != null)
				{
					((IStateManager)this.RowStyle).LoadViewState(array[5]);
				}
				if (array[6] != null)
				{
					((IStateManager)this.AlternatingRowStyle).LoadViewState(array[6]);
				}
				if (array[7] != null)
				{
					((IStateManager)this.SelectedRowStyle).LoadViewState(array[7]);
				}
				if (array[8] != null)
				{
					((IStateManager)this.EditRowStyle).LoadViewState(array[8]);
				}
				if (array[9] != null)
				{
					((IStateManager)this.PagerSettings).LoadViewState(array[9]);
				}
				if (array[10] != null)
				{
					OrderedDictionaryStateHelper.LoadViewState((OrderedDictionary)this.BoundFieldValues, (ArrayList)array[10]);
				}
				if (array[11] != null)
				{
					((IStateManager)base.ControlStyle).LoadViewState(array[11]);
				}
				if (array[12] != null)
				{
					object[] array2 = (object[])array[12];
					int num = array2.Length;
					this._autoGenFieldProps = new ArrayList();
					for (int i = 0; i < num; i++)
					{
						AutoGeneratedFieldProperties autoGeneratedFieldProperties = new AutoGeneratedFieldProperties();
						((IStateManager)autoGeneratedFieldProperties).TrackViewState();
						((IStateManager)autoGeneratedFieldProperties).LoadViewState(array2[i]);
						this._autoGenFieldProps.Add(autoGeneratedFieldProperties);
					}
					return;
				}
			}
			else
			{
				base.LoadViewState(null);
			}
		}

		// Token: 0x060046B7 RID: 18103 RVA: 0x001225C4 File Offset: 0x001215C4
		protected override bool OnBubbleEvent(object source, EventArgs e)
		{
			bool flag = false;
			string text = string.Empty;
			GridViewCommandEventArgs gridViewCommandEventArgs = e as GridViewCommandEventArgs;
			if (gridViewCommandEventArgs != null)
			{
				IButtonControl buttonControl = gridViewCommandEventArgs.CommandSource as IButtonControl;
				if (buttonControl != null)
				{
					flag = buttonControl.CausesValidation;
					text = buttonControl.ValidationGroup;
				}
			}
			return this.HandleEvent(e, flag, text);
		}

		// Token: 0x060046B8 RID: 18104 RVA: 0x00122609 File Offset: 0x00121609
		protected override void OnDataPropertyChanged()
		{
			this._storedDataValid = false;
			base.OnDataPropertyChanged();
		}

		// Token: 0x060046B9 RID: 18105 RVA: 0x00122618 File Offset: 0x00121618
		protected override void OnDataSourceViewChanged(object sender, EventArgs e)
		{
			this.ClearDataKeys();
			base.OnDataSourceViewChanged(sender, e);
		}

		// Token: 0x060046BA RID: 18106 RVA: 0x00122628 File Offset: 0x00121628
		private void OnFieldsChanged(object sender, EventArgs e)
		{
			if (base.Initialized)
			{
				base.RequiresDataBinding = true;
			}
		}

		// Token: 0x060046BB RID: 18107 RVA: 0x00122639 File Offset: 0x00121639
		protected internal override void OnInit(EventArgs e)
		{
			base.OnInit(e);
			if (this.Page != null)
			{
				if (this.DataKeyNames.Length > 0 && !this.AutoGenerateColumns)
				{
					this.Page.RegisterRequiresViewStateEncryption();
				}
				this.Page.RegisterRequiresControlState(this);
			}
		}

		// Token: 0x060046BC RID: 18108 RVA: 0x00122674 File Offset: 0x00121674
		protected virtual void OnPageIndexChanged(EventArgs e)
		{
			EventHandler eventHandler = (EventHandler)base.Events[GridView.EventPageIndexChanged];
			if (eventHandler != null)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x060046BD RID: 18109 RVA: 0x001226A4 File Offset: 0x001216A4
		protected override void OnPagePreLoad(object sender, EventArgs e)
		{
			if (this.Page != null && !this.Page.IsCallback && this.Page.RequestValueCollection != null)
			{
				string text = "__gv" + this.ClientID + "__hidden";
				string text2 = this.Page.RequestValueCollection[text];
				if (!string.IsNullOrEmpty(text2) && this.ParseHiddenFieldState(text2))
				{
					this._editIndex = -1;
					base.RequiresDataBinding = true;
				}
			}
			base.OnPagePreLoad(sender, e);
		}

		// Token: 0x060046BE RID: 18110 RVA: 0x00122722 File Offset: 0x00121722
		private void OnPagerPropertyChanged(object sender, EventArgs e)
		{
			if (base.Initialized)
			{
				base.RequiresDataBinding = true;
			}
		}

		// Token: 0x060046BF RID: 18111 RVA: 0x00122734 File Offset: 0x00121734
		protected virtual void OnPageIndexChanging(GridViewPageEventArgs e)
		{
			bool isBoundUsingDataSourceID = base.IsBoundUsingDataSourceID;
			GridViewPageEventHandler gridViewPageEventHandler = (GridViewPageEventHandler)base.Events[GridView.EventPageIndexChanging];
			if (gridViewPageEventHandler != null)
			{
				gridViewPageEventHandler(this, e);
				return;
			}
			if (!isBoundUsingDataSourceID && !e.Cancel)
			{
				throw new HttpException(SR.GetString("GridView_UnhandledEvent", new object[] { this.ID, "PageIndexChanging" }));
			}
		}

		// Token: 0x060046C0 RID: 18112 RVA: 0x001227A0 File Offset: 0x001217A0
		protected internal override void OnPreRender(EventArgs e)
		{
			base.OnPreRender(e);
			if (this.DetermineRenderClientScript() && this.Page != null)
			{
				string text = "__gv" + this.ClientID;
				ClientScriptManager clientScript = this.Page.ClientScript;
				clientScript.RegisterClientScriptResource(typeof(GridView), "GridView.js");
				string callbackEventReference = clientScript.GetCallbackEventReference(this, text + ".getHiddenFieldContents(arg)", "GridView_OnCallback", text);
				string text2 = text + "__hidden";
				clientScript.RegisterHiddenField(text2, string.Empty);
				IStateFormatter stateFormatter = this.StateFormatter;
				string text3 = stateFormatter.Serialize(this.SortExpression);
				string text4 = string.Format(CultureInfo.InvariantCulture, "\r\nvar {0} = new GridView();\r\n{0}.stateField = document.getElementById('{1}');\r\n{0}.panelElement = document.getElementById('{0}__div');\r\n{0}.pageIndex = {3};\r\n{0}.sortExpression = \"{4}\";\r\n{0}.sortDirection = {5};\r\n{0}.setStateField();\r\n{0}.callback = function(arg) {{\r\n    {2};\r\n}};", new object[]
				{
					text,
					text2,
					callbackEventReference,
					this.PageIndex,
					text3,
					(int)this.SortDirection
				});
				clientScript.RegisterStartupScript(typeof(GridView), text, text4, true);
			}
		}

		// Token: 0x060046C1 RID: 18113 RVA: 0x001228A8 File Offset: 0x001218A8
		protected virtual void OnRowCancelingEdit(GridViewCancelEditEventArgs e)
		{
			bool isBoundUsingDataSourceID = base.IsBoundUsingDataSourceID;
			GridViewCancelEditEventHandler gridViewCancelEditEventHandler = (GridViewCancelEditEventHandler)base.Events[GridView.EventRowCancelingEdit];
			if (gridViewCancelEditEventHandler != null)
			{
				gridViewCancelEditEventHandler(this, e);
				return;
			}
			if (!isBoundUsingDataSourceID && !e.Cancel)
			{
				throw new HttpException(SR.GetString("GridView_UnhandledEvent", new object[] { this.ID, "RowCancelingEdit" }));
			}
		}

		// Token: 0x060046C2 RID: 18114 RVA: 0x00122914 File Offset: 0x00121914
		protected virtual void OnRowCommand(GridViewCommandEventArgs e)
		{
			GridViewCommandEventHandler gridViewCommandEventHandler = (GridViewCommandEventHandler)base.Events[GridView.EventRowCommand];
			if (gridViewCommandEventHandler != null)
			{
				gridViewCommandEventHandler(this, e);
			}
		}

		// Token: 0x060046C3 RID: 18115 RVA: 0x00122944 File Offset: 0x00121944
		protected virtual void OnRowCreated(GridViewRowEventArgs e)
		{
			GridViewRowEventHandler gridViewRowEventHandler = (GridViewRowEventHandler)base.Events[GridView.EventRowCreated];
			if (gridViewRowEventHandler != null)
			{
				gridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x060046C4 RID: 18116 RVA: 0x00122974 File Offset: 0x00121974
		protected virtual void OnRowDataBound(GridViewRowEventArgs e)
		{
			GridViewRowEventHandler gridViewRowEventHandler = (GridViewRowEventHandler)base.Events[GridView.EventRowDataBound];
			if (gridViewRowEventHandler != null)
			{
				gridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x060046C5 RID: 18117 RVA: 0x001229A4 File Offset: 0x001219A4
		protected virtual void OnRowDeleted(GridViewDeletedEventArgs e)
		{
			GridViewDeletedEventHandler gridViewDeletedEventHandler = (GridViewDeletedEventHandler)base.Events[GridView.EventRowDeleted];
			if (gridViewDeletedEventHandler != null)
			{
				gridViewDeletedEventHandler(this, e);
			}
		}

		// Token: 0x060046C6 RID: 18118 RVA: 0x001229D4 File Offset: 0x001219D4
		protected virtual void OnRowDeleting(GridViewDeleteEventArgs e)
		{
			bool isBoundUsingDataSourceID = base.IsBoundUsingDataSourceID;
			GridViewDeleteEventHandler gridViewDeleteEventHandler = (GridViewDeleteEventHandler)base.Events[GridView.EventRowDeleting];
			if (gridViewDeleteEventHandler != null)
			{
				gridViewDeleteEventHandler(this, e);
				return;
			}
			if (!isBoundUsingDataSourceID && !e.Cancel)
			{
				throw new HttpException(SR.GetString("GridView_UnhandledEvent", new object[] { this.ID, "RowDeleting" }));
			}
		}

		// Token: 0x060046C7 RID: 18119 RVA: 0x00122A40 File Offset: 0x00121A40
		protected virtual void OnRowEditing(GridViewEditEventArgs e)
		{
			bool isBoundUsingDataSourceID = base.IsBoundUsingDataSourceID;
			GridViewEditEventHandler gridViewEditEventHandler = (GridViewEditEventHandler)base.Events[GridView.EventRowEditing];
			if (gridViewEditEventHandler != null)
			{
				gridViewEditEventHandler(this, e);
				return;
			}
			if (!isBoundUsingDataSourceID && !e.Cancel)
			{
				throw new HttpException(SR.GetString("GridView_UnhandledEvent", new object[] { this.ID, "RowEditing" }));
			}
		}

		// Token: 0x060046C8 RID: 18120 RVA: 0x00122AAC File Offset: 0x00121AAC
		protected virtual void OnRowUpdated(GridViewUpdatedEventArgs e)
		{
			GridViewUpdatedEventHandler gridViewUpdatedEventHandler = (GridViewUpdatedEventHandler)base.Events[GridView.EventRowUpdated];
			if (gridViewUpdatedEventHandler != null)
			{
				gridViewUpdatedEventHandler(this, e);
			}
		}

		// Token: 0x060046C9 RID: 18121 RVA: 0x00122ADC File Offset: 0x00121ADC
		protected virtual void OnRowUpdating(GridViewUpdateEventArgs e)
		{
			bool isBoundUsingDataSourceID = base.IsBoundUsingDataSourceID;
			GridViewUpdateEventHandler gridViewUpdateEventHandler = (GridViewUpdateEventHandler)base.Events[GridView.EventRowUpdating];
			if (gridViewUpdateEventHandler != null)
			{
				gridViewUpdateEventHandler(this, e);
				return;
			}
			if (!isBoundUsingDataSourceID && !e.Cancel)
			{
				throw new HttpException(SR.GetString("GridView_UnhandledEvent", new object[] { this.ID, "RowUpdating" }));
			}
		}

		// Token: 0x060046CA RID: 18122 RVA: 0x00122B48 File Offset: 0x00121B48
		protected virtual void OnSelectedIndexChanged(EventArgs e)
		{
			if (this.DataKeyNamesInternal.Length > 0)
			{
				this.SelectedPersistedDataKey = this.SelectedDataKey;
			}
			EventHandler eventHandler = (EventHandler)base.Events[GridView.EventSelectedIndexChanged];
			if (eventHandler != null)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x060046CB RID: 18123 RVA: 0x00122B90 File Offset: 0x00121B90
		protected virtual void OnSelectedIndexChanging(GridViewSelectEventArgs e)
		{
			GridViewSelectEventHandler gridViewSelectEventHandler = (GridViewSelectEventHandler)base.Events[GridView.EventSelectedIndexChanging];
			if (gridViewSelectEventHandler != null)
			{
				gridViewSelectEventHandler(this, e);
			}
		}

		// Token: 0x060046CC RID: 18124 RVA: 0x00122BC0 File Offset: 0x00121BC0
		protected virtual void OnSorted(EventArgs e)
		{
			EventHandler eventHandler = (EventHandler)base.Events[GridView.EventSorted];
			if (eventHandler != null)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x060046CD RID: 18125 RVA: 0x00122BF0 File Offset: 0x00121BF0
		protected virtual void OnSorting(GridViewSortEventArgs e)
		{
			bool isBoundUsingDataSourceID = base.IsBoundUsingDataSourceID;
			GridViewSortEventHandler gridViewSortEventHandler = (GridViewSortEventHandler)base.Events[GridView.EventSorting];
			if (gridViewSortEventHandler != null)
			{
				gridViewSortEventHandler(this, e);
				return;
			}
			if (!isBoundUsingDataSourceID && !e.Cancel)
			{
				throw new HttpException(SR.GetString("GridView_UnhandledEvent", new object[] { this.ID, "Sorting" }));
			}
		}

		// Token: 0x060046CE RID: 18126 RVA: 0x00122C5A File Offset: 0x00121C5A
		private bool PageIsValidAfterModelException()
		{
			if (this._modelValidationGroup == null)
			{
				return true;
			}
			this.Page.Validate(this._modelValidationGroup);
			return this.Page.IsValid;
		}

		// Token: 0x060046CF RID: 18127 RVA: 0x00122C84 File Offset: 0x00121C84
		private bool ParseHiddenFieldState(string state)
		{
			string[] array = state.Split(new char[] { '|' });
			return array.Length == 4 && this.LoadHiddenFieldState(array[0], array[1], array[2], array[3]);
		}

		// Token: 0x060046D0 RID: 18128 RVA: 0x00122CC0 File Offset: 0x00121CC0
		protected internal override void PerformDataBinding(IEnumerable data)
		{
			base.PerformDataBinding(data);
			int editIndex = this.EditIndex;
			if (base.IsBoundUsingDataSourceID && editIndex != -1 && editIndex < this.Rows.Count && base.IsViewStateEnabled)
			{
				this.BoundFieldValues.Clear();
				this.ExtractRowValues(this.BoundFieldValues, this.Rows[editIndex], true, false);
			}
			if (this.SelectedPersistedDataKey == null)
			{
				DataKeyArray dataKeys = this.DataKeys;
				if (dataKeys != null && dataKeys.Count > 0)
				{
					this.SelectedPersistedDataKey = dataKeys[0];
				}
			}
		}

		// Token: 0x060046D1 RID: 18129 RVA: 0x00122D4C File Offset: 0x00121D4C
		protected internal virtual void PrepareControlHierarchy()
		{
			if (this.Controls.Count == 0)
			{
				return;
			}
			bool controlStyleCreated = base.ControlStyleCreated;
			Table table = (Table)this.Controls[0];
			table.CopyBaseAttributes(this);
			if (controlStyleCreated && !base.ControlStyle.IsEmpty)
			{
				table.ApplyStyle(base.ControlStyle);
			}
			else
			{
				table.GridLines = GridLines.Both;
				table.CellSpacing = 0;
			}
			table.Caption = this.Caption;
			table.CaptionAlign = this.CaptionAlign;
			TableRowCollection rows = table.Rows;
			Style style = null;
			if (this._alternatingRowStyle != null)
			{
				style = new TableItemStyle();
				style.CopyFrom(this._rowStyle);
				style.CopyFrom(this._alternatingRowStyle);
			}
			else
			{
				style = this._rowStyle;
			}
			int num = 0;
			bool flag = true;
			foreach (object obj in rows)
			{
				GridViewRow gridViewRow = (GridViewRow)obj;
				switch (gridViewRow.RowType)
				{
				case DataControlRowType.Header:
					if (this.ShowHeader && this._headerStyle != null)
					{
						gridViewRow.MergeStyle(this._headerStyle);
					}
					break;
				case DataControlRowType.Footer:
					if (this.ShowFooter && this._footerStyle != null)
					{
						gridViewRow.MergeStyle(this._footerStyle);
					}
					break;
				case DataControlRowType.DataRow:
					if ((gridViewRow.RowState & DataControlRowState.Edit) != DataControlRowState.Normal)
					{
						Style style2 = new TableItemStyle();
						if (gridViewRow.RowIndex % 2 != 0)
						{
							style2.CopyFrom(style);
						}
						else
						{
							style2.CopyFrom(this._rowStyle);
						}
						if (gridViewRow.RowIndex == this.SelectedIndex)
						{
							style2.CopyFrom(this._selectedRowStyle);
						}
						style2.CopyFrom(this._editRowStyle);
						gridViewRow.MergeStyle(style2);
					}
					else if ((gridViewRow.RowState & DataControlRowState.Selected) != DataControlRowState.Normal)
					{
						Style style3 = new TableItemStyle();
						if (gridViewRow.RowIndex % 2 != 0)
						{
							style3.CopyFrom(style);
						}
						else
						{
							style3.CopyFrom(this._rowStyle);
						}
						style3.CopyFrom(this._selectedRowStyle);
						gridViewRow.MergeStyle(style3);
					}
					else if ((gridViewRow.RowState & DataControlRowState.Alternate) != DataControlRowState.Normal)
					{
						gridViewRow.MergeStyle(style);
					}
					else
					{
						gridViewRow.MergeStyle(this._rowStyle);
					}
					break;
				case DataControlRowType.Pager:
					if (gridViewRow.Visible && this._pagerStyle != null)
					{
						gridViewRow.MergeStyle(this._pagerStyle);
					}
					break;
				case DataControlRowType.EmptyDataRow:
					gridViewRow.MergeStyle(this._emptyDataRowStyle);
					break;
				}
				if (gridViewRow.RowType != DataControlRowType.Pager && gridViewRow.RowType != DataControlRowType.EmptyDataRow)
				{
					foreach (object obj2 in gridViewRow.Cells)
					{
						TableCell tableCell = (TableCell)obj2;
						DataControlFieldCell dataControlFieldCell = tableCell as DataControlFieldCell;
						if (dataControlFieldCell != null)
						{
							DataControlField containingField = dataControlFieldCell.ContainingField;
							if (containingField != null)
							{
								if (!containingField.Visible)
								{
									tableCell.Visible = false;
								}
								else
								{
									if (gridViewRow.RowType == DataControlRowType.DataRow && flag)
									{
										num++;
									}
									Style style4;
									switch (gridViewRow.RowType)
									{
									case DataControlRowType.Header:
										style4 = containingField.HeaderStyleInternal;
										break;
									case DataControlRowType.Footer:
										style4 = containingField.FooterStyleInternal;
										break;
									default:
										style4 = containingField.ItemStyleInternal;
										break;
									}
									if (style4 != null)
									{
										tableCell.MergeStyle(style4);
									}
									if (gridViewRow.RowType == DataControlRowType.DataRow)
									{
										foreach (object obj3 in tableCell.Controls)
										{
											Control control = (Control)obj3;
											WebControl webControl = control as WebControl;
											Style controlStyleInternal = containingField.ControlStyleInternal;
											if (webControl != null && controlStyleInternal != null && !controlStyleInternal.IsEmpty)
											{
												webControl.ControlStyle.CopyFrom(controlStyleInternal);
											}
										}
									}
								}
							}
						}
					}
					if (gridViewRow.RowType == DataControlRowType.DataRow)
					{
						flag = false;
					}
				}
			}
			if (this.Rows.Count > 0 && num != this.Rows[0].Cells.Count)
			{
				if (this._topPagerRow != null && this._topPagerRow.Cells.Count > 0)
				{
					this._topPagerRow.Cells[0].ColumnSpan = num;
				}
				if (this._bottomPagerRow != null && this._bottomPagerRow.Cells.Count > 0)
				{
					this._bottomPagerRow.Cells[0].ColumnSpan = num;
				}
			}
		}

		// Token: 0x060046D2 RID: 18130 RVA: 0x00123228 File Offset: 0x00122228
		protected virtual void RaiseCallbackEvent(string eventArgument)
		{
			string[] array = eventArgument.Split(new char[] { '|' });
			IStateFormatter stateFormatter = this.StateFormatter;
			base.ValidateEvent(this.UniqueID, string.Concat(new string[]
			{
				"\"",
				array[0],
				"|",
				array[1],
				"|",
				array[2],
				"|",
				array[3],
				"\""
			}));
			this.LoadHiddenFieldState(array[4], array[5], array[6], array[7]);
			int num = int.Parse(array[0], CultureInfo.InvariantCulture);
			string text = array[2];
			int.Parse(array[1], CultureInfo.InvariantCulture);
			if (num == this.PageIndex)
			{
				SortDirection sortDirection = SortDirection.Ascending;
				string text2 = (string)stateFormatter.Deserialize(text);
				if (text2 == this.SortExpressionInternal && this.SortDirectionInternal == SortDirection.Ascending)
				{
					sortDirection = SortDirection.Descending;
				}
				this.SortExpressionInternal = text2;
				this.SortDirectionInternal = sortDirection;
				this._pageIndex = 0;
			}
			else
			{
				this.EditIndex = -1;
				this._pageIndex = num;
			}
			this.DataBind();
		}

		// Token: 0x060046D3 RID: 18131 RVA: 0x0012334C File Offset: 0x0012234C
		protected virtual void RaisePostBackEvent(string eventArgument)
		{
			base.ValidateEvent(this.UniqueID, eventArgument);
			int num = eventArgument.IndexOf('$');
			if (num < 0)
			{
				return;
			}
			CommandEventArgs commandEventArgs = new CommandEventArgs(eventArgument.Substring(0, num), eventArgument.Substring(num + 1));
			GridViewCommandEventArgs gridViewCommandEventArgs = new GridViewCommandEventArgs(null, this, commandEventArgs);
			this.HandleEvent(gridViewCommandEventArgs, false, string.Empty);
		}

		// Token: 0x060046D4 RID: 18132 RVA: 0x001233A2 File Offset: 0x001223A2
		protected internal override void Render(HtmlTextWriter writer)
		{
			this.Render(writer, !base.DesignMode);
		}

		// Token: 0x060046D5 RID: 18133 RVA: 0x001233B4 File Offset: 0x001223B4
		private void Render(HtmlTextWriter writer, bool renderPanel)
		{
			if (this.Page != null)
			{
				this.Page.VerifyRenderingInServerForm(this);
			}
			this.PrepareControlHierarchy();
			if (renderPanel)
			{
				string clientID = this.ClientID;
				if (this.DetermineRenderClientScript())
				{
					if (clientID == null)
					{
						throw new HttpException(SR.GetString("GridView_MustBeParented"));
					}
					StringBuilder stringBuilder = new StringBuilder("__gv", clientID.Length + 9);
					stringBuilder.Append(clientID);
					stringBuilder.Append("__div");
					writer.AddAttribute(HtmlTextWriterAttribute.Id, stringBuilder.ToString(), true);
				}
				writer.RenderBeginTag(HtmlTextWriterTag.Div);
			}
			this.RenderContents(writer);
			if (renderPanel)
			{
				writer.RenderEndTag();
			}
		}

		// Token: 0x060046D6 RID: 18134 RVA: 0x0012344F File Offset: 0x0012244F
		private void RenderTableContents(HtmlTextWriter writer)
		{
			this.Render(writer, false);
		}

		// Token: 0x060046D7 RID: 18135 RVA: 0x0012345C File Offset: 0x0012245C
		protected internal override object SaveControlState()
		{
			object obj = base.SaveControlState();
			if (obj != null || this._pageIndex != 0 || this._editIndex != -1 || this._selectedIndex != -1 || (this._sortExpression != null && this._sortExpression.Length != 0) || (this._sortDirection != SortDirection.Ascending || (this._dataKeyNames != null && this._dataKeyNames.Length != 0)) || (this._dataKeysArrayList != null && this._dataKeysArrayList.Count > 0) || this._pageCount != -1)
			{
				return new object[]
				{
					obj,
					(this._editIndex == -1) ? null : this._editIndex,
					(this._pageIndex == 0) ? null : this._pageIndex,
					(this._selectedIndex == -1) ? null : this._selectedIndex,
					(this._sortExpression == null || this._sortExpression.Length == 0) ? null : this._sortExpression,
					(this._sortDirection == SortDirection.Ascending) ? null : ((int)this._sortDirection),
					(this._dataKeyNames == null || this._dataKeyNames.Length == 0) ? null : this._dataKeyNames,
					this.SaveDataKeysState(),
					this._pageCount,
					(this._persistedDataKey == null) ? null : ((IStateManager)this._persistedDataKey).SaveViewState()
				};
			}
			return true;
		}

		// Token: 0x060046D8 RID: 18136 RVA: 0x001235C8 File Offset: 0x001225C8
		private object SaveDataKeysState()
		{
			object obj = new object();
			int num = 0;
			if (this._dataKeysArrayList != null && this._dataKeysArrayList.Count > 0)
			{
				num = this._dataKeysArrayList.Count;
				obj = new object[num];
				for (int i = 0; i < num; i++)
				{
					((object[])obj)[i] = ((IStateManager)this._dataKeysArrayList[i]).SaveViewState();
				}
			}
			if (this._dataKeysArrayList != null && num != 0)
			{
				return obj;
			}
			return null;
		}

		// Token: 0x060046D9 RID: 18137 RVA: 0x00123640 File Offset: 0x00122640
		protected override object SaveViewState()
		{
			object obj = base.SaveViewState();
			object obj2 = ((this._fieldCollection != null) ? ((IStateManager)this._fieldCollection).SaveViewState() : null);
			object obj3 = ((this._pagerStyle != null) ? ((IStateManager)this._pagerStyle).SaveViewState() : null);
			object obj4 = ((this._headerStyle != null) ? ((IStateManager)this._headerStyle).SaveViewState() : null);
			object obj5 = ((this._footerStyle != null) ? ((IStateManager)this._footerStyle).SaveViewState() : null);
			object obj6 = ((this._rowStyle != null) ? ((IStateManager)this._rowStyle).SaveViewState() : null);
			object obj7 = ((this._alternatingRowStyle != null) ? ((IStateManager)this._alternatingRowStyle).SaveViewState() : null);
			object obj8 = ((this._selectedRowStyle != null) ? ((IStateManager)this._selectedRowStyle).SaveViewState() : null);
			object obj9 = ((this._editRowStyle != null) ? ((IStateManager)this._editRowStyle).SaveViewState() : null);
			object obj10 = ((this._boundFieldValues != null) ? OrderedDictionaryStateHelper.SaveViewState(this._boundFieldValues) : null);
			object obj11 = ((this._pagerSettings != null) ? ((IStateManager)this._pagerSettings).SaveViewState() : null);
			object obj12 = (base.ControlStyleCreated ? ((IStateManager)base.ControlStyle).SaveViewState() : null);
			object obj13 = null;
			if (this._autoGenFieldProps != null)
			{
				int count = this._autoGenFieldProps.Count;
				object[] array = new object[count];
				for (int i = 0; i < count; i++)
				{
					array[i] = ((IStateManager)this._autoGenFieldProps[i]).SaveViewState();
				}
				obj13 = array;
			}
			return new object[]
			{
				obj, obj2, obj3, obj4, obj5, obj6, obj7, obj8, obj9, obj11,
				obj10, obj12, obj13
			};
		}

		// Token: 0x060046DA RID: 18138 RVA: 0x00123804 File Offset: 0x00122804
		private void SelectCallback(IEnumerable data)
		{
			throw new HttpException(SR.GetString("DataBoundControl_DataSourceDoesntSupportPaging", new object[] { this.DataSourceID }));
		}

		// Token: 0x060046DB RID: 18139 RVA: 0x00123831 File Offset: 0x00122831
		public virtual void Sort(string sortExpression, SortDirection sortDirection)
		{
			this.HandleSort(sortExpression, sortDirection);
		}

		// Token: 0x060046DC RID: 18140 RVA: 0x0012383C File Offset: 0x0012283C
		protected override void TrackViewState()
		{
			base.TrackViewState();
			if (this._fieldCollection != null)
			{
				((IStateManager)this._fieldCollection).TrackViewState();
			}
			if (this._pagerStyle != null)
			{
				((IStateManager)this._pagerStyle).TrackViewState();
			}
			if (this._headerStyle != null)
			{
				((IStateManager)this._headerStyle).TrackViewState();
			}
			if (this._footerStyle != null)
			{
				((IStateManager)this._footerStyle).TrackViewState();
			}
			if (this._rowStyle != null)
			{
				((IStateManager)this._rowStyle).TrackViewState();
			}
			if (this._alternatingRowStyle != null)
			{
				((IStateManager)this._alternatingRowStyle).TrackViewState();
			}
			if (this._selectedRowStyle != null)
			{
				((IStateManager)this._selectedRowStyle).TrackViewState();
			}
			if (this._editRowStyle != null)
			{
				((IStateManager)this._editRowStyle).TrackViewState();
			}
			if (this._pagerSettings != null)
			{
				((IStateManager)this._pagerSettings).TrackViewState();
			}
			if (base.ControlStyleCreated)
			{
				((IStateManager)base.ControlStyle).TrackViewState();
			}
			if (this._dataKeyArray != null)
			{
				((IStateManager)this._dataKeyArray).TrackViewState();
			}
		}

		// Token: 0x060046DD RID: 18141 RVA: 0x00123920 File Offset: 0x00122920
		public virtual void UpdateRow(int rowIndex, bool causesValidation)
		{
			this.HandleUpdate(null, rowIndex, causesValidation);
		}

		// Token: 0x060046DE RID: 18142 RVA: 0x0012392B File Offset: 0x0012292B
		void IPostBackEventHandler.RaisePostBackEvent(string eventArgument)
		{
			this.RaisePostBackEvent(eventArgument);
		}

		// Token: 0x060046DF RID: 18143 RVA: 0x00123934 File Offset: 0x00122934
		PostBackOptions IPostBackContainer.GetPostBackOptions(IButtonControl buttonControl)
		{
			if (buttonControl == null)
			{
				throw new ArgumentNullException("buttonControl");
			}
			if (buttonControl.CausesValidation)
			{
				throw new InvalidOperationException(SR.GetString("CannotUseParentPostBackWhenValidating", new object[]
				{
					base.GetType().Name,
					this.ID
				}));
			}
			return new PostBackOptions(this, buttonControl.CommandName + "$" + buttonControl.CommandArgument)
			{
				RequiresJavaScriptProtocol = true
			};
		}

		// Token: 0x060046E0 RID: 18144 RVA: 0x001239AB File Offset: 0x001229AB
		string ICallbackContainer.GetCallbackScript(IButtonControl buttonControl, string argument)
		{
			return this.GetCallbackScript(buttonControl, argument);
		}

		// Token: 0x060046E1 RID: 18145 RVA: 0x001239B5 File Offset: 0x001229B5
		void ICallbackEventHandler.RaiseCallbackEvent(string eventArgument)
		{
			this.RaiseCallbackEvent(eventArgument);
		}

		// Token: 0x060046E2 RID: 18146 RVA: 0x001239BE File Offset: 0x001229BE
		string ICallbackEventHandler.GetCallbackResult()
		{
			return this.GetCallbackResult();
		}

		// Token: 0x17001170 RID: 4464
		// (get) Token: 0x060046E3 RID: 18147 RVA: 0x001239C6 File Offset: 0x001229C6
		// (set) Token: 0x060046E4 RID: 18148 RVA: 0x001239CE File Offset: 0x001229CE
		DataKey IPersistedSelector.DataKey
		{
			get
			{
				return this.SelectedPersistedDataKey;
			}
			set
			{
				this.SelectedPersistedDataKey = value;
			}
		}

		// Token: 0x04002A37 RID: 10807
		private const string startupScriptFormat = "\r\nvar {0} = new GridView();\r\n{0}.stateField = document.getElementById('{1}');\r\n{0}.panelElement = document.getElementById('{0}__div');\r\n{0}.pageIndex = {3};\r\n{0}.sortExpression = \"{4}\";\r\n{0}.sortDirection = {5};\r\n{0}.setStateField();\r\n{0}.callback = function(arg) {{\r\n    {2};\r\n}};";

		// Token: 0x04002A38 RID: 10808
		private static readonly object EventPageIndexChanging = new object();

		// Token: 0x04002A39 RID: 10809
		private static readonly object EventPageIndexChanged = new object();

		// Token: 0x04002A3A RID: 10810
		private static readonly object EventRowCancelingEdit = new object();

		// Token: 0x04002A3B RID: 10811
		private static readonly object EventRowCommand = new object();

		// Token: 0x04002A3C RID: 10812
		private static readonly object EventRowCreated = new object();

		// Token: 0x04002A3D RID: 10813
		private static readonly object EventRowDataBound = new object();

		// Token: 0x04002A3E RID: 10814
		private static readonly object EventRowDeleted = new object();

		// Token: 0x04002A3F RID: 10815
		private static readonly object EventRowDeleting = new object();

		// Token: 0x04002A40 RID: 10816
		private static readonly object EventRowEditing = new object();

		// Token: 0x04002A41 RID: 10817
		private static readonly object EventRowUpdated = new object();

		// Token: 0x04002A42 RID: 10818
		private static readonly object EventRowUpdating = new object();

		// Token: 0x04002A43 RID: 10819
		private static readonly object EventSelectedIndexChanging = new object();

		// Token: 0x04002A44 RID: 10820
		private static readonly object EventSelectedIndexChanged = new object();

		// Token: 0x04002A45 RID: 10821
		private static readonly object EventSorted = new object();

		// Token: 0x04002A46 RID: 10822
		private static readonly object EventSorting = new object();

		// Token: 0x04002A47 RID: 10823
		private IEnumerator _storedData;

		// Token: 0x04002A48 RID: 10824
		private object _firstDataRow;

		// Token: 0x04002A49 RID: 10825
		private bool _storedDataValid;

		// Token: 0x04002A4A RID: 10826
		private int _pageCount = -1;

		// Token: 0x04002A4B RID: 10827
		private DataControlFieldCollection _fieldCollection;

		// Token: 0x04002A4C RID: 10828
		private TableItemStyle _headerStyle;

		// Token: 0x04002A4D RID: 10829
		private TableItemStyle _footerStyle;

		// Token: 0x04002A4E RID: 10830
		private TableItemStyle _rowStyle;

		// Token: 0x04002A4F RID: 10831
		private TableItemStyle _alternatingRowStyle;

		// Token: 0x04002A50 RID: 10832
		private TableItemStyle _selectedRowStyle;

		// Token: 0x04002A51 RID: 10833
		private TableItemStyle _editRowStyle;

		// Token: 0x04002A52 RID: 10834
		private TableItemStyle _emptyDataRowStyle;

		// Token: 0x04002A53 RID: 10835
		private TableItemStyle _pagerStyle;

		// Token: 0x04002A54 RID: 10836
		private PagerSettings _pagerSettings;

		// Token: 0x04002A55 RID: 10837
		private ITemplate _pagerTemplate;

		// Token: 0x04002A56 RID: 10838
		private ITemplate _emptyDataTemplate;

		// Token: 0x04002A57 RID: 10839
		private GridViewRow _bottomPagerRow;

		// Token: 0x04002A58 RID: 10840
		private GridViewRow _footerRow;

		// Token: 0x04002A59 RID: 10841
		private GridViewRow _headerRow;

		// Token: 0x04002A5A RID: 10842
		private GridViewRow _topPagerRow;

		// Token: 0x04002A5B RID: 10843
		private ArrayList _rowsArray;

		// Token: 0x04002A5C RID: 10844
		private GridViewRowCollection _rowsCollection;

		// Token: 0x04002A5D RID: 10845
		private ArrayList _autoGenFieldProps;

		// Token: 0x04002A5E RID: 10846
		private DataKeyArray _dataKeyArray;

		// Token: 0x04002A5F RID: 10847
		private ArrayList _dataKeysArrayList;

		// Token: 0x04002A60 RID: 10848
		private OrderedDictionary _boundFieldValues;

		// Token: 0x04002A61 RID: 10849
		private string[] _dataKeyNames;

		// Token: 0x04002A62 RID: 10850
		private DataKey _persistedDataKey;

		// Token: 0x04002A63 RID: 10851
		private int _editIndex = -1;

		// Token: 0x04002A64 RID: 10852
		private int _selectedIndex = -1;

		// Token: 0x04002A65 RID: 10853
		private int _pageIndex;

		// Token: 0x04002A66 RID: 10854
		private string _sortExpression = string.Empty;

		// Token: 0x04002A67 RID: 10855
		private SortDirection _sortDirection;

		// Token: 0x04002A68 RID: 10856
		private string _sortExpressionSerialized;

		// Token: 0x04002A69 RID: 10857
		private string _modelValidationGroup;

		// Token: 0x04002A6A RID: 10858
		private IAutoFieldGenerator _columnsGenerator;

		// Token: 0x04002A6B RID: 10859
		private IOrderedDictionary _updateKeys;

		// Token: 0x04002A6C RID: 10860
		private IOrderedDictionary _updateOldValues;

		// Token: 0x04002A6D RID: 10861
		private IOrderedDictionary _updateNewValues;

		// Token: 0x04002A6E RID: 10862
		private IOrderedDictionary _deleteKeys;

		// Token: 0x04002A6F RID: 10863
		private IOrderedDictionary _deleteValues;

		// Token: 0x04002A70 RID: 10864
		private int _deletedRowIndex;

		// Token: 0x04002A71 RID: 10865
		private bool _renderClientScript;

		// Token: 0x04002A72 RID: 10866
		private bool _renderClientScriptValid;

		// Token: 0x04002A73 RID: 10867
		private IStateFormatter _stateFormatter;
	}
}
