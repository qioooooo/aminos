using System;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms.Layout;

namespace System.Windows.Forms
{
	// Token: 0x020002A4 RID: 676
	[Designer("System.Windows.Forms.Design.ToolStripDropDownDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[ComVisible(true)]
	[ClassInterface(ClassInterfaceType.AutoDispatch)]
	public class ToolStripDropDownMenu : ToolStripDropDown
	{
		// Token: 0x0600254C RID: 9548 RVA: 0x00056414 File Offset: 0x00055414
		public ToolStripDropDownMenu()
		{
		}

		// Token: 0x0600254D RID: 9549 RVA: 0x00056484 File Offset: 0x00055484
		internal ToolStripDropDownMenu(ToolStripItem ownerItem, bool isAutoGenerated)
			: base(ownerItem, isAutoGenerated)
		{
		}

		// Token: 0x170005C7 RID: 1479
		// (get) Token: 0x0600254E RID: 9550 RVA: 0x000564F5 File Offset: 0x000554F5
		// (set) Token: 0x0600254F RID: 9551 RVA: 0x00056500 File Offset: 0x00055500
		internal override bool AllItemsVisible
		{
			get
			{
				return !this.RequiresScrollButtons;
			}
			set
			{
				this.RequiresScrollButtons = !value;
			}
		}

		// Token: 0x170005C8 RID: 1480
		// (get) Token: 0x06002550 RID: 9552 RVA: 0x0005650C File Offset: 0x0005550C
		internal Rectangle ArrowRectangle
		{
			get
			{
				return this.arrowRectangle;
			}
		}

		// Token: 0x170005C9 RID: 1481
		// (get) Token: 0x06002551 RID: 9553 RVA: 0x00056514 File Offset: 0x00055514
		internal Rectangle CheckRectangle
		{
			get
			{
				return this.checkRectangle;
			}
		}

		// Token: 0x170005CA RID: 1482
		// (get) Token: 0x06002552 RID: 9554 RVA: 0x0005651C File Offset: 0x0005551C
		protected override Padding DefaultPadding
		{
			get
			{
				RightToLeft rightToLeft = this.RightToLeft;
				int num = ((rightToLeft == RightToLeft.Yes) ? ToolStripDropDownMenu.TextPadding.Right : ToolStripDropDownMenu.TextPadding.Left);
				int num2 = ((this.ShowCheckMargin || this.ShowImageMargin) ? (num + this.ImageMargin.Width) : num);
				if (rightToLeft == RightToLeft.Yes)
				{
					return new Padding(1, 2, num2, 2);
				}
				return new Padding(num2, 2, 1, 2);
			}
		}

		// Token: 0x170005CB RID: 1483
		// (get) Token: 0x06002553 RID: 9555 RVA: 0x00056588 File Offset: 0x00055588
		public override Rectangle DisplayRectangle
		{
			get
			{
				Rectangle rectangle = base.DisplayRectangle;
				if (base.GetToolStripState(32))
				{
					rectangle.Y += this.UpScrollButton.Height + this.UpScrollButton.Margin.Vertical;
					rectangle.Height -= this.UpScrollButton.Height + this.UpScrollButton.Margin.Vertical + this.DownScrollButton.Height + this.DownScrollButton.Margin.Vertical;
					rectangle = LayoutUtils.InflateRect(rectangle, new Padding(0, base.Padding.Top, 0, base.Padding.Bottom));
				}
				return rectangle;
			}
		}

		// Token: 0x170005CC RID: 1484
		// (get) Token: 0x06002554 RID: 9556 RVA: 0x00056650 File Offset: 0x00055650
		private ToolStripScrollButton DownScrollButton
		{
			get
			{
				if (this.downScrollButton == null)
				{
					this.downScrollButton = new ToolStripScrollButton(false);
					this.downScrollButton.ParentInternal = this;
				}
				return this.downScrollButton;
			}
		}

		// Token: 0x170005CD RID: 1485
		// (get) Token: 0x06002555 RID: 9557 RVA: 0x00056678 File Offset: 0x00055678
		internal Rectangle ImageRectangle
		{
			get
			{
				return this.imageRectangle;
			}
		}

		// Token: 0x170005CE RID: 1486
		// (get) Token: 0x06002556 RID: 9558 RVA: 0x00056680 File Offset: 0x00055680
		// (set) Token: 0x06002557 RID: 9559 RVA: 0x00056688 File Offset: 0x00055688
		internal int PaddingToTrim
		{
			get
			{
				return this.paddingToTrim;
			}
			set
			{
				if (this.paddingToTrim != value)
				{
					this.paddingToTrim = value;
					base.AdjustSize();
				}
			}
		}

		// Token: 0x170005CF RID: 1487
		// (get) Token: 0x06002558 RID: 9560 RVA: 0x000566A0 File Offset: 0x000556A0
		internal Rectangle ImageMargin
		{
			get
			{
				this.imageMarginBounds.Height = base.Height;
				return this.imageMarginBounds;
			}
		}

		// Token: 0x170005D0 RID: 1488
		// (get) Token: 0x06002559 RID: 9561 RVA: 0x000566B9 File Offset: 0x000556B9
		public override LayoutEngine LayoutEngine
		{
			get
			{
				return ToolStripDropDownMenu.ToolStripDropDownLayoutEngine.LayoutInstance;
			}
		}

		// Token: 0x170005D1 RID: 1489
		// (get) Token: 0x0600255A RID: 9562 RVA: 0x000566C0 File Offset: 0x000556C0
		// (set) Token: 0x0600255B RID: 9563 RVA: 0x000566C8 File Offset: 0x000556C8
		[DefaultValue(ToolStripLayoutStyle.Flow)]
		public new ToolStripLayoutStyle LayoutStyle
		{
			get
			{
				return base.LayoutStyle;
			}
			set
			{
				base.LayoutStyle = value;
			}
		}

		// Token: 0x170005D2 RID: 1490
		// (get) Token: 0x0600255C RID: 9564 RVA: 0x000566D1 File Offset: 0x000556D1
		protected internal override Size MaxItemSize
		{
			get
			{
				if (!this.state[ToolStripDropDownMenu.stateMaxItemSizeValid])
				{
					this.CalculateInternalLayoutMetrics();
				}
				return this.maxItemSize;
			}
		}

		// Token: 0x170005D3 RID: 1491
		// (get) Token: 0x0600255D RID: 9565 RVA: 0x000566F1 File Offset: 0x000556F1
		// (set) Token: 0x0600255E RID: 9566 RVA: 0x00056703 File Offset: 0x00055703
		[SRCategory("CatAppearance")]
		[SRDescription("ToolStripDropDownMenuShowImageMarginDescr")]
		[DefaultValue(true)]
		public bool ShowImageMargin
		{
			get
			{
				return this.state[ToolStripDropDownMenu.stateShowImageMargin];
			}
			set
			{
				if (value != this.state[ToolStripDropDownMenu.stateShowImageMargin])
				{
					this.state[ToolStripDropDownMenu.stateShowImageMargin] = value;
					LayoutTransaction.DoLayout(this, this, PropertyNames.ShowImageMargin);
				}
			}
		}

		// Token: 0x170005D4 RID: 1492
		// (get) Token: 0x0600255F RID: 9567 RVA: 0x00056735 File Offset: 0x00055735
		// (set) Token: 0x06002560 RID: 9568 RVA: 0x00056747 File Offset: 0x00055747
		[SRDescription("ToolStripDropDownMenuShowCheckMarginDescr")]
		[DefaultValue(false)]
		[SRCategory("CatAppearance")]
		public bool ShowCheckMargin
		{
			get
			{
				return this.state[ToolStripDropDownMenu.stateShowCheckMargin];
			}
			set
			{
				if (value != this.state[ToolStripDropDownMenu.stateShowCheckMargin])
				{
					this.state[ToolStripDropDownMenu.stateShowCheckMargin] = value;
					LayoutTransaction.DoLayout(this, this, PropertyNames.ShowCheckMargin);
				}
			}
		}

		// Token: 0x170005D5 RID: 1493
		// (get) Token: 0x06002561 RID: 9569 RVA: 0x00056779 File Offset: 0x00055779
		internal Rectangle TextRectangle
		{
			get
			{
				return this.textRectangle;
			}
		}

		// Token: 0x170005D6 RID: 1494
		// (get) Token: 0x06002562 RID: 9570 RVA: 0x00056781 File Offset: 0x00055781
		private ToolStripScrollButton UpScrollButton
		{
			get
			{
				if (this.upScrollButton == null)
				{
					this.upScrollButton = new ToolStripScrollButton(true);
					this.upScrollButton.ParentInternal = this;
				}
				return this.upScrollButton;
			}
		}

		// Token: 0x06002563 RID: 9571 RVA: 0x000567AC File Offset: 0x000557AC
		internal static ToolStripDropDownMenu FromHMenu(IntPtr hmenu, IWin32Window targetWindow)
		{
			ToolStripDropDownMenu toolStripDropDownMenu = new ToolStripDropDownMenu();
			toolStripDropDownMenu.SuspendLayout();
			HandleRef handleRef = new HandleRef(null, hmenu);
			int menuItemCount = UnsafeNativeMethods.GetMenuItemCount(handleRef);
			for (int i = 0; i < menuItemCount; i++)
			{
				NativeMethods.MENUITEMINFO_T_RW menuiteminfo_T_RW = new NativeMethods.MENUITEMINFO_T_RW();
				menuiteminfo_T_RW.cbSize = Marshal.SizeOf(typeof(NativeMethods.MENUITEMINFO_T_RW));
				menuiteminfo_T_RW.fMask = 256;
				menuiteminfo_T_RW.fType = 256;
				UnsafeNativeMethods.GetMenuItemInfo(handleRef, i, true, menuiteminfo_T_RW);
				ToolStripItem toolStripItem;
				if (menuiteminfo_T_RW.fType == 2048)
				{
					toolStripItem = new ToolStripSeparator();
				}
				else
				{
					menuiteminfo_T_RW = new NativeMethods.MENUITEMINFO_T_RW();
					menuiteminfo_T_RW.cbSize = Marshal.SizeOf(typeof(NativeMethods.MENUITEMINFO_T_RW));
					menuiteminfo_T_RW.fMask = 2;
					menuiteminfo_T_RW.fType = 2;
					UnsafeNativeMethods.GetMenuItemInfo(handleRef, i, true, menuiteminfo_T_RW);
					toolStripItem = new ToolStripMenuItem(hmenu, menuiteminfo_T_RW.wID, targetWindow);
					menuiteminfo_T_RW = new NativeMethods.MENUITEMINFO_T_RW();
					menuiteminfo_T_RW.cbSize = Marshal.SizeOf(typeof(NativeMethods.MENUITEMINFO_T_RW));
					menuiteminfo_T_RW.fMask = 4;
					menuiteminfo_T_RW.fType = 4;
					UnsafeNativeMethods.GetMenuItemInfo(handleRef, i, true, menuiteminfo_T_RW);
					if (menuiteminfo_T_RW.hSubMenu != IntPtr.Zero)
					{
						((ToolStripMenuItem)toolStripItem).DropDown = ToolStripDropDownMenu.FromHMenu(menuiteminfo_T_RW.hSubMenu, targetWindow);
					}
				}
				toolStripDropDownMenu.Items.Add(toolStripItem);
			}
			toolStripDropDownMenu.ResumeLayout();
			return toolStripDropDownMenu;
		}

		// Token: 0x06002564 RID: 9572 RVA: 0x00056908 File Offset: 0x00055908
		private void CalculateInternalLayoutMetrics()
		{
			Size empty = Size.Empty;
			Size empty2 = Size.Empty;
			Size size = ToolStripDropDownMenu.defaultImageSize;
			Size empty3 = Size.Empty;
			Size empty4 = Size.Empty;
			for (int i = 0; i < this.Items.Count; i++)
			{
				ToolStripItem toolStripItem = this.Items[i];
				ToolStripMenuItem toolStripMenuItem = toolStripItem as ToolStripMenuItem;
				if (toolStripMenuItem != null)
				{
					Size textSize = toolStripMenuItem.GetTextSize();
					if (toolStripMenuItem.ShowShortcutKeys)
					{
						Size shortcutTextSize = toolStripMenuItem.GetShortcutTextSize();
						if (this.tabWidth == -1)
						{
							this.tabWidth = TextRenderer.MeasureText("\t", this.Font).Width;
						}
						textSize.Width += this.tabWidth + shortcutTextSize.Width;
						textSize.Height = Math.Max(textSize.Height, shortcutTextSize.Height);
					}
					empty.Width = Math.Max(empty.Width, textSize.Width);
					empty.Height = Math.Max(empty.Height, textSize.Height);
					Size size2 = Size.Empty;
					if (toolStripMenuItem.Image != null)
					{
						size2 = ((toolStripMenuItem.ImageScaling == ToolStripItemImageScaling.SizeToFit) ? base.ImageScalingSize : toolStripMenuItem.Image.Size);
					}
					empty2.Width = Math.Max(empty2.Width, size2.Width);
					empty2.Height = Math.Max(empty2.Height, size2.Height);
					if (toolStripMenuItem.CheckedImage != null)
					{
						Size size3 = toolStripMenuItem.CheckedImage.Size;
						size.Width = Math.Max(size3.Width, size.Width);
						size.Height = Math.Max(size3.Height, size.Height);
					}
				}
				else if (!(toolStripItem is ToolStripSeparator))
				{
					empty4.Height = Math.Max(toolStripItem.Bounds.Height, empty4.Height);
					empty4.Width = Math.Max(toolStripItem.Bounds.Width, empty4.Width);
				}
			}
			this.maxItemSize.Height = Math.Max(empty.Height + ToolStripDropDownMenu.TextPadding.Vertical, Math.Max(size.Height + ToolStripDropDownMenu.CheckPadding.Vertical, empty3.Height + ToolStripDropDownMenu.ArrowPadding.Vertical));
			if (this.ShowImageMargin)
			{
				this.maxItemSize.Height = Math.Max(empty2.Height + ToolStripDropDownMenu.ImagePadding.Vertical, this.maxItemSize.Height);
			}
			if (this.ShowCheckMargin)
			{
				int width = size.Width;
			}
			if (this.ShowImageMargin)
			{
				int width2 = empty2.Width;
			}
			empty3 = new Size(10, this.maxItemSize.Height);
			empty.Height = this.maxItemSize.Height - ToolStripDropDownMenu.TextPadding.Vertical;
			empty2.Height = this.maxItemSize.Height - ToolStripDropDownMenu.ImagePadding.Vertical;
			size.Height = this.maxItemSize.Height - ToolStripDropDownMenu.CheckPadding.Vertical;
			empty.Width = Math.Max(empty.Width, empty4.Width);
			Point empty5 = Point.Empty;
			int num = Math.Max(0, empty2.Width - ToolStripDropDownMenu.defaultImageSize.Width);
			int num2;
			if (this.ShowCheckMargin && this.ShowImageMargin)
			{
				num2 = ToolStripDropDownMenu.DefaultImageAndCheckMarginWidth;
				num2 += num;
				empty5 = new Point(ToolStripDropDownMenu.CheckPadding.Left, ToolStripDropDownMenu.CheckPadding.Top);
				this.checkRectangle = LayoutUtils.Align(size, new Rectangle(empty5.X, empty5.Y, size.Width, this.maxItemSize.Height), ContentAlignment.MiddleCenter);
				empty5.X = this.checkRectangle.Right + ToolStripDropDownMenu.CheckPadding.Right + ToolStripDropDownMenu.ImagePadding.Left;
				empty5.Y = ToolStripDropDownMenu.ImagePadding.Top;
				this.imageRectangle = LayoutUtils.Align(empty2, new Rectangle(empty5.X, empty5.Y, empty2.Width, this.maxItemSize.Height), ContentAlignment.MiddleCenter);
			}
			else if (this.ShowCheckMargin)
			{
				num2 = ToolStripDropDownMenu.DefaultImageMarginWidth;
				empty5 = new Point(1, ToolStripDropDownMenu.CheckPadding.Top);
				this.checkRectangle = LayoutUtils.Align(size, new Rectangle(empty5.X, empty5.Y, num2, this.maxItemSize.Height), ContentAlignment.MiddleCenter);
				this.imageRectangle = Rectangle.Empty;
			}
			else if (this.ShowImageMargin)
			{
				num2 = ToolStripDropDownMenu.DefaultImageMarginWidth;
				num2 += num;
				empty5 = new Point(1, ToolStripDropDownMenu.CheckPadding.Top);
				this.checkRectangle = LayoutUtils.Align(LayoutUtils.UnionSizes(size, empty2), new Rectangle(empty5.X, empty5.Y, num2 - 1, this.maxItemSize.Height), ContentAlignment.MiddleCenter);
				this.imageRectangle = this.checkRectangle;
			}
			else
			{
				num2 = 0;
			}
			empty5.X = num2 + 1;
			this.imageMarginBounds = new Rectangle(0, 0, num2, base.Height);
			empty5.X = this.imageMarginBounds.Right + ToolStripDropDownMenu.TextPadding.Left;
			empty5.Y = ToolStripDropDownMenu.TextPadding.Top;
			this.textRectangle = new Rectangle(empty5, empty);
			empty5.X = this.textRectangle.Right + ToolStripDropDownMenu.TextPadding.Right + ToolStripDropDownMenu.ArrowPadding.Left;
			empty5.Y = ToolStripDropDownMenu.ArrowPadding.Top;
			this.arrowRectangle = new Rectangle(empty5, empty3);
			this.maxItemSize.Width = this.arrowRectangle.Right + ToolStripDropDownMenu.ArrowPadding.Right - this.imageMarginBounds.Left;
			base.Padding = this.DefaultPadding;
			int num3 = this.imageMarginBounds.Width;
			if (this.RightToLeft == RightToLeft.Yes)
			{
				num3 += ToolStripDropDownMenu.TextPadding.Right;
				int width3 = this.maxItemSize.Width;
				this.checkRectangle.X = width3 - this.checkRectangle.Right;
				this.imageRectangle.X = width3 - this.imageRectangle.Right;
				this.textRectangle.X = width3 - this.textRectangle.Right;
				this.arrowRectangle.X = width3 - this.arrowRectangle.Right;
				this.imageMarginBounds.X = width3 - this.imageMarginBounds.Right;
			}
			else
			{
				num3 += ToolStripDropDownMenu.TextPadding.Left;
			}
			this.maxItemSize.Height = this.maxItemSize.Height + this.maxItemSize.Height % 2;
			this.textRectangle.Y = LayoutUtils.VAlign(this.textRectangle.Size, new Rectangle(Point.Empty, this.maxItemSize), ContentAlignment.MiddleCenter).Y;
			this.textRectangle.Y = this.textRectangle.Y + this.textRectangle.Height % 2;
			this.state[ToolStripDropDownMenu.stateMaxItemSizeValid] = true;
			this.PaddingToTrim = num3;
		}

		// Token: 0x06002565 RID: 9573 RVA: 0x0005704C File Offset: 0x0005604C
		internal override void ChangeSelection(ToolStripItem nextItem)
		{
			if (nextItem != null)
			{
				Rectangle displayRectangle = this.DisplayRectangle;
				if (!displayRectangle.Contains(displayRectangle.X, nextItem.Bounds.Top) || !displayRectangle.Contains(displayRectangle.X, nextItem.Bounds.Bottom))
				{
					int num;
					if (displayRectangle.Y > nextItem.Bounds.Top)
					{
						num = nextItem.Bounds.Top - displayRectangle.Y;
					}
					else
					{
						num = nextItem.Bounds.Bottom - (displayRectangle.Y + displayRectangle.Height);
						int num2 = this.Items.IndexOf(nextItem);
						while (num2 >= 0 && this.Items[num2].Visible && displayRectangle.Contains(displayRectangle.X, this.Items[num2].Bounds.Top - num))
						{
							num2--;
						}
						if (num2 >= 0 && displayRectangle.Contains(displayRectangle.X, this.Items[num2].Bounds.Bottom - num))
						{
							num += this.Items[num2].Bounds.Bottom - num - displayRectangle.Top;
						}
					}
					this.ScrollInternal(num);
					this.UpdateScrollButtonStatus();
				}
			}
			base.ChangeSelection(nextItem);
		}

		// Token: 0x06002566 RID: 9574 RVA: 0x000571BC File Offset: 0x000561BC
		protected internal override ToolStripItem CreateDefaultItem(string text, Image image, EventHandler onClick)
		{
			if (text == "-")
			{
				return new ToolStripSeparator();
			}
			return new ToolStripMenuItem(text, image, onClick);
		}

		// Token: 0x06002567 RID: 9575 RVA: 0x000571D9 File Offset: 0x000561D9
		internal override ToolStripItem GetNextItem(ToolStripItem start, ArrowDirection direction, bool rtlAware)
		{
			return this.GetNextItem(start, direction);
		}

		// Token: 0x06002568 RID: 9576 RVA: 0x000571E4 File Offset: 0x000561E4
		internal override void Initialize()
		{
			base.Initialize();
			base.Padding = this.DefaultPadding;
			FlowLayoutSettings flowLayoutSettings = FlowLayout.CreateSettings(this);
			flowLayoutSettings.FlowDirection = FlowDirection.TopDown;
			this.state[ToolStripDropDownMenu.stateShowImageMargin] = true;
		}

		// Token: 0x06002569 RID: 9577 RVA: 0x00057222 File Offset: 0x00056222
		protected override void OnLayout(LayoutEventArgs e)
		{
			if (!base.IsDisposed)
			{
				this.RequiresScrollButtons = false;
				this.CalculateInternalLayoutMetrics();
				base.OnLayout(e);
				if (!this.RequiresScrollButtons)
				{
					this.ResetScrollPosition();
				}
			}
		}

		// Token: 0x0600256A RID: 9578 RVA: 0x0005724E File Offset: 0x0005624E
		protected override void OnFontChanged(EventArgs e)
		{
			this.tabWidth = -1;
			base.OnFontChanged(e);
		}

		// Token: 0x0600256B RID: 9579 RVA: 0x0005725E File Offset: 0x0005625E
		protected override void OnPaintBackground(PaintEventArgs e)
		{
			base.OnPaintBackground(e);
			if (this.ShowCheckMargin || this.ShowImageMargin)
			{
				base.Renderer.DrawImageMargin(new ToolStripRenderEventArgs(e.Graphics, this, this.ImageMargin, SystemColors.Control));
			}
		}

		// Token: 0x170005D7 RID: 1495
		// (get) Token: 0x0600256C RID: 9580 RVA: 0x00057299 File Offset: 0x00056299
		// (set) Token: 0x0600256D RID: 9581 RVA: 0x000572A4 File Offset: 0x000562A4
		internal override bool RequiresScrollButtons
		{
			get
			{
				return base.GetToolStripState(32);
			}
			set
			{
				bool flag = this.RequiresScrollButtons != value;
				base.SetToolStripState(32, value);
				if (flag)
				{
					this.UpdateScrollButtonLocations();
					if (this.Items.Count > 0)
					{
						int num = this.Items[0].Bounds.Top - this.DisplayRectangle.Top;
						this.ScrollInternal(num);
						this.scrollAmount -= num;
						if (value)
						{
							this.RestoreScrollPosition();
							return;
						}
					}
					else
					{
						this.scrollAmount = 0;
					}
				}
			}
		}

		// Token: 0x0600256E RID: 9582 RVA: 0x0005732D File Offset: 0x0005632D
		internal void ResetScrollPosition()
		{
			this.scrollAmount = 0;
		}

		// Token: 0x0600256F RID: 9583 RVA: 0x00057338 File Offset: 0x00056338
		internal void RestoreScrollPosition()
		{
			if (!this.RequiresScrollButtons || this.Items.Count == 0)
			{
				return;
			}
			Rectangle displayRectangle = this.DisplayRectangle;
			int num = displayRectangle.Top - this.Items[0].Bounds.Top;
			int num2 = this.scrollAmount - num;
			int num3 = 0;
			if (num2 > 0)
			{
				for (int i = 0; i < this.Items.Count; i++)
				{
					if (num3 >= num2)
					{
						break;
					}
					if (this.Items[i].Available)
					{
						Rectangle bounds = this.Items[this.Items.Count - 1].Bounds;
						bounds.Y -= num3;
						if (displayRectangle.Contains(displayRectangle.X, bounds.Top) && displayRectangle.Contains(displayRectangle.X, bounds.Bottom))
						{
							break;
						}
						if (i < this.Items.Count - 1)
						{
							num3 += this.Items[i + 1].Bounds.Top - this.Items[i].Bounds.Top;
						}
						else
						{
							num3 += this.Items[i].Bounds.Height;
						}
					}
				}
			}
			else
			{
				int num4 = this.Items.Count - 1;
				while (num4 >= 0 && num3 > num2)
				{
					if (this.Items[num4].Available)
					{
						Rectangle bounds2 = this.Items[0].Bounds;
						bounds2.Y -= num3;
						if (displayRectangle.Contains(displayRectangle.X, bounds2.Top) && displayRectangle.Contains(displayRectangle.X, bounds2.Bottom))
						{
							break;
						}
						if (num4 > 0)
						{
							num3 -= this.Items[num4].Bounds.Top - this.Items[num4 - 1].Bounds.Top;
						}
						else
						{
							num3 -= this.Items[num4].Bounds.Height;
						}
					}
					num4--;
				}
			}
			this.ScrollInternal(num3);
			this.scrollAmount = this.DisplayRectangle.Top - this.Items[0].Bounds.Top;
			this.UpdateScrollButtonLocations();
		}

		// Token: 0x06002570 RID: 9584 RVA: 0x000575D1 File Offset: 0x000565D1
		internal override void ScrollInternal(int delta)
		{
			base.ScrollInternal(delta);
			this.scrollAmount += delta;
		}

		// Token: 0x06002571 RID: 9585 RVA: 0x000575E8 File Offset: 0x000565E8
		internal void ScrollInternal(bool up)
		{
			this.UpdateScrollButtonStatus();
			int num;
			if (this.indexOfFirstDisplayedItem == -1 || this.indexOfFirstDisplayedItem >= this.Items.Count)
			{
				int menuHeight = SystemInformation.MenuHeight;
				num = (up ? (-menuHeight) : menuHeight);
			}
			else if (up)
			{
				if (this.indexOfFirstDisplayedItem == 0)
				{
					num = 0;
				}
				else
				{
					ToolStripItem toolStripItem = this.Items[this.indexOfFirstDisplayedItem - 1];
					ToolStripItem toolStripItem2 = this.Items[this.indexOfFirstDisplayedItem];
					num = toolStripItem.Bounds.Top - toolStripItem2.Bounds.Top;
				}
			}
			else
			{
				if (this.indexOfFirstDisplayedItem == this.Items.Count - 1)
				{
				}
				ToolStripItem toolStripItem3 = this.Items[this.indexOfFirstDisplayedItem];
				ToolStripItem toolStripItem4 = this.Items[this.indexOfFirstDisplayedItem + 1];
				num = toolStripItem4.Bounds.Top - toolStripItem3.Bounds.Top;
			}
			this.ScrollInternal(num);
			this.UpdateScrollButtonLocations();
		}

		// Token: 0x06002572 RID: 9586 RVA: 0x000576F4 File Offset: 0x000566F4
		protected override void SetDisplayedItems()
		{
			base.SetDisplayedItems();
			if (this.RequiresScrollButtons)
			{
				this.DisplayedItems.Add(this.UpScrollButton);
				this.DisplayedItems.Add(this.DownScrollButton);
				this.UpdateScrollButtonLocations();
				this.UpScrollButton.Visible = true;
				this.DownScrollButton.Visible = true;
				return;
			}
			this.UpScrollButton.Visible = false;
			this.DownScrollButton.Visible = false;
		}

		// Token: 0x06002573 RID: 9587 RVA: 0x0005776C File Offset: 0x0005676C
		private void UpdateScrollButtonLocations()
		{
			if (base.GetToolStripState(32))
			{
				Size preferredSize = this.UpScrollButton.GetPreferredSize(Size.Empty);
				Point point = new Point(1, 0);
				this.UpScrollButton.SetBounds(new Rectangle(point, preferredSize));
				Size preferredSize2 = this.DownScrollButton.GetPreferredSize(Size.Empty);
				int height = base.GetDropDownBounds(base.Bounds).Height;
				Point point2 = new Point(1, height - preferredSize2.Height);
				this.DownScrollButton.SetBounds(new Rectangle(point2, preferredSize2));
				this.UpdateScrollButtonStatus();
			}
		}

		// Token: 0x06002574 RID: 9588 RVA: 0x00057800 File Offset: 0x00056800
		private void UpdateScrollButtonStatus()
		{
			Rectangle displayRectangle = this.DisplayRectangle;
			this.indexOfFirstDisplayedItem = -1;
			int num = int.MaxValue;
			int num2 = 0;
			for (int i = 0; i < this.Items.Count; i++)
			{
				ToolStripItem toolStripItem = this.Items[i];
				if (this.UpScrollButton != toolStripItem && this.DownScrollButton != toolStripItem && toolStripItem.Available)
				{
					if (this.indexOfFirstDisplayedItem == -1 && displayRectangle.Contains(displayRectangle.X, toolStripItem.Bounds.Top))
					{
						this.indexOfFirstDisplayedItem = i;
					}
					num = Math.Min(num, toolStripItem.Bounds.Top);
					num2 = Math.Max(num2, toolStripItem.Bounds.Bottom);
				}
			}
			this.UpScrollButton.Enabled = !displayRectangle.Contains(displayRectangle.X, num);
			this.DownScrollButton.Enabled = !displayRectangle.Contains(displayRectangle.X, num2);
		}

		// Token: 0x040015D4 RID: 5588
		private static Padding ImagePadding = new Padding(2);

		// Token: 0x040015D5 RID: 5589
		private static Padding TextPadding = new Padding(8, 1, 9, 1);

		// Token: 0x040015D6 RID: 5590
		private static Padding CheckPadding = new Padding(5, 2, 2, 2);

		// Token: 0x040015D7 RID: 5591
		private static Padding ArrowPadding = new Padding(0, 0, 8, 0);

		// Token: 0x040015D8 RID: 5592
		private static int DefaultImageMarginWidth = 25;

		// Token: 0x040015D9 RID: 5593
		private static int DefaultImageAndCheckMarginWidth = 47;

		// Token: 0x040015DA RID: 5594
		private Size maxItemSize = Size.Empty;

		// Token: 0x040015DB RID: 5595
		private Rectangle checkRectangle = Rectangle.Empty;

		// Token: 0x040015DC RID: 5596
		private Rectangle imageRectangle = Rectangle.Empty;

		// Token: 0x040015DD RID: 5597
		private Rectangle arrowRectangle = Rectangle.Empty;

		// Token: 0x040015DE RID: 5598
		private Rectangle textRectangle = Rectangle.Empty;

		// Token: 0x040015DF RID: 5599
		private Rectangle imageMarginBounds = Rectangle.Empty;

		// Token: 0x040015E0 RID: 5600
		private int paddingToTrim;

		// Token: 0x040015E1 RID: 5601
		private int tabWidth = -1;

		// Token: 0x040015E2 RID: 5602
		private ToolStripScrollButton upScrollButton;

		// Token: 0x040015E3 RID: 5603
		private ToolStripScrollButton downScrollButton;

		// Token: 0x040015E4 RID: 5604
		private int scrollAmount;

		// Token: 0x040015E5 RID: 5605
		private int indexOfFirstDisplayedItem = -1;

		// Token: 0x040015E6 RID: 5606
		private BitVector32 state = default(BitVector32);

		// Token: 0x040015E7 RID: 5607
		private static readonly int stateShowImageMargin = BitVector32.CreateMask();

		// Token: 0x040015E8 RID: 5608
		private static readonly int stateShowCheckMargin = BitVector32.CreateMask(ToolStripDropDownMenu.stateShowImageMargin);

		// Token: 0x040015E9 RID: 5609
		private static readonly int stateMaxItemSizeValid = BitVector32.CreateMask(ToolStripDropDownMenu.stateShowCheckMargin);

		// Token: 0x040015EA RID: 5610
		private static readonly Size defaultImageSize = new Size(16, 16);

		// Token: 0x020002AD RID: 685
		internal sealed class ToolStripDropDownLayoutEngine : FlowLayout
		{
			// Token: 0x060025B0 RID: 9648 RVA: 0x00058364 File Offset: 0x00057364
			internal override Size GetPreferredSize(IArrangedElement container, Size proposedConstraints)
			{
				Size preferredSize = base.GetPreferredSize(container, proposedConstraints);
				ToolStripDropDownMenu toolStripDropDownMenu = container as ToolStripDropDownMenu;
				if (toolStripDropDownMenu != null)
				{
					preferredSize.Width = toolStripDropDownMenu.MaxItemSize.Width - toolStripDropDownMenu.PaddingToTrim;
				}
				return preferredSize;
			}

			// Token: 0x040015F3 RID: 5619
			public static ToolStripDropDownMenu.ToolStripDropDownLayoutEngine LayoutInstance = new ToolStripDropDownMenu.ToolStripDropDownLayoutEngine();
		}
	}
}
