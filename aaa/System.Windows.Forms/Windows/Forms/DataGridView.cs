using System;
using System.Collections;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Drawing;
using System.Drawing.Design;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;
using System.Text;
using System.Windows.Forms.Layout;
using System.Windows.Forms.VisualStyles;
using Microsoft.Win32;

namespace System.Windows.Forms
{
	// Token: 0x020002E9 RID: 745
	[Designer("System.Windows.Forms.Design.DataGridViewDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[ComVisible(true)]
	[ClassInterface(ClassInterfaceType.AutoDispatch)]
	[Docking(DockingBehavior.Ask)]
	[DefaultEvent("CellContentClick")]
	[ComplexBindingProperties("DataSource", "DataMember")]
	[Editor("System.Windows.Forms.Design.DataGridViewComponentEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(ComponentEditor))]
	[SRDescription("DescriptionDataGridView")]
	public class DataGridView : Control, ISupportInitialize
	{
		// Token: 0x06002C7C RID: 11388 RVA: 0x00078A48 File Offset: 0x00077A48
		public DataGridView()
		{
			base.SetStyle(ControlStyles.UserPaint | ControlStyles.Opaque | ControlStyles.UserMouse, true);
			base.SetStyle(ControlStyles.SupportsTransparentBackColor, false);
			base.SetState2(2048, true);
			this.dataGridViewState1 = new BitVector32(0);
			this.dataGridViewState2 = new BitVector32(0);
			this.dataGridViewOper = new BitVector32(0);
			this.dataGridViewState1[8388635] = true;
			this.dataGridViewState2[100664295] = true;
			this.displayedBandsInfo = new DataGridView.DisplayedBandsData();
			this.lstRows = new ArrayList();
			this.converters = new Hashtable(8);
			this.pens = new Hashtable(8);
			this.brushes = new Hashtable(10);
			this.gridPen = new Pen(DataGridView.DefaultGridColor);
			this.selectedBandIndexes = new DataGridViewIntLinkedList();
			this.individualSelectedCells = new DataGridViewCellLinkedList();
			this.individualReadOnlyCells = new DataGridViewCellLinkedList();
			this.advancedCellBorderStyle = new DataGridViewAdvancedBorderStyle(this, DataGridViewAdvancedCellBorderStyle.OutsetDouble, DataGridViewAdvancedCellBorderStyle.OutsetPartial, DataGridViewAdvancedCellBorderStyle.InsetDouble);
			this.advancedRowHeadersBorderStyle = new DataGridViewAdvancedBorderStyle(this);
			this.advancedColumnHeadersBorderStyle = new DataGridViewAdvancedBorderStyle(this);
			this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Single;
			this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
			this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
			this.borderStyle = BorderStyle.FixedSingle;
			this.dataGridViewState1[128] = true;
			this.selectionMode = DataGridViewSelectionMode.RowHeaderSelect;
			this.editMode = DataGridViewEditMode.EditOnKeystrokeOrF2;
			this.autoSizeRowsMode = DataGridViewAutoSizeRowsMode.None;
			this.autoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.None;
			this.columnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.EnableResizing;
			this.rowHeadersWidthSizeMode = DataGridViewRowHeadersWidthSizeMode.EnableResizing;
			this.clipboardCopyMode = DataGridViewClipboardCopyMode.EnableWithAutoHeaderText;
			this.layout = new DataGridView.LayoutData();
			this.layout.TopLeftHeader = Rectangle.Empty;
			this.layout.ColumnHeaders = Rectangle.Empty;
			this.layout.RowHeaders = Rectangle.Empty;
			this.layout.ColumnHeadersVisible = true;
			this.layout.RowHeadersVisible = true;
			this.layout.ClientRectangle = base.ClientRectangle;
			this.scrollBars = ScrollBars.Both;
			this.horizScrollBar.RightToLeft = RightToLeft.Inherit;
			this.horizScrollBar.AccessibleName = SR.GetString("DataGridView_AccHorizontalScrollBarAccName");
			this.horizScrollBar.Top = base.ClientRectangle.Height - this.horizScrollBar.Height;
			this.horizScrollBar.Left = 0;
			this.horizScrollBar.Visible = false;
			this.horizScrollBar.Scroll += this.DataGridViewHScrolled;
			base.Controls.Add(this.horizScrollBar);
			this.vertScrollBar.Top = 0;
			this.vertScrollBar.AccessibleName = SR.GetString("DataGridView_AccVerticalScrollBarAccName");
			this.vertScrollBar.Left = base.ClientRectangle.Width - this.vertScrollBar.Width;
			this.vertScrollBar.Visible = false;
			this.vertScrollBar.Scroll += this.DataGridViewVScrolled;
			base.Controls.Add(this.vertScrollBar);
			this.ptCurrentCell = new Point(-1, -1);
			this.ptAnchorCell = new Point(-1, -1);
			this.ptMouseDownCell = new Point(-2, -2);
			this.ptMouseEnteredCell = new Point(-2, -2);
			this.ptToolTipCell = new Point(-1, -1);
			this.ptMouseDownGridCoord = new Point(-1, -1);
			this.sortOrder = SortOrder.None;
			this.lastMouseClickInfo.timeStamp = 0L;
			this.WireScrollBarsEvents();
			base.PerformLayout();
			this.toolTipControl = new DataGridView.DataGridViewToolTip(this);
			base.Invalidate();
		}

		// Token: 0x17000789 RID: 1929
		// (get) Token: 0x06002C7D RID: 11389 RVA: 0x00078E44 File Offset: 0x00077E44
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public virtual DataGridViewAdvancedBorderStyle AdjustedTopLeftHeaderBorderStyle
		{
			get
			{
				DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyle;
				if (this.ApplyVisualStylesToHeaderCells)
				{
					DataGridViewAdvancedCellBorderStyle all = this.AdvancedColumnHeadersBorderStyle.All;
					if (all != DataGridViewAdvancedCellBorderStyle.NotSet)
					{
						switch (all)
						{
						case DataGridViewAdvancedCellBorderStyle.InsetDouble:
							dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
							if (this.RightToLeftInternal)
							{
								dataGridViewAdvancedBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							}
							else
							{
								dataGridViewAdvancedBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
							}
							dataGridViewAdvancedBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							dataGridViewAdvancedBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
							dataGridViewAdvancedBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							return dataGridViewAdvancedBorderStyle;
						case DataGridViewAdvancedCellBorderStyle.OutsetDouble:
						case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
							dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
							if (this.RightToLeftInternal)
							{
								dataGridViewAdvancedBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							}
							else
							{
								dataGridViewAdvancedBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
							}
							dataGridViewAdvancedBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							dataGridViewAdvancedBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
							dataGridViewAdvancedBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							return dataGridViewAdvancedBorderStyle;
						}
						dataGridViewAdvancedBorderStyle = this.AdvancedColumnHeadersBorderStyle;
					}
					else if ((!this.RightToLeftInternal && this.AdvancedColumnHeadersBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.None) || (this.RightToLeftInternal && this.AdvancedColumnHeadersBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.None))
					{
						dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
						if (this.RightToLeftInternal)
						{
							dataGridViewAdvancedBorderStyle.LeftInternal = this.AdvancedColumnHeadersBorderStyle.Left;
							dataGridViewAdvancedBorderStyle.RightInternal = ((this.AdvancedRowHeadersBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.OutsetDouble) ? DataGridViewAdvancedCellBorderStyle.Outset : this.AdvancedRowHeadersBorderStyle.Right);
						}
						else
						{
							dataGridViewAdvancedBorderStyle.LeftInternal = this.AdvancedRowHeadersBorderStyle.Left;
							dataGridViewAdvancedBorderStyle.RightInternal = this.AdvancedColumnHeadersBorderStyle.Right;
						}
						dataGridViewAdvancedBorderStyle.TopInternal = this.AdvancedColumnHeadersBorderStyle.Top;
						dataGridViewAdvancedBorderStyle.BottomInternal = this.AdvancedColumnHeadersBorderStyle.Bottom;
					}
					else
					{
						dataGridViewAdvancedBorderStyle = this.AdvancedColumnHeadersBorderStyle;
					}
				}
				else
				{
					DataGridViewAdvancedCellBorderStyle all2 = this.AdvancedColumnHeadersBorderStyle.All;
					if (all2 != DataGridViewAdvancedCellBorderStyle.NotSet)
					{
						switch (all2)
						{
						case DataGridViewAdvancedCellBorderStyle.InsetDouble:
							dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
							dataGridViewAdvancedBorderStyle.LeftInternal = (this.RightToLeftInternal ? DataGridViewAdvancedCellBorderStyle.Inset : DataGridViewAdvancedCellBorderStyle.InsetDouble);
							dataGridViewAdvancedBorderStyle.RightInternal = (this.RightToLeftInternal ? DataGridViewAdvancedCellBorderStyle.InsetDouble : DataGridViewAdvancedCellBorderStyle.Inset);
							dataGridViewAdvancedBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
							dataGridViewAdvancedBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							return dataGridViewAdvancedBorderStyle;
						case DataGridViewAdvancedCellBorderStyle.OutsetDouble:
						case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
							dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
							dataGridViewAdvancedBorderStyle.LeftInternal = (this.RightToLeftInternal ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
							dataGridViewAdvancedBorderStyle.RightInternal = (this.RightToLeftInternal ? DataGridViewAdvancedCellBorderStyle.OutsetDouble : DataGridViewAdvancedCellBorderStyle.Outset);
							dataGridViewAdvancedBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
							dataGridViewAdvancedBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							return dataGridViewAdvancedBorderStyle;
						}
						dataGridViewAdvancedBorderStyle = this.AdvancedColumnHeadersBorderStyle;
					}
					else if ((!this.RightToLeftInternal && this.AdvancedColumnHeadersBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.None) || (this.RightToLeftInternal && this.AdvancedColumnHeadersBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.None))
					{
						dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
						if (this.RightToLeftInternal)
						{
							dataGridViewAdvancedBorderStyle.LeftInternal = this.AdvancedColumnHeadersBorderStyle.Left;
							dataGridViewAdvancedBorderStyle.RightInternal = this.AdvancedRowHeadersBorderStyle.Right;
						}
						else
						{
							dataGridViewAdvancedBorderStyle.LeftInternal = this.AdvancedRowHeadersBorderStyle.Left;
							dataGridViewAdvancedBorderStyle.RightInternal = this.AdvancedColumnHeadersBorderStyle.Right;
						}
						dataGridViewAdvancedBorderStyle.TopInternal = this.AdvancedColumnHeadersBorderStyle.Top;
						dataGridViewAdvancedBorderStyle.BottomInternal = this.AdvancedColumnHeadersBorderStyle.Bottom;
					}
					else
					{
						dataGridViewAdvancedBorderStyle = this.AdvancedColumnHeadersBorderStyle;
					}
				}
				return dataGridViewAdvancedBorderStyle;
			}
		}

		// Token: 0x1700078A RID: 1930
		// (get) Token: 0x06002C7E RID: 11390 RVA: 0x00079134 File Offset: 0x00078134
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[Browsable(false)]
		public DataGridViewAdvancedBorderStyle AdvancedCellBorderStyle
		{
			get
			{
				return this.advancedCellBorderStyle;
			}
		}

		// Token: 0x1700078B RID: 1931
		// (get) Token: 0x06002C7F RID: 11391 RVA: 0x0007913C File Offset: 0x0007813C
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public DataGridViewAdvancedBorderStyle AdvancedColumnHeadersBorderStyle
		{
			get
			{
				return this.advancedColumnHeadersBorderStyle;
			}
		}

		// Token: 0x1700078C RID: 1932
		// (get) Token: 0x06002C80 RID: 11392 RVA: 0x00079144 File Offset: 0x00078144
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public DataGridViewAdvancedBorderStyle AdvancedRowHeadersBorderStyle
		{
			get
			{
				return this.advancedRowHeadersBorderStyle;
			}
		}

		// Token: 0x1700078D RID: 1933
		// (get) Token: 0x06002C81 RID: 11393 RVA: 0x0007914C File Offset: 0x0007814C
		// (set) Token: 0x06002C82 RID: 11394 RVA: 0x0007915A File Offset: 0x0007815A
		[SRCategory("CatBehavior")]
		[DefaultValue(true)]
		[SRDescription("DataGridView_AllowUserToAddRowsDescr")]
		public bool AllowUserToAddRows
		{
			get
			{
				return this.dataGridViewState1[1];
			}
			set
			{
				if (this.AllowUserToAddRows != value)
				{
					this.dataGridViewState1[1] = value;
					if (this.DataSource != null)
					{
						this.dataConnection.ResetCachedAllowUserToAddRowsInternal();
					}
					this.OnAllowUserToAddRowsChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x1700078E RID: 1934
		// (get) Token: 0x06002C83 RID: 11395 RVA: 0x00079190 File Offset: 0x00078190
		internal bool AllowUserToAddRowsInternal
		{
			get
			{
				if (this.DataSource == null)
				{
					return this.AllowUserToAddRows;
				}
				return this.AllowUserToAddRows && this.dataConnection.AllowAdd;
			}
		}

		// Token: 0x14000153 RID: 339
		// (add) Token: 0x06002C84 RID: 11396 RVA: 0x000791B6 File Offset: 0x000781B6
		// (remove) Token: 0x06002C85 RID: 11397 RVA: 0x000791C9 File Offset: 0x000781C9
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnAllowUserToAddRowsChangedDescr")]
		public event EventHandler AllowUserToAddRowsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOADDROWSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOADDROWSCHANGED, value);
			}
		}

		// Token: 0x1700078F RID: 1935
		// (get) Token: 0x06002C86 RID: 11398 RVA: 0x000791DC File Offset: 0x000781DC
		// (set) Token: 0x06002C87 RID: 11399 RVA: 0x000791EA File Offset: 0x000781EA
		[SRDescription("DataGridView_AllowUserToDeleteRowsDescr")]
		[DefaultValue(true)]
		[SRCategory("CatBehavior")]
		public bool AllowUserToDeleteRows
		{
			get
			{
				return this.dataGridViewState1[2];
			}
			set
			{
				if (this.AllowUserToDeleteRows != value)
				{
					this.dataGridViewState1[2] = value;
					this.OnAllowUserToDeleteRowsChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x17000790 RID: 1936
		// (get) Token: 0x06002C88 RID: 11400 RVA: 0x0007920D File Offset: 0x0007820D
		internal bool AllowUserToDeleteRowsInternal
		{
			get
			{
				if (this.DataSource == null)
				{
					return this.AllowUserToDeleteRows;
				}
				return this.AllowUserToDeleteRows && this.dataConnection.AllowRemove;
			}
		}

		// Token: 0x14000154 RID: 340
		// (add) Token: 0x06002C89 RID: 11401 RVA: 0x00079233 File Offset: 0x00078233
		// (remove) Token: 0x06002C8A RID: 11402 RVA: 0x00079246 File Offset: 0x00078246
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewOnAllowUserToDeleteRowsChangedDescr")]
		public event EventHandler AllowUserToDeleteRowsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTODELETEROWSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTODELETEROWSCHANGED, value);
			}
		}

		// Token: 0x17000791 RID: 1937
		// (get) Token: 0x06002C8B RID: 11403 RVA: 0x00079259 File Offset: 0x00078259
		// (set) Token: 0x06002C8C RID: 11404 RVA: 0x00079267 File Offset: 0x00078267
		[SRDescription("DataGridView_AllowUserToOrderColumnsDescr")]
		[DefaultValue(false)]
		[SRCategory("CatBehavior")]
		public bool AllowUserToOrderColumns
		{
			get
			{
				return this.dataGridViewState1[4];
			}
			set
			{
				if (this.AllowUserToOrderColumns != value)
				{
					this.dataGridViewState1[4] = value;
					this.OnAllowUserToOrderColumnsChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x14000155 RID: 341
		// (add) Token: 0x06002C8D RID: 11405 RVA: 0x0007928A File Offset: 0x0007828A
		// (remove) Token: 0x06002C8E RID: 11406 RVA: 0x0007929D File Offset: 0x0007829D
		[SRDescription("DataGridViewOnAllowUserToOrderColumnsChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler AllowUserToOrderColumnsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOORDERCOLUMNSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOORDERCOLUMNSCHANGED, value);
			}
		}

		// Token: 0x17000792 RID: 1938
		// (get) Token: 0x06002C8F RID: 11407 RVA: 0x000792B0 File Offset: 0x000782B0
		// (set) Token: 0x06002C90 RID: 11408 RVA: 0x000792BE File Offset: 0x000782BE
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_AllowUserToResizeColumnsDescr")]
		[DefaultValue(true)]
		public bool AllowUserToResizeColumns
		{
			get
			{
				return this.dataGridViewState2[2];
			}
			set
			{
				if (this.AllowUserToResizeColumns != value)
				{
					this.dataGridViewState2[2] = value;
					this.OnAllowUserToResizeColumnsChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x14000156 RID: 342
		// (add) Token: 0x06002C91 RID: 11409 RVA: 0x000792E1 File Offset: 0x000782E1
		// (remove) Token: 0x06002C92 RID: 11410 RVA: 0x000792F4 File Offset: 0x000782F4
		[SRDescription("DataGridViewOnAllowUserToResizeColumnsChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler AllowUserToResizeColumnsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZECOLUMNSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZECOLUMNSCHANGED, value);
			}
		}

		// Token: 0x17000793 RID: 1939
		// (get) Token: 0x06002C93 RID: 11411 RVA: 0x00079307 File Offset: 0x00078307
		// (set) Token: 0x06002C94 RID: 11412 RVA: 0x00079315 File Offset: 0x00078315
		[SRDescription("DataGridView_AllowUserToResizeRowsDescr")]
		[DefaultValue(true)]
		[SRCategory("CatBehavior")]
		public bool AllowUserToResizeRows
		{
			get
			{
				return this.dataGridViewState2[4];
			}
			set
			{
				if (this.AllowUserToResizeRows != value)
				{
					this.dataGridViewState2[4] = value;
					this.OnAllowUserToResizeRowsChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x14000157 RID: 343
		// (add) Token: 0x06002C95 RID: 11413 RVA: 0x00079338 File Offset: 0x00078338
		// (remove) Token: 0x06002C96 RID: 11414 RVA: 0x0007934B File Offset: 0x0007834B
		[SRDescription("DataGridViewOnAllowUserToResizeRowsChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler AllowUserToResizeRowsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZEROWSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZEROWSCHANGED, value);
			}
		}

		// Token: 0x17000794 RID: 1940
		// (get) Token: 0x06002C97 RID: 11415 RVA: 0x0007935E File Offset: 0x0007835E
		// (set) Token: 0x06002C98 RID: 11416 RVA: 0x0007938C File Offset: 0x0007838C
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_AlternatingRowsDefaultCellStyleDescr")]
		public DataGridViewCellStyle AlternatingRowsDefaultCellStyle
		{
			get
			{
				if (this.alternatingRowsDefaultCellStyle == null)
				{
					this.alternatingRowsDefaultCellStyle = new DataGridViewCellStyle();
					this.alternatingRowsDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.AlternatingRows);
				}
				return this.alternatingRowsDefaultCellStyle;
			}
			set
			{
				DataGridViewCellStyle dataGridViewCellStyle = this.AlternatingRowsDefaultCellStyle;
				dataGridViewCellStyle.RemoveScope(DataGridViewCellStyleScopes.AlternatingRows);
				this.alternatingRowsDefaultCellStyle = value;
				if (value != null)
				{
					this.alternatingRowsDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.AlternatingRows);
				}
				DataGridViewCellStyleDifferences differencesFrom = dataGridViewCellStyle.GetDifferencesFrom(this.AlternatingRowsDefaultCellStyle);
				if (differencesFrom != DataGridViewCellStyleDifferences.None)
				{
					this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize;
					this.OnAlternatingRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
				}
			}
		}

		// Token: 0x14000158 RID: 344
		// (add) Token: 0x06002C99 RID: 11417 RVA: 0x000793F1 File Offset: 0x000783F1
		// (remove) Token: 0x06002C9A RID: 11418 RVA: 0x00079404 File Offset: 0x00078404
		[SRDescription("DataGridViewAlternatingRowsDefaultCellStyleChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler AlternatingRowsDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWALTERNATINGROWSDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWALTERNATINGROWSDEFAULTCELLSTYLECHANGED, value);
			}
		}

		// Token: 0x17000795 RID: 1941
		// (get) Token: 0x06002C9B RID: 11419 RVA: 0x00079417 File Offset: 0x00078417
		internal bool ApplyVisualStylesToInnerCells
		{
			get
			{
				return Application.RenderWithVisualStyles;
			}
		}

		// Token: 0x17000796 RID: 1942
		// (get) Token: 0x06002C9C RID: 11420 RVA: 0x0007941E File Offset: 0x0007841E
		internal bool ApplyVisualStylesToHeaderCells
		{
			get
			{
				return Application.RenderWithVisualStyles && this.EnableHeadersVisualStyles;
			}
		}

		// Token: 0x17000797 RID: 1943
		// (get) Token: 0x06002C9D RID: 11421 RVA: 0x0007942F File Offset: 0x0007842F
		// (set) Token: 0x06002C9E RID: 11422 RVA: 0x00079441 File Offset: 0x00078441
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[Browsable(false)]
		[DefaultValue(true)]
		public bool AutoGenerateColumns
		{
			get
			{
				return this.dataGridViewState1[8388608];
			}
			set
			{
				if (this.dataGridViewState1[8388608] != value)
				{
					this.dataGridViewState1[8388608] = value;
					this.OnAutoGenerateColumnsChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x14000159 RID: 345
		// (add) Token: 0x06002C9F RID: 11423 RVA: 0x00079472 File Offset: 0x00078472
		// (remove) Token: 0x06002CA0 RID: 11424 RVA: 0x00079485 File Offset: 0x00078485
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[Browsable(false)]
		public event EventHandler AutoGenerateColumnsChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOGENERATECOLUMNSCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOGENERATECOLUMNSCHANGED, value);
			}
		}

		// Token: 0x17000798 RID: 1944
		// (get) Token: 0x06002CA1 RID: 11425 RVA: 0x00079498 File Offset: 0x00078498
		// (set) Token: 0x06002CA2 RID: 11426 RVA: 0x000794AA File Offset: 0x000784AA
		public override bool AutoSize
		{
			get
			{
				return this.dataGridViewState1[1073741824];
			}
			set
			{
				base.AutoSize = value;
				this.dataGridViewState1[1073741824] = value;
			}
		}

		// Token: 0x17000799 RID: 1945
		// (get) Token: 0x06002CA3 RID: 11427 RVA: 0x000794C4 File Offset: 0x000784C4
		// (set) Token: 0x06002CA4 RID: 11428 RVA: 0x000794CC File Offset: 0x000784CC
		[SRDescription("DataGridView_AutoSizeColumnsModeDescr")]
		[DefaultValue(DataGridViewAutoSizeColumnsMode.None)]
		[SRCategory("CatLayout")]
		public DataGridViewAutoSizeColumnsMode AutoSizeColumnsMode
		{
			get
			{
				return this.autoSizeColumnsMode;
			}
			set
			{
				switch (value)
				{
				case DataGridViewAutoSizeColumnsMode.None:
				case DataGridViewAutoSizeColumnsMode.ColumnHeader:
				case DataGridViewAutoSizeColumnsMode.AllCellsExceptHeader:
				case DataGridViewAutoSizeColumnsMode.AllCells:
				case DataGridViewAutoSizeColumnsMode.DisplayedCellsExceptHeader:
				case DataGridViewAutoSizeColumnsMode.DisplayedCells:
					goto IL_0050;
				case (DataGridViewAutoSizeColumnsMode)3:
				case (DataGridViewAutoSizeColumnsMode)5:
				case (DataGridViewAutoSizeColumnsMode)7:
				case (DataGridViewAutoSizeColumnsMode)9:
					break;
				default:
					if (value == DataGridViewAutoSizeColumnsMode.Fill)
					{
						goto IL_0050;
					}
					break;
				}
				throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewAutoSizeColumnsMode));
				IL_0050:
				if (this.autoSizeColumnsMode != value)
				{
					foreach (object obj in this.Columns)
					{
						DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
						if (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && dataGridViewColumn.Visible)
						{
							if (value == DataGridViewAutoSizeColumnsMode.ColumnHeader && !this.ColumnHeadersVisible)
							{
								throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeColumnsInvisibleColumnHeaders"));
							}
							if (value == DataGridViewAutoSizeColumnsMode.Fill && dataGridViewColumn.Frozen)
							{
								throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoFillFrozenColumns"));
							}
						}
					}
					DataGridViewAutoSizeColumnMode[] array = new DataGridViewAutoSizeColumnMode[this.Columns.Count];
					foreach (object obj2 in this.Columns)
					{
						DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj2;
						array[dataGridViewColumn2.Index] = dataGridViewColumn2.InheritedAutoSizeMode;
					}
					DataGridViewAutoSizeColumnsModeEventArgs dataGridViewAutoSizeColumnsModeEventArgs = new DataGridViewAutoSizeColumnsModeEventArgs(array);
					this.autoSizeColumnsMode = value;
					this.OnAutoSizeColumnsModeChanged(dataGridViewAutoSizeColumnsModeEventArgs);
				}
			}
		}

		// Token: 0x1400015A RID: 346
		// (add) Token: 0x06002CA5 RID: 11429 RVA: 0x00079648 File Offset: 0x00078648
		// (remove) Token: 0x06002CA6 RID: 11430 RVA: 0x0007965B File Offset: 0x0007865B
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewAutoSizeColumnsModeChangedDescr")]
		public event DataGridViewAutoSizeColumnsModeEventHandler AutoSizeColumnsModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNSMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNSMODECHANGED, value);
			}
		}

		// Token: 0x1700079A RID: 1946
		// (get) Token: 0x06002CA7 RID: 11431 RVA: 0x0007966E File Offset: 0x0007866E
		// (set) Token: 0x06002CA8 RID: 11432 RVA: 0x00079678 File Offset: 0x00078678
		[SRDescription("DataGridView_AutoSizeRowsModeDescr")]
		[DefaultValue(DataGridViewAutoSizeRowsMode.None)]
		[SRCategory("CatLayout")]
		public DataGridViewAutoSizeRowsMode AutoSizeRowsMode
		{
			get
			{
				return this.autoSizeRowsMode;
			}
			set
			{
				switch (value)
				{
				case DataGridViewAutoSizeRowsMode.None:
				case DataGridViewAutoSizeRowsMode.AllHeaders:
				case DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders:
				case DataGridViewAutoSizeRowsMode.AllCells:
				case DataGridViewAutoSizeRowsMode.DisplayedHeaders:
				case DataGridViewAutoSizeRowsMode.DisplayedCellsExceptHeaders:
				case DataGridViewAutoSizeRowsMode.DisplayedCells:
					if ((value == DataGridViewAutoSizeRowsMode.AllHeaders || value == DataGridViewAutoSizeRowsMode.DisplayedHeaders) && !this.RowHeadersVisible)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeRowsInvisibleRowHeader"));
					}
					if (this.autoSizeRowsMode != value)
					{
						DataGridViewAutoSizeModeEventArgs dataGridViewAutoSizeModeEventArgs = new DataGridViewAutoSizeModeEventArgs(this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None);
						this.autoSizeRowsMode = value;
						this.OnAutoSizeRowsModeChanged(dataGridViewAutoSizeModeEventArgs);
					}
					return;
				default:
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewAutoSizeRowsMode));
				}
			}
		}

		// Token: 0x1400015B RID: 347
		// (add) Token: 0x06002CA9 RID: 11433 RVA: 0x0007971D File Offset: 0x0007871D
		// (remove) Token: 0x06002CAA RID: 11434 RVA: 0x00079730 File Offset: 0x00078730
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewAutoSizeRowsModeChangedDescr")]
		public event DataGridViewAutoSizeModeEventHandler AutoSizeRowsModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZEROWSMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZEROWSMODECHANGED, value);
			}
		}

		// Token: 0x1700079B RID: 1947
		// (get) Token: 0x06002CAB RID: 11435 RVA: 0x00079743 File Offset: 0x00078743
		// (set) Token: 0x06002CAC RID: 11436 RVA: 0x0007974B File Offset: 0x0007874B
		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public override Color BackColor
		{
			get
			{
				return base.BackColor;
			}
			set
			{
				base.BackColor = value;
			}
		}

		// Token: 0x1400015C RID: 348
		// (add) Token: 0x06002CAD RID: 11437 RVA: 0x00079754 File Offset: 0x00078754
		// (remove) Token: 0x06002CAE RID: 11438 RVA: 0x0007975D File Offset: 0x0007875D
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Browsable(false)]
		public new event EventHandler BackColorChanged
		{
			add
			{
				base.BackColorChanged += value;
			}
			remove
			{
				base.BackColorChanged -= value;
			}
		}

		// Token: 0x1700079C RID: 1948
		// (get) Token: 0x06002CAF RID: 11439 RVA: 0x00079766 File Offset: 0x00078766
		internal SolidBrush BackgroundBrush
		{
			get
			{
				return this.backgroundBrush;
			}
		}

		// Token: 0x1700079D RID: 1949
		// (get) Token: 0x06002CB0 RID: 11440 RVA: 0x0007976E File Offset: 0x0007876E
		// (set) Token: 0x06002CB1 RID: 11441 RVA: 0x0007977C File Offset: 0x0007877C
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridViewBackgroundColorDescr")]
		public Color BackgroundColor
		{
			get
			{
				return this.backgroundBrush.Color;
			}
			set
			{
				if (value.IsEmpty)
				{
					throw new ArgumentException(SR.GetString("DataGridView_EmptyColor", new object[] { "BackgroundColor" }));
				}
				if (value.A < 255)
				{
					throw new ArgumentException(SR.GetString("DataGridView_TransparentColor", new object[] { "BackgroundColor" }));
				}
				if (!value.Equals(this.backgroundBrush.Color))
				{
					this.backgroundBrush = new SolidBrush(value);
					this.OnBackgroundColorChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x1400015D RID: 349
		// (add) Token: 0x06002CB2 RID: 11442 RVA: 0x00079816 File Offset: 0x00078816
		// (remove) Token: 0x06002CB3 RID: 11443 RVA: 0x00079829 File Offset: 0x00078829
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridViewBackgroundColorChangedDescr")]
		public event EventHandler BackgroundColorChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWBACKGROUNDCOLORCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWBACKGROUNDCOLORCHANGED, value);
			}
		}

		// Token: 0x1700079E RID: 1950
		// (get) Token: 0x06002CB4 RID: 11444 RVA: 0x0007983C File Offset: 0x0007883C
		// (set) Token: 0x06002CB5 RID: 11445 RVA: 0x00079844 File Offset: 0x00078844
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Browsable(false)]
		public override Image BackgroundImage
		{
			get
			{
				return base.BackgroundImage;
			}
			set
			{
				base.BackgroundImage = value;
			}
		}

		// Token: 0x1700079F RID: 1951
		// (get) Token: 0x06002CB6 RID: 11446 RVA: 0x0007984D File Offset: 0x0007884D
		// (set) Token: 0x06002CB7 RID: 11447 RVA: 0x00079855 File Offset: 0x00078855
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Browsable(false)]
		public override ImageLayout BackgroundImageLayout
		{
			get
			{
				return base.BackgroundImageLayout;
			}
			set
			{
				base.BackgroundImageLayout = value;
			}
		}

		// Token: 0x1400015E RID: 350
		// (add) Token: 0x06002CB8 RID: 11448 RVA: 0x0007985E File Offset: 0x0007885E
		// (remove) Token: 0x06002CB9 RID: 11449 RVA: 0x00079867 File Offset: 0x00078867
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler BackgroundImageChanged
		{
			add
			{
				base.BackgroundImageChanged += value;
			}
			remove
			{
				base.BackgroundImageChanged -= value;
			}
		}

		// Token: 0x1400015F RID: 351
		// (add) Token: 0x06002CBA RID: 11450 RVA: 0x00079870 File Offset: 0x00078870
		// (remove) Token: 0x06002CBB RID: 11451 RVA: 0x00079879 File Offset: 0x00078879
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Browsable(false)]
		public new event EventHandler BackgroundImageLayoutChanged
		{
			add
			{
				base.BackgroundImageLayoutChanged += value;
			}
			remove
			{
				base.BackgroundImageLayoutChanged -= value;
			}
		}

		// Token: 0x06002CBC RID: 11452 RVA: 0x00079884 File Offset: 0x00078884
		private bool ShouldSerializeBackgroundColor()
		{
			return !this.BackgroundColor.Equals(DataGridView.DefaultBackgroundBrush.Color);
		}

		// Token: 0x170007A0 RID: 1952
		// (get) Token: 0x06002CBD RID: 11453 RVA: 0x000798B7 File Offset: 0x000788B7
		// (set) Token: 0x06002CBE RID: 11454 RVA: 0x000798C0 File Offset: 0x000788C0
		[DefaultValue(BorderStyle.FixedSingle)]
		[SRDescription("DataGridView_BorderStyleDescr")]
		[SRCategory("CatAppearance")]
		public BorderStyle BorderStyle
		{
			get
			{
				return this.borderStyle;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 2))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(BorderStyle));
				}
				if (this.borderStyle != value)
				{
					using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.BorderStyle))
					{
						this.borderStyle = value;
						if (!this.AutoSize)
						{
							this.PerformLayoutPrivate(false, false, true, true);
						}
						base.Invalidate();
						this.OnBorderStyleChanged(EventArgs.Empty);
					}
				}
			}
		}

		// Token: 0x14000160 RID: 352
		// (add) Token: 0x06002CBF RID: 11455 RVA: 0x0007995C File Offset: 0x0007895C
		// (remove) Token: 0x06002CC0 RID: 11456 RVA: 0x0007996F File Offset: 0x0007896F
		[SRDescription("DataGridViewBorderStyleChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler BorderStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWBORDERSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWBORDERSTYLECHANGED, value);
			}
		}

		// Token: 0x170007A1 RID: 1953
		// (get) Token: 0x06002CC1 RID: 11457 RVA: 0x00079984 File Offset: 0x00078984
		private int BorderWidth
		{
			get
			{
				if (this.BorderStyle == BorderStyle.Fixed3D)
				{
					if (!Application.RenderWithVisualStyles)
					{
						return SystemInformation.Border3DSize.Width;
					}
					return 1;
				}
				else
				{
					if (this.BorderStyle == BorderStyle.FixedSingle)
					{
						return 1;
					}
					return 0;
				}
			}
		}

		// Token: 0x170007A2 RID: 1954
		// (get) Token: 0x06002CC2 RID: 11458 RVA: 0x000799C0 File Offset: 0x000789C0
		protected override bool CanEnableIme
		{
			get
			{
				bool flag = false;
				if (this.ptCurrentCell.X != -1 && this.ColumnEditable(this.ptCurrentCell.X))
				{
					DataGridViewCell currentCellInternal = this.CurrentCellInternal;
					if (!this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y))
					{
						flag = base.CanEnableIme;
					}
				}
				return flag;
			}
		}

		// Token: 0x170007A3 RID: 1955
		// (get) Token: 0x06002CC3 RID: 11459 RVA: 0x00079A14 File Offset: 0x00078A14
		// (set) Token: 0x06002CC4 RID: 11460 RVA: 0x00079B78 File Offset: 0x00078B78
		[Browsable(true)]
		[DefaultValue(DataGridViewCellBorderStyle.Single)]
		[SRDescription("DataGridView_CellBorderStyleDescr")]
		[SRCategory("CatAppearance")]
		public DataGridViewCellBorderStyle CellBorderStyle
		{
			get
			{
				switch (this.advancedCellBorderStyle.All)
				{
				case DataGridViewAdvancedCellBorderStyle.NotSet:
					if (this.advancedCellBorderStyle.Top == DataGridViewAdvancedCellBorderStyle.None && this.advancedCellBorderStyle.Bottom == DataGridViewAdvancedCellBorderStyle.None)
					{
						if (this.RightToLeftInternal)
						{
							if (this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.None && this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.Single)
							{
								return DataGridViewCellBorderStyle.SingleVertical;
							}
						}
						else if (this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.None && this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.Single)
						{
							return DataGridViewCellBorderStyle.SingleVertical;
						}
						if (this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.Outset && this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.Outset)
						{
							return DataGridViewCellBorderStyle.RaisedVertical;
						}
						if (this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.Inset && this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.Inset)
						{
							return DataGridViewCellBorderStyle.SunkenVertical;
						}
					}
					if (this.advancedCellBorderStyle.Left == DataGridViewAdvancedCellBorderStyle.None && this.advancedCellBorderStyle.Right == DataGridViewAdvancedCellBorderStyle.None)
					{
						if (this.advancedCellBorderStyle.Top == DataGridViewAdvancedCellBorderStyle.None && this.advancedCellBorderStyle.Bottom == DataGridViewAdvancedCellBorderStyle.Single)
						{
							return DataGridViewCellBorderStyle.SingleHorizontal;
						}
						if (this.advancedCellBorderStyle.Top == DataGridViewAdvancedCellBorderStyle.Outset && this.advancedCellBorderStyle.Bottom == DataGridViewAdvancedCellBorderStyle.Outset)
						{
							return DataGridViewCellBorderStyle.RaisedHorizontal;
						}
						if (this.advancedCellBorderStyle.Top == DataGridViewAdvancedCellBorderStyle.Inset && this.advancedCellBorderStyle.Bottom == DataGridViewAdvancedCellBorderStyle.Inset)
						{
							return DataGridViewCellBorderStyle.SunkenHorizontal;
						}
					}
					return DataGridViewCellBorderStyle.Custom;
				case DataGridViewAdvancedCellBorderStyle.None:
					return DataGridViewCellBorderStyle.None;
				case DataGridViewAdvancedCellBorderStyle.Single:
					return DataGridViewCellBorderStyle.Single;
				case DataGridViewAdvancedCellBorderStyle.Inset:
					return DataGridViewCellBorderStyle.Sunken;
				case DataGridViewAdvancedCellBorderStyle.Outset:
					return DataGridViewCellBorderStyle.Raised;
				}
				return DataGridViewCellBorderStyle.Custom;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 10))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewCellBorderStyle));
				}
				if (value != this.CellBorderStyle)
				{
					if (value == DataGridViewCellBorderStyle.Custom)
					{
						throw new ArgumentException(SR.GetString("DataGridView_CustomCellBorderStyleInvalid", new object[] { "CellBorderStyle" }));
					}
					this.dataGridViewOper[65536] = true;
					try
					{
						switch (value)
						{
						case DataGridViewCellBorderStyle.Single:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Single;
							break;
						case DataGridViewCellBorderStyle.Raised:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Outset;
							break;
						case DataGridViewCellBorderStyle.Sunken:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Inset;
							break;
						case DataGridViewCellBorderStyle.None:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							break;
						case DataGridViewCellBorderStyle.SingleVertical:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							if (this.RightToLeftInternal)
							{
								this.advancedCellBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Single;
							}
							else
							{
								this.advancedCellBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Single;
							}
							break;
						case DataGridViewCellBorderStyle.RaisedVertical:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							this.advancedCellBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							this.advancedCellBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							break;
						case DataGridViewCellBorderStyle.SunkenVertical:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							this.advancedCellBorderStyle.RightInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							this.advancedCellBorderStyle.LeftInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							break;
						case DataGridViewCellBorderStyle.SingleHorizontal:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							this.advancedCellBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Single;
							break;
						case DataGridViewCellBorderStyle.RaisedHorizontal:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							this.advancedCellBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							this.advancedCellBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
							break;
						case DataGridViewCellBorderStyle.SunkenHorizontal:
							this.advancedCellBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							this.advancedCellBorderStyle.TopInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							this.advancedCellBorderStyle.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
							break;
						}
					}
					finally
					{
						this.dataGridViewOper[65536] = false;
					}
					this.OnCellBorderStyleChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x14000161 RID: 353
		// (add) Token: 0x06002CC5 RID: 11461 RVA: 0x00079D8C File Offset: 0x00078D8C
		// (remove) Token: 0x06002CC6 RID: 11462 RVA: 0x00079D9F File Offset: 0x00078D9F
		[SRDescription("DataGridView_CellBorderStyleChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler CellBorderStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLBORDERSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLBORDERSTYLECHANGED, value);
			}
		}

		// Token: 0x170007A4 RID: 1956
		// (get) Token: 0x06002CC7 RID: 11463 RVA: 0x00079DB2 File Offset: 0x00078DB2
		// (set) Token: 0x06002CC8 RID: 11464 RVA: 0x00079DC4 File Offset: 0x00078DC4
		internal bool CellMouseDownInContentBounds
		{
			get
			{
				return this.dataGridViewState2[268435456];
			}
			set
			{
				this.dataGridViewState2[268435456] = value;
			}
		}

		// Token: 0x170007A5 RID: 1957
		// (get) Token: 0x06002CC9 RID: 11465 RVA: 0x00079DD7 File Offset: 0x00078DD7
		internal DataGridViewCellPaintingEventArgs CellPaintingEventArgs
		{
			get
			{
				if (this.dgvcpe == null)
				{
					this.dgvcpe = new DataGridViewCellPaintingEventArgs(this);
				}
				return this.dgvcpe;
			}
		}

		// Token: 0x170007A6 RID: 1958
		// (get) Token: 0x06002CCA RID: 11466 RVA: 0x00079DF3 File Offset: 0x00078DF3
		private DataGridViewCellStyleChangedEventArgs CellStyleChangedEventArgs
		{
			get
			{
				if (this.dgvcsce == null)
				{
					this.dgvcsce = new DataGridViewCellStyleChangedEventArgs();
				}
				return this.dgvcsce;
			}
		}

		// Token: 0x170007A7 RID: 1959
		// (get) Token: 0x06002CCB RID: 11467 RVA: 0x00079E0E File Offset: 0x00078E0E
		internal DataGridViewCellValueEventArgs CellValueEventArgs
		{
			get
			{
				if (this.dgvcve == null)
				{
					this.dgvcve = new DataGridViewCellValueEventArgs();
				}
				return this.dgvcve;
			}
		}

		// Token: 0x170007A8 RID: 1960
		// (get) Token: 0x06002CCC RID: 11468 RVA: 0x00079E29 File Offset: 0x00078E29
		// (set) Token: 0x06002CCD RID: 11469 RVA: 0x00079E31 File Offset: 0x00078E31
		[SRCategory("CatBehavior")]
		[DefaultValue(DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)]
		[SRDescription("DataGridView_ClipboardCopyModeDescr")]
		[Browsable(true)]
		public DataGridViewClipboardCopyMode ClipboardCopyMode
		{
			get
			{
				return this.clipboardCopyMode;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 3))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewClipboardCopyMode));
				}
				this.clipboardCopyMode = value;
			}
		}

		// Token: 0x170007A9 RID: 1961
		// (get) Token: 0x06002CCE RID: 11470 RVA: 0x00079E60 File Offset: 0x00078E60
		// (set) Token: 0x06002CCF RID: 11471 RVA: 0x00079E70 File Offset: 0x00078E70
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[Browsable(false)]
		[DefaultValue(0)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int ColumnCount
		{
			get
			{
				return this.Columns.Count;
			}
			set
			{
				if (value < 0)
				{
					throw new ArgumentOutOfRangeException("ColumnCount", SR.GetString("InvalidLowBoundArgumentEx", new object[]
					{
						"ColumnCount",
						value.ToString(CultureInfo.CurrentCulture),
						0.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (this.DataSource != null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotSetColumnCountOnDataBoundDataGridView"));
				}
				if (value != this.Columns.Count)
				{
					if (value == 0)
					{
						this.Columns.Clear();
						return;
					}
					if (value < this.Columns.Count)
					{
						while (value < this.Columns.Count)
						{
							int count = this.Columns.Count;
							this.Columns.RemoveAt(count - 1);
							if (this.Columns.Count >= count)
							{
								return;
							}
						}
						return;
					}
					while (value > this.Columns.Count)
					{
						int count2 = this.Columns.Count;
						this.Columns.Add(null, null);
						if (this.Columns.Count <= count2)
						{
							return;
						}
					}
				}
			}
		}

		// Token: 0x170007AA RID: 1962
		// (get) Token: 0x06002CD0 RID: 11472 RVA: 0x00079F80 File Offset: 0x00078F80
		// (set) Token: 0x06002CD1 RID: 11473 RVA: 0x00079FCC File Offset: 0x00078FCC
		[Browsable(true)]
		[SRCategory("CatAppearance")]
		[DefaultValue(DataGridViewHeaderBorderStyle.Raised)]
		[SRDescription("DataGridView_ColumnHeadersBorderStyleDescr")]
		public DataGridViewHeaderBorderStyle ColumnHeadersBorderStyle
		{
			get
			{
				switch (this.advancedColumnHeadersBorderStyle.All)
				{
				case DataGridViewAdvancedCellBorderStyle.NotSet:
					return DataGridViewHeaderBorderStyle.Custom;
				case DataGridViewAdvancedCellBorderStyle.None:
					return DataGridViewHeaderBorderStyle.None;
				case DataGridViewAdvancedCellBorderStyle.Single:
					return DataGridViewHeaderBorderStyle.Single;
				case DataGridViewAdvancedCellBorderStyle.InsetDouble:
					return DataGridViewHeaderBorderStyle.Sunken;
				case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
					return DataGridViewHeaderBorderStyle.Raised;
				}
				return DataGridViewHeaderBorderStyle.Custom;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 4))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewHeaderBorderStyle));
				}
				if (value != this.ColumnHeadersBorderStyle)
				{
					if (value == DataGridViewHeaderBorderStyle.Custom)
					{
						throw new ArgumentException(SR.GetString("DataGridView_CustomCellBorderStyleInvalid", new object[] { "ColumnHeadersBorderStyle" }));
					}
					this.dataGridViewOper[65536] = true;
					try
					{
						switch (value)
						{
						case DataGridViewHeaderBorderStyle.Single:
							this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Single;
							break;
						case DataGridViewHeaderBorderStyle.Raised:
							this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
							break;
						case DataGridViewHeaderBorderStyle.Sunken:
							this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.InsetDouble;
							break;
						case DataGridViewHeaderBorderStyle.None:
							this.advancedColumnHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							break;
						}
					}
					finally
					{
						this.dataGridViewOper[65536] = false;
					}
					this.OnColumnHeadersBorderStyleChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x14000162 RID: 354
		// (add) Token: 0x06002CD2 RID: 11474 RVA: 0x0007A0C0 File Offset: 0x000790C0
		// (remove) Token: 0x06002CD3 RID: 11475 RVA: 0x0007A0D3 File Offset: 0x000790D3
		[SRDescription("DataGridView_ColumnHeadersBorderStyleChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler ColumnHeadersBorderStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSBORDERSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSBORDERSTYLECHANGED, value);
			}
		}

		// Token: 0x170007AB RID: 1963
		// (get) Token: 0x06002CD4 RID: 11476 RVA: 0x0007A0E6 File Offset: 0x000790E6
		// (set) Token: 0x06002CD5 RID: 11477 RVA: 0x0007A104 File Offset: 0x00079104
		[SRDescription("DataGridView_ColumnHeadersDefaultCellStyleDescr")]
		[SRCategory("CatAppearance")]
		[AmbientValue(null)]
		public DataGridViewCellStyle ColumnHeadersDefaultCellStyle
		{
			get
			{
				if (this.columnHeadersDefaultCellStyle == null)
				{
					this.columnHeadersDefaultCellStyle = this.DefaultColumnHeadersDefaultCellStyle;
				}
				return this.columnHeadersDefaultCellStyle;
			}
			set
			{
				DataGridViewCellStyle dataGridViewCellStyle = this.ColumnHeadersDefaultCellStyle;
				dataGridViewCellStyle.RemoveScope(DataGridViewCellStyleScopes.ColumnHeaders);
				this.columnHeadersDefaultCellStyle = value;
				if (value != null)
				{
					this.columnHeadersDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.ColumnHeaders);
				}
				DataGridViewCellStyleDifferences differencesFrom = dataGridViewCellStyle.GetDifferencesFrom(this.ColumnHeadersDefaultCellStyle);
				if (differencesFrom != DataGridViewCellStyleDifferences.None)
				{
					this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize;
					this.OnColumnHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
				}
			}
		}

		// Token: 0x170007AC RID: 1964
		// (get) Token: 0x06002CD6 RID: 11478 RVA: 0x0007A164 File Offset: 0x00079164
		private DataGridViewCellStyle DefaultColumnHeadersDefaultCellStyle
		{
			get
			{
				DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
				dataGridViewCellStyle.BackColor = DataGridView.DefaultHeadersBackBrush.Color;
				dataGridViewCellStyle.ForeColor = DataGridView.DefaultForeBrush.Color;
				dataGridViewCellStyle.SelectionBackColor = DataGridView.DefaultSelectionBackBrush.Color;
				dataGridViewCellStyle.SelectionForeColor = DataGridView.DefaultSelectionForeBrush.Color;
				dataGridViewCellStyle.Font = base.Font;
				dataGridViewCellStyle.AlignmentInternal = DataGridViewContentAlignment.MiddleLeft;
				dataGridViewCellStyle.WrapModeInternal = DataGridViewTriState.True;
				dataGridViewCellStyle.AddScope(this, DataGridViewCellStyleScopes.ColumnHeaders);
				this.dataGridViewState1[67108864] = true;
				return dataGridViewCellStyle;
			}
		}

		// Token: 0x14000163 RID: 355
		// (add) Token: 0x06002CD7 RID: 11479 RVA: 0x0007A1ED File Offset: 0x000791ED
		// (remove) Token: 0x06002CD8 RID: 11480 RVA: 0x0007A200 File Offset: 0x00079200
		[SRDescription("DataGridViewColumnHeadersDefaultCellStyleChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler ColumnHeadersDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSDEFAULTCELLSTYLECHANGED, value);
			}
		}

		// Token: 0x170007AD RID: 1965
		// (get) Token: 0x06002CD9 RID: 11481 RVA: 0x0007A213 File Offset: 0x00079213
		// (set) Token: 0x06002CDA RID: 11482 RVA: 0x0007A21C File Offset: 0x0007921C
		[Localizable(true)]
		[SRDescription("DataGridView_ColumnHeadersHeightDescr")]
		[SRCategory("CatAppearance")]
		public int ColumnHeadersHeight
		{
			get
			{
				return this.columnHeadersHeight;
			}
			set
			{
				if (value < 4)
				{
					throw new ArgumentOutOfRangeException("ColumnHeadersHeight", SR.GetString("InvalidLowBoundArgumentEx", new object[]
					{
						"ColumnHeadersHeight",
						value.ToString(CultureInfo.CurrentCulture),
						4.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (value > 32768)
				{
					throw new ArgumentOutOfRangeException("ColumnHeadersHeight", SR.GetString("InvalidHighBoundArgumentEx", new object[]
					{
						"ColumnHeadersHeight",
						value.ToString(CultureInfo.CurrentCulture),
						32768.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.cachedColumnHeadersHeight = value;
					return;
				}
				if (this.columnHeadersHeight != value)
				{
					this.SetColumnHeadersHeightInternal(value, true);
				}
			}
		}

		// Token: 0x14000164 RID: 356
		// (add) Token: 0x06002CDB RID: 11483 RVA: 0x0007A2E5 File Offset: 0x000792E5
		// (remove) Token: 0x06002CDC RID: 11484 RVA: 0x0007A2F8 File Offset: 0x000792F8
		[SRDescription("DataGridViewColumnHeadersHeightChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler ColumnHeadersHeightChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED, value);
			}
		}

		// Token: 0x06002CDD RID: 11485 RVA: 0x0007A30B File Offset: 0x0007930B
		private bool ShouldSerializeColumnHeadersHeight()
		{
			return this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize && 23 != this.ColumnHeadersHeight;
		}

		// Token: 0x170007AE RID: 1966
		// (get) Token: 0x06002CDE RID: 11486 RVA: 0x0007A325 File Offset: 0x00079325
		// (set) Token: 0x06002CDF RID: 11487 RVA: 0x0007A330 File Offset: 0x00079330
		[RefreshProperties(RefreshProperties.All)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_ColumnHeadersHeightSizeModeDescr")]
		[DefaultValue(DataGridViewColumnHeadersHeightSizeMode.EnableResizing)]
		public DataGridViewColumnHeadersHeightSizeMode ColumnHeadersHeightSizeMode
		{
			get
			{
				return this.columnHeadersHeightSizeMode;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 2))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewColumnHeadersHeightSizeMode));
				}
				if (this.columnHeadersHeightSizeMode != value)
				{
					DataGridViewAutoSizeModeEventArgs dataGridViewAutoSizeModeEventArgs = new DataGridViewAutoSizeModeEventArgs(this.columnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize);
					this.columnHeadersHeightSizeMode = value;
					this.OnColumnHeadersHeightSizeModeChanged(dataGridViewAutoSizeModeEventArgs);
				}
			}
		}

		// Token: 0x14000165 RID: 357
		// (add) Token: 0x06002CE0 RID: 11488 RVA: 0x0007A389 File Offset: 0x00079389
		// (remove) Token: 0x06002CE1 RID: 11489 RVA: 0x0007A39C File Offset: 0x0007939C
		[SRDescription("DataGridView_ColumnHeadersHeightSizeModeChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewAutoSizeModeEventHandler ColumnHeadersHeightSizeModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTSIZEMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTSIZEMODECHANGED, value);
			}
		}

		// Token: 0x170007AF RID: 1967
		// (get) Token: 0x06002CE2 RID: 11490 RVA: 0x0007A3AF File Offset: 0x000793AF
		// (set) Token: 0x06002CE3 RID: 11491 RVA: 0x0007A3C0 File Offset: 0x000793C0
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridViewColumnHeadersVisibleDescr")]
		[DefaultValue(true)]
		public bool ColumnHeadersVisible
		{
			get
			{
				return this.dataGridViewState1[8];
			}
			set
			{
				if (this.ColumnHeadersVisible != value)
				{
					if (!value)
					{
						for (DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
						{
							if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader)
							{
								throw new InvalidOperationException(SR.GetString("DataGridView_ColumnHeadersCannotBeInvisible"));
							}
						}
					}
					using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.ColumnHeadersVisible))
					{
						this.dataGridViewState1[8] = value;
						this.layout.ColumnHeadersVisible = value;
						this.displayedBandsInfo.EnsureDirtyState();
						if (!this.AutoSize)
						{
							this.PerformLayoutPrivate(false, false, true, true);
						}
						this.InvalidateInside();
						this.OnColumnHeadersGlobalAutoSize();
					}
				}
			}
		}

		// Token: 0x170007B0 RID: 1968
		// (get) Token: 0x06002CE4 RID: 11492 RVA: 0x0007A490 File Offset: 0x00079490
		[MergableProperty(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		[Editor("System.Windows.Forms.Design.DataGridViewColumnCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(UITypeEditor))]
		public DataGridViewColumnCollection Columns
		{
			get
			{
				if (this.dataGridViewColumns == null)
				{
					this.dataGridViewColumns = this.CreateColumnsInstance();
				}
				return this.dataGridViewColumns;
			}
		}

		// Token: 0x170007B1 RID: 1969
		// (get) Token: 0x06002CE5 RID: 11493 RVA: 0x0007A4AC File Offset: 0x000794AC
		// (set) Token: 0x06002CE6 RID: 11494 RVA: 0x0007A504 File Offset: 0x00079504
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public DataGridViewCell CurrentCell
		{
			get
			{
				if (this.ptCurrentCell.X == -1 && this.ptCurrentCell.Y == -1)
				{
					return null;
				}
				DataGridViewRow dataGridViewRow = this.Rows[this.ptCurrentCell.Y];
				return dataGridViewRow.Cells[this.ptCurrentCell.X];
			}
			set
			{
				if ((value != null && (value.RowIndex != this.ptCurrentCell.Y || value.ColumnIndex != this.ptCurrentCell.X)) || (value == null && this.ptCurrentCell.X != -1))
				{
					if (value == null)
					{
						this.ClearSelection();
						if (!this.SetCurrentCellAddressCore(-1, -1, true, true, false))
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
						}
					}
					else
					{
						if (value.DataGridView != this)
						{
							throw new ArgumentException(SR.GetString("DataGridView_CellDoesNotBelongToDataGridView"));
						}
						if (!this.Columns[value.ColumnIndex].Visible || (this.Rows.GetRowState(value.RowIndex) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CurrentCellCannotBeInvisible"));
						}
						if (!this.ScrollIntoView(value.ColumnIndex, value.RowIndex, true))
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
						}
						if (this.IsInnerCellOutOfBounds(value.ColumnIndex, value.RowIndex))
						{
							return;
						}
						this.ClearSelection(value.ColumnIndex, value.RowIndex, true);
						if (!this.SetCurrentCellAddressCore(value.ColumnIndex, value.RowIndex, true, false, false))
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
						}
					}
				}
			}
		}

		// Token: 0x170007B2 RID: 1970
		// (get) Token: 0x06002CE7 RID: 11495 RVA: 0x0007A645 File Offset: 0x00079645
		[Browsable(false)]
		public Point CurrentCellAddress
		{
			get
			{
				return this.ptCurrentCell;
			}
		}

		// Token: 0x170007B3 RID: 1971
		// (get) Token: 0x06002CE8 RID: 11496 RVA: 0x0007A650 File Offset: 0x00079650
		private DataGridViewCell CurrentCellInternal
		{
			get
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(this.ptCurrentCell.Y);
				return dataGridViewRow.Cells[this.ptCurrentCell.X];
			}
		}

		// Token: 0x170007B4 RID: 1972
		// (get) Token: 0x06002CE9 RID: 11497 RVA: 0x0007A68C File Offset: 0x0007968C
		private bool CurrentCellIsFirstVisibleCell
		{
			get
			{
				if (this.ptCurrentCell.X == -1)
				{
					return false;
				}
				bool flag = null != this.Columns.GetPreviousColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				bool flag2 = -1 != this.Rows.GetPreviousRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
				return !flag && !flag2;
			}
		}

		// Token: 0x170007B5 RID: 1973
		// (get) Token: 0x06002CEA RID: 11498 RVA: 0x0007A6FC File Offset: 0x000796FC
		private bool CurrentCellIsLastVisibleCell
		{
			get
			{
				if (this.ptCurrentCell.X == -1)
				{
					return false;
				}
				bool flag = null != this.Columns.GetNextColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				bool flag2 = -1 != this.Rows.GetNextRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
				return !flag && !flag2;
			}
		}

		// Token: 0x170007B6 RID: 1974
		// (get) Token: 0x06002CEB RID: 11499 RVA: 0x0007A76C File Offset: 0x0007976C
		private bool CurrentCellIsEditedAndOnlySelectedCell
		{
			get
			{
				return this.ptCurrentCell.X != -1 && (this.editingControl != null && this.GetCellCount(DataGridViewElementStates.Selected) == 1) && this.CurrentCellInternal.Selected;
			}
		}

		// Token: 0x170007B7 RID: 1975
		// (get) Token: 0x06002CEC RID: 11500 RVA: 0x0007A79E File Offset: 0x0007979E
		[Browsable(false)]
		public DataGridViewRow CurrentRow
		{
			get
			{
				if (this.ptCurrentCell.X == -1)
				{
					return null;
				}
				return this.Rows[this.ptCurrentCell.Y];
			}
		}

		// Token: 0x170007B8 RID: 1976
		// (set) Token: 0x06002CED RID: 11501 RVA: 0x0007A7C8 File Offset: 0x000797C8
		internal Cursor CursorInternal
		{
			set
			{
				this.dataGridViewState2[2097152] = true;
				try
				{
					this.Cursor = value;
				}
				finally
				{
					this.dataGridViewState2[2097152] = false;
				}
			}
		}

		// Token: 0x170007B9 RID: 1977
		// (get) Token: 0x06002CEE RID: 11502 RVA: 0x0007A814 File Offset: 0x00079814
		internal DataGridView.DataGridViewDataConnection DataConnection
		{
			get
			{
				return this.dataConnection;
			}
		}

		// Token: 0x170007BA RID: 1978
		// (get) Token: 0x06002CEF RID: 11503 RVA: 0x0007A81C File Offset: 0x0007981C
		// (set) Token: 0x06002CF0 RID: 11504 RVA: 0x0007A838 File Offset: 0x00079838
		[SRDescription("DataGridViewDataMemberDescr")]
		[DefaultValue("")]
		[SRCategory("CatData")]
		[Editor("System.Windows.Forms.Design.DataMemberListEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(UITypeEditor))]
		public string DataMember
		{
			get
			{
				if (this.dataConnection == null)
				{
					return string.Empty;
				}
				return this.dataConnection.DataMember;
			}
			set
			{
				if (value != this.DataMember)
				{
					this.CurrentCell = null;
					if (this.dataConnection == null)
					{
						this.dataConnection = new DataGridView.DataGridViewDataConnection(this);
					}
					this.dataConnection.SetDataConnection(this.DataSource, value);
					this.OnDataMemberChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x14000166 RID: 358
		// (add) Token: 0x06002CF1 RID: 11505 RVA: 0x0007A88B File Offset: 0x0007988B
		// (remove) Token: 0x06002CF2 RID: 11506 RVA: 0x0007A89E File Offset: 0x0007989E
		[SRDescription("DataGridViewDataMemberChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler DataMemberChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDATAMEMBERCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDATAMEMBERCHANGED, value);
			}
		}

		// Token: 0x170007BB RID: 1979
		// (get) Token: 0x06002CF3 RID: 11507 RVA: 0x0007A8B1 File Offset: 0x000798B1
		// (set) Token: 0x06002CF4 RID: 11508 RVA: 0x0007A8C8 File Offset: 0x000798C8
		[SRDescription("DataGridViewDataSourceDescr")]
		[SRCategory("CatData")]
		[AttributeProvider(typeof(IListSource))]
		[DefaultValue(null)]
		[RefreshProperties(RefreshProperties.Repaint)]
		public object DataSource
		{
			get
			{
				if (this.dataConnection == null)
				{
					return null;
				}
				return this.dataConnection.DataSource;
			}
			set
			{
				if (value != this.DataSource)
				{
					this.CurrentCell = null;
					if (this.dataConnection == null)
					{
						this.dataConnection = new DataGridView.DataGridViewDataConnection(this);
						this.dataConnection.SetDataConnection(value, this.DataMember);
					}
					else
					{
						if (this.dataConnection.ShouldChangeDataMember(value))
						{
							this.DataMember = "";
						}
						this.dataConnection.SetDataConnection(value, this.DataMember);
						if (value == null)
						{
							this.dataConnection = null;
						}
					}
					this.OnDataSourceChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x14000167 RID: 359
		// (add) Token: 0x06002CF5 RID: 11509 RVA: 0x0007A94D File Offset: 0x0007994D
		// (remove) Token: 0x06002CF6 RID: 11510 RVA: 0x0007A960 File Offset: 0x00079960
		[SRDescription("DataGridViewDataSourceChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler DataSourceChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDATASOURCECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDATASOURCECHANGED, value);
			}
		}

		// Token: 0x170007BC RID: 1980
		// (get) Token: 0x06002CF7 RID: 11511 RVA: 0x0007A973 File Offset: 0x00079973
		private static SolidBrush DefaultBackBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.Window;
			}
		}

		// Token: 0x170007BD RID: 1981
		// (get) Token: 0x06002CF8 RID: 11512 RVA: 0x0007A97F File Offset: 0x0007997F
		private static SolidBrush DefaultBackgroundBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.AppWorkspace;
			}
		}

		// Token: 0x170007BE RID: 1982
		// (get) Token: 0x06002CF9 RID: 11513 RVA: 0x0007A98C File Offset: 0x0007998C
		// (set) Token: 0x06002CFA RID: 11514 RVA: 0x0007AB5C File Offset: 0x00079B5C
		[SRDescription("DataGridView_DefaultCellStyleDescr")]
		[AmbientValue(null)]
		[SRCategory("CatAppearance")]
		public DataGridViewCellStyle DefaultCellStyle
		{
			get
			{
				if (this.defaultCellStyle == null)
				{
					this.defaultCellStyle = this.DefaultDefaultCellStyle;
					return this.defaultCellStyle;
				}
				if (this.defaultCellStyle.BackColor == Color.Empty || this.defaultCellStyle.ForeColor == Color.Empty || this.defaultCellStyle.SelectionBackColor == Color.Empty || this.defaultCellStyle.SelectionForeColor == Color.Empty || this.defaultCellStyle.Font == null || this.defaultCellStyle.Alignment == DataGridViewContentAlignment.NotSet || this.defaultCellStyle.WrapMode == DataGridViewTriState.NotSet)
				{
					DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle(this.defaultCellStyle);
					dataGridViewCellStyle.Scope = DataGridViewCellStyleScopes.None;
					if (this.defaultCellStyle.BackColor == Color.Empty)
					{
						dataGridViewCellStyle.BackColor = DataGridView.DefaultBackBrush.Color;
					}
					if (this.defaultCellStyle.ForeColor == Color.Empty)
					{
						dataGridViewCellStyle.ForeColor = base.ForeColor;
						this.dataGridViewState1[1024] = true;
					}
					if (this.defaultCellStyle.SelectionBackColor == Color.Empty)
					{
						dataGridViewCellStyle.SelectionBackColor = DataGridView.DefaultSelectionBackBrush.Color;
					}
					if (this.defaultCellStyle.SelectionForeColor == Color.Empty)
					{
						dataGridViewCellStyle.SelectionForeColor = DataGridView.DefaultSelectionForeBrush.Color;
					}
					if (this.defaultCellStyle.Font == null)
					{
						dataGridViewCellStyle.Font = base.Font;
						this.dataGridViewState1[33554432] = true;
					}
					if (this.defaultCellStyle.Alignment == DataGridViewContentAlignment.NotSet)
					{
						dataGridViewCellStyle.AlignmentInternal = DataGridViewContentAlignment.MiddleLeft;
					}
					if (this.defaultCellStyle.WrapMode == DataGridViewTriState.NotSet)
					{
						dataGridViewCellStyle.WrapModeInternal = DataGridViewTriState.False;
					}
					dataGridViewCellStyle.AddScope(this, DataGridViewCellStyleScopes.DataGridView);
					return dataGridViewCellStyle;
				}
				return this.defaultCellStyle;
			}
			set
			{
				DataGridViewCellStyle dataGridViewCellStyle = this.DefaultCellStyle;
				dataGridViewCellStyle.RemoveScope(DataGridViewCellStyleScopes.DataGridView);
				this.defaultCellStyle = value;
				if (value != null)
				{
					this.defaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.DataGridView);
				}
				DataGridViewCellStyleDifferences differencesFrom = dataGridViewCellStyle.GetDifferencesFrom(this.DefaultCellStyle);
				if (differencesFrom != DataGridViewCellStyleDifferences.None)
				{
					this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize;
					this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
				}
			}
		}

		// Token: 0x170007BF RID: 1983
		// (get) Token: 0x06002CFB RID: 11515 RVA: 0x0007ABBC File Offset: 0x00079BBC
		private DataGridViewCellStyle DefaultDefaultCellStyle
		{
			get
			{
				DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
				dataGridViewCellStyle.BackColor = DataGridView.DefaultBackBrush.Color;
				dataGridViewCellStyle.ForeColor = base.ForeColor;
				dataGridViewCellStyle.SelectionBackColor = DataGridView.DefaultSelectionBackBrush.Color;
				dataGridViewCellStyle.SelectionForeColor = DataGridView.DefaultSelectionForeBrush.Color;
				dataGridViewCellStyle.Font = base.Font;
				dataGridViewCellStyle.AlignmentInternal = DataGridViewContentAlignment.MiddleLeft;
				dataGridViewCellStyle.WrapModeInternal = DataGridViewTriState.False;
				dataGridViewCellStyle.AddScope(this, DataGridViewCellStyleScopes.DataGridView);
				this.dataGridViewState1[33554432] = true;
				this.dataGridViewState1[1024] = true;
				return dataGridViewCellStyle;
			}
		}

		// Token: 0x14000168 RID: 360
		// (add) Token: 0x06002CFC RID: 11516 RVA: 0x0007AC51 File Offset: 0x00079C51
		// (remove) Token: 0x06002CFD RID: 11517 RVA: 0x0007AC64 File Offset: 0x00079C64
		[SRDescription("DataGridViewDefaultCellStyleChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler DefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDEFAULTCELLSTYLECHANGED, value);
			}
		}

		// Token: 0x170007C0 RID: 1984
		// (get) Token: 0x06002CFE RID: 11518 RVA: 0x0007AC77 File Offset: 0x00079C77
		private static SolidBrush DefaultForeBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.WindowText;
			}
		}

		// Token: 0x170007C1 RID: 1985
		// (get) Token: 0x06002CFF RID: 11519 RVA: 0x0007AC83 File Offset: 0x00079C83
		private static Color DefaultGridColor
		{
			get
			{
				return SystemColors.ControlDark;
			}
		}

		// Token: 0x170007C2 RID: 1986
		// (get) Token: 0x06002D00 RID: 11520 RVA: 0x0007AC8A File Offset: 0x00079C8A
		private static SolidBrush DefaultHeadersBackBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.Control;
			}
		}

		// Token: 0x170007C3 RID: 1987
		// (get) Token: 0x06002D01 RID: 11521 RVA: 0x0007AC98 File Offset: 0x00079C98
		private DataGridViewCellStyle DefaultRowHeadersDefaultCellStyle
		{
			get
			{
				DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
				dataGridViewCellStyle.BackColor = DataGridView.DefaultHeadersBackBrush.Color;
				dataGridViewCellStyle.ForeColor = DataGridView.DefaultForeBrush.Color;
				dataGridViewCellStyle.SelectionBackColor = DataGridView.DefaultSelectionBackBrush.Color;
				dataGridViewCellStyle.SelectionForeColor = DataGridView.DefaultSelectionForeBrush.Color;
				dataGridViewCellStyle.Font = base.Font;
				dataGridViewCellStyle.AlignmentInternal = DataGridViewContentAlignment.MiddleLeft;
				dataGridViewCellStyle.WrapModeInternal = DataGridViewTriState.True;
				dataGridViewCellStyle.AddScope(this, DataGridViewCellStyleScopes.RowHeaders);
				this.dataGridViewState1[134217728] = true;
				return dataGridViewCellStyle;
			}
		}

		// Token: 0x170007C4 RID: 1988
		// (get) Token: 0x06002D02 RID: 11522 RVA: 0x0007AD21 File Offset: 0x00079D21
		private static SolidBrush DefaultSelectionBackBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.Highlight;
			}
		}

		// Token: 0x170007C5 RID: 1989
		// (get) Token: 0x06002D03 RID: 11523 RVA: 0x0007AD2D File Offset: 0x00079D2D
		private static SolidBrush DefaultSelectionForeBrush
		{
			get
			{
				return (SolidBrush)SystemBrushes.HighlightText;
			}
		}

		// Token: 0x170007C6 RID: 1990
		// (get) Token: 0x06002D04 RID: 11524 RVA: 0x0007AD39 File Offset: 0x00079D39
		protected override Size DefaultSize
		{
			get
			{
				return new Size(240, 150);
			}
		}

		// Token: 0x170007C7 RID: 1991
		// (get) Token: 0x06002D05 RID: 11525 RVA: 0x0007AD4A File Offset: 0x00079D4A
		internal DataGridView.DisplayedBandsData DisplayedBandsInfo
		{
			get
			{
				return this.displayedBandsInfo;
			}
		}

		// Token: 0x170007C8 RID: 1992
		// (get) Token: 0x06002D06 RID: 11526 RVA: 0x0007AD54 File Offset: 0x00079D54
		public override Rectangle DisplayRectangle
		{
			get
			{
				Rectangle clientRectangle = base.ClientRectangle;
				if (this.horizScrollBar != null && this.horizScrollBar.Visible)
				{
					clientRectangle.Height -= this.horizScrollBar.Height;
				}
				if (this.vertScrollBar != null && this.vertScrollBar.Visible)
				{
					clientRectangle.Width -= this.vertScrollBar.Width;
					if (this.RightToLeftInternal)
					{
						clientRectangle.X = this.vertScrollBar.Width;
					}
				}
				return clientRectangle;
			}
		}

		// Token: 0x170007C9 RID: 1993
		// (get) Token: 0x06002D07 RID: 11527 RVA: 0x0007ADDF File Offset: 0x00079DDF
		// (set) Token: 0x06002D08 RID: 11528 RVA: 0x0007ADE8 File Offset: 0x00079DE8
		[DefaultValue(DataGridViewEditMode.EditOnKeystrokeOrF2)]
		[SRDescription("DataGridView_EditModeDescr")]
		[SRCategory("CatBehavior")]
		public DataGridViewEditMode EditMode
		{
			get
			{
				return this.editMode;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 4))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewEditMode));
				}
				if (this.editMode != value)
				{
					this.editMode = value;
					this.OnEditModeChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x14000169 RID: 361
		// (add) Token: 0x06002D09 RID: 11529 RVA: 0x0007AE36 File Offset: 0x00079E36
		// (remove) Token: 0x06002D0A RID: 11530 RVA: 0x0007AE49 File Offset: 0x00079E49
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_EditModeChangedDescr")]
		public event EventHandler EditModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWEDITMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWEDITMODECHANGED, value);
			}
		}

		// Token: 0x170007CA RID: 1994
		// (get) Token: 0x06002D0B RID: 11531 RVA: 0x0007AE5C File Offset: 0x00079E5C
		internal Point MouseEnteredCellAddress
		{
			get
			{
				return this.ptMouseEnteredCell;
			}
		}

		// Token: 0x170007CB RID: 1995
		// (get) Token: 0x06002D0C RID: 11532 RVA: 0x0007AE64 File Offset: 0x00079E64
		private bool MouseOverEditingControl
		{
			get
			{
				if (this.editingControl != null)
				{
					Point point = base.PointToClient(Control.MousePosition);
					return this.editingControl.Bounds.Contains(point);
				}
				return false;
			}
		}

		// Token: 0x170007CC RID: 1996
		// (get) Token: 0x06002D0D RID: 11533 RVA: 0x0007AE9C File Offset: 0x00079E9C
		private bool MouseOverEditingPanel
		{
			get
			{
				if (this.editingPanel != null)
				{
					Point point = base.PointToClient(Control.MousePosition);
					return this.editingPanel.Bounds.Contains(point);
				}
				return false;
			}
		}

		// Token: 0x170007CD RID: 1997
		// (get) Token: 0x06002D0E RID: 11534 RVA: 0x0007AED4 File Offset: 0x00079ED4
		private bool MouseOverScrollBar
		{
			get
			{
				Point point = base.PointToClient(Control.MousePosition);
				return (this.vertScrollBar != null && this.vertScrollBar.Visible && this.vertScrollBar.Bounds.Contains(point)) || (this.horizScrollBar != null && this.horizScrollBar.Visible && this.horizScrollBar.Bounds.Contains(point));
			}
		}

		// Token: 0x170007CE RID: 1998
		// (get) Token: 0x06002D0F RID: 11535 RVA: 0x0007AF45 File Offset: 0x00079F45
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[Browsable(false)]
		public Control EditingControl
		{
			get
			{
				return this.editingControl;
			}
		}

		// Token: 0x170007CF RID: 1999
		// (get) Token: 0x06002D10 RID: 11536 RVA: 0x0007AF4D File Offset: 0x00079F4D
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Panel EditingPanel
		{
			get
			{
				if (this.editingPanel == null)
				{
					this.editingPanel = new Panel();
					this.editingPanel.AccessibleName = SR.GetString("DataGridView_AccEditingPanelAccName");
				}
				return this.editingPanel;
			}
		}

		// Token: 0x170007D0 RID: 2000
		// (get) Token: 0x06002D11 RID: 11537 RVA: 0x0007AF7D File Offset: 0x00079F7D
		// (set) Token: 0x06002D12 RID: 11538 RVA: 0x0007AF8C File Offset: 0x00079F8C
		[SRCategory("CatAppearance")]
		[DefaultValue(true)]
		[SRDescription("DataGridView_EnableHeadersVisualStylesDescr")]
		public bool EnableHeadersVisualStyles
		{
			get
			{
				return this.dataGridViewState2[64];
			}
			set
			{
				if (this.dataGridViewState2[64] != value)
				{
					this.dataGridViewState2[64] = value;
					this.OnGlobalAutoSize();
				}
			}
		}

		// Token: 0x170007D1 RID: 2001
		// (get) Token: 0x06002D13 RID: 11539 RVA: 0x0007AFB4 File Offset: 0x00079FB4
		// (set) Token: 0x06002D14 RID: 11540 RVA: 0x0007AFF8 File Offset: 0x00079FF8
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public DataGridViewCell FirstDisplayedCell
		{
			get
			{
				Point firstDisplayedCellAddress = this.FirstDisplayedCellAddress;
				if (firstDisplayedCellAddress.X >= 0)
				{
					return this.Rows[firstDisplayedCellAddress.Y].Cells[firstDisplayedCellAddress.X];
				}
				return null;
			}
			set
			{
				if (value != null)
				{
					if (value.DataGridView != this)
					{
						throw new ArgumentException(SR.GetString("DataGridView_CellDoesNotBelongToDataGridView"));
					}
					if (value.RowIndex == -1 || value.ColumnIndex == -1)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedCellCannotBeAHeaderOrSharedCell"));
					}
					if (!value.Visible)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedCellCannotBeInvisible"));
					}
					if (!value.Frozen)
					{
						if (!this.Rows[value.RowIndex].Frozen)
						{
							this.FirstDisplayedScrollingRowIndex = value.RowIndex;
						}
						if (!this.Columns[value.ColumnIndex].Frozen)
						{
							this.FirstDisplayedScrollingColumnIndex = value.ColumnIndex;
						}
					}
				}
			}
		}

		// Token: 0x170007D2 RID: 2002
		// (get) Token: 0x06002D15 RID: 11541 RVA: 0x0007B0B0 File Offset: 0x0007A0B0
		private Point FirstDisplayedCellAddress
		{
			get
			{
				Point point = new Point(-1, -1);
				point.Y = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (point.Y == -1 && this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
				{
					point.Y = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				}
				if (point.Y >= 0)
				{
					point.X = this.FirstDisplayedColumnIndex;
				}
				return point;
			}
		}

		// Token: 0x170007D3 RID: 2003
		// (get) Token: 0x06002D16 RID: 11542 RVA: 0x0007B11C File Offset: 0x0007A11C
		internal int FirstDisplayedColumnIndex
		{
			get
			{
				if (!base.IsHandleCreated)
				{
					return -1;
				}
				int num = -1;
				DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
				if (firstColumn != null)
				{
					if (firstColumn.Frozen)
					{
						num = firstColumn.Index;
					}
					else if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
					{
						num = this.displayedBandsInfo.FirstDisplayedScrollingCol;
					}
				}
				return num;
			}
		}

		// Token: 0x170007D4 RID: 2004
		// (get) Token: 0x06002D17 RID: 11543 RVA: 0x0007B174 File Offset: 0x0007A174
		internal int FirstDisplayedRowIndex
		{
			get
			{
				if (!base.IsHandleCreated)
				{
					return -1;
				}
				int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
				if (num != -1 && (this.Rows.GetRowState(num) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None && this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
				{
					num = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				}
				return num;
			}
		}

		// Token: 0x170007D5 RID: 2005
		// (get) Token: 0x06002D18 RID: 11544 RVA: 0x0007B1C8 File Offset: 0x0007A1C8
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public int FirstDisplayedScrollingColumnHiddenWidth
		{
			get
			{
				return this.negOffset;
			}
		}

		// Token: 0x170007D6 RID: 2006
		// (get) Token: 0x06002D19 RID: 11545 RVA: 0x0007B1D0 File Offset: 0x0007A1D0
		// (set) Token: 0x06002D1A RID: 11546 RVA: 0x0007B1E0 File Offset: 0x0007A1E0
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int FirstDisplayedScrollingColumnIndex
		{
			get
			{
				return this.displayedBandsInfo.FirstDisplayedScrollingCol;
			}
			set
			{
				if (value < 0 || value >= this.Columns.Count)
				{
					throw new ArgumentOutOfRangeException("value");
				}
				if (!this.Columns[value].Visible)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedScrollingColumnCannotBeInvisible"));
				}
				if (this.Columns[value].Frozen)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedScrollingColumnCannotBeFrozen"));
				}
				if (!base.IsHandleCreated)
				{
					this.CreateHandle();
				}
				int width = this.layout.Data.Width;
				if (width <= 0)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_NoRoomForDisplayedColumns"));
				}
				int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (columnsWidth >= width)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FrozenColumnsPreventFirstDisplayedScrollingColumn"));
				}
				if (value == this.displayedBandsInfo.FirstDisplayedScrollingCol)
				{
					return;
				}
				if (this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, false, false))
				{
					return;
				}
				if (this.IsColumnOutOfBounds(value))
				{
					return;
				}
				this.ScrollColumnIntoView(value, -1, true, false);
				int num = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) - width;
				while (this.displayedBandsInfo.FirstDisplayedScrollingCol != value && this.HorizontalOffset < num)
				{
					this.ScrollColumns(1);
				}
			}
		}

		// Token: 0x170007D7 RID: 2007
		// (get) Token: 0x06002D1B RID: 11547 RVA: 0x0007B317 File Offset: 0x0007A317
		// (set) Token: 0x06002D1C RID: 11548 RVA: 0x0007B324 File Offset: 0x0007A324
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int FirstDisplayedScrollingRowIndex
		{
			get
			{
				return this.displayedBandsInfo.FirstDisplayedScrollingRow;
			}
			set
			{
				if (value < 0 || value >= this.Rows.Count)
				{
					throw new ArgumentOutOfRangeException("value");
				}
				if ((this.Rows.GetRowState(value) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedScrollingRowCannotBeInvisible"));
				}
				if ((this.Rows.GetRowState(value) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FirstDisplayedScrollingRowCannotBeFrozen"));
				}
				if (!base.IsHandleCreated)
				{
					this.CreateHandle();
				}
				int height = this.layout.Data.Height;
				if (height <= 0)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_NoRoomForDisplayedRows"));
				}
				int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (rowsHeight >= height)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_FrozenRowsPreventFirstDisplayedScrollingRow"));
				}
				if (value == this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					return;
				}
				if (this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, false, false))
				{
					return;
				}
				if (this.IsRowOutOfBounds(value))
				{
					return;
				}
				if (value > this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					int rowCount = this.Rows.GetRowCount(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, value);
					this.ScrollRowsByCount(rowCount, (rowCount > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement);
					return;
				}
				this.ScrollRowIntoView(-1, value, true, false);
			}
		}

		// Token: 0x170007D8 RID: 2008
		// (get) Token: 0x06002D1D RID: 11549 RVA: 0x0007B45E File Offset: 0x0007A45E
		// (set) Token: 0x06002D1E RID: 11550 RVA: 0x0007B466 File Offset: 0x0007A466
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public override Color ForeColor
		{
			get
			{
				return base.ForeColor;
			}
			set
			{
				base.ForeColor = value;
			}
		}

		// Token: 0x1400016A RID: 362
		// (add) Token: 0x06002D1F RID: 11551 RVA: 0x0007B46F File Offset: 0x0007A46F
		// (remove) Token: 0x06002D20 RID: 11552 RVA: 0x0007B478 File Offset: 0x0007A478
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[Browsable(false)]
		public new event EventHandler ForeColorChanged
		{
			add
			{
				base.ForeColorChanged += value;
			}
			remove
			{
				base.ForeColorChanged -= value;
			}
		}

		// Token: 0x170007D9 RID: 2009
		// (get) Token: 0x06002D21 RID: 11553 RVA: 0x0007B481 File Offset: 0x0007A481
		// (set) Token: 0x06002D22 RID: 11554 RVA: 0x0007B489 File Offset: 0x0007A489
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[Browsable(false)]
		public override Font Font
		{
			get
			{
				return base.Font;
			}
			set
			{
				base.Font = value;
			}
		}

		// Token: 0x1400016B RID: 363
		// (add) Token: 0x06002D23 RID: 11555 RVA: 0x0007B492 File Offset: 0x0007A492
		// (remove) Token: 0x06002D24 RID: 11556 RVA: 0x0007B49B File Offset: 0x0007A49B
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[Browsable(false)]
		public new event EventHandler FontChanged
		{
			add
			{
				base.FontChanged += value;
			}
			remove
			{
				base.FontChanged -= value;
			}
		}

		// Token: 0x170007DA RID: 2010
		// (get) Token: 0x06002D25 RID: 11557 RVA: 0x0007B4A4 File Offset: 0x0007A4A4
		// (set) Token: 0x06002D26 RID: 11558 RVA: 0x0007B4B4 File Offset: 0x0007A4B4
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridViewGridColorDescr")]
		public Color GridColor
		{
			get
			{
				return this.gridPen.Color;
			}
			set
			{
				if (value.IsEmpty)
				{
					throw new ArgumentException(SR.GetString("DataGridView_EmptyColor", new object[] { "GridColor" }));
				}
				if (value.A < 255)
				{
					throw new ArgumentException(SR.GetString("DataGridView_TransparentColor", new object[] { "GridColor" }));
				}
				if (!value.Equals(this.gridPen.Color))
				{
					if (this.gridPen != null)
					{
						this.gridPen.Dispose();
					}
					this.gridPen = new Pen(value);
					this.OnGridColorChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x1400016C RID: 364
		// (add) Token: 0x06002D27 RID: 11559 RVA: 0x0007B561 File Offset: 0x0007A561
		// (remove) Token: 0x06002D28 RID: 11560 RVA: 0x0007B574 File Offset: 0x0007A574
		[SRDescription("DataGridViewOnGridColorChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler GridColorChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWGRIDCOLORCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWGRIDCOLORCHANGED, value);
			}
		}

		// Token: 0x06002D29 RID: 11561 RVA: 0x0007B588 File Offset: 0x0007A588
		private bool ShouldSerializeGridColor()
		{
			return !this.GridPen.Color.Equals(DataGridView.DefaultGridColor);
		}

		// Token: 0x170007DB RID: 2011
		// (get) Token: 0x06002D2A RID: 11562 RVA: 0x0007B5BB File Offset: 0x0007A5BB
		internal Pen GridPen
		{
			get
			{
				return this.gridPen;
			}
		}

		// Token: 0x170007DC RID: 2012
		// (get) Token: 0x06002D2B RID: 11563 RVA: 0x0007B5C3 File Offset: 0x0007A5C3
		// (set) Token: 0x06002D2C RID: 11564 RVA: 0x0007B5CC File Offset: 0x0007A5CC
		internal int HorizontalOffset
		{
			get
			{
				return this.horizontalOffset;
			}
			set
			{
				if (value < 0)
				{
					value = 0;
				}
				int num = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) - this.layout.Data.Width;
				if (value > num && num > 0)
				{
					value = num;
				}
				if (value == this.horizontalOffset)
				{
					return;
				}
				int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
				int num2 = this.horizontalOffset - value;
				if (this.horizScrollBar.Enabled)
				{
					this.horizScrollBar.Value = value;
				}
				this.horizontalOffset = value;
				int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				Rectangle rectangle = this.layout.Data;
				if (this.layout.ColumnHeadersVisible)
				{
					rectangle = Rectangle.Union(rectangle, this.layout.ColumnHeaders);
				}
				else if (this.SingleVerticalBorderAdded)
				{
					if (!this.RightToLeftInternal)
					{
						rectangle.X--;
					}
					rectangle.Width++;
				}
				if (this.SingleVerticalBorderAdded && columnsWidth > 0)
				{
					if (!this.RightToLeftInternal)
					{
						rectangle.X++;
					}
					rectangle.Width--;
				}
				if (!this.RightToLeftInternal)
				{
					rectangle.X += columnsWidth;
				}
				rectangle.Width -= columnsWidth;
				this.displayedBandsInfo.FirstDisplayedScrollingCol = this.ComputeFirstVisibleScrollingColumn();
				this.ComputeVisibleColumns();
				if (this.editingControl != null && !this.Columns[this.ptCurrentCell.X].Frozen && this.displayedBandsInfo.FirstDisplayedScrollingCol > -1)
				{
					this.PositionEditingControl(true, false, false);
				}
				this.UpdateMouseEnteredCell(null, null);
				ScrollEventType scrollEventType;
				if (firstDisplayedScrollingCol == this.displayedBandsInfo.FirstDisplayedScrollingCol)
				{
					scrollEventType = ((num2 > 0) ? ScrollEventType.SmallIncrement : ScrollEventType.SmallDecrement);
				}
				else if (this.Columns.DisplayInOrder(firstDisplayedScrollingCol, this.displayedBandsInfo.FirstDisplayedScrollingCol))
				{
					scrollEventType = ((this.Columns.GetColumnCount(DataGridViewElementStates.Visible, firstDisplayedScrollingCol, this.displayedBandsInfo.FirstDisplayedScrollingCol) > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement);
				}
				else
				{
					scrollEventType = ((this.Columns.GetColumnCount(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingCol, firstDisplayedScrollingCol) > 1) ? ScrollEventType.LargeDecrement : ScrollEventType.SmallDecrement);
				}
				NativeMethods.RECT[] array = this.CreateScrollableRegion(rectangle);
				if (this.RightToLeftInternal)
				{
					num2 = -num2;
				}
				this.ScrollRectangles(array, num2);
				if (!this.dataGridViewState2[32768])
				{
					this.OnScroll(scrollEventType, this.horizontalOffset + num2, this.horizontalOffset, ScrollOrientation.HorizontalScroll);
				}
				this.FlushDisplayedChanged();
			}
		}

		// Token: 0x170007DD RID: 2013
		// (get) Token: 0x06002D2D RID: 11565 RVA: 0x0007B82E File Offset: 0x0007A82E
		protected ScrollBar HorizontalScrollBar
		{
			get
			{
				return this.horizScrollBar;
			}
		}

		// Token: 0x170007DE RID: 2014
		// (get) Token: 0x06002D2E RID: 11566 RVA: 0x0007B836 File Offset: 0x0007A836
		// (set) Token: 0x06002D2F RID: 11567 RVA: 0x0007B840 File Offset: 0x0007A840
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int HorizontalScrollingOffset
		{
			get
			{
				return this.horizontalOffset;
			}
			set
			{
				if (value < 0)
				{
					throw new ArgumentOutOfRangeException("HorizontalScrollingOffset", SR.GetString("InvalidLowBoundArgumentEx", new object[]
					{
						"HorizontalScrollingOffset",
						value.ToString(CultureInfo.CurrentCulture),
						0.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (value > 0 && this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) - this.layout.Data.Width <= 0)
				{
					return;
				}
				if (value == this.horizontalOffset)
				{
					return;
				}
				this.HorizontalOffset = value;
			}
		}

		// Token: 0x170007DF RID: 2015
		// (get) Token: 0x06002D30 RID: 11568 RVA: 0x0007B8CD File Offset: 0x0007A8CD
		private Timer HorizScrollTimer
		{
			get
			{
				if (this.horizScrollTimer == null)
				{
					this.horizScrollTimer = new Timer();
					this.horizScrollTimer.Tick += this.HorizScrollTimer_Tick;
				}
				return this.horizScrollTimer;
			}
		}

		// Token: 0x170007E0 RID: 2016
		// (get) Token: 0x06002D31 RID: 11569 RVA: 0x0007B8FF File Offset: 0x0007A8FF
		private bool InAdjustFillingColumns
		{
			get
			{
				return this.dataGridViewOper[524288] || this.dataGridViewOper[262144];
			}
		}

		// Token: 0x170007E1 RID: 2017
		// (get) Token: 0x06002D32 RID: 11570 RVA: 0x0007B925 File Offset: 0x0007A925
		internal bool InBeginEdit
		{
			get
			{
				return this.dataGridViewOper[2097152];
			}
		}

		// Token: 0x170007E2 RID: 2018
		// (get) Token: 0x06002D33 RID: 11571 RVA: 0x0007B937 File Offset: 0x0007A937
		// (set) Token: 0x06002D34 RID: 11572 RVA: 0x0007B949 File Offset: 0x0007A949
		internal bool InDisplayIndexAdjustments
		{
			get
			{
				return this.dataGridViewOper[2048];
			}
			set
			{
				this.dataGridViewOper[2048] = value;
			}
		}

		// Token: 0x170007E3 RID: 2019
		// (get) Token: 0x06002D35 RID: 11573 RVA: 0x0007B95C File Offset: 0x0007A95C
		internal bool InEndEdit
		{
			get
			{
				return this.dataGridViewOper[4194304];
			}
		}

		// Token: 0x170007E4 RID: 2020
		// (get) Token: 0x06002D36 RID: 11574 RVA: 0x0007B96E File Offset: 0x0007A96E
		private DataGridViewCellStyle InheritedEditingCellStyle
		{
			get
			{
				if (this.ptCurrentCell.X == -1)
				{
					return null;
				}
				return this.CurrentCellInternal.GetInheritedStyleInternal(this.ptCurrentCell.Y);
			}
		}

		// Token: 0x170007E5 RID: 2021
		// (get) Token: 0x06002D37 RID: 11575 RVA: 0x0007B996 File Offset: 0x0007A996
		internal bool InInitialization
		{
			get
			{
				return this.dataGridViewState2[524288];
			}
		}

		// Token: 0x170007E6 RID: 2022
		// (get) Token: 0x06002D38 RID: 11576 RVA: 0x0007B9A8 File Offset: 0x0007A9A8
		internal bool InSortOperation
		{
			get
			{
				return this.dataGridViewOper[64];
			}
		}

		// Token: 0x170007E7 RID: 2023
		// (get) Token: 0x06002D39 RID: 11577 RVA: 0x0007B9B7 File Offset: 0x0007A9B7
		[Browsable(false)]
		public bool IsCurrentCellDirty
		{
			get
			{
				return this.dataGridViewState1[131072];
			}
		}

		// Token: 0x170007E8 RID: 2024
		// (set) Token: 0x06002D3A RID: 11578 RVA: 0x0007B9C9 File Offset: 0x0007A9C9
		private bool IsCurrentCellDirtyInternal
		{
			set
			{
				if (value != this.dataGridViewState1[131072])
				{
					this.dataGridViewState1[131072] = value;
					this.OnCurrentCellDirtyStateChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x170007E9 RID: 2025
		// (get) Token: 0x06002D3B RID: 11579 RVA: 0x0007B9FA File Offset: 0x0007A9FA
		[Browsable(false)]
		public bool IsCurrentCellInEditMode
		{
			get
			{
				return this.editingControl != null || this.dataGridViewState1[32768];
			}
		}

		// Token: 0x170007EA RID: 2026
		// (get) Token: 0x06002D3C RID: 11580 RVA: 0x0007BA18 File Offset: 0x0007AA18
		[Browsable(false)]
		public bool IsCurrentRowDirty
		{
			get
			{
				if (!this.VirtualMode)
				{
					return this.dataGridViewState1[262144] || this.IsCurrentCellDirty;
				}
				QuestionEventArgs questionEventArgs = new QuestionEventArgs(this.dataGridViewState1[262144] || this.IsCurrentCellDirty);
				this.OnRowDirtyStateNeeded(questionEventArgs);
				return questionEventArgs.Response;
			}
		}

		// Token: 0x170007EB RID: 2027
		// (set) Token: 0x06002D3D RID: 11581 RVA: 0x0007BA78 File Offset: 0x0007AA78
		internal bool IsCurrentRowDirtyInternal
		{
			set
			{
				if (value != this.dataGridViewState1[262144])
				{
					this.dataGridViewState1[262144] = value;
					if (this.RowHeadersVisible && this.ShowEditingIcon && this.ptCurrentCell.Y >= 0)
					{
						this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
					}
				}
			}
		}

		// Token: 0x170007EC RID: 2028
		// (get) Token: 0x06002D3E RID: 11582 RVA: 0x0007BADC File Offset: 0x0007AADC
		private bool IsEscapeKeyEffective
		{
			get
			{
				return this.dataGridViewOper[1] || this.dataGridViewOper[2] || this.dataGridViewOper[128] || this.dataGridViewOper[256] || this.dataGridViewOper[32] || this.IsCurrentCellDirty || ((this.VirtualMode || this.DataSource != null) && this.IsCurrentRowDirty) || (this.EditMode != DataGridViewEditMode.EditOnEnter && this.editingControl != null) || this.dataGridViewState1[524288];
			}
		}

		// Token: 0x170007ED RID: 2029
		// (get) Token: 0x06002D3F RID: 11583 RVA: 0x0007BB80 File Offset: 0x0007AB80
		private bool IsMinimized
		{
			get
			{
				Form form = base.TopLevelControlInternal as Form;
				return form != null && form.WindowState == FormWindowState.Minimized;
			}
		}

		// Token: 0x170007EE RID: 2030
		// (get) Token: 0x06002D40 RID: 11584 RVA: 0x0007BBA8 File Offset: 0x0007ABA8
		internal bool IsRestricted
		{
			get
			{
				if (!this.dataGridViewState1[268435456])
				{
					this.dataGridViewState1[536870912] = false;
					try
					{
						IntSecurity.AllWindows.Demand();
					}
					catch (SecurityException)
					{
						this.dataGridViewState1[536870912] = true;
					}
					catch
					{
						this.dataGridViewState1[536870912] = true;
						this.dataGridViewState1[268435456] = true;
						throw;
					}
					this.dataGridViewState1[268435456] = true;
				}
				return this.dataGridViewState1[536870912];
			}
		}

		// Token: 0x06002D41 RID: 11585 RVA: 0x0007BC5C File Offset: 0x0007AC5C
		private bool IsSharedCellReadOnly(DataGridViewCell dataGridViewCell, int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			return this.ReadOnly || (rowState & DataGridViewElementStates.ReadOnly) != DataGridViewElementStates.None || (dataGridViewCell.OwningColumn != null && dataGridViewCell.OwningColumn.ReadOnly) || dataGridViewCell.StateIncludes(DataGridViewElementStates.ReadOnly);
		}

		// Token: 0x06002D42 RID: 11586 RVA: 0x0007BCA4 File Offset: 0x0007ACA4
		internal bool IsSharedCellSelected(DataGridViewCell dataGridViewCell, int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			return (rowState & DataGridViewElementStates.Selected) != DataGridViewElementStates.None || (dataGridViewCell.OwningColumn != null && dataGridViewCell.OwningColumn.Selected) || dataGridViewCell.StateIncludes(DataGridViewElementStates.Selected);
		}

		// Token: 0x06002D43 RID: 11587 RVA: 0x0007BCE4 File Offset: 0x0007ACE4
		internal bool IsSharedCellVisible(DataGridViewCell dataGridViewCell, int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			return (rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None && dataGridViewCell.OwningColumn != null && dataGridViewCell.OwningColumn.Visible;
		}

		// Token: 0x170007EF RID: 2031
		// (get) Token: 0x06002D44 RID: 11588 RVA: 0x0007BD1B File Offset: 0x0007AD1B
		internal DataGridView.LayoutData LayoutInfo
		{
			get
			{
				if (this.layout.dirty && base.IsHandleCreated)
				{
					this.PerformLayoutPrivate(false, true, false, false);
				}
				return this.layout;
			}
		}

		// Token: 0x170007F0 RID: 2032
		// (get) Token: 0x06002D45 RID: 11589 RVA: 0x0007BD42 File Offset: 0x0007AD42
		internal Point MouseDownCellAddress
		{
			get
			{
				return this.ptMouseDownCell;
			}
		}

		// Token: 0x170007F1 RID: 2033
		// (get) Token: 0x06002D46 RID: 11590 RVA: 0x0007BD4A File Offset: 0x0007AD4A
		// (set) Token: 0x06002D47 RID: 11591 RVA: 0x0007BD5C File Offset: 0x0007AD5C
		[DefaultValue(true)]
		[SRDescription("DataGridView_MultiSelectDescr")]
		[SRCategory("CatBehavior")]
		public bool MultiSelect
		{
			get
			{
				return this.dataGridViewState1[128];
			}
			set
			{
				if (this.MultiSelect != value)
				{
					this.ClearSelection();
					this.dataGridViewState1[128] = value;
					this.OnMultiSelectChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x1400016D RID: 365
		// (add) Token: 0x06002D48 RID: 11592 RVA: 0x0007BD89 File Offset: 0x0007AD89
		// (remove) Token: 0x06002D49 RID: 11593 RVA: 0x0007BD9C File Offset: 0x0007AD9C
		[SRDescription("DataGridViewOnMultiSelectChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler MultiSelectChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWMULTISELECTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWMULTISELECTCHANGED, value);
			}
		}

		// Token: 0x170007F2 RID: 2034
		// (get) Token: 0x06002D4A RID: 11594 RVA: 0x0007BDAF File Offset: 0x0007ADAF
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int NewRowIndex
		{
			get
			{
				return this.newRowIndex;
			}
		}

		// Token: 0x170007F3 RID: 2035
		// (get) Token: 0x06002D4B RID: 11595 RVA: 0x0007BDB7 File Offset: 0x0007ADB7
		internal bool NoDimensionChangeAllowed
		{
			get
			{
				return this.noDimensionChangeCount > 0;
			}
		}

		// Token: 0x170007F4 RID: 2036
		// (get) Token: 0x06002D4C RID: 11596 RVA: 0x0007BDC2 File Offset: 0x0007ADC2
		// (set) Token: 0x06002D4D RID: 11597 RVA: 0x0007BDCA File Offset: 0x0007ADCA
		private int NoSelectionChangeCount
		{
			get
			{
				return this.noSelectionChangeCount;
			}
			set
			{
				this.noSelectionChangeCount = value;
				if (value == 0)
				{
					this.FlushSelectionChanged();
				}
			}
		}

		// Token: 0x170007F5 RID: 2037
		// (get) Token: 0x06002D4E RID: 11598 RVA: 0x0007BDDC File Offset: 0x0007ADDC
		// (set) Token: 0x06002D4F RID: 11599 RVA: 0x0007BDE4 File Offset: 0x0007ADE4
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new Padding Padding
		{
			get
			{
				return base.Padding;
			}
			set
			{
				base.Padding = value;
			}
		}

		// Token: 0x1400016E RID: 366
		// (add) Token: 0x06002D50 RID: 11600 RVA: 0x0007BDED File Offset: 0x0007ADED
		// (remove) Token: 0x06002D51 RID: 11601 RVA: 0x0007BDF6 File Offset: 0x0007ADF6
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler PaddingChanged
		{
			add
			{
				base.PaddingChanged += value;
			}
			remove
			{
				base.PaddingChanged -= value;
			}
		}

		// Token: 0x170007F6 RID: 2038
		// (get) Token: 0x06002D52 RID: 11602 RVA: 0x0007BDFF File Offset: 0x0007ADFF
		internal DataGridViewCellStyle PlaceholderCellStyle
		{
			get
			{
				if (this.placeholderCellStyle == null)
				{
					this.placeholderCellStyle = new DataGridViewCellStyle();
				}
				return this.placeholderCellStyle;
			}
		}

		// Token: 0x170007F7 RID: 2039
		// (get) Token: 0x06002D53 RID: 11603 RVA: 0x0007BE1A File Offset: 0x0007AE1A
		// (set) Token: 0x06002D54 RID: 11604 RVA: 0x0007BE2C File Offset: 0x0007AE2C
		[Browsable(true)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_ReadOnlyDescr")]
		[DefaultValue(false)]
		public bool ReadOnly
		{
			get
			{
				return this.dataGridViewState1[1048576];
			}
			set
			{
				if (value != this.dataGridViewState1[1048576])
				{
					if (value && this.ptCurrentCell.X != -1 && this.IsCurrentCellInEditMode && !this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.Always, false, false, false, false, false, true, false, false))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CommitFailedCannotCompleteOperation"));
					}
					this.dataGridViewState1[1048576] = value;
					if (value)
					{
						try
						{
							this.dataGridViewOper[16384] = true;
							for (int i = 0; i < this.Columns.Count; i++)
							{
								this.SetReadOnlyColumnCore(i, false);
							}
							int count = this.Rows.Count;
							for (int j = 0; j < count; j++)
							{
								this.SetReadOnlyRowCore(j, false);
							}
						}
						finally
						{
							this.dataGridViewOper[16384] = false;
						}
					}
					this.OnReadOnlyChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x1400016F RID: 367
		// (add) Token: 0x06002D55 RID: 11605 RVA: 0x0007BF20 File Offset: 0x0007AF20
		// (remove) Token: 0x06002D56 RID: 11606 RVA: 0x0007BF33 File Offset: 0x0007AF33
		[SRDescription("DataGridViewOnReadOnlyChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler ReadOnlyChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWREADONLYCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWREADONLYCHANGED, value);
			}
		}

		// Token: 0x06002D57 RID: 11607 RVA: 0x0007BF46 File Offset: 0x0007AF46
		private void ResetCurrentCell()
		{
			if (this.ptCurrentCell.X != -1 && !this.SetCurrentCellAddressCore(-1, -1, true, true, false))
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
			}
		}

		// Token: 0x170007F8 RID: 2040
		// (get) Token: 0x06002D58 RID: 11608 RVA: 0x0007BF73 File Offset: 0x0007AF73
		internal bool ResizingOperationAboutToStart
		{
			get
			{
				return this.dataGridViewOper[8388608];
			}
		}

		// Token: 0x170007F9 RID: 2041
		// (get) Token: 0x06002D59 RID: 11609 RVA: 0x0007BF88 File Offset: 0x0007AF88
		internal bool RightToLeftInternal
		{
			get
			{
				if (this.dataGridViewState2[4096])
				{
					return this.dataGridViewState2[2048];
				}
				this.dataGridViewState2[2048] = this.RightToLeft == RightToLeft.Yes;
				this.dataGridViewState2[4096] = true;
				return this.dataGridViewState2[2048];
			}
		}

		// Token: 0x170007FA RID: 2042
		// (get) Token: 0x06002D5A RID: 11610 RVA: 0x0007BFF2 File Offset: 0x0007AFF2
		// (set) Token: 0x06002D5B RID: 11611 RVA: 0x0007C000 File Offset: 0x0007B000
		[Browsable(false)]
		[DefaultValue(0)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int RowCount
		{
			get
			{
				return this.Rows.Count;
			}
			set
			{
				if (this.AllowUserToAddRowsInternal)
				{
					if (value < 1)
					{
						throw new ArgumentOutOfRangeException("RowCount", SR.GetString("InvalidLowBoundArgumentEx", new object[]
						{
							"RowCount",
							value.ToString(CultureInfo.CurrentCulture),
							1.ToString(CultureInfo.CurrentCulture)
						}));
					}
				}
				else if (value < 0)
				{
					throw new ArgumentOutOfRangeException("RowCount", SR.GetString("InvalidLowBoundArgumentEx", new object[]
					{
						"RowCount",
						value.ToString(CultureInfo.CurrentCulture),
						0.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (this.DataSource != null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotSetRowCountOnDataBoundDataGridView"));
				}
				if (value != this.Rows.Count)
				{
					if (value == 0)
					{
						this.Rows.Clear();
						return;
					}
					if (value < this.Rows.Count)
					{
						while (value < this.Rows.Count)
						{
							int count = this.Rows.Count;
							this.Rows.RemoveAt(count - (this.AllowUserToAddRowsInternal ? 2 : 1));
							if (this.Rows.Count >= count)
							{
								return;
							}
						}
						return;
					}
					if (this.Columns.Count == 0)
					{
						DataGridViewTextBoxColumn dataGridViewTextBoxColumn = new DataGridViewTextBoxColumn();
						this.Columns.Add(dataGridViewTextBoxColumn);
					}
					int num = value - this.Rows.Count;
					if (num > 0)
					{
						this.Rows.Add(num);
					}
				}
			}
		}

		// Token: 0x170007FB RID: 2043
		// (get) Token: 0x06002D5C RID: 11612 RVA: 0x0007C17C File Offset: 0x0007B17C
		// (set) Token: 0x06002D5D RID: 11613 RVA: 0x0007C1C8 File Offset: 0x0007B1C8
		[SRDescription("DataGridView_RowHeadersBorderStyleDescr")]
		[DefaultValue(DataGridViewHeaderBorderStyle.Raised)]
		[SRCategory("CatAppearance")]
		[Browsable(true)]
		public DataGridViewHeaderBorderStyle RowHeadersBorderStyle
		{
			get
			{
				switch (this.advancedRowHeadersBorderStyle.All)
				{
				case DataGridViewAdvancedCellBorderStyle.NotSet:
					return DataGridViewHeaderBorderStyle.Custom;
				case DataGridViewAdvancedCellBorderStyle.None:
					return DataGridViewHeaderBorderStyle.None;
				case DataGridViewAdvancedCellBorderStyle.Single:
					return DataGridViewHeaderBorderStyle.Single;
				case DataGridViewAdvancedCellBorderStyle.InsetDouble:
					return DataGridViewHeaderBorderStyle.Sunken;
				case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
					return DataGridViewHeaderBorderStyle.Raised;
				}
				return DataGridViewHeaderBorderStyle.Custom;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 4))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewHeaderBorderStyle));
				}
				if (value != this.RowHeadersBorderStyle)
				{
					if (value == DataGridViewHeaderBorderStyle.Custom)
					{
						throw new ArgumentException(SR.GetString("DataGridView_CustomCellBorderStyleInvalid", new object[] { "RowHeadersBorderStyle" }));
					}
					this.dataGridViewOper[65536] = true;
					try
					{
						switch (value)
						{
						case DataGridViewHeaderBorderStyle.Single:
							this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.Single;
							break;
						case DataGridViewHeaderBorderStyle.Raised:
							this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
							break;
						case DataGridViewHeaderBorderStyle.Sunken:
							this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.InsetDouble;
							break;
						case DataGridViewHeaderBorderStyle.None:
							this.advancedRowHeadersBorderStyle.All = DataGridViewAdvancedCellBorderStyle.None;
							break;
						}
					}
					finally
					{
						this.dataGridViewOper[65536] = false;
					}
					this.OnRowHeadersBorderStyleChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x14000170 RID: 368
		// (add) Token: 0x06002D5E RID: 11614 RVA: 0x0007C2BC File Offset: 0x0007B2BC
		// (remove) Token: 0x06002D5F RID: 11615 RVA: 0x0007C2CF File Offset: 0x0007B2CF
		[SRDescription("DataGridView_RowHeadersBorderStyleChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler RowHeadersBorderStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSBORDERSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSBORDERSTYLECHANGED, value);
			}
		}

		// Token: 0x170007FC RID: 2044
		// (get) Token: 0x06002D60 RID: 11616 RVA: 0x0007C2E2 File Offset: 0x0007B2E2
		// (set) Token: 0x06002D61 RID: 11617 RVA: 0x0007C300 File Offset: 0x0007B300
		[SRDescription("DataGridView_RowHeadersDefaultCellStyleDescr")]
		[SRCategory("CatAppearance")]
		[AmbientValue(null)]
		public DataGridViewCellStyle RowHeadersDefaultCellStyle
		{
			get
			{
				if (this.rowHeadersDefaultCellStyle == null)
				{
					this.rowHeadersDefaultCellStyle = this.DefaultRowHeadersDefaultCellStyle;
				}
				return this.rowHeadersDefaultCellStyle;
			}
			set
			{
				DataGridViewCellStyle dataGridViewCellStyle = this.RowHeadersDefaultCellStyle;
				dataGridViewCellStyle.RemoveScope(DataGridViewCellStyleScopes.RowHeaders);
				this.rowHeadersDefaultCellStyle = value;
				if (value != null)
				{
					this.rowHeadersDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.RowHeaders);
				}
				DataGridViewCellStyleDifferences differencesFrom = dataGridViewCellStyle.GetDifferencesFrom(this.RowHeadersDefaultCellStyle);
				if (differencesFrom != DataGridViewCellStyleDifferences.None)
				{
					this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize;
					this.OnRowHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
				}
			}
		}

		// Token: 0x14000171 RID: 369
		// (add) Token: 0x06002D62 RID: 11618 RVA: 0x0007C35F File Offset: 0x0007B35F
		// (remove) Token: 0x06002D63 RID: 11619 RVA: 0x0007C372 File Offset: 0x0007B372
		[SRDescription("DataGridViewRowHeadersDefaultCellStyleChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler RowHeadersDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSDEFAULTCELLSTYLECHANGED, value);
			}
		}

		// Token: 0x170007FD RID: 2045
		// (get) Token: 0x06002D64 RID: 11620 RVA: 0x0007C385 File Offset: 0x0007B385
		// (set) Token: 0x06002D65 RID: 11621 RVA: 0x0007C394 File Offset: 0x0007B394
		[SRDescription("DataGridViewRowHeadersVisibleDescr")]
		[SRCategory("CatAppearance")]
		[DefaultValue(true)]
		public bool RowHeadersVisible
		{
			get
			{
				return this.dataGridViewState1[16];
			}
			set
			{
				if (this.RowHeadersVisible != value)
				{
					if (!value && (this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.AllHeaders || this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.DisplayedHeaders))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_RowHeadersCannotBeInvisible"));
					}
					using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.RowHeadersVisible))
					{
						this.dataGridViewState1[16] = value;
						this.layout.RowHeadersVisible = value;
						this.displayedBandsInfo.EnsureDirtyState();
						if (!this.AutoSize)
						{
							this.PerformLayoutPrivate(false, false, true, true);
						}
						this.InvalidateInside();
						this.OnRowHeadersGlobalAutoSize(value);
					}
				}
			}
		}

		// Token: 0x170007FE RID: 2046
		// (get) Token: 0x06002D66 RID: 11622 RVA: 0x0007C44C File Offset: 0x0007B44C
		// (set) Token: 0x06002D67 RID: 11623 RVA: 0x0007C454 File Offset: 0x0007B454
		[SRDescription("DataGridView_RowHeadersWidthDescr")]
		[SRCategory("CatLayout")]
		[Localizable(true)]
		public int RowHeadersWidth
		{
			get
			{
				return this.rowHeadersWidth;
			}
			set
			{
				if (value < 4)
				{
					throw new ArgumentOutOfRangeException("RowHeadersWidth", SR.GetString("InvalidLowBoundArgumentEx", new object[]
					{
						"RowHeadersWidth",
						value.ToString(CultureInfo.CurrentCulture),
						4.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (value > 32768)
				{
					throw new ArgumentOutOfRangeException("RowHeadersWidth", SR.GetString("InvalidHighBoundArgumentEx", new object[]
					{
						"RowHeadersWidth",
						value.ToString(CultureInfo.CurrentCulture),
						32768.ToString(CultureInfo.CurrentCulture)
					}));
				}
				if (this.RowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.RowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing)
				{
					this.cachedRowHeadersWidth = value;
					return;
				}
				if (this.rowHeadersWidth != value)
				{
					this.RowHeadersWidthInternal = value;
				}
			}
		}

		// Token: 0x170007FF RID: 2047
		// (set) Token: 0x06002D68 RID: 11624 RVA: 0x0007C524 File Offset: 0x0007B524
		private int RowHeadersWidthInternal
		{
			set
			{
				using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.RowHeadersWidth))
				{
					this.rowHeadersWidth = value;
					if (this.AutoSize)
					{
						this.InvalidateInside();
					}
					else if (this.layout.RowHeadersVisible)
					{
						this.PerformLayoutPrivate(false, false, true, true);
						this.InvalidateInside();
					}
					this.OnRowHeadersWidthChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x14000172 RID: 370
		// (add) Token: 0x06002D69 RID: 11625 RVA: 0x0007C5A4 File Offset: 0x0007B5A4
		// (remove) Token: 0x06002D6A RID: 11626 RVA: 0x0007C5B7 File Offset: 0x0007B5B7
		[SRDescription("DataGridViewRowHeadersWidthChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler RowHeadersWidthChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED, value);
			}
		}

		// Token: 0x06002D6B RID: 11627 RVA: 0x0007C5CA File Offset: 0x0007B5CA
		private bool ShouldSerializeRowHeadersWidth()
		{
			return (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing) && 41 != this.RowHeadersWidth;
		}

		// Token: 0x17000800 RID: 2048
		// (get) Token: 0x06002D6C RID: 11628 RVA: 0x0007C5EC File Offset: 0x0007B5EC
		// (set) Token: 0x06002D6D RID: 11629 RVA: 0x0007C5F4 File Offset: 0x0007B5F4
		[DefaultValue(DataGridViewRowHeadersWidthSizeMode.EnableResizing)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_RowHeadersWidthSizeModeDescr")]
		[RefreshProperties(RefreshProperties.All)]
		public DataGridViewRowHeadersWidthSizeMode RowHeadersWidthSizeMode
		{
			get
			{
				return this.rowHeadersWidthSizeMode;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 4))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewRowHeadersWidthSizeMode));
				}
				if (this.rowHeadersWidthSizeMode != value)
				{
					DataGridViewAutoSizeModeEventArgs dataGridViewAutoSizeModeEventArgs = new DataGridViewAutoSizeModeEventArgs(this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing);
					this.rowHeadersWidthSizeMode = value;
					this.OnRowHeadersWidthSizeModeChanged(dataGridViewAutoSizeModeEventArgs);
				}
			}
		}

		// Token: 0x14000173 RID: 371
		// (add) Token: 0x06002D6E RID: 11630 RVA: 0x0007C65B File Offset: 0x0007B65B
		// (remove) Token: 0x06002D6F RID: 11631 RVA: 0x0007C66E File Offset: 0x0007B66E
		[SRDescription("DataGridView_RowHeadersWidthSizeModeChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewAutoSizeModeEventHandler RowHeadersWidthSizeModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED, value);
			}
		}

		// Token: 0x17000801 RID: 2049
		// (get) Token: 0x06002D70 RID: 11632 RVA: 0x0007C681 File Offset: 0x0007B681
		[Browsable(false)]
		public DataGridViewRowCollection Rows
		{
			get
			{
				if (this.dataGridViewRows == null)
				{
					this.dataGridViewRows = this.CreateRowsInstance();
				}
				return this.dataGridViewRows;
			}
		}

		// Token: 0x17000802 RID: 2050
		// (get) Token: 0x06002D71 RID: 11633 RVA: 0x0007C69D File Offset: 0x0007B69D
		// (set) Token: 0x06002D72 RID: 11634 RVA: 0x0007C6C8 File Offset: 0x0007B6C8
		[SRDescription("DataGridView_RowsDefaultCellStyleDescr")]
		[SRCategory("CatAppearance")]
		public DataGridViewCellStyle RowsDefaultCellStyle
		{
			get
			{
				if (this.rowsDefaultCellStyle == null)
				{
					this.rowsDefaultCellStyle = new DataGridViewCellStyle();
					this.rowsDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.Rows);
				}
				return this.rowsDefaultCellStyle;
			}
			set
			{
				DataGridViewCellStyle dataGridViewCellStyle = this.RowsDefaultCellStyle;
				dataGridViewCellStyle.RemoveScope(DataGridViewCellStyleScopes.Rows);
				this.rowsDefaultCellStyle = value;
				if (value != null)
				{
					this.rowsDefaultCellStyle.AddScope(this, DataGridViewCellStyleScopes.Rows);
				}
				DataGridViewCellStyleDifferences differencesFrom = dataGridViewCellStyle.GetDifferencesFrom(this.RowsDefaultCellStyle);
				if (differencesFrom != DataGridViewCellStyleDifferences.None)
				{
					this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = differencesFrom == DataGridViewCellStyleDifferences.AffectPreferredSize;
					this.OnRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
				}
			}
		}

		// Token: 0x14000174 RID: 372
		// (add) Token: 0x06002D73 RID: 11635 RVA: 0x0007C727 File Offset: 0x0007B727
		// (remove) Token: 0x06002D74 RID: 11636 RVA: 0x0007C73A File Offset: 0x0007B73A
		[SRDescription("DataGridViewRowsDefaultCellStyleChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event EventHandler RowsDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWSDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWSDEFAULTCELLSTYLECHANGED, value);
			}
		}

		// Token: 0x17000803 RID: 2051
		// (get) Token: 0x06002D75 RID: 11637 RVA: 0x0007C74D File Offset: 0x0007B74D
		// (set) Token: 0x06002D76 RID: 11638 RVA: 0x0007C768 File Offset: 0x0007B768
		[Browsable(true)]
		[SRCategory("CatAppearance")]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Content)]
		[SRDescription("DataGridView_RowTemplateDescr")]
		public DataGridViewRow RowTemplate
		{
			get
			{
				if (this.rowTemplate == null)
				{
					this.rowTemplate = new DataGridViewRow();
				}
				return this.rowTemplate;
			}
			set
			{
				if (value != null && value.DataGridView != null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_RowAlreadyBelongsToDataGridView"));
				}
				this.rowTemplate = value;
			}
		}

		// Token: 0x06002D77 RID: 11639 RVA: 0x0007C799 File Offset: 0x0007B799
		private bool ShouldSerializeRowTemplate()
		{
			return this.rowTemplate != null;
		}

		// Token: 0x17000804 RID: 2052
		// (get) Token: 0x06002D78 RID: 11640 RVA: 0x0007C7A8 File Offset: 0x0007B7A8
		internal DataGridViewRow RowTemplateClone
		{
			get
			{
				DataGridViewRow dataGridViewRow = (DataGridViewRow)this.RowTemplate.Clone();
				this.CompleteCellsCollection(dataGridViewRow);
				return dataGridViewRow;
			}
		}

		// Token: 0x17000805 RID: 2053
		// (get) Token: 0x06002D79 RID: 11641 RVA: 0x0007C7CE File Offset: 0x0007B7CE
		// (set) Token: 0x06002D7A RID: 11642 RVA: 0x0007C7D8 File Offset: 0x0007B7D8
		[SRCategory("CatLayout")]
		[DefaultValue(ScrollBars.Both)]
		[SRDescription("DataGridView_ScrollBarsDescr")]
		[Localizable(true)]
		public ScrollBars ScrollBars
		{
			get
			{
				return this.scrollBars;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 3))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(ScrollBars));
				}
				if (this.scrollBars != value)
				{
					using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.ScrollBars))
					{
						DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
						int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
						if (firstColumn != null && firstRow != -1 && !this.ScrollIntoView(firstColumn.Index, firstRow, false))
						{
							throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
						}
						this.scrollBars = value;
						if (!this.AutoSize)
						{
							this.PerformLayoutPrivate(false, false, true, true);
						}
						base.Invalidate();
					}
				}
			}
		}

		// Token: 0x17000806 RID: 2054
		// (get) Token: 0x06002D7B RID: 11643 RVA: 0x0007C8B0 File Offset: 0x0007B8B0
		[Browsable(false)]
		public DataGridViewSelectedCellCollection SelectedCells
		{
			get
			{
				DataGridViewSelectedCellCollection dataGridViewSelectedCellCollection = new DataGridViewSelectedCellCollection();
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					dataGridViewSelectedCellCollection.AddCellLinkedList(this.individualSelectedCells);
					break;
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					foreach (object obj in ((IEnumerable)this.selectedBandIndexes))
					{
						int num = (int)obj;
						DataGridViewRow dataGridViewRow = this.Rows[num];
						foreach (object obj2 in dataGridViewRow.Cells)
						{
							DataGridViewCell dataGridViewCell = (DataGridViewCell)obj2;
							dataGridViewSelectedCellCollection.Add(dataGridViewCell);
						}
					}
					if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
					{
						dataGridViewSelectedCellCollection.AddCellLinkedList(this.individualSelectedCells);
					}
					break;
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					foreach (object obj3 in ((IEnumerable)this.selectedBandIndexes))
					{
						int num2 = (int)obj3;
						foreach (object obj4 in ((IEnumerable)this.Rows))
						{
							DataGridViewRow dataGridViewRow2 = (DataGridViewRow)obj4;
							dataGridViewSelectedCellCollection.Add(dataGridViewRow2.Cells[num2]);
						}
					}
					if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
					{
						dataGridViewSelectedCellCollection.AddCellLinkedList(this.individualSelectedCells);
					}
					break;
				}
				return dataGridViewSelectedCellCollection;
			}
		}

		// Token: 0x17000807 RID: 2055
		// (get) Token: 0x06002D7C RID: 11644 RVA: 0x0007CA80 File Offset: 0x0007BA80
		[Browsable(false)]
		public DataGridViewSelectedColumnCollection SelectedColumns
		{
			get
			{
				DataGridViewSelectedColumnCollection dataGridViewSelectedColumnCollection = new DataGridViewSelectedColumnCollection();
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					foreach (object obj in ((IEnumerable)this.selectedBandIndexes))
					{
						int num = (int)obj;
						dataGridViewSelectedColumnCollection.Add(this.Columns[num]);
					}
					break;
				}
				return dataGridViewSelectedColumnCollection;
			}
		}

		// Token: 0x17000808 RID: 2056
		// (get) Token: 0x06002D7D RID: 11645 RVA: 0x0007CB14 File Offset: 0x0007BB14
		[Browsable(false)]
		public DataGridViewSelectedRowCollection SelectedRows
		{
			get
			{
				DataGridViewSelectedRowCollection dataGridViewSelectedRowCollection = new DataGridViewSelectedRowCollection();
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					foreach (object obj in ((IEnumerable)this.selectedBandIndexes))
					{
						int num = (int)obj;
						dataGridViewSelectedRowCollection.Add(this.Rows[num]);
					}
					break;
				}
				return dataGridViewSelectedRowCollection;
			}
		}

		// Token: 0x17000809 RID: 2057
		// (get) Token: 0x06002D7E RID: 11646 RVA: 0x0007CBA8 File Offset: 0x0007BBA8
		// (set) Token: 0x06002D7F RID: 11647 RVA: 0x0007CBB0 File Offset: 0x0007BBB0
		[SRCategory("CatBehavior")]
		[DefaultValue(DataGridViewSelectionMode.RowHeaderSelect)]
		[SRDescription("DataGridView_SelectionModeDescr")]
		[Browsable(true)]
		public DataGridViewSelectionMode SelectionMode
		{
			get
			{
				return this.selectionMode;
			}
			set
			{
				if (!ClientUtils.IsEnumValid(value, (int)value, 0, 4))
				{
					throw new InvalidEnumArgumentException("value", (int)value, typeof(DataGridViewSelectionMode));
				}
				if (this.SelectionMode != value)
				{
					if (!this.dataGridViewState2[524288] && (value == DataGridViewSelectionMode.FullColumnSelect || value == DataGridViewSelectionMode.ColumnHeaderSelect))
					{
						foreach (object obj in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
							if (dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic)
							{
								throw new InvalidOperationException(SR.GetString("DataGridView_SelectionModeAndSortModeClash", new object[] { value.ToString() }));
							}
						}
					}
					this.ClearSelection();
					this.selectionMode = value;
				}
			}
		}

		// Token: 0x1700080A RID: 2058
		// (get) Token: 0x06002D80 RID: 11648 RVA: 0x0007CC8C File Offset: 0x0007BC8C
		// (set) Token: 0x06002D81 RID: 11649 RVA: 0x0007CCA0 File Offset: 0x0007BCA0
		[SRCategory("CatAppearance")]
		[SRDescription("DataGridView_ShowCellErrorsDescr")]
		[DefaultValue(true)]
		public bool ShowCellErrors
		{
			get
			{
				return this.dataGridViewState2[128];
			}
			set
			{
				if (this.ShowCellErrors != value)
				{
					this.dataGridViewState2[128] = value;
					if (base.IsHandleCreated && !base.DesignMode)
					{
						if (value && !this.ShowRowErrors && !this.ShowCellToolTips)
						{
							this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
						}
						if (!value && !this.ShowRowErrors && !this.ShowCellToolTips)
						{
							this.toolTipCaption = string.Empty;
							this.toolTipControl.Activate(false);
						}
						if (!value && (this.ShowRowErrors || this.ShowCellToolTips))
						{
							this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
						}
						this.OnGlobalAutoSize();
					}
					if (!this.layout.dirty && !base.DesignMode)
					{
						base.Invalidate(Rectangle.Union(this.layout.Data, this.layout.ColumnHeaders));
						base.Invalidate(this.layout.TopLeftHeader);
					}
				}
			}
		}

		// Token: 0x1700080B RID: 2059
		// (get) Token: 0x06002D82 RID: 11650 RVA: 0x0007CDAF File Offset: 0x0007BDAF
		// (set) Token: 0x06002D83 RID: 11651 RVA: 0x0007CDC4 File Offset: 0x0007BDC4
		[SRDescription("DataGridView_ShowCellToolTipsDescr")]
		[DefaultValue(true)]
		[SRCategory("CatAppearance")]
		public bool ShowCellToolTips
		{
			get
			{
				return this.dataGridViewState2[256];
			}
			set
			{
				if (this.ShowCellToolTips != value)
				{
					this.dataGridViewState2[256] = value;
					if (base.IsHandleCreated && !base.DesignMode)
					{
						if (value && !this.ShowRowErrors && !this.ShowCellErrors)
						{
							this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
						}
						if (!value && !this.ShowRowErrors && !this.ShowCellErrors)
						{
							this.toolTipCaption = string.Empty;
							this.toolTipControl.Activate(false);
						}
						if (!value && (this.ShowRowErrors || this.ShowCellErrors))
						{
							bool flag = !string.IsNullOrEmpty(this.toolTipCaption);
							Point mousePosition = Control.MousePosition;
							flag &= base.ClientRectangle.Contains(base.PointToClient(mousePosition));
							this.toolTipControl.Activate(flag);
						}
					}
					if (!this.layout.dirty && !base.DesignMode)
					{
						base.Invalidate(this.layout.Data);
					}
				}
			}
		}

		// Token: 0x1700080C RID: 2060
		// (get) Token: 0x06002D84 RID: 11652 RVA: 0x0007CECC File Offset: 0x0007BECC
		// (set) Token: 0x06002D85 RID: 11653 RVA: 0x0007CEDC File Offset: 0x0007BEDC
		[SRDescription("DataGridView_ShowEditingIconDescr")]
		[SRCategory("CatAppearance")]
		[DefaultValue(true)]
		public bool ShowEditingIcon
		{
			get
			{
				return this.dataGridViewState2[1];
			}
			set
			{
				if (this.ShowEditingIcon != value)
				{
					this.dataGridViewState2[1] = value;
					if (this.RowHeadersVisible)
					{
						if (this.VirtualMode || this.DataSource != null)
						{
							if (this.IsCurrentRowDirty)
							{
								this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
								return;
							}
						}
						else if (this.IsCurrentCellDirty)
						{
							this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
						}
					}
				}
			}
		}

		// Token: 0x1700080D RID: 2061
		// (get) Token: 0x06002D86 RID: 11654 RVA: 0x0007CF4C File Offset: 0x0007BF4C
		// (set) Token: 0x06002D87 RID: 11655 RVA: 0x0007CF60 File Offset: 0x0007BF60
		[SRDescription("DataGridView_ShowRowErrorsDescr")]
		[DefaultValue(true)]
		[SRCategory("CatAppearance")]
		public bool ShowRowErrors
		{
			get
			{
				return this.dataGridViewState2[512];
			}
			set
			{
				if (this.ShowRowErrors != value)
				{
					this.dataGridViewState2[512] = value;
					if (base.IsHandleCreated && !base.DesignMode)
					{
						if (value && !this.ShowCellErrors && !this.ShowCellToolTips)
						{
							this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
						}
						if (!value && !this.ShowCellErrors && !this.ShowCellToolTips)
						{
							this.toolTipCaption = string.Empty;
							this.toolTipControl.Activate(false);
						}
						if (!value && (this.ShowCellErrors || this.ShowCellToolTips))
						{
							this.toolTipControl.Activate(!string.IsNullOrEmpty(this.toolTipCaption));
						}
					}
					if (!this.layout.dirty && !base.DesignMode)
					{
						base.Invalidate(this.layout.RowHeaders);
					}
				}
			}
		}

		// Token: 0x1700080E RID: 2062
		// (get) Token: 0x06002D88 RID: 11656 RVA: 0x0007D048 File Offset: 0x0007C048
		internal bool SingleHorizontalBorderAdded
		{
			get
			{
				return !this.layout.ColumnHeadersVisible && (this.AdvancedCellBorderStyle.All == DataGridViewAdvancedCellBorderStyle.Single || this.CellBorderStyle == DataGridViewCellBorderStyle.SingleHorizontal);
			}
		}

		// Token: 0x1700080F RID: 2063
		// (get) Token: 0x06002D89 RID: 11657 RVA: 0x0007D072 File Offset: 0x0007C072
		internal bool SingleVerticalBorderAdded
		{
			get
			{
				return !this.layout.RowHeadersVisible && (this.AdvancedCellBorderStyle.All == DataGridViewAdvancedCellBorderStyle.Single || this.CellBorderStyle == DataGridViewCellBorderStyle.SingleVertical);
			}
		}

		// Token: 0x17000810 RID: 2064
		// (get) Token: 0x06002D8A RID: 11658 RVA: 0x0007D09C File Offset: 0x0007C09C
		[Browsable(false)]
		public DataGridViewColumn SortedColumn
		{
			get
			{
				return this.sortedColumn;
			}
		}

		// Token: 0x17000811 RID: 2065
		// (get) Token: 0x06002D8B RID: 11659 RVA: 0x0007D0A4 File Offset: 0x0007C0A4
		[Browsable(false)]
		public SortOrder SortOrder
		{
			get
			{
				return this.sortOrder;
			}
		}

		// Token: 0x17000812 RID: 2066
		// (get) Token: 0x06002D8C RID: 11660 RVA: 0x0007D0AC File Offset: 0x0007C0AC
		// (set) Token: 0x06002D8D RID: 11661 RVA: 0x0007D0BE File Offset: 0x0007C0BE
		[SRCategory("CatBehavior")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_StandardTabDescr")]
		[DefaultValue(false)]
		public bool StandardTab
		{
			get
			{
				return this.dataGridViewState1[8192];
			}
			set
			{
				if (this.dataGridViewState1[8192] != value)
				{
					this.dataGridViewState1[8192] = value;
				}
			}
		}

		// Token: 0x17000813 RID: 2067
		// (get) Token: 0x06002D8E RID: 11662 RVA: 0x0007D0E4 File Offset: 0x0007C0E4
		// (set) Token: 0x06002D8F RID: 11663 RVA: 0x0007D0EC File Offset: 0x0007C0EC
		[Bindable(false)]
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override string Text
		{
			get
			{
				return base.Text;
			}
			set
			{
				base.Text = value;
			}
		}

		// Token: 0x14000175 RID: 373
		// (add) Token: 0x06002D90 RID: 11664 RVA: 0x0007D0F5 File Offset: 0x0007C0F5
		// (remove) Token: 0x06002D91 RID: 11665 RVA: 0x0007D0FE File Offset: 0x0007C0FE
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Browsable(false)]
		public new event EventHandler TextChanged
		{
			add
			{
				base.TextChanged += value;
			}
			remove
			{
				base.TextChanged -= value;
			}
		}

		// Token: 0x17000814 RID: 2068
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public DataGridViewCell this[int columnIndex, int rowIndex]
		{
			get
			{
				DataGridViewRow dataGridViewRow = this.Rows[rowIndex];
				return dataGridViewRow.Cells[columnIndex];
			}
			set
			{
				DataGridViewRow dataGridViewRow = this.Rows[rowIndex];
				dataGridViewRow.Cells[columnIndex] = value;
			}
		}

		// Token: 0x17000815 RID: 2069
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public DataGridViewCell this[string columnName, int rowIndex]
		{
			get
			{
				DataGridViewRow dataGridViewRow = this.Rows[rowIndex];
				return dataGridViewRow.Cells[columnName];
			}
			set
			{
				DataGridViewRow dataGridViewRow = this.Rows[rowIndex];
				dataGridViewRow.Cells[columnName] = value;
			}
		}

		// Token: 0x17000816 RID: 2070
		// (get) Token: 0x06002D96 RID: 11670 RVA: 0x0007D1A7 File Offset: 0x0007C1A7
		private string ToolTipPrivate
		{
			get
			{
				return this.toolTipCaption;
			}
		}

		// Token: 0x17000817 RID: 2071
		// (get) Token: 0x06002D97 RID: 11671 RVA: 0x0007D1AF File Offset: 0x0007C1AF
		// (set) Token: 0x06002D98 RID: 11672 RVA: 0x0007D1CC File Offset: 0x0007C1CC
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		public DataGridViewHeaderCell TopLeftHeaderCell
		{
			get
			{
				if (this.topLeftHeaderCell == null)
				{
					this.TopLeftHeaderCell = new DataGridViewTopLeftHeaderCell();
				}
				return this.topLeftHeaderCell;
			}
			set
			{
				if (this.topLeftHeaderCell != value)
				{
					if (this.topLeftHeaderCell != null)
					{
						this.topLeftHeaderCell.DataGridViewInternal = null;
					}
					this.topLeftHeaderCell = value;
					if (value != null)
					{
						this.topLeftHeaderCell.DataGridViewInternal = this;
					}
					if (this.ColumnHeadersVisible && this.RowHeadersVisible)
					{
						this.OnColumnHeadersGlobalAutoSize();
						base.Invalidate(new Rectangle(this.layout.Inside.X, this.layout.Inside.Y, this.RowHeadersWidth, this.ColumnHeadersHeight));
					}
				}
			}
		}

		// Token: 0x17000818 RID: 2072
		// (get) Token: 0x06002D99 RID: 11673 RVA: 0x0007D259 File Offset: 0x0007C259
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Cursor UserSetCursor
		{
			get
			{
				if (this.dataGridViewState1[16777216])
				{
					return this.oldCursor;
				}
				return this.Cursor;
			}
		}

		// Token: 0x17000819 RID: 2073
		// (get) Token: 0x06002D9A RID: 11674 RVA: 0x0007D27A File Offset: 0x0007C27A
		// (set) Token: 0x06002D9B RID: 11675 RVA: 0x0007D284 File Offset: 0x0007C284
		internal int VerticalOffset
		{
			get
			{
				return this.verticalOffset;
			}
			set
			{
				if (value < 0)
				{
					value = 0;
				}
				int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				int num = this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight);
				if (value > this.vertScrollBar.Maximum - num)
				{
					value = this.vertScrollBar.Maximum - num;
				}
				if (value == this.verticalOffset)
				{
					return;
				}
				int num2 = value - this.verticalOffset;
				if (this.vertScrollBar.Enabled)
				{
					this.vertScrollBar.Value = value;
				}
				this.ScrollRowsByHeight(num2);
			}
		}

		// Token: 0x1700081A RID: 2074
		// (get) Token: 0x06002D9C RID: 11676 RVA: 0x0007D300 File Offset: 0x0007C300
		protected ScrollBar VerticalScrollBar
		{
			get
			{
				return this.vertScrollBar;
			}
		}

		// Token: 0x1700081B RID: 2075
		// (get) Token: 0x06002D9D RID: 11677 RVA: 0x0007D308 File Offset: 0x0007C308
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public int VerticalScrollingOffset
		{
			get
			{
				return this.verticalOffset;
			}
		}

		// Token: 0x1700081C RID: 2076
		// (get) Token: 0x06002D9E RID: 11678 RVA: 0x0007D310 File Offset: 0x0007C310
		private Timer VertScrollTimer
		{
			get
			{
				if (this.vertScrollTimer == null)
				{
					this.vertScrollTimer = new Timer();
					this.vertScrollTimer.Tick += this.VertScrollTimer_Tick;
				}
				return this.vertScrollTimer;
			}
		}

		// Token: 0x1700081D RID: 2077
		// (get) Token: 0x06002D9F RID: 11679 RVA: 0x0007D342 File Offset: 0x0007C342
		// (set) Token: 0x06002DA0 RID: 11680 RVA: 0x0007D354 File Offset: 0x0007C354
		[DefaultValue(false)]
		[SRDescription("DataGridViewVirtualModeDescr")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRCategory("CatBehavior")]
		public bool VirtualMode
		{
			get
			{
				return this.dataGridViewState1[65536];
			}
			set
			{
				if (this.dataGridViewState1[65536] != value)
				{
					this.dataGridViewState1[65536] = value;
					this.InvalidateRowHeights();
				}
			}
		}

		// Token: 0x1700081E RID: 2078
		// (get) Token: 0x06002DA1 RID: 11681 RVA: 0x0007D380 File Offset: 0x0007C380
		private bool VisibleCellExists
		{
			get
			{
				return this.Columns.GetFirstColumn(DataGridViewElementStates.Visible) != null && -1 != this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			}
		}

		// Token: 0x14000176 RID: 374
		// (add) Token: 0x06002DA2 RID: 11682 RVA: 0x0007D3A6 File Offset: 0x0007C3A6
		// (remove) Token: 0x06002DA3 RID: 11683 RVA: 0x0007D3B9 File Offset: 0x0007C3B9
		[SRDescription("DataGridViewAutoSizeColumnModeChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewAutoSizeColumnModeEventHandler AutoSizeColumnModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNMODECHANGED, value);
			}
		}

		// Token: 0x14000177 RID: 375
		// (add) Token: 0x06002DA4 RID: 11684 RVA: 0x0007D3CC File Offset: 0x0007C3CC
		// (remove) Token: 0x06002DA5 RID: 11685 RVA: 0x0007D3DF File Offset: 0x0007C3DF
		[SRDescription("DataGridView_CancelRowEditDescr")]
		[SRCategory("CatAction")]
		public event QuestionEventHandler CancelRowEdit
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCANCELROWEDIT, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCANCELROWEDIT, value);
			}
		}

		// Token: 0x14000178 RID: 376
		// (add) Token: 0x06002DA6 RID: 11686 RVA: 0x0007D3F2 File Offset: 0x0007C3F2
		// (remove) Token: 0x06002DA7 RID: 11687 RVA: 0x0007D405 File Offset: 0x0007C405
		[SRDescription("DataGridView_CellBeginEditDescr")]
		[SRCategory("CatData")]
		public event DataGridViewCellCancelEventHandler CellBeginEdit
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLBEGINEDIT, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLBEGINEDIT, value);
			}
		}

		// Token: 0x14000179 RID: 377
		// (add) Token: 0x06002DA8 RID: 11688 RVA: 0x0007D418 File Offset: 0x0007C418
		// (remove) Token: 0x06002DA9 RID: 11689 RVA: 0x0007D42B File Offset: 0x0007C42B
		[SRDescription("DataGridView_CellClickDescr")]
		[SRCategory("CatMouse")]
		public event DataGridViewCellEventHandler CellClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCLICK, value);
			}
		}

		// Token: 0x1400017A RID: 378
		// (add) Token: 0x06002DAA RID: 11690 RVA: 0x0007D43E File Offset: 0x0007C43E
		// (remove) Token: 0x06002DAB RID: 11691 RVA: 0x0007D451 File Offset: 0x0007C451
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_CellContentClick")]
		public event DataGridViewCellEventHandler CellContentClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTCLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTCLICK, value);
			}
		}

		// Token: 0x1400017B RID: 379
		// (add) Token: 0x06002DAC RID: 11692 RVA: 0x0007D464 File Offset: 0x0007C464
		// (remove) Token: 0x06002DAD RID: 11693 RVA: 0x0007D477 File Offset: 0x0007C477
		[SRDescription("DataGridView_CellContentDoubleClick")]
		[SRCategory("CatMouse")]
		public event DataGridViewCellEventHandler CellContentDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTDOUBLECLICK, value);
			}
		}

		// Token: 0x1400017C RID: 380
		// (add) Token: 0x06002DAE RID: 11694 RVA: 0x0007D48A File Offset: 0x0007C48A
		// (remove) Token: 0x06002DAF RID: 11695 RVA: 0x0007D49D File Offset: 0x0007C49D
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_CellContextMenuStripChanged")]
		public event DataGridViewCellEventHandler CellContextMenuStripChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPCHANGED, value);
			}
		}

		// Token: 0x1400017D RID: 381
		// (add) Token: 0x06002DB0 RID: 11696 RVA: 0x0007D4B0 File Offset: 0x0007C4B0
		// (remove) Token: 0x06002DB1 RID: 11697 RVA: 0x0007D4C3 File Offset: 0x0007C4C3
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_CellContextMenuStripNeeded")]
		public event DataGridViewCellContextMenuStripNeededEventHandler CellContextMenuStripNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPNEEDED, value);
			}
		}

		// Token: 0x1400017E RID: 382
		// (add) Token: 0x06002DB2 RID: 11698 RVA: 0x0007D4D6 File Offset: 0x0007C4D6
		// (remove) Token: 0x06002DB3 RID: 11699 RVA: 0x0007D4E9 File Offset: 0x0007C4E9
		[SRDescription("DataGridView_CellDoubleClickDescr")]
		[SRCategory("CatMouse")]
		public event DataGridViewCellEventHandler CellDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLDOUBLECLICK, value);
			}
		}

		// Token: 0x1400017F RID: 383
		// (add) Token: 0x06002DB4 RID: 11700 RVA: 0x0007D4FC File Offset: 0x0007C4FC
		// (remove) Token: 0x06002DB5 RID: 11701 RVA: 0x0007D50F File Offset: 0x0007C50F
		[SRDescription("DataGridView_CellEndEditDescr")]
		[SRCategory("CatData")]
		public event DataGridViewCellEventHandler CellEndEdit
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLENDEDIT, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLENDEDIT, value);
			}
		}

		// Token: 0x14000180 RID: 384
		// (add) Token: 0x06002DB6 RID: 11702 RVA: 0x0007D522 File Offset: 0x0007C522
		// (remove) Token: 0x06002DB7 RID: 11703 RVA: 0x0007D535 File Offset: 0x0007C535
		[SRDescription("DataGridView_CellEnterDescr")]
		[SRCategory("CatFocus")]
		public event DataGridViewCellEventHandler CellEnter
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLENTER, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLENTER, value);
			}
		}

		// Token: 0x14000181 RID: 385
		// (add) Token: 0x06002DB8 RID: 11704 RVA: 0x0007D548 File Offset: 0x0007C548
		// (remove) Token: 0x06002DB9 RID: 11705 RVA: 0x0007D55B File Offset: 0x0007C55B
		[SRDescription("DataGridView_CellErrorTextChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewCellEventHandler CellErrorTextChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTCHANGED, value);
			}
		}

		// Token: 0x14000182 RID: 386
		// (add) Token: 0x06002DBA RID: 11706 RVA: 0x0007D56E File Offset: 0x0007C56E
		// (remove) Token: 0x06002DBB RID: 11707 RVA: 0x0007D581 File Offset: 0x0007C581
		[SRDescription("DataGridView_CellErrorTextNeededDescr")]
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public event DataGridViewCellErrorTextNeededEventHandler CellErrorTextNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTNEEDED, value);
			}
		}

		// Token: 0x14000183 RID: 387
		// (add) Token: 0x06002DBC RID: 11708 RVA: 0x0007D594 File Offset: 0x0007C594
		// (remove) Token: 0x06002DBD RID: 11709 RVA: 0x0007D5A7 File Offset: 0x0007C5A7
		[SRDescription("DataGridView_CellFormattingDescr")]
		[SRCategory("CatDisplay")]
		public event DataGridViewCellFormattingEventHandler CellFormatting
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLFORMATTING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLFORMATTING, value);
			}
		}

		// Token: 0x14000184 RID: 388
		// (add) Token: 0x06002DBE RID: 11710 RVA: 0x0007D5BA File Offset: 0x0007C5BA
		// (remove) Token: 0x06002DBF RID: 11711 RVA: 0x0007D5CD File Offset: 0x0007C5CD
		[SRDescription("DataGridView_CellLeaveDescr")]
		[SRCategory("CatFocus")]
		public event DataGridViewCellEventHandler CellLeave
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLLEAVE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLLEAVE, value);
			}
		}

		// Token: 0x14000185 RID: 389
		// (add) Token: 0x06002DC0 RID: 11712 RVA: 0x0007D5E0 File Offset: 0x0007C5E0
		// (remove) Token: 0x06002DC1 RID: 11713 RVA: 0x0007D5F3 File Offset: 0x0007C5F3
		[SRDescription("DataGridView_CellMouseClickDescr")]
		[SRCategory("CatMouse")]
		public event DataGridViewCellMouseEventHandler CellMouseClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSECLICK, value);
			}
		}

		// Token: 0x14000186 RID: 390
		// (add) Token: 0x06002DC2 RID: 11714 RVA: 0x0007D606 File Offset: 0x0007C606
		// (remove) Token: 0x06002DC3 RID: 11715 RVA: 0x0007D619 File Offset: 0x0007C619
		[SRDescription("DataGridView_CellMouseDoubleClickDescr")]
		[SRCategory("CatMouse")]
		public event DataGridViewCellMouseEventHandler CellMouseDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOUBLECLICK, value);
			}
		}

		// Token: 0x14000187 RID: 391
		// (add) Token: 0x06002DC4 RID: 11716 RVA: 0x0007D62C File Offset: 0x0007C62C
		// (remove) Token: 0x06002DC5 RID: 11717 RVA: 0x0007D63F File Offset: 0x0007C63F
		[SRDescription("DataGridView_CellMouseDownDescr")]
		[SRCategory("CatMouse")]
		public event DataGridViewCellMouseEventHandler CellMouseDown
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOWN, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOWN, value);
			}
		}

		// Token: 0x14000188 RID: 392
		// (add) Token: 0x06002DC6 RID: 11718 RVA: 0x0007D652 File Offset: 0x0007C652
		// (remove) Token: 0x06002DC7 RID: 11719 RVA: 0x0007D665 File Offset: 0x0007C665
		[SRDescription("DataGridView_CellMouseEnterDescr")]
		[SRCategory("CatMouse")]
		public event DataGridViewCellEventHandler CellMouseEnter
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEENTER, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEENTER, value);
			}
		}

		// Token: 0x14000189 RID: 393
		// (add) Token: 0x06002DC8 RID: 11720 RVA: 0x0007D678 File Offset: 0x0007C678
		// (remove) Token: 0x06002DC9 RID: 11721 RVA: 0x0007D68B File Offset: 0x0007C68B
		[SRDescription("DataGridView_CellMouseLeaveDescr")]
		[SRCategory("CatMouse")]
		public event DataGridViewCellEventHandler CellMouseLeave
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSELEAVE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSELEAVE, value);
			}
		}

		// Token: 0x1400018A RID: 394
		// (add) Token: 0x06002DCA RID: 11722 RVA: 0x0007D69E File Offset: 0x0007C69E
		// (remove) Token: 0x06002DCB RID: 11723 RVA: 0x0007D6B1 File Offset: 0x0007C6B1
		[SRDescription("DataGridView_CellMouseMoveDescr")]
		[SRCategory("CatMouse")]
		public event DataGridViewCellMouseEventHandler CellMouseMove
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEMOVE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEMOVE, value);
			}
		}

		// Token: 0x1400018B RID: 395
		// (add) Token: 0x06002DCC RID: 11724 RVA: 0x0007D6C4 File Offset: 0x0007C6C4
		// (remove) Token: 0x06002DCD RID: 11725 RVA: 0x0007D6D7 File Offset: 0x0007C6D7
		[SRDescription("DataGridView_CellMouseUpDescr")]
		[SRCategory("CatMouse")]
		public event DataGridViewCellMouseEventHandler CellMouseUp
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEUP, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEUP, value);
			}
		}

		// Token: 0x1400018C RID: 396
		// (add) Token: 0x06002DCE RID: 11726 RVA: 0x0007D6EA File Offset: 0x0007C6EA
		// (remove) Token: 0x06002DCF RID: 11727 RVA: 0x0007D6FD File Offset: 0x0007C6FD
		[SRDescription("DataGridView_CellPaintingDescr")]
		[SRCategory("CatDisplay")]
		public event DataGridViewCellPaintingEventHandler CellPainting
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLPAINTING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLPAINTING, value);
			}
		}

		// Token: 0x1400018D RID: 397
		// (add) Token: 0x06002DD0 RID: 11728 RVA: 0x0007D710 File Offset: 0x0007C710
		// (remove) Token: 0x06002DD1 RID: 11729 RVA: 0x0007D723 File Offset: 0x0007C723
		[SRDescription("DataGridView_CellParsingDescr")]
		[SRCategory("CatDisplay")]
		public event DataGridViewCellParsingEventHandler CellParsing
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLPARSING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLPARSING, value);
			}
		}

		// Token: 0x1400018E RID: 398
		// (add) Token: 0x06002DD2 RID: 11730 RVA: 0x0007D736 File Offset: 0x0007C736
		// (remove) Token: 0x06002DD3 RID: 11731 RVA: 0x0007D749 File Offset: 0x0007C749
		[SRDescription("DataGridView_CellStateChangedDescr")]
		[SRCategory("CatBehavior")]
		public event DataGridViewCellStateChangedEventHandler CellStateChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTATECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTATECHANGED, value);
			}
		}

		// Token: 0x1400018F RID: 399
		// (add) Token: 0x06002DD4 RID: 11732 RVA: 0x0007D75C File Offset: 0x0007C75C
		// (remove) Token: 0x06002DD5 RID: 11733 RVA: 0x0007D76F File Offset: 0x0007C76F
		[SRDescription("DataGridView_CellStyleChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewCellEventHandler CellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECHANGED, value);
			}
		}

		// Token: 0x14000190 RID: 400
		// (add) Token: 0x06002DD6 RID: 11734 RVA: 0x0007D782 File Offset: 0x0007C782
		// (remove) Token: 0x06002DD7 RID: 11735 RVA: 0x0007D795 File Offset: 0x0007C795
		[SRDescription("DataGridView_CellStyleContentChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewCellStyleContentChangedEventHandler CellStyleContentChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECONTENTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECONTENTCHANGED, value);
			}
		}

		// Token: 0x14000191 RID: 401
		// (add) Token: 0x06002DD8 RID: 11736 RVA: 0x0007D7A8 File Offset: 0x0007C7A8
		// (remove) Token: 0x06002DD9 RID: 11737 RVA: 0x0007D7BB File Offset: 0x0007C7BB
		[SRDescription("DataGridView_CellToolTipTextChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewCellEventHandler CellToolTipTextChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTCHANGED, value);
			}
		}

		// Token: 0x14000192 RID: 402
		// (add) Token: 0x06002DDA RID: 11738 RVA: 0x0007D7CE File Offset: 0x0007C7CE
		// (remove) Token: 0x06002DDB RID: 11739 RVA: 0x0007D7E1 File Offset: 0x0007C7E1
		[SRDescription("DataGridView_CellToolTipTextNeededDescr")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRCategory("CatBehavior")]
		public event DataGridViewCellToolTipTextNeededEventHandler CellToolTipTextNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTNEEDED, value);
			}
		}

		// Token: 0x14000193 RID: 403
		// (add) Token: 0x06002DDC RID: 11740 RVA: 0x0007D7F4 File Offset: 0x0007C7F4
		// (remove) Token: 0x06002DDD RID: 11741 RVA: 0x0007D807 File Offset: 0x0007C807
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_CellValidatedDescr")]
		public event DataGridViewCellEventHandler CellValidated
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATED, value);
			}
		}

		// Token: 0x14000194 RID: 404
		// (add) Token: 0x06002DDE RID: 11742 RVA: 0x0007D81A File Offset: 0x0007C81A
		// (remove) Token: 0x06002DDF RID: 11743 RVA: 0x0007D82D File Offset: 0x0007C82D
		[SRDescription("DataGridView_CellValidatingDescr")]
		[SRCategory("CatFocus")]
		public event DataGridViewCellValidatingEventHandler CellValidating
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATING, value);
			}
		}

		// Token: 0x14000195 RID: 405
		// (add) Token: 0x06002DE0 RID: 11744 RVA: 0x0007D840 File Offset: 0x0007C840
		// (remove) Token: 0x06002DE1 RID: 11745 RVA: 0x0007D853 File Offset: 0x0007C853
		[SRDescription("DataGridView_CellValueChangedDescr")]
		[SRCategory("CatAction")]
		public event DataGridViewCellEventHandler CellValueChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUECHANGED, value);
			}
		}

		// Token: 0x14000196 RID: 406
		// (add) Token: 0x06002DE2 RID: 11746 RVA: 0x0007D866 File Offset: 0x0007C866
		// (remove) Token: 0x06002DE3 RID: 11747 RVA: 0x0007D879 File Offset: 0x0007C879
		[SRDescription("DataGridView_CellValueNeededDescr")]
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public event DataGridViewCellValueEventHandler CellValueNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUENEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUENEEDED, value);
			}
		}

		// Token: 0x14000197 RID: 407
		// (add) Token: 0x06002DE4 RID: 11748 RVA: 0x0007D88C File Offset: 0x0007C88C
		// (remove) Token: 0x06002DE5 RID: 11749 RVA: 0x0007D89F File Offset: 0x0007C89F
		[SRDescription("DataGridView_CellValuePushedDescr")]
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public event DataGridViewCellValueEventHandler CellValuePushed
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUEPUSHED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCELLVALUEPUSHED, value);
			}
		}

		// Token: 0x14000198 RID: 408
		// (add) Token: 0x06002DE6 RID: 11750 RVA: 0x0007D8B2 File Offset: 0x0007C8B2
		// (remove) Token: 0x06002DE7 RID: 11751 RVA: 0x0007D8C5 File Offset: 0x0007C8C5
		[SRDescription("DataGridView_ColumnAddedDescr")]
		[SRCategory("CatAction")]
		public event DataGridViewColumnEventHandler ColumnAdded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNADDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNADDED, value);
			}
		}

		// Token: 0x14000199 RID: 409
		// (add) Token: 0x06002DE8 RID: 11752 RVA: 0x0007D8D8 File Offset: 0x0007C8D8
		// (remove) Token: 0x06002DE9 RID: 11753 RVA: 0x0007D8EB File Offset: 0x0007C8EB
		[SRDescription("DataGridView_ColumnContextMenuStripChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewColumnEventHandler ColumnContextMenuStripChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNCONTEXTMENUSTRIPCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNCONTEXTMENUSTRIPCHANGED, value);
			}
		}

		// Token: 0x1400019A RID: 410
		// (add) Token: 0x06002DEA RID: 11754 RVA: 0x0007D8FE File Offset: 0x0007C8FE
		// (remove) Token: 0x06002DEB RID: 11755 RVA: 0x0007D911 File Offset: 0x0007C911
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_ColumnDataPropertyNameChangedDescr")]
		public event DataGridViewColumnEventHandler ColumnDataPropertyNameChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDATAPROPERTYNAMECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDATAPROPERTYNAMECHANGED, value);
			}
		}

		// Token: 0x1400019B RID: 411
		// (add) Token: 0x06002DEC RID: 11756 RVA: 0x0007D924 File Offset: 0x0007C924
		// (remove) Token: 0x06002DED RID: 11757 RVA: 0x0007D937 File Offset: 0x0007C937
		[SRDescription("DataGridView_ColumnDefaultCellStyleChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewColumnEventHandler ColumnDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDEFAULTCELLSTYLECHANGED, value);
			}
		}

		// Token: 0x1400019C RID: 412
		// (add) Token: 0x06002DEE RID: 11758 RVA: 0x0007D94A File Offset: 0x0007C94A
		// (remove) Token: 0x06002DEF RID: 11759 RVA: 0x0007D95D File Offset: 0x0007C95D
		[SRDescription("DataGridView_ColumnDisplayIndexChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewColumnEventHandler ColumnDisplayIndexChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDISPLAYINDEXCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDISPLAYINDEXCHANGED, value);
			}
		}

		// Token: 0x1400019D RID: 413
		// (add) Token: 0x06002DF0 RID: 11760 RVA: 0x0007D970 File Offset: 0x0007C970
		// (remove) Token: 0x06002DF1 RID: 11761 RVA: 0x0007D983 File Offset: 0x0007C983
		[SRDescription("DataGridView_ColumnDividerDoubleClickDescr")]
		[SRCategory("CatMouse")]
		public event DataGridViewColumnDividerDoubleClickEventHandler ColumnDividerDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERDOUBLECLICK, value);
			}
		}

		// Token: 0x1400019E RID: 414
		// (add) Token: 0x06002DF2 RID: 11762 RVA: 0x0007D996 File Offset: 0x0007C996
		// (remove) Token: 0x06002DF3 RID: 11763 RVA: 0x0007D9A9 File Offset: 0x0007C9A9
		[SRDescription("DataGridView_ColumnDividerWidthChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewColumnEventHandler ColumnDividerWidthChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERWIDTHCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERWIDTHCHANGED, value);
			}
		}

		// Token: 0x1400019F RID: 415
		// (add) Token: 0x06002DF4 RID: 11764 RVA: 0x0007D9BC File Offset: 0x0007C9BC
		// (remove) Token: 0x06002DF5 RID: 11765 RVA: 0x0007D9CF File Offset: 0x0007C9CF
		[SRDescription("DataGridView_ColumnHeaderMouseClickDescr")]
		[SRCategory("CatMouse")]
		public event DataGridViewCellMouseEventHandler ColumnHeaderMouseClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSECLICK, value);
			}
		}

		// Token: 0x140001A0 RID: 416
		// (add) Token: 0x06002DF6 RID: 11766 RVA: 0x0007D9E2 File Offset: 0x0007C9E2
		// (remove) Token: 0x06002DF7 RID: 11767 RVA: 0x0007D9F5 File Offset: 0x0007C9F5
		[SRDescription("DataGridView_ColumnHeaderMouseDoubleClickDescr")]
		[SRCategory("CatMouse")]
		public event DataGridViewCellMouseEventHandler ColumnHeaderMouseDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSEDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSEDOUBLECLICK, value);
			}
		}

		// Token: 0x140001A1 RID: 417
		// (add) Token: 0x06002DF8 RID: 11768 RVA: 0x0007DA08 File Offset: 0x0007CA08
		// (remove) Token: 0x06002DF9 RID: 11769 RVA: 0x0007DA1B File Offset: 0x0007CA1B
		[SRDescription("DataGridView_ColumnHeaderCellChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewColumnEventHandler ColumnHeaderCellChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERCELLCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERCELLCHANGED, value);
			}
		}

		// Token: 0x140001A2 RID: 418
		// (add) Token: 0x06002DFA RID: 11770 RVA: 0x0007DA2E File Offset: 0x0007CA2E
		// (remove) Token: 0x06002DFB RID: 11771 RVA: 0x0007DA41 File Offset: 0x0007CA41
		[SRDescription("DataGridView_ColumnMinimumWidthChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewColumnEventHandler ColumnMinimumWidthChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNMINIMUMWIDTHCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNMINIMUMWIDTHCHANGED, value);
			}
		}

		// Token: 0x140001A3 RID: 419
		// (add) Token: 0x06002DFC RID: 11772 RVA: 0x0007DA54 File Offset: 0x0007CA54
		// (remove) Token: 0x06002DFD RID: 11773 RVA: 0x0007DA67 File Offset: 0x0007CA67
		[SRDescription("DataGridView_ColumnNameChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewColumnEventHandler ColumnNameChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNNAMECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNNAMECHANGED, value);
			}
		}

		// Token: 0x140001A4 RID: 420
		// (add) Token: 0x06002DFE RID: 11774 RVA: 0x0007DA7A File Offset: 0x0007CA7A
		// (remove) Token: 0x06002DFF RID: 11775 RVA: 0x0007DA8D File Offset: 0x0007CA8D
		[SRDescription("DataGridView_ColumnRemovedDescr")]
		[SRCategory("CatAction")]
		public event DataGridViewColumnEventHandler ColumnRemoved
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNREMOVED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNREMOVED, value);
			}
		}

		// Token: 0x140001A5 RID: 421
		// (add) Token: 0x06002E00 RID: 11776 RVA: 0x0007DAA0 File Offset: 0x0007CAA0
		// (remove) Token: 0x06002E01 RID: 11777 RVA: 0x0007DAB3 File Offset: 0x0007CAB3
		[SRDescription("DataGridViewColumnSortModeChangedDescr")]
		[SRCategory("CatBehavior")]
		public event DataGridViewColumnEventHandler ColumnSortModeChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNSORTMODECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNSORTMODECHANGED, value);
			}
		}

		// Token: 0x140001A6 RID: 422
		// (add) Token: 0x06002E02 RID: 11778 RVA: 0x0007DAC6 File Offset: 0x0007CAC6
		// (remove) Token: 0x06002E03 RID: 11779 RVA: 0x0007DAD9 File Offset: 0x0007CAD9
		[SRDescription("DataGridView_ColumnStateChangedDescr")]
		[SRCategory("CatBehavior")]
		public event DataGridViewColumnStateChangedEventHandler ColumnStateChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNSTATECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNSTATECHANGED, value);
			}
		}

		// Token: 0x140001A7 RID: 423
		// (add) Token: 0x06002E04 RID: 11780 RVA: 0x0007DAEC File Offset: 0x0007CAEC
		// (remove) Token: 0x06002E05 RID: 11781 RVA: 0x0007DAFF File Offset: 0x0007CAFF
		[SRDescription("DataGridView_ColumnToolTipTextChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewColumnEventHandler ColumnToolTipTextChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNTOOLTIPTEXTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNTOOLTIPTEXTCHANGED, value);
			}
		}

		// Token: 0x140001A8 RID: 424
		// (add) Token: 0x06002E06 RID: 11782 RVA: 0x0007DB12 File Offset: 0x0007CB12
		// (remove) Token: 0x06002E07 RID: 11783 RVA: 0x0007DB25 File Offset: 0x0007CB25
		[SRDescription("DataGridView_ColumnWidthChangedDescr")]
		[SRCategory("CatAction")]
		public event DataGridViewColumnEventHandler ColumnWidthChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNWIDTHCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCOLUMNWIDTHCHANGED, value);
			}
		}

		// Token: 0x140001A9 RID: 425
		// (add) Token: 0x06002E08 RID: 11784 RVA: 0x0007DB38 File Offset: 0x0007CB38
		// (remove) Token: 0x06002E09 RID: 11785 RVA: 0x0007DB4B File Offset: 0x0007CB4B
		[SRDescription("DataGridView_CurrentCellChangedDescr")]
		[SRCategory("CatAction")]
		public event EventHandler CurrentCellChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLCHANGED, value);
			}
		}

		// Token: 0x140001AA RID: 426
		// (add) Token: 0x06002E0A RID: 11786 RVA: 0x0007DB5E File Offset: 0x0007CB5E
		// (remove) Token: 0x06002E0B RID: 11787 RVA: 0x0007DB71 File Offset: 0x0007CB71
		[SRDescription("DataGridView_CurrentCellDirtyStateChangedDescr")]
		[SRCategory("CatBehavior")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public event EventHandler CurrentCellDirtyStateChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLDIRTYSTATECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLDIRTYSTATECHANGED, value);
			}
		}

		// Token: 0x140001AB RID: 427
		// (add) Token: 0x06002E0C RID: 11788 RVA: 0x0007DB84 File Offset: 0x0007CB84
		// (remove) Token: 0x06002E0D RID: 11789 RVA: 0x0007DB97 File Offset: 0x0007CB97
		[SRCategory("CatData")]
		[SRDescription("DataGridView_DataBindingCompleteDescr")]
		public event DataGridViewBindingCompleteEventHandler DataBindingComplete
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDATABINDINGCOMPLETE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDATABINDINGCOMPLETE, value);
			}
		}

		// Token: 0x140001AC RID: 428
		// (add) Token: 0x06002E0E RID: 11790 RVA: 0x0007DBAA File Offset: 0x0007CBAA
		// (remove) Token: 0x06002E0F RID: 11791 RVA: 0x0007DBBD File Offset: 0x0007CBBD
		[SRDescription("DataGridView_DataErrorDescr")]
		[SRCategory("CatBehavior")]
		public event DataGridViewDataErrorEventHandler DataError
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDATAERROR, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDATAERROR, value);
			}
		}

		// Token: 0x140001AD RID: 429
		// (add) Token: 0x06002E10 RID: 11792 RVA: 0x0007DBD0 File Offset: 0x0007CBD0
		// (remove) Token: 0x06002E11 RID: 11793 RVA: 0x0007DBE3 File Offset: 0x0007CBE3
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRCategory("CatData")]
		[SRDescription("DataGridView_DefaultValuesNeededDescr")]
		public event DataGridViewRowEventHandler DefaultValuesNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWDEFAULTVALUESNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWDEFAULTVALUESNEEDED, value);
			}
		}

		// Token: 0x140001AE RID: 430
		// (add) Token: 0x06002E12 RID: 11794 RVA: 0x0007DBF6 File Offset: 0x0007CBF6
		// (remove) Token: 0x06002E13 RID: 11795 RVA: 0x0007DC09 File Offset: 0x0007CC09
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_EditingControlShowingDescr")]
		public event DataGridViewEditingControlShowingEventHandler EditingControlShowing
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWEDITINGCONTROLSHOWING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWEDITINGCONTROLSHOWING, value);
			}
		}

		// Token: 0x140001AF RID: 431
		// (add) Token: 0x06002E14 RID: 11796 RVA: 0x0007DC1C File Offset: 0x0007CC1C
		// (remove) Token: 0x06002E15 RID: 11797 RVA: 0x0007DC2F File Offset: 0x0007CC2F
		[SRDescription("DataGridView_NewRowNeededDescr")]
		[SRCategory("CatData")]
		public event DataGridViewRowEventHandler NewRowNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWNEWROWNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWNEWROWNEEDED, value);
			}
		}

		// Token: 0x140001B0 RID: 432
		// (add) Token: 0x06002E16 RID: 11798 RVA: 0x0007DC42 File Offset: 0x0007CC42
		// (remove) Token: 0x06002E17 RID: 11799 RVA: 0x0007DC55 File Offset: 0x0007CC55
		[SRDescription("DataGridView_RowContextMenuStripChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewRowEventHandler RowContextMenuStripChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPCHANGED, value);
			}
		}

		// Token: 0x140001B1 RID: 433
		// (add) Token: 0x06002E18 RID: 11800 RVA: 0x0007DC68 File Offset: 0x0007CC68
		// (remove) Token: 0x06002E19 RID: 11801 RVA: 0x0007DC7B File Offset: 0x0007CC7B
		[SRDescription("DataGridView_RowContextMenuStripNeededDescr")]
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public event DataGridViewRowContextMenuStripNeededEventHandler RowContextMenuStripNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPNEEDED, value);
			}
		}

		// Token: 0x140001B2 RID: 434
		// (add) Token: 0x06002E1A RID: 11802 RVA: 0x0007DC8E File Offset: 0x0007CC8E
		// (remove) Token: 0x06002E1B RID: 11803 RVA: 0x0007DCA1 File Offset: 0x0007CCA1
		[SRCategory("CatPropertyChanged")]
		[SRDescription("DataGridView_RowDefaultCellStyleChangedDescr")]
		public event DataGridViewRowEventHandler RowDefaultCellStyleChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWDEFAULTCELLSTYLECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWDEFAULTCELLSTYLECHANGED, value);
			}
		}

		// Token: 0x140001B3 RID: 435
		// (add) Token: 0x06002E1C RID: 11804 RVA: 0x0007DCB4 File Offset: 0x0007CCB4
		// (remove) Token: 0x06002E1D RID: 11805 RVA: 0x0007DCC7 File Offset: 0x0007CCC7
		[SRDescription("DataGridView_RowDirtyStateNeededDescr")]
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public event QuestionEventHandler RowDirtyStateNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIRTYSTATENEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIRTYSTATENEEDED, value);
			}
		}

		// Token: 0x140001B4 RID: 436
		// (add) Token: 0x06002E1E RID: 11806 RVA: 0x0007DCDA File Offset: 0x0007CCDA
		// (remove) Token: 0x06002E1F RID: 11807 RVA: 0x0007DCED File Offset: 0x0007CCED
		[SRCategory("CatMouse")]
		[SRDescription("DataGridView_RowDividerDoubleClickDescr")]
		public event DataGridViewRowDividerDoubleClickEventHandler RowDividerDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERDOUBLECLICK, value);
			}
		}

		// Token: 0x140001B5 RID: 437
		// (add) Token: 0x06002E20 RID: 11808 RVA: 0x0007DD00 File Offset: 0x0007CD00
		// (remove) Token: 0x06002E21 RID: 11809 RVA: 0x0007DD13 File Offset: 0x0007CD13
		[SRDescription("DataGridView_RowDividerHeightChangedDescr")]
		[SRCategory("CatAppearance")]
		public event DataGridViewRowEventHandler RowDividerHeightChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERHEIGHTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERHEIGHTCHANGED, value);
			}
		}

		// Token: 0x140001B6 RID: 438
		// (add) Token: 0x06002E22 RID: 11810 RVA: 0x0007DD26 File Offset: 0x0007CD26
		// (remove) Token: 0x06002E23 RID: 11811 RVA: 0x0007DD39 File Offset: 0x0007CD39
		[SRDescription("DataGridView_RowEnterDescr")]
		[SRCategory("CatFocus")]
		public event DataGridViewCellEventHandler RowEnter
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWENTER, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWENTER, value);
			}
		}

		// Token: 0x140001B7 RID: 439
		// (add) Token: 0x06002E24 RID: 11812 RVA: 0x0007DD4C File Offset: 0x0007CD4C
		// (remove) Token: 0x06002E25 RID: 11813 RVA: 0x0007DD5F File Offset: 0x0007CD5F
		[SRDescription("DataGridView_RowErrorTextChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewRowEventHandler RowErrorTextChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTCHANGED, value);
			}
		}

		// Token: 0x140001B8 RID: 440
		// (add) Token: 0x06002E26 RID: 11814 RVA: 0x0007DD72 File Offset: 0x0007CD72
		// (remove) Token: 0x06002E27 RID: 11815 RVA: 0x0007DD85 File Offset: 0x0007CD85
		[SRDescription("DataGridView_RowErrorTextNeededDescr")]
		[SRCategory("CatData")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public event DataGridViewRowErrorTextNeededEventHandler RowErrorTextNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTNEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTNEEDED, value);
			}
		}

		// Token: 0x140001B9 RID: 441
		// (add) Token: 0x06002E28 RID: 11816 RVA: 0x0007DD98 File Offset: 0x0007CD98
		// (remove) Token: 0x06002E29 RID: 11817 RVA: 0x0007DDAB File Offset: 0x0007CDAB
		[SRDescription("DataGridView_RowHeaderMouseClickDescr")]
		[SRCategory("CatMouse")]
		public event DataGridViewCellMouseEventHandler RowHeaderMouseClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSECLICK, value);
			}
		}

		// Token: 0x140001BA RID: 442
		// (add) Token: 0x06002E2A RID: 11818 RVA: 0x0007DDBE File Offset: 0x0007CDBE
		// (remove) Token: 0x06002E2B RID: 11819 RVA: 0x0007DDD1 File Offset: 0x0007CDD1
		[SRDescription("DataGridView_RowHeaderMouseDoubleClickDescr")]
		[SRCategory("CatMouse")]
		public event DataGridViewCellMouseEventHandler RowHeaderMouseDoubleClick
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSEDOUBLECLICK, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSEDOUBLECLICK, value);
			}
		}

		// Token: 0x140001BB RID: 443
		// (add) Token: 0x06002E2C RID: 11820 RVA: 0x0007DDE4 File Offset: 0x0007CDE4
		// (remove) Token: 0x06002E2D RID: 11821 RVA: 0x0007DDF7 File Offset: 0x0007CDF7
		[SRDescription("DataGridView_RowHeaderCellChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewRowEventHandler RowHeaderCellChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERCELLCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEADERCELLCHANGED, value);
			}
		}

		// Token: 0x140001BC RID: 444
		// (add) Token: 0x06002E2E RID: 11822 RVA: 0x0007DE0A File Offset: 0x0007CE0A
		// (remove) Token: 0x06002E2F RID: 11823 RVA: 0x0007DE1D File Offset: 0x0007CE1D
		[SRDescription("DataGridView_RowHeightChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewRowEventHandler RowHeightChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTCHANGED, value);
			}
		}

		// Token: 0x140001BD RID: 445
		// (add) Token: 0x06002E30 RID: 11824 RVA: 0x0007DE30 File Offset: 0x0007CE30
		// (remove) Token: 0x06002E31 RID: 11825 RVA: 0x0007DE43 File Offset: 0x0007CE43
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRCategory("CatData")]
		[SRDescription("DataGridView_RowHeightInfoNeededDescr")]
		public event DataGridViewRowHeightInfoNeededEventHandler RowHeightInfoNeeded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFONEEDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFONEEDED, value);
			}
		}

		// Token: 0x1700081F RID: 2079
		// (get) Token: 0x06002E32 RID: 11826 RVA: 0x0007DE56 File Offset: 0x0007CE56
		internal DataGridViewRowHeightInfoNeededEventArgs RowHeightInfoNeededEventArgs
		{
			get
			{
				if (this.dgvrhine == null)
				{
					this.dgvrhine = new DataGridViewRowHeightInfoNeededEventArgs();
				}
				return this.dgvrhine;
			}
		}

		// Token: 0x140001BE RID: 446
		// (add) Token: 0x06002E33 RID: 11827 RVA: 0x0007DE71 File Offset: 0x0007CE71
		// (remove) Token: 0x06002E34 RID: 11828 RVA: 0x0007DE84 File Offset: 0x0007CE84
		[SRCategory("CatData")]
		[SRDescription("DataGridView_RowHeightInfoPushedDescr")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public event DataGridViewRowHeightInfoPushedEventHandler RowHeightInfoPushed
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFOPUSHED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFOPUSHED, value);
			}
		}

		// Token: 0x140001BF RID: 447
		// (add) Token: 0x06002E35 RID: 11829 RVA: 0x0007DE97 File Offset: 0x0007CE97
		// (remove) Token: 0x06002E36 RID: 11830 RVA: 0x0007DEAA File Offset: 0x0007CEAA
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_RowLeaveDescr")]
		public event DataGridViewCellEventHandler RowLeave
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWLEAVE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWLEAVE, value);
			}
		}

		// Token: 0x140001C0 RID: 448
		// (add) Token: 0x06002E37 RID: 11831 RVA: 0x0007DEBD File Offset: 0x0007CEBD
		// (remove) Token: 0x06002E38 RID: 11832 RVA: 0x0007DED0 File Offset: 0x0007CED0
		[SRDescription("DataGridView_RowMinimumHeightChangedDescr")]
		[SRCategory("CatPropertyChanged")]
		public event DataGridViewRowEventHandler RowMinimumHeightChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWMINIMUMHEIGHTCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWMINIMUMHEIGHTCHANGED, value);
			}
		}

		// Token: 0x140001C1 RID: 449
		// (add) Token: 0x06002E39 RID: 11833 RVA: 0x0007DEE3 File Offset: 0x0007CEE3
		// (remove) Token: 0x06002E3A RID: 11834 RVA: 0x0007DEF6 File Offset: 0x0007CEF6
		[SRDescription("DataGridView_RowPostPaintDescr")]
		[SRCategory("CatDisplay")]
		public event DataGridViewRowPostPaintEventHandler RowPostPaint
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWPOSTPAINT, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWPOSTPAINT, value);
			}
		}

		// Token: 0x17000820 RID: 2080
		// (get) Token: 0x06002E3B RID: 11835 RVA: 0x0007DF09 File Offset: 0x0007CF09
		internal DataGridViewRowPostPaintEventArgs RowPostPaintEventArgs
		{
			get
			{
				if (this.dgvrpope == null)
				{
					this.dgvrpope = new DataGridViewRowPostPaintEventArgs(this);
				}
				return this.dgvrpope;
			}
		}

		// Token: 0x140001C2 RID: 450
		// (add) Token: 0x06002E3C RID: 11836 RVA: 0x0007DF25 File Offset: 0x0007CF25
		// (remove) Token: 0x06002E3D RID: 11837 RVA: 0x0007DF38 File Offset: 0x0007CF38
		[SRDescription("DataGridView_RowPrePaintDescr")]
		[SRCategory("CatDisplay")]
		public event DataGridViewRowPrePaintEventHandler RowPrePaint
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWPREPAINT, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWPREPAINT, value);
			}
		}

		// Token: 0x17000821 RID: 2081
		// (get) Token: 0x06002E3E RID: 11838 RVA: 0x0007DF4B File Offset: 0x0007CF4B
		internal DataGridViewRowPrePaintEventArgs RowPrePaintEventArgs
		{
			get
			{
				if (this.dgvrprpe == null)
				{
					this.dgvrprpe = new DataGridViewRowPrePaintEventArgs(this);
				}
				return this.dgvrprpe;
			}
		}

		// Token: 0x140001C3 RID: 451
		// (add) Token: 0x06002E3F RID: 11839 RVA: 0x0007DF67 File Offset: 0x0007CF67
		// (remove) Token: 0x06002E40 RID: 11840 RVA: 0x0007DF7A File Offset: 0x0007CF7A
		[SRDescription("DataGridView_RowsAddedDescr")]
		[SRCategory("CatAction")]
		public event DataGridViewRowsAddedEventHandler RowsAdded
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWSADDED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWSADDED, value);
			}
		}

		// Token: 0x140001C4 RID: 452
		// (add) Token: 0x06002E41 RID: 11841 RVA: 0x0007DF8D File Offset: 0x0007CF8D
		// (remove) Token: 0x06002E42 RID: 11842 RVA: 0x0007DFA0 File Offset: 0x0007CFA0
		[SRDescription("DataGridView_RowsRemovedDescr")]
		[SRCategory("CatAction")]
		public event DataGridViewRowsRemovedEventHandler RowsRemoved
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWSREMOVED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWSREMOVED, value);
			}
		}

		// Token: 0x140001C5 RID: 453
		// (add) Token: 0x06002E43 RID: 11843 RVA: 0x0007DFB3 File Offset: 0x0007CFB3
		// (remove) Token: 0x06002E44 RID: 11844 RVA: 0x0007DFC6 File Offset: 0x0007CFC6
		[SRCategory("CatBehavior")]
		[SRDescription("DataGridView_RowStateChangedDescr")]
		public event DataGridViewRowStateChangedEventHandler RowStateChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWSTATECHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWSTATECHANGED, value);
			}
		}

		// Token: 0x140001C6 RID: 454
		// (add) Token: 0x06002E45 RID: 11845 RVA: 0x0007DFD9 File Offset: 0x0007CFD9
		// (remove) Token: 0x06002E46 RID: 11846 RVA: 0x0007DFEC File Offset: 0x0007CFEC
		[SRCategory("CatBehavior")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRDescription("DataGridView_RowUnsharedDescr")]
		public event DataGridViewRowEventHandler RowUnshared
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWUNSHARED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWUNSHARED, value);
			}
		}

		// Token: 0x140001C7 RID: 455
		// (add) Token: 0x06002E47 RID: 11847 RVA: 0x0007DFFF File Offset: 0x0007CFFF
		// (remove) Token: 0x06002E48 RID: 11848 RVA: 0x0007E012 File Offset: 0x0007D012
		[SRCategory("CatFocus")]
		[SRDescription("DataGridView_RowValidatedDescr")]
		public event DataGridViewCellEventHandler RowValidated
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWVALIDATED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWVALIDATED, value);
			}
		}

		// Token: 0x140001C8 RID: 456
		// (add) Token: 0x06002E49 RID: 11849 RVA: 0x0007E025 File Offset: 0x0007D025
		// (remove) Token: 0x06002E4A RID: 11850 RVA: 0x0007E038 File Offset: 0x0007D038
		[SRDescription("DataGridView_RowValidatingDescr")]
		[SRCategory("CatFocus")]
		public event DataGridViewCellCancelEventHandler RowValidating
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWROWVALIDATING, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWROWVALIDATING, value);
			}
		}

		// Token: 0x140001C9 RID: 457
		// (add) Token: 0x06002E4B RID: 11851 RVA: 0x0007E04B File Offset: 0x0007D04B
		// (remove) Token: 0x06002E4C RID: 11852 RVA: 0x0007E05E File Offset: 0x0007D05E
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_ScrollDescr")]
		public event ScrollEventHandler Scroll
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWSCROLL, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWSCROLL, value);
			}
		}

		// Token: 0x140001CA RID: 458
		// (add) Token: 0x06002E4D RID: 11853 RVA: 0x0007E071 File Offset: 0x0007D071
		// (remove) Token: 0x06002E4E RID: 11854 RVA: 0x0007E084 File Offset: 0x0007D084
		[SRDescription("DataGridView_SelectionChangedDescr")]
		[SRCategory("CatAction")]
		public event EventHandler SelectionChanged
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWSELECTIONCHANGED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWSELECTIONCHANGED, value);
			}
		}

		// Token: 0x140001CB RID: 459
		// (add) Token: 0x06002E4F RID: 11855 RVA: 0x0007E097 File Offset: 0x0007D097
		// (remove) Token: 0x06002E50 RID: 11856 RVA: 0x0007E0AA File Offset: 0x0007D0AA
		[SRDescription("DataGridView_SortCompareDescr")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[SRCategory("CatData")]
		public event DataGridViewSortCompareEventHandler SortCompare
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWSORTCOMPARE, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWSORTCOMPARE, value);
			}
		}

		// Token: 0x140001CC RID: 460
		// (add) Token: 0x06002E51 RID: 11857 RVA: 0x0007E0BD File Offset: 0x0007D0BD
		// (remove) Token: 0x06002E52 RID: 11858 RVA: 0x0007E0D0 File Offset: 0x0007D0D0
		[SRCategory("CatData")]
		[SRDescription("DataGridView_SortedDescr")]
		public event EventHandler Sorted
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWSORTED, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWSORTED, value);
			}
		}

		// Token: 0x140001CD RID: 461
		// (add) Token: 0x06002E53 RID: 11859 RVA: 0x0007E0E3 File Offset: 0x0007D0E3
		// (remove) Token: 0x06002E54 RID: 11860 RVA: 0x0007E0EC File Offset: 0x0007D0EC
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Browsable(false)]
		public new event EventHandler StyleChanged
		{
			add
			{
				base.StyleChanged += value;
			}
			remove
			{
				base.StyleChanged -= value;
			}
		}

		// Token: 0x140001CE RID: 462
		// (add) Token: 0x06002E55 RID: 11861 RVA: 0x0007E0F5 File Offset: 0x0007D0F5
		// (remove) Token: 0x06002E56 RID: 11862 RVA: 0x0007E108 File Offset: 0x0007D108
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_UserAddedRowDescr")]
		public event DataGridViewRowEventHandler UserAddedRow
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWUSERADDEDROW, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWUSERADDEDROW, value);
			}
		}

		// Token: 0x140001CF RID: 463
		// (add) Token: 0x06002E57 RID: 11863 RVA: 0x0007E11B File Offset: 0x0007D11B
		// (remove) Token: 0x06002E58 RID: 11864 RVA: 0x0007E12E File Offset: 0x0007D12E
		[SRCategory("CatAction")]
		[SRDescription("DataGridView_UserDeletedRowDescr")]
		public event DataGridViewRowEventHandler UserDeletedRow
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWUSERDELETEDROW, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWUSERDELETEDROW, value);
			}
		}

		// Token: 0x140001D0 RID: 464
		// (add) Token: 0x06002E59 RID: 11865 RVA: 0x0007E141 File Offset: 0x0007D141
		// (remove) Token: 0x06002E5A RID: 11866 RVA: 0x0007E154 File Offset: 0x0007D154
		[SRDescription("DataGridView_UserDeletingRowDescr")]
		[SRCategory("CatAction")]
		public event DataGridViewRowCancelEventHandler UserDeletingRow
		{
			add
			{
				base.Events.AddHandler(DataGridView.EVENT_DATAGRIDVIEWUSERDELETINGROW, value);
			}
			remove
			{
				base.Events.RemoveHandler(DataGridView.EVENT_DATAGRIDVIEWUSERDELETINGROW, value);
			}
		}

		// Token: 0x06002E5B RID: 11867 RVA: 0x0007E167 File Offset: 0x0007D167
		void ISupportInitialize.BeginInit()
		{
			if (this.dataGridViewState2[524288])
			{
				throw new InvalidOperationException(SR.GetString("DataGridViewBeginInit"));
			}
			this.dataGridViewState2[524288] = true;
		}

		// Token: 0x06002E5C RID: 11868 RVA: 0x0007E19C File Offset: 0x0007D19C
		void ISupportInitialize.EndInit()
		{
			this.dataGridViewState2[524288] = false;
			foreach (object obj in this.Columns)
			{
				DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
				if (dataGridViewColumn.Frozen && dataGridViewColumn.Visible && dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
				{
					dataGridViewColumn.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
				}
			}
			DataGridViewSelectionMode dataGridViewSelectionMode = this.SelectionMode;
			if (dataGridViewSelectionMode == DataGridViewSelectionMode.FullColumnSelect || dataGridViewSelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
			{
				foreach (object obj2 in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj2;
					if (dataGridViewColumn2.SortMode == DataGridViewColumnSortMode.Automatic)
					{
						this.SelectionMode = DataGridViewSelectionMode.RowHeaderSelect;
						throw new InvalidOperationException(SR.GetString("DataGridView_SelectionModeReset", new object[]
						{
							SR.GetString("DataGridView_SelectionModeAndSortModeClash", new object[] { dataGridViewSelectionMode.ToString() }),
							DataGridViewSelectionMode.RowHeaderSelect.ToString()
						}));
					}
				}
			}
		}

		// Token: 0x06002E5D RID: 11869 RVA: 0x0007E2E0 File Offset: 0x0007D2E0
		protected virtual void AccessibilityNotifyCurrentCellChanged(Point cellAddress)
		{
			if (cellAddress.X < 0 || cellAddress.X >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("cellAddress");
			}
			if (cellAddress.Y < 0 || cellAddress.Y >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("cellAddress");
			}
			int rowCount = this.Rows.GetRowCount(DataGridViewElementStates.Visible, 0, cellAddress.Y);
			int num = this.Columns.ColumnIndexToActualDisplayIndex(cellAddress.X, DataGridViewElementStates.Visible);
			int num2 = (this.ColumnHeadersVisible ? 1 : 0);
			int num3 = (this.RowHeadersVisible ? 1 : 0);
			int num4 = rowCount + num2 + 1;
			int num5 = num + num3;
			if (base.ContainsFocus)
			{
				base.AccessibilityNotifyClients(AccessibleEvents.Focus, num4, num5);
			}
			base.AccessibilityNotifyClients(AccessibleEvents.Selection, num4, num5);
		}

		// Token: 0x06002E5E RID: 11870 RVA: 0x0007E3B6 File Offset: 0x0007D3B6
		internal void ActivateToolTip(bool activate, string toolTipText, int columnIndex, int rowIndex)
		{
			this.toolTipCaption = toolTipText;
			this.ptToolTipCell = new Point(columnIndex, rowIndex);
			this.toolTipControl.Activate(activate);
		}

		// Token: 0x06002E5F RID: 11871 RVA: 0x0007E3DC File Offset: 0x0007D3DC
		internal void AddNewRow(bool createdByEditing)
		{
			this.Rows.AddInternal(true, null);
			this.newRowIndex = this.Rows.Count - 1;
			this.dataGridViewState1[2097152] = createdByEditing;
			if (createdByEditing)
			{
				DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs(this.Rows[this.newRowIndex]);
				this.OnUserAddedRow(dataGridViewRowEventArgs);
			}
		}

		// Token: 0x06002E60 RID: 11872 RVA: 0x0007E43C File Offset: 0x0007D43C
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public virtual DataGridViewAdvancedBorderStyle AdjustColumnHeaderBorderStyle(DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool isFirstDisplayedColumn, bool isLastVisibleColumn)
		{
			if (this.ApplyVisualStylesToHeaderCells)
			{
				switch (dataGridViewAdvancedBorderStyleInput.All)
				{
				case DataGridViewAdvancedCellBorderStyle.Single:
				case DataGridViewAdvancedCellBorderStyle.Inset:
				case DataGridViewAdvancedCellBorderStyle.Outset:
					if (!isFirstDisplayedColumn || this.RowHeadersVisible)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
						dataGridViewAdvancedBorderStylePlaceholder.TopInternal = dataGridViewAdvancedBorderStyleInput.All;
						dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = dataGridViewAdvancedBorderStyleInput.All;
						return dataGridViewAdvancedBorderStylePlaceholder;
					}
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = dataGridViewAdvancedBorderStyleInput.All;
					}
					else
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = dataGridViewAdvancedBorderStyleInput.All;
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = dataGridViewAdvancedBorderStyleInput.All;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = dataGridViewAdvancedBorderStyleInput.All;
					return dataGridViewAdvancedBorderStylePlaceholder;
				case DataGridViewAdvancedCellBorderStyle.InsetDouble:
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.None : DataGridViewAdvancedCellBorderStyle.Inset);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
						}
					}
					else
					{
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.None : DataGridViewAdvancedCellBorderStyle.InsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						}
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
					return dataGridViewAdvancedBorderStylePlaceholder;
				case DataGridViewAdvancedCellBorderStyle.OutsetDouble:
				case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.None : DataGridViewAdvancedCellBorderStyle.Outset);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
						}
					}
					else
					{
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.None : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
						}
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
					return dataGridViewAdvancedBorderStylePlaceholder;
				}
			}
			else
			{
				switch (dataGridViewAdvancedBorderStyleInput.All)
				{
				case DataGridViewAdvancedCellBorderStyle.Single:
					if (!isFirstDisplayedColumn || this.RowHeadersVisible)
					{
						if (this.RightToLeftInternal)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Single;
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.None;
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.None;
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Single;
						}
						dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.Single;
						dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Single;
						return dataGridViewAdvancedBorderStylePlaceholder;
					}
					break;
				case DataGridViewAdvancedCellBorderStyle.InsetDouble:
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Inset;
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Inset : DataGridViewAdvancedCellBorderStyle.InsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Inset;
						}
					}
					else
					{
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Inset : DataGridViewAdvancedCellBorderStyle.InsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Inset;
						}
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Inset;
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.InsetDouble;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Inset;
					return dataGridViewAdvancedBorderStylePlaceholder;
				case DataGridViewAdvancedCellBorderStyle.OutsetDouble:
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Outset;
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Outset;
						}
					}
					else
					{
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.Outset;
						}
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.Outset;
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
					return dataGridViewAdvancedBorderStylePlaceholder;
				case DataGridViewAdvancedCellBorderStyle.OutsetPartial:
					if (this.RightToLeftInternal)
					{
						dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (isLastVisibleColumn ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetPartial);
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.RightInternal = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
						}
					}
					else
					{
						if (isFirstDisplayedColumn)
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = (this.RowHeadersVisible ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetDouble);
						}
						else
						{
							dataGridViewAdvancedBorderStylePlaceholder.LeftInternal = DataGridViewAdvancedCellBorderStyle.OutsetPartial;
						}
						dataGridViewAdvancedBorderStylePlaceholder.RightInternal = (isLastVisibleColumn ? DataGridViewAdvancedCellBorderStyle.Outset : DataGridViewAdvancedCellBorderStyle.OutsetPartial);
					}
					dataGridViewAdvancedBorderStylePlaceholder.TopInternal = DataGridViewAdvancedCellBorderStyle.OutsetDouble;
					dataGridViewAdvancedBorderStylePlaceholder.BottomInternal = DataGridViewAdvancedCellBorderStyle.Outset;
					return dataGridViewAdvancedBorderStylePlaceholder;
				}
			}
			return dataGridViewAdvancedBorderStyleInput;
		}

		// Token: 0x06002E61 RID: 11873 RVA: 0x0007E770 File Offset: 0x0007D770
		private bool AdjustExpandingColumn(DataGridViewColumn dataGridViewColumn, DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaInternal, int rowIndex)
		{
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return false;
			}
			bool flag = false;
			try
			{
				this.noAutoSizeCount++;
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
				int num = dataGridViewRow.Cells[dataGridViewColumn.Index].GetPreferredWidth(rowIndex, dataGridViewRow.GetHeight(rowIndex));
				if (num > 65536)
				{
					num = 65536;
				}
				if (dataGridViewColumn.Width < num)
				{
					dataGridViewColumn.ThicknessInternal = num;
					flag = true;
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
			return flag;
		}

		// Token: 0x06002E62 RID: 11874 RVA: 0x0007E818 File Offset: 0x0007D818
		private bool AdjustExpandingColumns(DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaFilter, int rowIndex)
		{
			bool flag = false;
			for (DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
			{
				DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)dataGridViewColumn.InheritedAutoSizeMode;
				DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = inheritedAutoSizeMode & autoSizeColumnCriteriaFilter;
				if (dataGridViewAutoSizeColumnCriteriaInternal != DataGridViewAutoSizeColumnCriteriaInternal.NotSet)
				{
					flag |= this.AdjustExpandingColumn(dataGridViewColumn, inheritedAutoSizeMode, rowIndex);
				}
			}
			return flag;
		}

		// Token: 0x06002E63 RID: 11875 RVA: 0x0007E868 File Offset: 0x0007D868
		private int AdjustExpandingRow(int rowIndex, int columnIndex, bool fixedWidth)
		{
			int num = 0;
			DataGridViewCell dataGridViewCell;
			if (columnIndex > -1 && (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
			{
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
				if (fixedWidth)
				{
					num = this.Columns[columnIndex].Thickness;
				}
			}
			else
			{
				dataGridViewCell = this.Rows.SharedRow(rowIndex).HeaderCell;
				if (fixedWidth)
				{
					num = this.RowHeadersWidth;
				}
			}
			int num2;
			if (fixedWidth)
			{
				num2 = dataGridViewCell.GetPreferredHeight(rowIndex, num);
			}
			else
			{
				num2 = dataGridViewCell.GetPreferredSize(rowIndex).Height;
			}
			int num3;
			int num4;
			this.Rows.SharedRow(rowIndex).GetHeightInfo(rowIndex, out num3, out num4);
			if (num2 < num3)
			{
				num2 = num3;
			}
			if (num2 > 65536)
			{
				num2 = 65536;
			}
			if (num3 != num2)
			{
				this.Rows[rowIndex].Thickness = num2;
			}
			return num2;
		}

		// Token: 0x06002E64 RID: 11876 RVA: 0x0007E930 File Offset: 0x0007D930
		private void AdjustExpandingRows(int columnIndex, bool fixedWidth)
		{
			if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None || ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)1) != DataGridViewAutoSizeRowsMode.None && this.RowHeadersVisible))
			{
				if (!base.IsHandleCreated)
				{
					this.dataGridViewState2[1048576] = true;
					return;
				}
				this.inBulkPaintCount++;
				try
				{
					if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)4) != DataGridViewAutoSizeRowsMode.None)
					{
						this.inBulkLayoutCount++;
						try
						{
							for (int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num != -1; num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible))
							{
								int num2 = 0;
								DataGridViewCell dataGridViewCell;
								if (columnIndex > -1 && (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
								{
									dataGridViewCell = this.Rows.SharedRow(num).Cells[columnIndex];
									if (fixedWidth)
									{
										num2 = this.Columns[columnIndex].Thickness;
									}
								}
								else
								{
									dataGridViewCell = this.Rows.SharedRow(num).HeaderCell;
									if (fixedWidth)
									{
										num2 = this.RowHeadersWidth;
									}
								}
								int num3;
								if (fixedWidth)
								{
									num3 = dataGridViewCell.GetPreferredHeight(num, num2);
								}
								else
								{
									num3 = dataGridViewCell.GetPreferredSize(num).Height;
								}
								if (this.Rows.SharedRow(num).Height < num3)
								{
									this.Rows[num].Height = num3;
								}
							}
							goto IL_01CC;
						}
						finally
						{
							this.ExitBulkLayout(false);
						}
					}
					int height = this.layout.Data.Height;
					int num4 = 0;
					int num5 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (num5 != -1 && num4 < height)
					{
						num4 += this.AdjustExpandingRow(num5, columnIndex, fixedWidth);
						num5 = this.Rows.GetNextRow(num5, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					}
					if (num4 < height)
					{
						num5 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
						while (num5 != -1 && num4 < height)
						{
							num4 += this.AdjustExpandingRow(num5, columnIndex, fixedWidth);
							num5 = this.Rows.GetNextRow(num5, DataGridViewElementStates.Visible);
						}
					}
					IL_01CC:;
				}
				finally
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x06002E65 RID: 11877 RVA: 0x0007EB48 File Offset: 0x0007DB48
		internal void AdjustFillingColumn(DataGridViewColumn dataGridViewColumn, int width)
		{
			if (this.InAdjustFillingColumns)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAlterAutoFillColumnParameter"));
			}
			this.dataGridViewOper[524288] = true;
			try
			{
				if (this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) <= this.layout.Data.Width)
				{
					int num = this.layout.Data.Width;
					if (base.DesignMode || dataGridViewColumn == this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen) || dataGridViewColumn == this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen))
					{
						float num2 = 0f;
						int num3 = 0;
						int num4 = 0;
						bool flag = false;
						foreach (object obj in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj;
							if (dataGridViewColumn2.Visible)
							{
								if (dataGridViewColumn2.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
								{
									num3 += dataGridViewColumn2.Width;
									if (dataGridViewColumn2.Index != dataGridViewColumn.Index)
									{
										num4 += dataGridViewColumn2.MinimumWidth;
										flag = true;
									}
									num2 += dataGridViewColumn2.FillWeight;
								}
								else
								{
									num4 += dataGridViewColumn2.Width;
									num -= dataGridViewColumn2.Width;
								}
							}
						}
						if (!flag)
						{
							return;
						}
						int num5 = this.layout.Data.Width - num4;
						if (width > num5)
						{
							width = num5;
						}
						float fillWeight = dataGridViewColumn.FillWeight;
						float num6 = (float)width * num2 / (float)num3;
						bool flag2 = false;
						foreach (object obj2 in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn3 = (DataGridViewColumn)obj2;
							if (dataGridViewColumn3.Index != dataGridViewColumn.Index && dataGridViewColumn3.Visible && dataGridViewColumn3.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
							{
								dataGridViewColumn3.FillWeightInternal = (num2 - num6) * dataGridViewColumn3.FillWeight / (num2 - fillWeight);
								if (dataGridViewColumn3.FillWeight < (float)dataGridViewColumn3.MinimumWidth * num2 / (float)num3)
								{
									flag2 = true;
									dataGridViewColumn3.DesiredFillWidth = -1;
								}
								else
								{
									dataGridViewColumn3.DesiredFillWidth = 0;
								}
							}
						}
						dataGridViewColumn.FillWeightInternal = num6;
						if (flag2)
						{
							float num7 = num2;
							float num8 = num2;
							float num9 = 0f;
							foreach (object obj3 in this.Columns)
							{
								DataGridViewColumn dataGridViewColumn4 = (DataGridViewColumn)obj3;
								if (dataGridViewColumn4.Visible && dataGridViewColumn4.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
								{
									if (dataGridViewColumn4.Index == dataGridViewColumn.Index)
									{
										dataGridViewColumn4.UsedFillWeight = dataGridViewColumn4.FillWeight;
										num7 -= dataGridViewColumn4.UsedFillWeight;
										num8 -= dataGridViewColumn4.FillWeight;
										num9 += dataGridViewColumn4.UsedFillWeight;
									}
									else if (dataGridViewColumn4.DesiredFillWidth == -1)
									{
										dataGridViewColumn4.UsedFillWeight = num2 * (float)dataGridViewColumn4.MinimumWidth / (float)num3;
										num7 -= dataGridViewColumn4.UsedFillWeight;
										num8 -= dataGridViewColumn4.FillWeight;
										num9 += dataGridViewColumn4.UsedFillWeight;
									}
								}
							}
							foreach (object obj4 in this.Columns)
							{
								DataGridViewColumn dataGridViewColumn5 = (DataGridViewColumn)obj4;
								if (dataGridViewColumn5.Index != dataGridViewColumn.Index && dataGridViewColumn5.Visible && dataGridViewColumn5.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill && dataGridViewColumn5.DesiredFillWidth != -1)
								{
									dataGridViewColumn5.UsedFillWeight = Math.Max(dataGridViewColumn5.FillWeight * num7 / num8, num2 * (float)dataGridViewColumn5.MinimumWidth / (float)num3);
									num9 += dataGridViewColumn5.UsedFillWeight;
								}
							}
							dataGridViewColumn.UsedFillWeight += num2 - num9;
							goto IL_08B3;
						}
						using (IEnumerator enumerator5 = this.Columns.GetEnumerator())
						{
							while (enumerator5.MoveNext())
							{
								object obj5 = enumerator5.Current;
								DataGridViewColumn dataGridViewColumn6 = (DataGridViewColumn)obj5;
								if (dataGridViewColumn6.Visible && dataGridViewColumn6.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
								{
									dataGridViewColumn6.UsedFillWeight = dataGridViewColumn6.FillWeight;
								}
							}
							goto IL_08B3;
						}
					}
					int num10 = 0;
					float num11 = 0f;
					float num12 = 0f;
					bool flag3 = false;
					foreach (object obj6 in this.Columns)
					{
						DataGridViewColumn dataGridViewColumn7 = (DataGridViewColumn)obj6;
						if (dataGridViewColumn7.Visible)
						{
							if (dataGridViewColumn7.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
							{
								if (dataGridViewColumn7.Index != dataGridViewColumn.Index)
								{
									if (this.Columns.DisplayInOrder(dataGridViewColumn.Index, dataGridViewColumn7.Index))
									{
										num10 += dataGridViewColumn7.MinimumWidth;
										num12 += dataGridViewColumn7.FillWeight;
									}
									else
									{
										num10 += dataGridViewColumn7.Width;
									}
									flag3 = true;
								}
								num11 += dataGridViewColumn7.FillWeight;
							}
							else
							{
								num10 += dataGridViewColumn7.Width;
								num -= dataGridViewColumn7.Width;
							}
						}
					}
					if (!flag3)
					{
						return;
					}
					int num13 = this.layout.Data.Width - num10;
					if (width > num13)
					{
						width = num13;
					}
					float fillWeight2 = dataGridViewColumn.FillWeight;
					float num14 = num11 * (float)width / (float)num;
					float num15 = num12 + fillWeight2 - num14;
					foreach (object obj7 in this.Columns)
					{
						DataGridViewColumn dataGridViewColumn8 = (DataGridViewColumn)obj7;
						if (dataGridViewColumn8.Index != dataGridViewColumn.Index && dataGridViewColumn8.Visible && dataGridViewColumn8.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill && this.Columns.DisplayInOrder(dataGridViewColumn.Index, dataGridViewColumn8.Index))
						{
							dataGridViewColumn8.FillWeightInternal = dataGridViewColumn8.FillWeight * num15 / num12;
						}
					}
					dataGridViewColumn.FillWeightInternal = num14;
					bool flag4 = false;
					foreach (object obj8 in this.Columns)
					{
						DataGridViewColumn dataGridViewColumn9 = (DataGridViewColumn)obj8;
						if (dataGridViewColumn9.Visible && dataGridViewColumn9.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
						{
							if (dataGridViewColumn9.FillWeight < (float)dataGridViewColumn9.MinimumWidth * num11 / (float)num)
							{
								flag4 = true;
								dataGridViewColumn9.DesiredFillWidth = -1;
							}
							else
							{
								dataGridViewColumn9.DesiredFillWidth = 0;
							}
						}
					}
					if (flag4)
					{
						float num16 = num11;
						float num17 = num11;
						float num18 = 0f;
						foreach (object obj9 in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn10 = (DataGridViewColumn)obj9;
							if (dataGridViewColumn10.Visible && dataGridViewColumn10.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
							{
								if (dataGridViewColumn10.Index == dataGridViewColumn.Index || this.Columns.DisplayInOrder(dataGridViewColumn10.Index, dataGridViewColumn.Index))
								{
									if (dataGridViewColumn10.Index == dataGridViewColumn.Index)
									{
										dataGridViewColumn10.UsedFillWeight = dataGridViewColumn10.FillWeight;
									}
									else
									{
										dataGridViewColumn10.UsedFillWeight = num11 * (float)dataGridViewColumn10.Width / (float)num;
									}
									num16 -= dataGridViewColumn10.UsedFillWeight;
									num17 -= dataGridViewColumn10.FillWeight;
									num18 += dataGridViewColumn10.UsedFillWeight;
								}
								else if (dataGridViewColumn10.DesiredFillWidth == -1)
								{
									dataGridViewColumn10.UsedFillWeight = num11 * (float)dataGridViewColumn10.MinimumWidth / (float)num;
									num16 -= dataGridViewColumn10.UsedFillWeight;
									num17 -= dataGridViewColumn10.FillWeight;
									num18 += dataGridViewColumn10.UsedFillWeight;
								}
							}
						}
						foreach (object obj10 in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn11 = (DataGridViewColumn)obj10;
							if (this.Columns.DisplayInOrder(dataGridViewColumn.Index, dataGridViewColumn11.Index) && dataGridViewColumn11.Visible && dataGridViewColumn11.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill && dataGridViewColumn11.DesiredFillWidth != -1)
							{
								dataGridViewColumn11.UsedFillWeight = Math.Max(dataGridViewColumn11.FillWeight * num16 / num17, num11 * (float)dataGridViewColumn11.MinimumWidth / (float)num);
								num18 += dataGridViewColumn11.UsedFillWeight;
							}
						}
						dataGridViewColumn.UsedFillWeight += num11 - num18;
					}
					else
					{
						foreach (object obj11 in this.Columns)
						{
							DataGridViewColumn dataGridViewColumn12 = (DataGridViewColumn)obj11;
							if (dataGridViewColumn12.Visible && dataGridViewColumn12.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
							{
								dataGridViewColumn12.UsedFillWeight = dataGridViewColumn12.FillWeight;
							}
						}
					}
					IL_08B3:
					this.dataGridViewState2[67108864] = false;
					this.availableWidthForFillColumns = num;
					this.PerformLayoutPrivate(false, true, false, false);
				}
			}
			finally
			{
				this.dataGridViewOper[524288] = false;
			}
		}

		// Token: 0x06002E66 RID: 11878 RVA: 0x0007F564 File Offset: 0x0007E564
		private bool AdjustFillingColumns()
		{
			if (this.dataGridViewOper[262144])
			{
				return false;
			}
			this.dataGridViewOper[262144] = true;
			bool flag = false;
			try
			{
				int num = 0;
				int num2 = 0;
				int num3 = 0;
				float num4 = 0f;
				ArrayList arrayList = null;
				foreach (object obj in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
					if (dataGridViewColumn.Visible)
					{
						if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
						{
							num++;
							num3 += ((dataGridViewColumn.DesiredMinimumWidth > 0) ? dataGridViewColumn.DesiredMinimumWidth : dataGridViewColumn.MinimumWidth);
							num4 += dataGridViewColumn.FillWeight;
							if (arrayList == null)
							{
								arrayList = new ArrayList(this.Columns.Count);
							}
							arrayList.Add(dataGridViewColumn);
						}
						else
						{
							num2 += dataGridViewColumn.Width;
						}
					}
				}
				if (num > 0)
				{
					int num5 = this.layout.Data.Width - num2;
					if (this.scrollBars == ScrollBars.Both || this.scrollBars == ScrollBars.Vertical)
					{
						int rowCount = this.Rows.GetRowCount(DataGridViewElementStates.Visible);
						int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
						int rowsHeight2 = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
						this.ComputeVisibleRows();
						if (this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != rowCount - this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && rowsHeight - rowsHeight2 != this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight2) && this.layout.Data.Height > rowsHeight2 && SystemInformation.VerticalScrollBarWidth <= this.layout.Data.Width)
						{
							num5 -= SystemInformation.VerticalScrollBarWidth;
						}
					}
					if (num5 <= num3)
					{
						num5 = 0;
						for (int i = 0; i < arrayList.Count; i++)
						{
							DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)arrayList[i];
							int num6 = ((dataGridViewColumn2.DesiredMinimumWidth > 0) ? dataGridViewColumn2.DesiredMinimumWidth : dataGridViewColumn2.MinimumWidth);
							if (dataGridViewColumn2.Thickness != num6)
							{
								flag = true;
								dataGridViewColumn2.ThicknessInternal = num6;
							}
							num5 += dataGridViewColumn2.Thickness;
						}
						for (int i = 0; i < arrayList.Count; i++)
						{
							DataGridViewColumn dataGridViewColumn3 = (DataGridViewColumn)arrayList[i];
							dataGridViewColumn3.UsedFillWeight = (float)dataGridViewColumn3.Width * num4 / (float)num5;
						}
						this.dataGridViewState2[67108864] = false;
						this.availableWidthForFillColumns = num5;
						return flag;
					}
					int num7 = 0;
					if (this.dataGridViewState2[67108864])
					{
						bool flag2 = false;
						for (int i = 0; i < arrayList.Count; i++)
						{
							DataGridViewColumn dataGridViewColumn4 = (DataGridViewColumn)arrayList[i];
							if (i == arrayList.Count - 1)
							{
								dataGridViewColumn4.DesiredFillWidth = num5 - num7;
							}
							else
							{
								float num8 = dataGridViewColumn4.FillWeight / num4 * (float)num5;
								dataGridViewColumn4.DesiredFillWidth = (int)Math.Round((double)num8, MidpointRounding.AwayFromZero);
								num7 += dataGridViewColumn4.DesiredFillWidth;
							}
							int num9 = ((dataGridViewColumn4.DesiredMinimumWidth > 0) ? dataGridViewColumn4.DesiredMinimumWidth : dataGridViewColumn4.MinimumWidth);
							if (dataGridViewColumn4.DesiredFillWidth < num9)
							{
								flag2 = true;
								dataGridViewColumn4.DesiredFillWidth = -1;
							}
						}
						if (flag2)
						{
							float num10 = num4;
							float num11 = num4;
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn5 = (DataGridViewColumn)arrayList[i];
								if (dataGridViewColumn5.DesiredFillWidth == -1)
								{
									int num12 = ((dataGridViewColumn5.DesiredMinimumWidth > 0) ? dataGridViewColumn5.DesiredMinimumWidth : dataGridViewColumn5.MinimumWidth);
									dataGridViewColumn5.UsedFillWeight = num4 * (float)num12 / (float)num5;
									num10 -= dataGridViewColumn5.UsedFillWeight;
									num11 -= dataGridViewColumn5.FillWeight;
								}
							}
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn6 = (DataGridViewColumn)arrayList[i];
								if (dataGridViewColumn6.DesiredFillWidth != -1)
								{
									dataGridViewColumn6.UsedFillWeight = dataGridViewColumn6.FillWeight * num10 / num11;
								}
							}
						}
						else
						{
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn7 = (DataGridViewColumn)arrayList[i];
								dataGridViewColumn7.UsedFillWeight = dataGridViewColumn7.FillWeight;
							}
						}
						this.dataGridViewState2[67108864] = false;
						this.availableWidthForFillColumns = num5;
					}
					else if (num5 != this.availableWidthForFillColumns)
					{
						if (num5 > this.availableWidthForFillColumns)
						{
							int num13 = num5 - this.availableWidthForFillColumns;
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn8 = (DataGridViewColumn)arrayList[i];
								dataGridViewColumn8.DesiredFillWidth = dataGridViewColumn8.Width;
							}
							float[] array = new float[arrayList.Count];
							for (int j = 0; j < num13; j++)
							{
								float num14 = 0f;
								bool flag3 = false;
								for (int i = 0; i < arrayList.Count; i++)
								{
									DataGridViewColumn dataGridViewColumn9 = (DataGridViewColumn)arrayList[i];
									num14 += dataGridViewColumn9.FillWeight / dataGridViewColumn9.UsedFillWeight;
									if (dataGridViewColumn9.DesiredFillWidth <= dataGridViewColumn9.MinimumWidth)
									{
										flag3 = true;
									}
								}
								for (int i = 0; i < arrayList.Count; i++)
								{
									DataGridViewColumn dataGridViewColumn10 = (DataGridViewColumn)arrayList[i];
									if (j == 0)
									{
										array[i] = (float)this.availableWidthForFillColumns * dataGridViewColumn10.UsedFillWeight / num4;
									}
									if (flag3)
									{
										array[i] += dataGridViewColumn10.FillWeight / dataGridViewColumn10.UsedFillWeight / num14;
									}
									else
									{
										array[i] += dataGridViewColumn10.FillWeight / num4;
									}
								}
							}
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn11 = (DataGridViewColumn)arrayList[i];
								dataGridViewColumn11.UsedFillWeight = num4 / (float)num5 * array[i];
							}
						}
						else
						{
							int num15 = this.availableWidthForFillColumns - num5;
							int num16 = 0;
							for (int i = 0; i < arrayList.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn12 = (DataGridViewColumn)arrayList[i];
								dataGridViewColumn12.DesiredFillWidth = dataGridViewColumn12.Width;
							}
							do
							{
								int num17 = this.availableWidthForFillColumns - num16;
								int num18 = Math.Min(num17 - num5, Math.Max(1, (int)((float)num17 * 0.1f)));
								num16 += num18;
								bool flag4;
								do
								{
									flag4 = false;
									float num19 = 0f;
									float num20 = 0f;
									DataGridViewColumn dataGridViewColumn13 = null;
									for (int i = 0; i < arrayList.Count; i++)
									{
										DataGridViewColumn dataGridViewColumn14 = (DataGridViewColumn)arrayList[i];
										if (dataGridViewColumn14.DesiredFillWidth > dataGridViewColumn14.MinimumWidth)
										{
											float num21 = dataGridViewColumn14.UsedFillWeight / dataGridViewColumn14.FillWeight;
											num20 += num21;
											if (num21 > num19)
											{
												dataGridViewColumn13 = dataGridViewColumn14;
												num19 = num21;
											}
										}
									}
									if (dataGridViewColumn13 != null)
									{
										float num22 = (float)num17 * dataGridViewColumn13.UsedFillWeight / num4 - (float)num18 * dataGridViewColumn13.UsedFillWeight / dataGridViewColumn13.FillWeight / num20;
										if (num22 < (float)dataGridViewColumn13.MinimumWidth)
										{
											num22 = (float)dataGridViewColumn13.MinimumWidth;
										}
										int desiredFillWidth = dataGridViewColumn13.DesiredFillWidth;
										dataGridViewColumn13.DesiredFillWidth = Math.Min(desiredFillWidth, (int)Math.Round((double)num22, MidpointRounding.AwayFromZero));
										flag4 = desiredFillWidth != dataGridViewColumn13.DesiredFillWidth;
										if (!flag4 && num18 == 1 && desiredFillWidth > dataGridViewColumn13.MinimumWidth)
										{
											dataGridViewColumn13.DesiredFillWidth--;
											flag4 = true;
										}
										num18 -= desiredFillWidth - dataGridViewColumn13.DesiredFillWidth;
										if (flag4)
										{
											num17 -= desiredFillWidth - dataGridViewColumn13.DesiredFillWidth;
											for (int i = 0; i < arrayList.Count; i++)
											{
												DataGridViewColumn dataGridViewColumn15 = (DataGridViewColumn)arrayList[i];
												dataGridViewColumn15.UsedFillWeight = num4 / (float)num17 * (float)dataGridViewColumn15.DesiredFillWidth;
											}
										}
									}
								}
								while (flag4 && num18 > 0);
							}
							while (num16 < num15);
						}
						this.availableWidthForFillColumns = num5;
					}
					try
					{
						this.dataGridViewState2[33554432] = false;
						num7 = 0;
						float num23 = 0f;
						while (arrayList.Count > 0)
						{
							DataGridViewColumn dataGridViewColumn16 = null;
							if (arrayList.Count == 1)
							{
								dataGridViewColumn16 = (DataGridViewColumn)arrayList[0];
								dataGridViewColumn16.DesiredFillWidth = Math.Max(num5 - num7, dataGridViewColumn16.MinimumWidth);
								arrayList.Clear();
							}
							else
							{
								float num24 = 0f;
								for (int i = 0; i < arrayList.Count; i++)
								{
									DataGridViewColumn dataGridViewColumn17 = (DataGridViewColumn)arrayList[i];
									float num25 = Math.Abs(dataGridViewColumn17.UsedFillWeight - dataGridViewColumn17.FillWeight) / dataGridViewColumn17.FillWeight;
									if (num25 > num24 || dataGridViewColumn16 == null)
									{
										dataGridViewColumn16 = dataGridViewColumn17;
										num24 = num25;
									}
								}
								float num26 = dataGridViewColumn16.UsedFillWeight * (float)num5 / num4 + num23;
								dataGridViewColumn16.DesiredFillWidth = Math.Max(dataGridViewColumn16.MinimumWidth, (int)Math.Round((double)num26, MidpointRounding.AwayFromZero));
								num23 = num26 - (float)dataGridViewColumn16.DesiredFillWidth;
								num7 += dataGridViewColumn16.DesiredFillWidth;
								arrayList.Remove(dataGridViewColumn16);
							}
							if (dataGridViewColumn16.DesiredFillWidth != dataGridViewColumn16.Thickness)
							{
								flag = true;
								dataGridViewColumn16.ThicknessInternal = dataGridViewColumn16.DesiredFillWidth;
							}
						}
					}
					finally
					{
						this.dataGridViewState2[33554432] = true;
					}
				}
			}
			finally
			{
				this.dataGridViewOper[262144] = false;
			}
			return flag;
		}

		// Token: 0x06002E67 RID: 11879 RVA: 0x0007FF2C File Offset: 0x0007EF2C
		private void AdjustShrinkingRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth, bool internalAutosizing)
		{
			if ((autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None || ((autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)1) != DataGridViewAutoSizeRowsMode.None && this.RowHeadersVisible))
			{
				this.inBulkPaintCount++;
				try
				{
					if ((autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)4) != DataGridViewAutoSizeRowsMode.None)
					{
						this.inBulkLayoutCount++;
						try
						{
							for (int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num != -1; num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible))
							{
								this.AutoResizeRowInternal(num, DataGridView.MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
							}
							goto IL_01DB;
						}
						finally
						{
							this.ExitBulkLayout(false);
						}
					}
					int height = this.layout.Data.Height;
					int num2 = 0;
					int num3 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (num3 != -1 && num2 < height)
					{
						this.AutoResizeRowInternal(num3, DataGridView.MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
						num2 += this.Rows.SharedRow(num3).GetHeight(num3);
						num3 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					}
					if (num2 < height)
					{
						int num4 = num2;
						int num5 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
						num3 = num5;
						while (num3 != -1 && num2 < height && num5 == this.displayedBandsInfo.FirstDisplayedScrollingRow)
						{
							this.AutoResizeRowInternal(num3, DataGridView.MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
							num2 += this.Rows.SharedRow(num3).GetHeight(num3);
							num3 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Visible);
						}
						do
						{
							num5 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
							if (num2 < height)
							{
								int previousRow = this.Rows.GetPreviousRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
								if (previousRow != -1)
								{
									this.AutoResizeRowInternal(previousRow, DataGridView.MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
								}
							}
							num2 = num4;
							num3 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
							while (num3 != -1 && num2 < height)
							{
								this.AutoResizeRowInternal(num3, DataGridView.MapAutoSizeRowsModeToRowMode(autoSizeRowsMode), fixedWidth, internalAutosizing);
								num2 += this.Rows.SharedRow(num3).GetHeight(num3);
								num3 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Visible);
							}
						}
						while (num5 != this.displayedBandsInfo.FirstDisplayedScrollingRow);
					}
					IL_01DB:;
				}
				finally
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x06002E68 RID: 11880 RVA: 0x00080154 File Offset: 0x0007F154
		public bool AreAllCellsSelected(bool includeInvisibleCells)
		{
			if (this.Columns.Count == 0 && this.Rows.Count == 0)
			{
				return true;
			}
			if (!includeInvisibleCells && (this.Rows.GetFirstRow(DataGridViewElementStates.Visible) == -1 || this.Columns.GetFirstColumn(DataGridViewElementStates.Visible) == null))
			{
				return true;
			}
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
			{
				bool flag = this.individualSelectedCells.Count == this.Columns.Count * this.Rows.Count;
				if (flag || includeInvisibleCells)
				{
					return flag;
				}
				for (int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num != -1; num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible))
				{
					DataGridViewRow dataGridViewRow = this.Rows[num];
					for (DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
					{
						if (!dataGridViewRow.Cells[dataGridViewColumn.Index].Selected)
						{
							return false;
						}
					}
				}
				return true;
			}
			case DataGridViewSelectionMode.FullRowSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
			{
				bool flag = this.selectedBandIndexes.Count * this.Columns.Count + this.individualSelectedCells.Count == this.Columns.Count * this.Rows.Count;
				if (flag || includeInvisibleCells)
				{
					return flag;
				}
				for (int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible))
				{
					if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
					{
						DataGridViewRow dataGridViewRow = this.Rows[num2];
						for (DataGridViewColumn dataGridViewColumn2 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn2 != null; dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
						{
							if (!dataGridViewRow.Cells[dataGridViewColumn2.Index].Selected)
							{
								return false;
							}
						}
					}
				}
				return true;
			}
			case DataGridViewSelectionMode.FullColumnSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
			{
				bool flag = this.selectedBandIndexes.Count * this.Rows.Count + this.individualSelectedCells.Count == this.Columns.Count * this.Rows.Count;
				if (flag || includeInvisibleCells)
				{
					return flag;
				}
				for (DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn3 != null; dataGridViewColumn3 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
				{
					if (!this.selectedBandIndexes.Contains(dataGridViewColumn3.Index))
					{
						for (int num3 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num3 != -1; num3 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Visible))
						{
							DataGridViewRow dataGridViewRow = this.Rows[num3];
							if (!dataGridViewRow.Cells[dataGridViewColumn3.Index].Selected)
							{
								return false;
							}
						}
					}
				}
				return true;
			}
			default:
				return false;
			}
		}

		// Token: 0x06002E69 RID: 11881 RVA: 0x0008040A File Offset: 0x0007F40A
		internal override void AssignParent(Control value)
		{
			if (this.toolTipControl.Activated)
			{
				this.toolTipControl.Activate(false);
			}
			base.AssignParent(value);
		}

		// Token: 0x06002E6A RID: 11882 RVA: 0x0008042C File Offset: 0x0007F42C
		private void AutoGenerateDataBoundColumns(DataGridViewColumn[] boundColumns)
		{
			DataGridViewColumnCollection columns = this.Columns;
			DataGridViewColumn[] array = new DataGridViewColumn[columns.Count];
			int num = 0;
			int i;
			for (i = 0; i < columns.Count; i++)
			{
				if (this.DataSource != null && !string.IsNullOrEmpty(columns[i].DataPropertyName) && !columns[i].IsDataBound)
				{
					this.MapDataGridViewColumnToDataBoundField(columns[i]);
				}
				if (columns[i].IsDataBound && this.dataConnection != null && this.dataConnection.BoundColumnIndex(columns[i].DataPropertyName) != -1)
				{
					array[num] = (DataGridViewColumn)columns[i].Clone();
					array[num].DisplayIndex = columns[i].DisplayIndex;
					num++;
				}
			}
			i = 0;
			while (i < columns.Count)
			{
				if (columns[i].IsDataBound)
				{
					columns.RemoveAtInternal(i, true);
				}
				else
				{
					i++;
				}
			}
			DataGridViewColumn[] array2;
			if (array.Length == num)
			{
				array2 = array;
			}
			else
			{
				array2 = new DataGridViewColumn[num];
				Array.Copy(array, array2, num);
			}
			Array.Sort(array2, DataGridViewColumnCollection.ColumnCollectionOrderComparer);
			if (boundColumns != null)
			{
				for (int j = 0; j < boundColumns.Length; j++)
				{
					if (boundColumns[j] != null && boundColumns[j].IsBrowsableInternal)
					{
						bool flag = true;
						int k;
						for (k = 0; k < num; k++)
						{
							if (array2[k] != null && string.Compare(array2[k].DataPropertyName, boundColumns[j].DataPropertyName, true, CultureInfo.InvariantCulture) == 0)
							{
								flag = false;
								break;
							}
						}
						if (flag)
						{
							columns.Add(boundColumns[j]);
						}
						else
						{
							columns.Add(array2[k]);
							this.MapDataGridViewColumnToDataBoundField(array2[k]);
							array2[k] = null;
						}
					}
				}
			}
			if (num > 0)
			{
				for (int l = 0; l < array2.Length; l++)
				{
					if (array2[l] != null)
					{
						columns.Add(array2[l]);
						this.MapDataGridViewColumnToDataBoundField(array2[l]);
					}
				}
			}
		}

		// Token: 0x06002E6B RID: 11883 RVA: 0x0008061C File Offset: 0x0007F61C
		private bool AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaFilter, bool fixedHeight)
		{
			bool flag = false;
			for (DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
			{
				DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)dataGridViewColumn.InheritedAutoSizeMode;
				DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = inheritedAutoSizeMode & autoSizeColumnCriteriaFilter;
				if (dataGridViewAutoSizeColumnCriteriaInternal != DataGridViewAutoSizeColumnCriteriaInternal.NotSet)
				{
					flag |= this.AutoResizeColumnInternal(dataGridViewColumn.Index, inheritedAutoSizeMode, fixedHeight);
				}
			}
			return flag;
		}

		// Token: 0x06002E6C RID: 11884 RVA: 0x0008066E File Offset: 0x0007F66E
		public void AutoResizeColumn(int columnIndex)
		{
			this.AutoResizeColumn(columnIndex, DataGridViewAutoSizeColumnMode.AllCells);
		}

		// Token: 0x06002E6D RID: 11885 RVA: 0x00080678 File Offset: 0x0007F678
		public void AutoResizeColumn(int columnIndex, DataGridViewAutoSizeColumnMode autoSizeColumnMode)
		{
			this.AutoResizeColumn(columnIndex, autoSizeColumnMode, true);
		}

		// Token: 0x06002E6E RID: 11886 RVA: 0x00080684 File Offset: 0x0007F684
		protected void AutoResizeColumn(int columnIndex, DataGridViewAutoSizeColumnMode autoSizeColumnMode, bool fixedHeight)
		{
			if (autoSizeColumnMode == DataGridViewAutoSizeColumnMode.NotSet || autoSizeColumnMode == DataGridViewAutoSizeColumnMode.None || autoSizeColumnMode == DataGridViewAutoSizeColumnMode.Fill)
			{
				throw new ArgumentException(SR.GetString("DataGridView_NeedColumnAutoSizingCriteria", new object[] { "autoSizeColumnMode" }));
			}
			switch (autoSizeColumnMode)
			{
			case DataGridViewAutoSizeColumnMode.NotSet:
			case DataGridViewAutoSizeColumnMode.None:
			case DataGridViewAutoSizeColumnMode.ColumnHeader:
			case DataGridViewAutoSizeColumnMode.AllCellsExceptHeader:
			case DataGridViewAutoSizeColumnMode.AllCells:
			case DataGridViewAutoSizeColumnMode.DisplayedCellsExceptHeader:
			case DataGridViewAutoSizeColumnMode.DisplayedCells:
				goto IL_007B;
			case (DataGridViewAutoSizeColumnMode)3:
			case (DataGridViewAutoSizeColumnMode)5:
			case (DataGridViewAutoSizeColumnMode)7:
			case (DataGridViewAutoSizeColumnMode)9:
				break;
			default:
				if (autoSizeColumnMode == DataGridViewAutoSizeColumnMode.Fill)
				{
					goto IL_007B;
				}
				break;
			}
			throw new InvalidEnumArgumentException("autoSizeColumnMode", (int)autoSizeColumnMode, typeof(DataGridViewAutoSizeColumnMode));
			IL_007B:
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (autoSizeColumnMode == DataGridViewAutoSizeColumnMode.ColumnHeader && !this.ColumnHeadersVisible)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeInvisibleColumnHeader"));
			}
			this.AutoResizeColumnInternal(columnIndex, (DataGridViewAutoSizeColumnCriteriaInternal)autoSizeColumnMode, fixedHeight);
		}

		// Token: 0x06002E6F RID: 11887 RVA: 0x0008074F File Offset: 0x0007F74F
		public void AutoResizeColumnHeadersHeight()
		{
			this.AutoResizeColumnHeadersHeight(true, true);
		}

		// Token: 0x06002E70 RID: 11888 RVA: 0x00080759 File Offset: 0x0007F759
		public void AutoResizeColumnHeadersHeight(int columnIndex)
		{
			this.AutoResizeColumnHeadersHeight(columnIndex, true, true);
		}

		// Token: 0x06002E71 RID: 11889 RVA: 0x00080764 File Offset: 0x0007F764
		protected void AutoResizeColumnHeadersHeight(bool fixedRowHeadersWidth, bool fixedColumnsWidth)
		{
			if (!this.ColumnHeadersVisible)
			{
				return;
			}
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			try
			{
				this.noAutoSizeCount++;
				int num = 0;
				if (this.layout.TopLeftHeader.Width > 0)
				{
					if (fixedRowHeadersWidth)
					{
						num = this.TopLeftHeaderCell.GetPreferredHeight(-1, this.layout.TopLeftHeader.Width);
					}
					else
					{
						num = this.TopLeftHeaderCell.GetPreferredSize(-1).Height;
					}
				}
				int count = this.Columns.Count;
				for (int i = 0; i < count; i++)
				{
					if (this.Columns[i].Visible)
					{
						if (fixedColumnsWidth)
						{
							num = Math.Max(num, this.Columns[i].HeaderCell.GetPreferredHeight(-1, this.Columns[i].Thickness));
						}
						else
						{
							num = Math.Max(num, this.Columns[i].HeaderCell.GetPreferredSize(-1).Height);
						}
					}
				}
				if (num < 4)
				{
					num = 4;
				}
				if (num > 32768)
				{
					num = 32768;
				}
				if (num != this.ColumnHeadersHeight)
				{
					this.SetColumnHeadersHeightInternal(num, !fixedColumnsWidth);
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
		}

		// Token: 0x06002E72 RID: 11890 RVA: 0x000808CC File Offset: 0x0007F8CC
		protected void AutoResizeColumnHeadersHeight(int columnIndex, bool fixedRowHeadersWidth, bool fixedColumnWidth)
		{
			if (columnIndex < -1 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (!this.ColumnHeadersVisible)
			{
				return;
			}
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			try
			{
				this.noAutoSizeCount++;
				int num = 0;
				if (this.layout.TopLeftHeader.Width > 0)
				{
					if (columnIndex != -1 || fixedRowHeadersWidth)
					{
						num = this.TopLeftHeaderCell.GetPreferredHeight(-1, this.layout.TopLeftHeader.Width);
					}
					else
					{
						num = this.TopLeftHeaderCell.GetPreferredSize(-1).Height;
					}
				}
				int count = this.Columns.Count;
				for (int i = 0; i < count; i++)
				{
					if (this.Columns[i].Visible)
					{
						if (columnIndex != i || fixedColumnWidth)
						{
							num = Math.Max(num, this.Columns[i].HeaderCell.GetPreferredHeight(-1, this.Columns[i].Thickness));
						}
						else
						{
							num = Math.Max(num, this.Columns[i].HeaderCell.GetPreferredSize(-1).Height);
						}
					}
				}
				if (num < 4)
				{
					num = 4;
				}
				if (num > 32768)
				{
					num = 32768;
				}
				if (num != this.ColumnHeadersHeight)
				{
					this.SetColumnHeadersHeightInternal(num, !fixedColumnWidth);
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
		}

		// Token: 0x06002E73 RID: 11891 RVA: 0x00080A58 File Offset: 0x0007FA58
		private bool AutoResizeColumnInternal(int columnIndex, DataGridViewAutoSizeColumnCriteriaInternal autoSizeColumnCriteriaInternal, bool fixedHeight)
		{
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return false;
			}
			bool flag = false;
			try
			{
				this.noAutoSizeCount++;
				DataGridViewColumn dataGridViewColumn = this.Columns[columnIndex];
				int num = dataGridViewColumn.GetPreferredWidth((DataGridViewAutoSizeColumnMode)autoSizeColumnCriteriaInternal, fixedHeight);
				if (num < dataGridViewColumn.MinimumThickness)
				{
					num = dataGridViewColumn.MinimumThickness;
				}
				if (num > 65536)
				{
					num = 65536;
				}
				if (num != dataGridViewColumn.Thickness)
				{
					if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
					{
						this.AdjustFillingColumn(dataGridViewColumn, num);
					}
					else
					{
						this.Columns[columnIndex].ThicknessInternal = num;
					}
					flag = true;
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
			return flag;
		}

		// Token: 0x06002E74 RID: 11892 RVA: 0x00080B18 File Offset: 0x0007FB18
		public void AutoResizeColumns()
		{
			this.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.AllCells);
		}

		// Token: 0x06002E75 RID: 11893 RVA: 0x00080B21 File Offset: 0x0007FB21
		public void AutoResizeColumns(DataGridViewAutoSizeColumnsMode autoSizeColumnsMode)
		{
			this.AutoResizeColumns(autoSizeColumnsMode, true);
		}

		// Token: 0x06002E76 RID: 11894 RVA: 0x00080B2C File Offset: 0x0007FB2C
		protected void AutoResizeColumns(DataGridViewAutoSizeColumnsMode autoSizeColumnsMode, bool fixedHeight)
		{
			for (int i = 0; i < this.Columns.Count; i++)
			{
				this.AutoResizeColumn(i, (DataGridViewAutoSizeColumnMode)autoSizeColumnsMode, fixedHeight);
			}
		}

		// Token: 0x06002E77 RID: 11895 RVA: 0x00080B58 File Offset: 0x0007FB58
		public void AutoResizeRow(int rowIndex)
		{
			this.AutoResizeRow(rowIndex, DataGridViewAutoSizeRowMode.AllCells);
		}

		// Token: 0x06002E78 RID: 11896 RVA: 0x00080B62 File Offset: 0x0007FB62
		public void AutoResizeRow(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode)
		{
			this.AutoResizeRow(rowIndex, autoSizeRowMode, true);
		}

		// Token: 0x06002E79 RID: 11897 RVA: 0x00080B70 File Offset: 0x0007FB70
		protected void AutoResizeRow(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth)
		{
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if ((autoSizeRowMode & (DataGridViewAutoSizeRowMode)(-4)) != (DataGridViewAutoSizeRowMode)0)
			{
				throw new InvalidEnumArgumentException("autoSizeRowMode", (int)autoSizeRowMode, typeof(DataGridViewAutoSizeRowMode));
			}
			if (autoSizeRowMode == DataGridViewAutoSizeRowMode.RowHeader && !this.RowHeadersVisible)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeRowInvisibleRowHeader"));
			}
			this.AutoResizeRowInternal(rowIndex, autoSizeRowMode, fixedWidth, false);
		}

		// Token: 0x06002E7A RID: 11898 RVA: 0x00080BDC File Offset: 0x0007FBDC
		public void AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode)
		{
			this.AutoResizeRowHeadersWidth(rowHeadersWidthSizeMode, true, true);
		}

		// Token: 0x06002E7B RID: 11899 RVA: 0x00080BE8 File Offset: 0x0007FBE8
		protected void AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowsHeight)
		{
			if (rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing)
			{
				throw new ArgumentException(SR.GetString("DataGridView_NeedAutoSizingCriteria", new object[] { "rowHeadersWidthSizeMode" }));
			}
			if (rowHeadersWidthSizeMode < DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders || rowHeadersWidthSizeMode > DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader)
			{
				throw new InvalidEnumArgumentException("rowHeadersWidthSizeMode", (int)rowHeadersWidthSizeMode, typeof(DataGridViewRowHeadersWidthSizeMode));
			}
			if (!this.RowHeadersVisible)
			{
				return;
			}
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			try
			{
				this.noAutoSizeCount++;
				int num = 0;
				if (this.layout.TopLeftHeader.Width > 0)
				{
					if (fixedColumnHeadersHeight)
					{
						num = this.TopLeftHeaderCell.GetPreferredWidth(-1, this.layout.TopLeftHeader.Height);
					}
					else
					{
						num = this.TopLeftHeaderCell.GetPreferredSize(-1).Width;
					}
				}
				switch (rowHeadersWidthSizeMode)
				{
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders:
				{
					for (int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible))
					{
						if (fixedRowsHeight)
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredWidth(num2, this.Rows.SharedRow(num2).GetHeight(num2)));
						}
						else
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredSize(num2).Width);
						}
					}
					break;
				}
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders:
				{
					int height = this.layout.Data.Height;
					int num3 = 0;
					int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (num2 != -1 && num3 < height)
					{
						DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num2);
						int height2 = dataGridViewRow.GetHeight(num2);
						num3 += height2;
						if (fixedRowsHeight)
						{
							num = Math.Max(num, dataGridViewRow.HeaderCell.GetPreferredWidth(num2, height2));
						}
						else
						{
							num = Math.Max(num, dataGridViewRow.HeaderCell.GetPreferredSize(num2).Width);
						}
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					}
					if (num3 < height)
					{
						for (num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow; num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible))
						{
							if (num3 >= height)
							{
								break;
							}
							DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(num2);
							int height3 = dataGridViewRow2.GetHeight(num2);
							num3 += height3;
							if (fixedRowsHeight)
							{
								num = Math.Max(num, dataGridViewRow2.HeaderCell.GetPreferredWidth(num2, height3));
							}
							else
							{
								num = Math.Max(num, dataGridViewRow2.HeaderCell.GetPreferredSize(num2).Width);
							}
						}
					}
					break;
				}
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader:
				{
					int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					if (num2 != -1)
					{
						if (fixedRowsHeight)
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredWidth(num2, this.Rows.SharedRow(num2).GetHeight(num2)));
						}
						else
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredSize(num2).Width);
						}
					}
					break;
				}
				}
				if (num < 4)
				{
					num = 4;
				}
				if (num != this.RowHeadersWidth)
				{
					this.RowHeadersWidthInternal = num;
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
		}

		// Token: 0x06002E7C RID: 11900 RVA: 0x00080F28 File Offset: 0x0007FF28
		public void AutoResizeRowHeadersWidth(int rowIndex, DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode)
		{
			this.AutoResizeRowHeadersWidth(rowIndex, rowHeadersWidthSizeMode, true, true);
		}

		// Token: 0x06002E7D RID: 11901 RVA: 0x00080F34 File Offset: 0x0007FF34
		protected void AutoResizeRowHeadersWidth(int rowIndex, DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode, bool fixedColumnHeadersHeight, bool fixedRowHeight)
		{
			if (rowIndex < -1 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if (rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing)
			{
				throw new ArgumentException(SR.GetString("DataGridView_NeedAutoSizingCriteria", new object[] { "rowHeadersWidthSizeMode" }));
			}
			if (rowHeadersWidthSizeMode < DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders || rowHeadersWidthSizeMode > DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader)
			{
				throw new InvalidEnumArgumentException("rowHeadersWidthSizeMode", (int)rowHeadersWidthSizeMode, typeof(DataGridViewRowHeadersWidthSizeMode));
			}
			if (!this.RowHeadersVisible)
			{
				return;
			}
			if (rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader && rowIndex != -1 && rowIndex != this.Rows.GetFirstRow(DataGridViewElementStates.Visible))
			{
				return;
			}
			if (rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders && rowIndex != -1)
			{
				DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
				if ((rowState & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None)
				{
					return;
				}
			}
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			try
			{
				this.noAutoSizeCount++;
				int num = 0;
				if (this.layout.TopLeftHeader.Width > 0)
				{
					if (rowIndex != -1 || fixedColumnHeadersHeight)
					{
						num = this.TopLeftHeaderCell.GetPreferredWidth(-1, this.layout.TopLeftHeader.Height);
					}
					else
					{
						num = this.TopLeftHeaderCell.GetPreferredSize(-1).Width;
					}
				}
				switch (rowHeadersWidthSizeMode)
				{
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders:
				{
					for (int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible))
					{
						if (rowIndex != num2 || fixedRowHeight)
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredWidth(num2, this.Rows.SharedRow(num2).GetHeight(num2)));
						}
						else
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredSize(num2).Width);
						}
					}
					break;
				}
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders:
				{
					int height = this.layout.Data.Height;
					int num3 = 0;
					int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (num2 != -1 && num3 < height)
					{
						DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num2);
						int height2 = dataGridViewRow.GetHeight(num2);
						num3 += height2;
						if (rowIndex != num2 || fixedRowHeight)
						{
							num = Math.Max(num, dataGridViewRow.HeaderCell.GetPreferredWidth(num2, height2));
						}
						else
						{
							num = Math.Max(num, dataGridViewRow.HeaderCell.GetPreferredSize(num2).Width);
						}
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					}
					if (num3 < height)
					{
						for (num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow; num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible))
						{
							if (num3 >= height)
							{
								break;
							}
							DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(num2);
							int height3 = dataGridViewRow2.GetHeight(num2);
							num3 += height3;
							if (rowIndex != num2 || fixedRowHeight)
							{
								num = Math.Max(num, dataGridViewRow2.HeaderCell.GetPreferredWidth(num2, height3));
							}
							else
							{
								num = Math.Max(num, dataGridViewRow2.HeaderCell.GetPreferredSize(num2).Width);
							}
						}
					}
					break;
				}
				case DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader:
				{
					int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					if (num2 != -1)
					{
						if (rowIndex != num2 || fixedRowHeight)
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredWidth(num2, this.Rows.SharedRow(num2).GetHeight(num2)));
						}
						else
						{
							num = Math.Max(num, this.Rows.SharedRow(num2).HeaderCell.GetPreferredSize(num2).Width);
						}
					}
					break;
				}
				}
				if (num < 4)
				{
					num = 4;
				}
				if (num != this.RowHeadersWidth)
				{
					this.RowHeadersWidthInternal = num;
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
		}

		// Token: 0x06002E7E RID: 11902 RVA: 0x000812F4 File Offset: 0x000802F4
		private void AutoResizeRowInternal(int rowIndex, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth, bool internalAutosizing)
		{
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			try
			{
				this.noAutoSizeCount++;
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
				int num;
				int num2;
				dataGridViewRow.GetHeightInfo(rowIndex, out num, out num2);
				int num3 = dataGridViewRow.GetPreferredHeight(rowIndex, autoSizeRowMode, fixedWidth);
				if (num3 < num2)
				{
					num3 = num2;
				}
				if (num3 > 65536)
				{
					num3 = 65536;
				}
				if (num != num3)
				{
					if (this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
					{
						if (!this.OnRowHeightInfoPushed(rowIndex, num3, num2))
						{
							this.Rows[rowIndex].ThicknessInternal = num3;
						}
					}
					else if (internalAutosizing)
					{
						this.Rows[rowIndex].ThicknessInternal = num3;
					}
					else
					{
						this.Rows[rowIndex].Thickness = num3;
					}
				}
			}
			finally
			{
				this.noAutoSizeCount--;
			}
		}

		// Token: 0x06002E7F RID: 11903 RVA: 0x000813D8 File Offset: 0x000803D8
		public void AutoResizeRows()
		{
			this.AutoResizeRows(DataGridViewAutoSizeRowsMode.AllCells);
		}

		// Token: 0x06002E80 RID: 11904 RVA: 0x000813E1 File Offset: 0x000803E1
		public void AutoResizeRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode)
		{
			this.AutoResizeRows(autoSizeRowsMode, true);
		}

		// Token: 0x06002E81 RID: 11905 RVA: 0x000813EC File Offset: 0x000803EC
		protected void AutoResizeRows(DataGridViewAutoSizeRowsMode autoSizeRowsMode, bool fixedWidth)
		{
			switch (autoSizeRowsMode)
			{
			case DataGridViewAutoSizeRowsMode.None:
			case DataGridViewAutoSizeRowsMode.AllHeaders:
			case DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders:
			case DataGridViewAutoSizeRowsMode.AllCells:
			case DataGridViewAutoSizeRowsMode.DisplayedHeaders:
			case DataGridViewAutoSizeRowsMode.DisplayedCellsExceptHeaders:
			case DataGridViewAutoSizeRowsMode.DisplayedCells:
				if (autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
				{
					throw new ArgumentException(SR.GetString("DataGridView_NeedAutoSizingCriteria", new object[] { "autoSizeRowsMode" }));
				}
				if ((autoSizeRowsMode == DataGridViewAutoSizeRowsMode.AllHeaders || autoSizeRowsMode == DataGridViewAutoSizeRowsMode.DisplayedHeaders) && !this.RowHeadersVisible)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeRowsInvisibleRowHeader"));
				}
				this.AdjustShrinkingRows(autoSizeRowsMode, fixedWidth, false);
				return;
			default:
				throw new InvalidEnumArgumentException("value", (int)autoSizeRowsMode, typeof(DataGridViewAutoSizeRowsMode));
			}
		}

		// Token: 0x06002E82 RID: 11906 RVA: 0x00081494 File Offset: 0x00080494
		protected void AutoResizeRows(int rowIndexStart, int rowsCount, DataGridViewAutoSizeRowMode autoSizeRowMode, bool fixedWidth)
		{
			if ((autoSizeRowMode & (DataGridViewAutoSizeRowMode)(-4)) != (DataGridViewAutoSizeRowMode)0)
			{
				throw new InvalidEnumArgumentException("autoSizeRowMode", (int)autoSizeRowMode, typeof(DataGridViewAutoSizeRowMode));
			}
			if (autoSizeRowMode == DataGridViewAutoSizeRowMode.RowHeader && !this.RowHeadersVisible)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAutoSizeRowsInvisibleRowHeader"));
			}
			if (rowsCount < 0)
			{
				throw new ArgumentOutOfRangeException("rowsCount");
			}
			if (rowIndexStart < 0)
			{
				throw new ArgumentOutOfRangeException("rowIndexStart");
			}
			if (!base.IsHandleCreated)
			{
				this.dataGridViewState2[1048576] = true;
				return;
			}
			this.inBulkPaintCount++;
			this.inBulkLayoutCount++;
			try
			{
				int num = this.Rows.GetNextRow(rowIndexStart - 1, DataGridViewElementStates.Visible);
				int num2 = 0;
				while (num != -1 && num2 < rowsCount)
				{
					this.AutoResizeRowInternal(num, autoSizeRowMode, fixedWidth, false);
					num2++;
					if (num2 < rowsCount)
					{
						num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible);
					}
				}
			}
			finally
			{
				this.ExitBulkLayout(true);
				this.ExitBulkPaint(-1, -1);
			}
		}

		// Token: 0x06002E83 RID: 11907 RVA: 0x00081590 File Offset: 0x00080590
		private void BeginColumnHeadersResize(int mouseY, int mouseBarOffset)
		{
			Rectangle rectangle = Rectangle.Union(this.layout.ColumnHeaders, this.layout.Data);
			if (this.layout.TopLeftHeader.Width > 0)
			{
				rectangle = Rectangle.Union(this.layout.TopLeftHeader, rectangle);
			}
			rectangle.Y += 4 - mouseBarOffset - 1;
			this.CaptureMouse(rectangle);
			this.dataGridViewOper[128] = true;
			this.trackRowAnchor = mouseY;
			this.mouseBarOffset = mouseBarOffset;
			this.currentRowSplitBar = mouseY;
			base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
		}

		// Token: 0x06002E84 RID: 11908 RVA: 0x00081630 File Offset: 0x00080630
		private void BeginColumnRelocation(int mouseX, int index)
		{
			Rectangle columnHeaders = this.layout.ColumnHeaders;
			int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			int num = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible) - columnsWidth;
			if (this.Columns[index].Frozen)
			{
				if (this.RightToLeftInternal)
				{
					columnHeaders.X += columnHeaders.Width - columnsWidth;
				}
				columnHeaders.Width = Math.Min(columnsWidth, this.layout.Data.Width);
			}
			else
			{
				if (!this.RightToLeftInternal)
				{
					columnHeaders.X += columnsWidth;
				}
				else if (this.layout.Data.Width > columnsWidth + num)
				{
					columnHeaders.X += this.layout.Data.Width - columnsWidth - num;
				}
				columnHeaders.Width = Math.Min(num, this.layout.Data.Width);
			}
			this.CaptureMouse(columnHeaders);
			this.dataGridViewOper[32] = true;
			this.dataGridViewState2[1024] = false;
			this.trackColumn = index;
			this.trackColumnEdge = -1;
			this.mouseBarOffset = this.GetColumnXFromIndex(index) - mouseX;
			this.lastHeaderShadow = mouseX;
			base.Invalidate(this.layout.ColumnHeaders);
		}

		// Token: 0x06002E85 RID: 11909 RVA: 0x00081780 File Offset: 0x00080780
		private void BeginColumnResize(int mouseX, int mouseBarOffset, int index)
		{
			Rectangle rectangle = Rectangle.Union(this.layout.ColumnHeaders, this.layout.Data);
			int columnXFromIndex = this.GetColumnXFromIndex(index);
			if (this.RightToLeftInternal)
			{
				rectangle.X = this.layout.Data.X - mouseBarOffset - 1;
				rectangle.Width = columnXFromIndex - this.Columns[index].MinimumThickness - this.layout.Data.X + 3;
				int num = columnXFromIndex - mouseBarOffset - rectangle.Left - 65536 + 1;
				if (num > 0)
				{
					rectangle.X += num;
					rectangle.Width -= num;
				}
			}
			else
			{
				rectangle.X = columnXFromIndex + this.Columns[index].MinimumThickness - mouseBarOffset - 1;
				rectangle.Width = this.layout.Data.Right - columnXFromIndex - 1;
				int num2 = rectangle.Right + mouseBarOffset - columnXFromIndex - 65536;
				if (num2 > 0)
				{
					rectangle.Width -= num2;
				}
			}
			this.CaptureMouse(rectangle);
			this.dataGridViewOper[1] = true;
			this.trackColAnchor = mouseX;
			this.trackColumn = index;
			this.mouseBarOffset = mouseBarOffset;
			this.currentColSplitBar = mouseX;
			base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar));
		}

		// Token: 0x06002E86 RID: 11910 RVA: 0x000818DC File Offset: 0x000808DC
		public virtual bool BeginEdit(bool selectAll)
		{
			if (this.ptCurrentCell.X == -1)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_NoCurrentCell"));
			}
			return this.IsCurrentCellInEditMode || this.BeginEditInternal(selectAll);
		}

		// Token: 0x06002E87 RID: 11911 RVA: 0x00081910 File Offset: 0x00080910
		private bool BeginEditInternal(bool selectAll)
		{
			if (this.dataGridViewOper[2097152])
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_BeginEditNotReentrant"));
			}
			bool flag;
			try
			{
				this.dataGridViewOper[2097152] = true;
				DataGridViewCell dataGridViewCell = this.CurrentCellInternal;
				if (this.IsSharedCellReadOnly(dataGridViewCell, this.ptCurrentCell.Y) || !this.ColumnEditable(this.ptCurrentCell.X))
				{
					flag = false;
				}
				else
				{
					Type editType = dataGridViewCell.EditType;
					if (editType == null && dataGridViewCell.GetType().GetInterface("System.Windows.Forms.IDataGridViewEditingCell") == null)
					{
						flag = false;
					}
					else
					{
						DataGridViewCellCancelEventArgs dataGridViewCellCancelEventArgs = new DataGridViewCellCancelEventArgs(this.ptCurrentCell.X, this.ptCurrentCell.Y);
						this.OnCellBeginEdit(dataGridViewCellCancelEventArgs);
						if (dataGridViewCellCancelEventArgs.Cancel)
						{
							flag = false;
						}
						else if (this.ptCurrentCell.X > -1)
						{
							dataGridViewCell = this.CurrentCellInternal;
							DataGridViewCellStyle inheritedStyle = dataGridViewCell.GetInheritedStyle(null, this.ptCurrentCell.Y, true);
							if (editType == null)
							{
								this.dataGridViewState1[32768] = true;
								this.InitializeEditingCellValue(ref inheritedStyle, ref dataGridViewCell);
								((IDataGridViewEditingCell)dataGridViewCell).PrepareEditingCellForEdit(selectAll);
								flag = true;
							}
							else
							{
								Type @interface = editType.GetInterface("System.Windows.Forms.IDataGridViewEditingControl");
								if (!editType.IsSubclassOf(Type.GetType("System.Windows.Forms.Control")) || @interface == null)
								{
									throw new InvalidCastException(SR.GetString("DataGridView_InvalidEditingControl"));
								}
								if (this.latestEditingControl != null && editType.IsInstanceOfType(this.latestEditingControl) && !this.latestEditingControl.GetType().IsSubclassOf(editType))
								{
									this.editingControl = this.latestEditingControl;
								}
								else
								{
									this.editingControl = (Control)SecurityUtils.SecureCreateInstance(editType);
									((IDataGridViewEditingControl)this.editingControl).EditingControlDataGridView = this;
									if (this.latestEditingControl != null)
									{
										this.latestEditingControl.Dispose();
										this.latestEditingControl = null;
									}
								}
								if (string.IsNullOrEmpty(this.editingControl.AccessibleName))
								{
									this.editingControl.AccessibleName = SR.GetString("DataGridView_AccEditingControlAccName");
								}
								this.editingControl.ImeMode = base.ImeMode;
								((IDataGridViewEditingControl)this.editingControl).EditingControlRowIndex = this.ptCurrentCell.Y;
								this.InitializeEditingControlValue(ref inheritedStyle, dataGridViewCell);
								this.WireEditingControlEvents();
								DataGridViewEditingControlShowingEventArgs dataGridViewEditingControlShowingEventArgs = new DataGridViewEditingControlShowingEventArgs(this.editingControl, inheritedStyle);
								this.OnEditingControlShowing(dataGridViewEditingControlShowingEventArgs);
								if (this.editingPanel == null || this.editingControl == null)
								{
									flag = false;
								}
								else
								{
									this.editingPanel.BackColor = dataGridViewEditingControlShowingEventArgs.CellStyle.BackColor;
									((IDataGridViewEditingControl)this.editingControl).ApplyCellStyleToEditingControl(dataGridViewEditingControlShowingEventArgs.CellStyle);
									if (this.toolTipControl.Activated && this.ptToolTipCell == this.ptCurrentCell)
									{
										this.toolTipControl.Activate(false);
									}
									this.PositionEditingControl(true, true, true);
									if (this.editingPanel == null || this.editingControl == null)
									{
										flag = false;
									}
									else
									{
										((IDataGridViewEditingControl)this.editingControl).PrepareEditingControlForEdit(selectAll);
										this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
										flag = true;
									}
								}
							}
						}
						else
						{
							flag = false;
						}
					}
				}
			}
			finally
			{
				this.dataGridViewOper[2097152] = false;
			}
			return flag;
		}

		// Token: 0x06002E88 RID: 11912 RVA: 0x00081C58 File Offset: 0x00080C58
		private void BeginRowHeadersResize(int mouseX, int mouseBarOffset)
		{
			Rectangle rectangle = Rectangle.Union(this.layout.RowHeaders, this.layout.Data);
			if (this.layout.TopLeftHeader.Width > 0)
			{
				rectangle = Rectangle.Union(this.layout.TopLeftHeader, rectangle);
			}
			if (this.RightToLeftInternal)
			{
				rectangle.X -= mouseBarOffset + 1;
				rectangle.Width -= 3;
			}
			else
			{
				rectangle.X += 4 - mouseBarOffset - 1;
			}
			this.CaptureMouse(rectangle);
			this.dataGridViewOper[256] = true;
			this.trackColAnchor = mouseX;
			this.mouseBarOffset = mouseBarOffset;
			this.currentColSplitBar = mouseX;
			base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar));
		}

		// Token: 0x06002E89 RID: 11913 RVA: 0x00081D24 File Offset: 0x00080D24
		private void BeginRowResize(int mouseY, int mouseBarOffset, int index)
		{
			Rectangle rectangle = Rectangle.Union(this.layout.RowHeaders, this.layout.Data);
			int rowYFromIndex = this.GetRowYFromIndex(index);
			rectangle.Y = rowYFromIndex + this.Rows.SharedRow(index).GetMinimumHeight(index) - mouseBarOffset - 1;
			rectangle.Height = this.layout.Data.Y + this.layout.Data.Height - rowYFromIndex - 1;
			this.CaptureMouse(rectangle);
			this.dataGridViewOper[2] = true;
			this.trackRowAnchor = mouseY;
			this.trackRow = index;
			this.mouseBarOffset = mouseBarOffset;
			this.currentRowSplitBar = mouseY;
			base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
		}

		// Token: 0x06002E8A RID: 11914 RVA: 0x00081DE4 File Offset: 0x00080DE4
		private void BuildInheritedColumnHeaderCellStyle(DataGridViewCellStyle inheritedCellStyle, DataGridViewCell cell)
		{
			DataGridViewCellStyle dataGridViewCellStyle = null;
			if (cell.HasStyle)
			{
				dataGridViewCellStyle = cell.Style;
			}
			DataGridViewCellStyle dataGridViewCellStyle2 = this.ColumnHeadersDefaultCellStyle;
			DataGridViewCellStyle dataGridViewCellStyle3 = this.DefaultCellStyle;
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.BackColor.IsEmpty)
			{
				inheritedCellStyle.BackColor = dataGridViewCellStyle.BackColor;
			}
			else if (!dataGridViewCellStyle2.BackColor.IsEmpty)
			{
				inheritedCellStyle.BackColor = dataGridViewCellStyle2.BackColor;
			}
			else
			{
				inheritedCellStyle.BackColor = dataGridViewCellStyle3.BackColor;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.ForeColor.IsEmpty)
			{
				inheritedCellStyle.ForeColor = dataGridViewCellStyle.ForeColor;
			}
			else if (!dataGridViewCellStyle2.ForeColor.IsEmpty)
			{
				inheritedCellStyle.ForeColor = dataGridViewCellStyle2.ForeColor;
			}
			else
			{
				inheritedCellStyle.ForeColor = dataGridViewCellStyle3.ForeColor;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.SelectionBackColor.IsEmpty)
			{
				inheritedCellStyle.SelectionBackColor = dataGridViewCellStyle.SelectionBackColor;
			}
			else if (!dataGridViewCellStyle2.SelectionBackColor.IsEmpty)
			{
				inheritedCellStyle.SelectionBackColor = dataGridViewCellStyle2.SelectionBackColor;
			}
			else
			{
				inheritedCellStyle.SelectionBackColor = dataGridViewCellStyle3.SelectionBackColor;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.SelectionForeColor.IsEmpty)
			{
				inheritedCellStyle.SelectionForeColor = dataGridViewCellStyle.SelectionForeColor;
			}
			else if (!dataGridViewCellStyle2.SelectionForeColor.IsEmpty)
			{
				inheritedCellStyle.SelectionForeColor = dataGridViewCellStyle2.SelectionForeColor;
			}
			else
			{
				inheritedCellStyle.SelectionForeColor = dataGridViewCellStyle3.SelectionForeColor;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.Font != null)
			{
				inheritedCellStyle.Font = dataGridViewCellStyle.Font;
			}
			else if (dataGridViewCellStyle2.Font != null)
			{
				inheritedCellStyle.Font = dataGridViewCellStyle2.Font;
			}
			else
			{
				inheritedCellStyle.Font = dataGridViewCellStyle3.Font;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.IsNullValueDefault)
			{
				inheritedCellStyle.NullValue = dataGridViewCellStyle.NullValue;
			}
			else if (!dataGridViewCellStyle2.IsNullValueDefault)
			{
				inheritedCellStyle.NullValue = dataGridViewCellStyle2.NullValue;
			}
			else
			{
				inheritedCellStyle.NullValue = dataGridViewCellStyle3.NullValue;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.IsDataSourceNullValueDefault)
			{
				inheritedCellStyle.DataSourceNullValue = dataGridViewCellStyle.DataSourceNullValue;
			}
			else if (!dataGridViewCellStyle2.IsDataSourceNullValueDefault)
			{
				inheritedCellStyle.DataSourceNullValue = dataGridViewCellStyle2.DataSourceNullValue;
			}
			else
			{
				inheritedCellStyle.DataSourceNullValue = dataGridViewCellStyle3.DataSourceNullValue;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.Format.Length != 0)
			{
				inheritedCellStyle.Format = dataGridViewCellStyle.Format;
			}
			else if (dataGridViewCellStyle2.Format.Length != 0)
			{
				inheritedCellStyle.Format = dataGridViewCellStyle2.Format;
			}
			else
			{
				inheritedCellStyle.Format = dataGridViewCellStyle3.Format;
			}
			if (dataGridViewCellStyle != null && !dataGridViewCellStyle.IsFormatProviderDefault)
			{
				inheritedCellStyle.FormatProvider = dataGridViewCellStyle.FormatProvider;
			}
			else if (!dataGridViewCellStyle2.IsFormatProviderDefault)
			{
				inheritedCellStyle.FormatProvider = dataGridViewCellStyle2.FormatProvider;
			}
			else
			{
				inheritedCellStyle.FormatProvider = dataGridViewCellStyle3.FormatProvider;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.Alignment != DataGridViewContentAlignment.NotSet)
			{
				inheritedCellStyle.AlignmentInternal = dataGridViewCellStyle.Alignment;
			}
			else if (dataGridViewCellStyle2 != null && dataGridViewCellStyle2.Alignment != DataGridViewContentAlignment.NotSet)
			{
				inheritedCellStyle.AlignmentInternal = dataGridViewCellStyle2.Alignment;
			}
			else
			{
				inheritedCellStyle.AlignmentInternal = dataGridViewCellStyle3.Alignment;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.WrapMode != DataGridViewTriState.NotSet)
			{
				inheritedCellStyle.WrapModeInternal = dataGridViewCellStyle.WrapMode;
			}
			else if (dataGridViewCellStyle2 != null && dataGridViewCellStyle2.WrapMode != DataGridViewTriState.NotSet)
			{
				inheritedCellStyle.WrapModeInternal = dataGridViewCellStyle2.WrapMode;
			}
			else
			{
				inheritedCellStyle.WrapModeInternal = dataGridViewCellStyle3.WrapMode;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.Tag != null)
			{
				inheritedCellStyle.Tag = dataGridViewCellStyle.Tag;
			}
			else if (dataGridViewCellStyle2.Tag != null)
			{
				inheritedCellStyle.Tag = dataGridViewCellStyle2.Tag;
			}
			else
			{
				inheritedCellStyle.Tag = dataGridViewCellStyle3.Tag;
			}
			if (dataGridViewCellStyle != null && dataGridViewCellStyle.Padding != Padding.Empty)
			{
				inheritedCellStyle.PaddingInternal = dataGridViewCellStyle.Padding;
				return;
			}
			if (dataGridViewCellStyle2.Padding != Padding.Empty)
			{
				inheritedCellStyle.PaddingInternal = dataGridViewCellStyle2.Padding;
				return;
			}
			inheritedCellStyle.PaddingInternal = dataGridViewCellStyle3.Padding;
		}

		// Token: 0x06002E8B RID: 11915 RVA: 0x00082178 File Offset: 0x00081178
		private Rectangle CalcColRelocationFeedbackRect(int mouseX)
		{
			Rectangle rectangle = this.layout.ColumnHeaders;
			if (this.layout.TopLeftHeader.Width > 0)
			{
				rectangle = Rectangle.Union(this.layout.TopLeftHeader, rectangle);
			}
			Rectangle rectangle2;
			if (this.RightToLeftInternal)
			{
				rectangle2 = new Rectangle(mouseX + this.mouseBarOffset - this.Columns[this.trackColumn].Thickness + 1, rectangle.Y, this.Columns[this.trackColumn].Thickness, rectangle.Height);
				rectangle2.X = Math.Max(rectangle.Left, rectangle2.X);
				rectangle2.X = Math.Min(rectangle2.X, rectangle.Right - rectangle2.Width);
			}
			else
			{
				rectangle2 = new Rectangle(mouseX + this.mouseBarOffset - 1, rectangle.Y, this.Columns[this.trackColumn].Thickness, rectangle.Height);
				rectangle2.X = Math.Min(rectangle.Right - rectangle2.Width, rectangle2.X);
				rectangle2.X = Math.Max(rectangle2.X, rectangle.Left);
			}
			return rectangle2;
		}

		// Token: 0x06002E8C RID: 11916 RVA: 0x000822C0 File Offset: 0x000812C0
		private Rectangle CalcColResizeFeedbackRect(int mouseX)
		{
			Rectangle data = this.layout.Data;
			Rectangle rectangle = new Rectangle(mouseX + this.mouseBarOffset - 1, data.Y, 3, data.Height);
			if (this.RightToLeftInternal)
			{
				rectangle.X = Math.Max(data.Left, rectangle.X);
			}
			else
			{
				rectangle.X = Math.Min(data.Right - 3, rectangle.X);
				rectangle.X = Math.Max(rectangle.X, 0);
			}
			return rectangle;
		}

		// Token: 0x06002E8D RID: 11917 RVA: 0x00082350 File Offset: 0x00081350
		private Rectangle CalcRowResizeFeedbackRect(int mouseY)
		{
			Rectangle data = this.layout.Data;
			Rectangle rectangle = new Rectangle(data.X, mouseY + this.mouseBarOffset - 1, data.Width, 3);
			rectangle.Y = Math.Min(data.Bottom - 3, rectangle.Y);
			rectangle.Y = Math.Max(rectangle.Y, 0);
			return rectangle;
		}

		// Token: 0x06002E8E RID: 11918 RVA: 0x000823BA File Offset: 0x000813BA
		public bool CancelEdit()
		{
			return this.CancelEdit(false);
		}

		// Token: 0x06002E8F RID: 11919 RVA: 0x000823C4 File Offset: 0x000813C4
		private bool CancelEdit(bool endEdit)
		{
			if (this.ptCurrentCell.X != -1)
			{
				int x = this.ptCurrentCell.X;
				DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = this.CancelEditPrivate();
				if (dataGridViewDataErrorEventArgs != null)
				{
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
					if (dataGridViewDataErrorEventArgs.Cancel)
					{
						return false;
					}
				}
				if (this.IsCurrentCellInEditMode)
				{
					if (endEdit && this.EditMode != DataGridViewEditMode.EditOnEnter && this.editingControl != null)
					{
						this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.InitialValueRestoration, DataGridView.DataGridViewValidateCellInternal.Never, false, false, false, false, false, true, true, true);
					}
					else
					{
						DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs2 = null;
						IDataGridViewEditingCell dataGridViewEditingCell = null;
						try
						{
							this.dataGridViewState1[512] = true;
							if (this.editingControl != null)
							{
								((IDataGridViewEditingControl)this.editingControl).EditingControlFormattedValue = this.uneditedFormattedValue;
								((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = false;
							}
							else
							{
								dataGridViewEditingCell = this.CurrentCellInternal as IDataGridViewEditingCell;
								dataGridViewEditingCell.EditingCellFormattedValue = this.uneditedFormattedValue;
								dataGridViewEditingCell.EditingCellValueChanged = false;
							}
						}
						catch (Exception ex)
						{
							if (ClientUtils.IsCriticalException(ex))
							{
								throw;
							}
							dataGridViewDataErrorEventArgs2 = new DataGridViewDataErrorEventArgs(ex, this.ptCurrentCell.X, this.ptCurrentCell.Y, DataGridViewDataErrorContexts.InitialValueRestoration);
						}
						finally
						{
							this.dataGridViewState1[512] = false;
						}
						if (dataGridViewDataErrorEventArgs2 != null)
						{
							this.OnDataErrorInternal(dataGridViewDataErrorEventArgs2);
							if (dataGridViewDataErrorEventArgs2.ThrowException)
							{
								throw dataGridViewDataErrorEventArgs2.Exception;
							}
						}
						if (this.editingControl != null)
						{
							((IDataGridViewEditingControl)this.editingControl).PrepareEditingControlForEdit(true);
						}
						else
						{
							dataGridViewEditingCell.PrepareEditingCellForEdit(true);
							this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
						}
					}
				}
				else if (this.ptCurrentCell.X == -1 && this.Focused && this.Rows.Count > 0)
				{
					if (this.Columns.Count > x && this.Columns[x].Visible)
					{
						int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
						if (firstRow != -1)
						{
							this.SetAndSelectCurrentCellAddress(x, firstRow, true, false, false, false, false);
						}
					}
					else
					{
						this.MakeFirstDisplayedCellCurrentCell(true);
					}
				}
			}
			return true;
		}

		// Token: 0x06002E90 RID: 11920 RVA: 0x000825E0 File Offset: 0x000815E0
		private DataGridViewDataErrorEventArgs CancelEditPrivate()
		{
			bool isCurrentCellDirty = this.IsCurrentCellDirty;
			bool isCurrentRowDirty = this.IsCurrentRowDirty;
			if (this.IsCurrentCellInEditMode)
			{
				if (this.editingControl != null)
				{
					((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = false;
				}
				else
				{
					((IDataGridViewEditingCell)this.CurrentCellInternal).EditingCellValueChanged = false;
				}
				this.IsCurrentCellDirtyInternal = false;
			}
			if (this.DataSource != null || this.VirtualMode)
			{
				if ((isCurrentRowDirty && !isCurrentCellDirty) || (this.dataGridViewState1[524288] && !this.dataGridViewState1[262144]))
				{
					bool flag = this.dataGridViewState1[524288];
					this.IsCurrentRowDirtyInternal = false;
					if (this.VirtualMode)
					{
						QuestionEventArgs questionEventArgs = new QuestionEventArgs(flag);
						this.OnCancelRowEdit(questionEventArgs);
						flag &= questionEventArgs.Response;
					}
					if (this.DataSource != null)
					{
						int x = this.ptCurrentCell.X;
						this.dataConnection.CancelRowEdit(true, this.dataGridViewState1[524288]);
						if (this.dataConnection.List.Count == 0)
						{
							if (isCurrentCellDirty || this.ptCurrentCell.Y == -1 || this.ptCurrentCell.X == -1)
							{
								if (!this.IsColumnOutOfBounds(x) && this.Columns[x].Visible)
								{
									this.SetAndSelectCurrentCellAddress(x, 0, true, false, false, true, false);
								}
							}
							else
							{
								this.dataConnection.OnNewRowNeeded();
							}
						}
						flag = false;
					}
					if (this.ptCurrentCell.Y > -1)
					{
						this.InvalidateRowPrivate(this.ptCurrentCell.Y);
						DataGridViewCell currentCellInternal = this.CurrentCellInternal;
						if (this.IsCurrentCellInEditMode)
						{
							DataGridViewCellStyle inheritedStyle = currentCellInternal.GetInheritedStyle(null, this.ptCurrentCell.Y, true);
							if (this.editingControl != null)
							{
								this.InitializeEditingControlValue(ref inheritedStyle, currentCellInternal);
								if (((IDataGridViewEditingControl)this.editingControl).RepositionEditingControlOnValueChange)
								{
									this.PositionEditingControl(true, true, false);
								}
							}
							else
							{
								this.InitializeEditingCellValue(ref inheritedStyle, ref currentCellInternal);
							}
						}
					}
					if (flag && this.ptCurrentCell.Y == this.newRowIndex - 1)
					{
						this.DiscardNewRow();
					}
				}
			}
			else if (!this.IsCurrentRowDirty && this.ptCurrentCell.Y == this.newRowIndex - 1 && this.dataGridViewState1[2097152])
			{
				this.DiscardNewRow();
			}
			return null;
		}

		// Token: 0x06002E91 RID: 11921 RVA: 0x00082827 File Offset: 0x00081827
		internal bool CancelToolTipPopup(ToolTip toolTip)
		{
			return this.toolTipControl.ToolTip != toolTip && string.IsNullOrEmpty(this.toolTipCaption) && this.ShowCellToolTips;
		}

		// Token: 0x06002E92 RID: 11922 RVA: 0x00082850 File Offset: 0x00081850
		private bool CanValidateDataBoundDataGridViewCell(DataGridViewCell dataGridViewCurrentCell)
		{
			if (dataGridViewCurrentCell == null && this.ptCurrentCell.X > -1)
			{
				dataGridViewCurrentCell = this.CurrentCellInternal;
			}
			return dataGridViewCurrentCell == null || !dataGridViewCurrentCell.OwningColumn.IsDataBoundInternal || (!this.dataGridViewOper[1048576] && (this.dataConnection == null || (!this.dataConnection.ProcessingMetaDataChanges && (!this.dataConnection.CancellingRowEdit || this.dataConnection.RestoreRow) && this.dataConnection.CurrencyManager.Count > this.ptCurrentCell.Y && !this.dataConnection.PositionChangingOutsideDataGridView && !this.dataConnection.ListWasReset)));
		}

		// Token: 0x06002E93 RID: 11923 RVA: 0x00082911 File Offset: 0x00081911
		private void CaptureMouse(Rectangle cursorClip)
		{
			base.CaptureInternal = true;
			Cursor.ClipInternal = base.RectangleToScreen(cursorClip);
		}

		// Token: 0x06002E94 RID: 11924 RVA: 0x00082926 File Offset: 0x00081926
		private void ClearRegionCache()
		{
			this.cachedScrollableRegion = null;
		}

		// Token: 0x06002E95 RID: 11925 RVA: 0x00082930 File Offset: 0x00081930
		public void ClearSelection()
		{
			this.noDimensionChangeCount++;
			this.noSelectionChangeCount++;
			bool flag = false;
			if (this.selectedBandIndexes.Count > 8 || this.individualSelectedCells.Count > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				this.RemoveIndividuallySelectedCells();
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					while (this.selectedBandIndexes.Count > 0)
					{
						this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
					}
					break;
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					while (this.selectedBandIndexes.Count > 0)
					{
						this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
					}
					break;
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
				this.NoSelectionChangeCount--;
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x06002E96 RID: 11926 RVA: 0x00082A2C File Offset: 0x00081A2C
		protected void ClearSelection(int columnIndexException, int rowIndexException, bool selectExceptionElement)
		{
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
			case DataGridViewSelectionMode.FullColumnSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
				if (columnIndexException < 0 || columnIndexException >= this.Columns.Count)
				{
					throw new ArgumentOutOfRangeException("columnIndexException");
				}
				break;
			case DataGridViewSelectionMode.FullRowSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
				if (columnIndexException < -1 || columnIndexException >= this.Columns.Count)
				{
					throw new ArgumentOutOfRangeException("columnIndexException");
				}
				break;
			}
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
			case DataGridViewSelectionMode.FullRowSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
				if (rowIndexException < 0 || rowIndexException >= this.Rows.Count)
				{
					throw new ArgumentOutOfRangeException("rowIndexException");
				}
				break;
			case DataGridViewSelectionMode.FullColumnSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
				if (rowIndexException < -1 || rowIndexException >= this.Rows.Count)
				{
					throw new ArgumentOutOfRangeException("rowIndexException");
				}
				break;
			}
			this.noDimensionChangeCount++;
			this.noSelectionChangeCount++;
			bool flag = false;
			if (this.selectedBandIndexes.Count > 8 || this.individualSelectedCells.Count > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					this.RemoveIndividuallySelectedCells(columnIndexException, rowIndexException);
					break;
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
				{
					int i = 0;
					while (i < this.selectedBandIndexes.Count)
					{
						if (this.selectedBandIndexes[i] != rowIndexException)
						{
							this.SetSelectedRowCore(this.selectedBandIndexes[i], false);
						}
						else
						{
							i++;
						}
					}
					if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
					{
						this.RemoveIndividuallySelectedCells(columnIndexException, rowIndexException);
					}
					break;
				}
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
				{
					int j = 0;
					while (j < this.selectedBandIndexes.Count)
					{
						if (this.selectedBandIndexes[j] != columnIndexException)
						{
							this.SetSelectedColumnCore(this.selectedBandIndexes[j], false);
						}
						else
						{
							j++;
						}
					}
					if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
					{
						this.RemoveIndividuallySelectedCells(columnIndexException, rowIndexException);
					}
					break;
				}
				}
				if (selectExceptionElement)
				{
					this.SetSelectedElementCore(columnIndexException, rowIndexException, true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
				this.NoSelectionChangeCount--;
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x06002E97 RID: 11927 RVA: 0x00082C54 File Offset: 0x00081C54
		private bool ColumnEditable(int columnIndex)
		{
			return !this.Columns[columnIndex].IsDataBound || this.dataConnection == null || this.dataConnection.AllowEdit;
		}

		// Token: 0x06002E98 RID: 11928 RVA: 0x00082C84 File Offset: 0x00081C84
		private bool ColumnNeedsDisplayedState(DataGridViewColumn dataGridViewColumn)
		{
			if (!dataGridViewColumn.Visible)
			{
				return false;
			}
			if (!dataGridViewColumn.Frozen)
			{
				int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
				if (firstDisplayedScrollingCol != -1)
				{
					if (firstDisplayedScrollingCol == dataGridViewColumn.Index)
					{
						return this.displayedBandsInfo.NumDisplayedScrollingCols > 0;
					}
					if (this.Columns.DisplayInOrder(firstDisplayedScrollingCol, dataGridViewColumn.Index))
					{
						return this.Columns.GetColumnCount(DataGridViewElementStates.Visible, firstDisplayedScrollingCol, dataGridViewColumn.Index) < this.displayedBandsInfo.NumDisplayedScrollingCols;
					}
				}
				return false;
			}
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			if (firstColumn.Index == dataGridViewColumn.Index)
			{
				return this.displayedBandsInfo.NumDisplayedFrozenCols > 0;
			}
			return this.Columns.GetColumnCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, firstColumn.Index, dataGridViewColumn.Index) < this.displayedBandsInfo.NumDisplayedFrozenCols;
		}

		// Token: 0x06002E99 RID: 11929 RVA: 0x00082D54 File Offset: 0x00081D54
		private bool ColumnRelocationTarget(MouseEventArgs e, DataGridView.HitTestInfo hti, out int previousColumnIndex)
		{
			previousColumnIndex = -1;
			if (hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight)
			{
				if (hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader)
				{
					int columnXFromIndex = this.GetColumnXFromIndex(hti.col);
					int width = this.Columns[hti.col].Width;
					if ((this.RightToLeftInternal && e.X < columnXFromIndex - width / 2) || (!this.RightToLeftInternal && e.X > columnXFromIndex + width / 2))
					{
						previousColumnIndex = hti.col;
					}
					else
					{
						DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[hti.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						if (previousColumn != null)
						{
							previousColumnIndex = previousColumn.Index;
						}
					}
				}
				else
				{
					previousColumnIndex = ((hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight) ? hti.col : hti.adjacentCol);
				}
				DataGridViewColumn dataGridViewColumn = null;
				if (previousColumnIndex != -1)
				{
					dataGridViewColumn = this.Columns.GetNextColumn(this.Columns[previousColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
				if (this.trackColumn != previousColumnIndex && (previousColumnIndex != -1 || hti.col != this.trackColumn) && (dataGridViewColumn == null || this.trackColumn != dataGridViewColumn.Index))
				{
					return true;
				}
			}
			else if ((hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft || hti.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight) && hti.col != this.trackColumn)
			{
				return true;
			}
			return false;
		}

		// Token: 0x06002E9A RID: 11930 RVA: 0x00082ED5 File Offset: 0x00081ED5
		private static bool ColumnsDisplayInOrder(int columnIndex1, int columnDisplayIndex1, int columnIndex2, int columnDisplayIndex2)
		{
			return columnDisplayIndex1 < columnDisplayIndex2 || (columnDisplayIndex1 == columnDisplayIndex2 && columnIndex1 < columnIndex2);
		}

		// Token: 0x06002E9B RID: 11931 RVA: 0x00082EE8 File Offset: 0x00081EE8
		public bool CommitEdit(DataGridViewDataErrorContexts context)
		{
			if (this.IsCurrentCellInEditMode)
			{
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = this.CommitEdit(ref currentCellInternal, context, DataGridView.DataGridViewValidateCellInternal.Never, false, false, false, false, false);
				if (dataGridViewDataErrorEventArgs != null)
				{
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
					if (dataGridViewDataErrorEventArgs.Cancel)
					{
						return false;
					}
				}
			}
			return true;
		}

		// Token: 0x06002E9C RID: 11932 RVA: 0x00082F34 File Offset: 0x00081F34
		private DataGridViewDataErrorEventArgs CommitEdit(ref DataGridViewCell dataGridViewCurrentCell, DataGridViewDataErrorContexts context, DataGridView.DataGridViewValidateCellInternal validateCell, bool fireCellLeave, bool fireCellEnter, bool fireRowLeave, bool fireRowEnter, bool fireLeave)
		{
			if (validateCell == DataGridView.DataGridViewValidateCellInternal.Always)
			{
				if (fireCellLeave)
				{
					if (this.ptCurrentCell.X == -1)
					{
						return null;
					}
					this.OnCellLeave(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
				if (fireRowLeave)
				{
					if (this.ptCurrentCell.X == -1)
					{
						return null;
					}
					this.OnRowLeave(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
				if (fireLeave)
				{
					base.OnLeave(EventArgs.Empty);
					if (this.ptCurrentCell.X > -1 && this.ptCurrentCell.Y > -1)
					{
						this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
					}
				}
				bool flag = this.CanValidateDataBoundDataGridViewCell(dataGridViewCurrentCell);
				if (flag)
				{
					if (this.ptCurrentCell.X == -1)
					{
						return null;
					}
					if (this.OnCellValidating(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, context))
					{
						if (fireRowEnter)
						{
							if (this.ptCurrentCell.X == -1)
							{
								return null;
							}
							this.OnRowEnter(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, true, true);
						}
						if (fireCellEnter)
						{
							if (this.ptCurrentCell.X == -1)
							{
								return null;
							}
							this.OnCellEnter(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
						}
						if (this.ptCurrentCell.X == -1)
						{
							return null;
						}
						return new DataGridViewDataErrorEventArgs(null, this.ptCurrentCell.X, this.ptCurrentCell.Y, context)
						{
							Cancel = true
						};
					}
					else if (!this.IsCurrentCellInEditMode || !this.IsCurrentCellDirty)
					{
						if (this.ptCurrentCell.X == -1)
						{
							return null;
						}
						this.OnCellValidated(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
					}
				}
			}
			if (this.ptCurrentCell.X == -1 || !this.IsCurrentCellInEditMode)
			{
				return null;
			}
			if (this.IsCurrentCellDirty)
			{
				bool flag2 = this.CanValidateDataBoundDataGridViewCell(dataGridViewCurrentCell);
				if (flag2)
				{
					if (validateCell == DataGridView.DataGridViewValidateCellInternal.WhenChanged)
					{
						if (this.ptCurrentCell.X == -1)
						{
							return null;
						}
						if (this.OnCellValidating(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, context))
						{
							if (this.ptCurrentCell.X == -1)
							{
								return null;
							}
							return new DataGridViewDataErrorEventArgs(null, this.ptCurrentCell.X, this.ptCurrentCell.Y, context)
							{
								Cancel = true
							};
						}
					}
					object obj;
					if (this.editingControl != null)
					{
						obj = ((IDataGridViewEditingControl)this.editingControl).GetEditingControlFormattedValue(context);
					}
					else
					{
						obj = ((IDataGridViewEditingCell)this.CurrentCellInternal).GetEditingCellFormattedValue(context);
					}
					Exception ex;
					if (!this.PushFormattedValue(ref dataGridViewCurrentCell, obj, out ex))
					{
						if (this.ptCurrentCell.X == -1)
						{
							return null;
						}
						DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, this.ptCurrentCell.X, this.ptCurrentCell.Y, context);
						dataGridViewDataErrorEventArgs.Cancel = true;
						this.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
						return dataGridViewDataErrorEventArgs;
					}
					else
					{
						if (!this.IsCurrentCellInEditMode)
						{
							return null;
						}
						this.uneditedFormattedValue = obj;
					}
				}
				if (this.editingControl != null)
				{
					((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = false;
				}
				else
				{
					((IDataGridViewEditingCell)this.CurrentCellInternal).EditingCellValueChanged = false;
				}
				this.IsCurrentCellDirtyInternal = false;
				this.IsCurrentRowDirtyInternal = true;
				if (flag2 && (validateCell == DataGridView.DataGridViewValidateCellInternal.Always || validateCell == DataGridView.DataGridViewValidateCellInternal.WhenChanged))
				{
					if (this.ptCurrentCell.X == -1)
					{
						return null;
					}
					this.OnCellValidated(ref dataGridViewCurrentCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
			}
			return null;
		}

		// Token: 0x06002E9D RID: 11933 RVA: 0x000832B0 File Offset: 0x000822B0
		private bool CommitEdit(DataGridViewDataErrorContexts context, bool forCurrentCellChange, bool forCurrentRowChange)
		{
			if (this.dataGridViewOper[32768])
			{
				return false;
			}
			DataGridViewCell currentCellInternal = this.CurrentCellInternal;
			DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = this.CommitEdit(ref currentCellInternal, context, forCurrentCellChange ? DataGridView.DataGridViewValidateCellInternal.Always : DataGridView.DataGridViewValidateCellInternal.WhenChanged, forCurrentCellChange, forCurrentCellChange, forCurrentRowChange, forCurrentRowChange, false);
			if (dataGridViewDataErrorEventArgs != null)
			{
				if (dataGridViewDataErrorEventArgs.ThrowException)
				{
					throw dataGridViewDataErrorEventArgs.Exception;
				}
				if (dataGridViewDataErrorEventArgs.Cancel)
				{
					return false;
				}
				dataGridViewDataErrorEventArgs = this.CancelEditPrivate();
				if (dataGridViewDataErrorEventArgs != null)
				{
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
					if (dataGridViewDataErrorEventArgs.Cancel)
					{
						return false;
					}
				}
			}
			if (forCurrentRowChange && forCurrentCellChange)
			{
				if (this.ptCurrentCell.X == -1)
				{
					return false;
				}
				int x = this.ptCurrentCell.X;
				int y = this.ptCurrentCell.Y;
				if (this.OnRowValidating(ref currentCellInternal, x, y))
				{
					if (this.IsInnerCellOutOfBounds(x, y))
					{
						return false;
					}
					this.OnRowEnter(ref currentCellInternal, x, y, true, true);
					if (this.IsInnerCellOutOfBounds(x, y))
					{
						return false;
					}
					this.OnCellEnter(ref currentCellInternal, x, y);
					return false;
				}
				else
				{
					if (this.IsInnerCellOutOfBounds(x, y))
					{
						return false;
					}
					this.OnRowValidated(ref currentCellInternal, x, y);
				}
			}
			return true;
		}

		// Token: 0x06002E9E RID: 11934 RVA: 0x000833B0 File Offset: 0x000823B0
		private bool CommitEditForOperation(int columnIndex, int rowIndex, bool forCurrentCellChange)
		{
			if (forCurrentCellChange)
			{
				if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.CurrentCellChange, DataGridView.DataGridViewValidateCellInternal.Always, true, true, this.ptCurrentCell.Y != rowIndex, this.ptCurrentCell.Y != rowIndex, false, this.EditMode != DataGridViewEditMode.EditOnEnter, false, false))
				{
					return false;
				}
				if (this.ptCurrentCell.Y != rowIndex && this.ptCurrentCell.Y != -1)
				{
					DataGridViewCell dataGridViewCell = null;
					int x = this.ptCurrentCell.X;
					int y = this.ptCurrentCell.Y;
					if (this.OnRowValidating(ref dataGridViewCell, x, y))
					{
						if (this.IsInnerCellOutOfBounds(x, y))
						{
							return false;
						}
						this.OnRowEnter(ref dataGridViewCell, x, y, true, true);
						if (this.IsInnerCellOutOfBounds(x, y))
						{
							return false;
						}
						this.OnCellEnter(ref dataGridViewCell, x, y);
						if (this.IsInnerCellOutOfBounds(x, y))
						{
							return false;
						}
						if (this.Focused && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
						{
							this.BeginEditInternal(true);
						}
						return false;
					}
					else
					{
						if (this.IsInnerCellOutOfBounds(x, y))
						{
							return false;
						}
						this.OnRowValidated(ref dataGridViewCell, x, y);
					}
				}
			}
			else if (!this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, false, this.ptCurrentCell.Y != rowIndex))
			{
				return false;
			}
			if (this.IsColumnOutOfBounds(columnIndex))
			{
				return false;
			}
			if (rowIndex >= this.Rows.Count)
			{
				int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
				if (forCurrentCellChange && this.ptCurrentCell.X == -1 && lastRow != -1)
				{
					this.SetAndSelectCurrentCellAddress(columnIndex, lastRow, true, false, false, false, false);
				}
				return false;
			}
			return rowIndex <= -1 || (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None;
		}

		// Token: 0x06002E9F RID: 11935 RVA: 0x00083560 File Offset: 0x00082560
		internal void CompleteCellsCollection(DataGridViewRow dataGridViewRow)
		{
			int count = dataGridViewRow.Cells.Count;
			if (this.Columns.Count > count)
			{
				int num = 0;
				DataGridViewCell[] array = new DataGridViewCell[this.Columns.Count - count];
				for (int i = count; i < this.Columns.Count; i++)
				{
					if (this.Columns[i].CellTemplate == null)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_AColumnHasNoCellTemplate"));
					}
					DataGridViewCell dataGridViewCell = (DataGridViewCell)this.Columns[i].CellTemplate.Clone();
					array[num] = dataGridViewCell;
					num++;
				}
				dataGridViewRow.Cells.AddRange(array);
			}
		}

		// Token: 0x06002EA0 RID: 11936 RVA: 0x0008360C File Offset: 0x0008260C
		private int ComputeFirstVisibleScrollingColumn()
		{
			if (this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) >= this.layout.Data.Width)
			{
				this.negOffset = 0;
				return -1;
			}
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
			if (this.horizontalOffset == 0)
			{
				this.negOffset = 0;
				if (dataGridViewColumn != null)
				{
					return dataGridViewColumn.Index;
				}
				return -1;
			}
			else
			{
				int num = 0;
				while (dataGridViewColumn != null)
				{
					num += dataGridViewColumn.Thickness;
					if (num > this.horizontalOffset)
					{
						break;
					}
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
				if (dataGridViewColumn != null)
				{
					this.negOffset = dataGridViewColumn.Thickness - (num - this.horizontalOffset);
					return dataGridViewColumn.Index;
				}
				dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (dataGridViewColumn == null)
				{
					this.negOffset = 0;
					return -1;
				}
				if (this.negOffset != this.horizontalOffset)
				{
					this.negOffset = 0;
				}
				return dataGridViewColumn.Index;
			}
		}

		// Token: 0x06002EA1 RID: 11937 RVA: 0x000836EC File Offset: 0x000826EC
		private int ComputeHeightOfFittingTrailingScrollingRows(int totalVisibleFrozenHeight)
		{
			int num = this.layout.Data.Height - totalVisibleFrozenHeight;
			int num2 = 0;
			int num3 = 0;
			int num4 = this.Rows.Count;
			if (num4 == 0 || num <= 0)
			{
				return 0;
			}
			num4--;
			DataGridViewElementStates rowState = this.Rows.GetRowState(num4);
			if ((rowState & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				return 0;
			}
			if ((rowState & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
			{
				num4 = this.Rows.GetPreviousRow(num4, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
			}
			if (num4 != -1)
			{
				num2 = this.Rows.SharedRow(num4).GetHeight(num4);
				if (num2 > num)
				{
					return num2;
				}
			}
			while (num4 != -1 && num3 + num2 <= num)
			{
				num3 += num2;
				num4 = this.Rows.GetPreviousRow(num4, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (num4 != -1)
				{
					num2 = this.Rows.SharedRow(num4).GetHeight(num4);
				}
			}
			return num3;
		}

		// Token: 0x06002EA2 RID: 11938 RVA: 0x000837AC File Offset: 0x000827AC
		private int ComputeHeightOfScrolledOffRows()
		{
			int num = 0;
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
			{
				int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (num2 != -1)
				{
					while (num2 != this.displayedBandsInfo.FirstDisplayedScrollingRow)
					{
						num += this.Rows.SharedRow(num2).GetHeight(num2);
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					}
				}
			}
			return num;
		}

		// Token: 0x06002EA3 RID: 11939 RVA: 0x00083814 File Offset: 0x00082814
		private int ComputeHeightOfTrailingScrollingRows()
		{
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
			{
				int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
				return this.Rows.GetRowsHeight(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, lastRow) + this.Rows.SharedRow(lastRow).GetHeight(lastRow);
			}
			return 0;
		}

		// Token: 0x06002EA4 RID: 11940 RVA: 0x0008386C File Offset: 0x0008286C
		private bool ComputeLayout()
		{
			this.ClearRegionCache();
			DataGridView.LayoutData layoutData = new DataGridView.LayoutData(this.layout);
			Rectangle resizeBoxRect = this.layout.ResizeBoxRect;
			if (this.normalClientRectangle.Width > 0 || this.normalClientRectangle.Height > 0)
			{
				layoutData.Inside = this.normalClientRectangle;
			}
			else
			{
				layoutData.Inside = base.ClientRectangle;
			}
			Rectangle inside = layoutData.Inside;
			int borderWidth = this.BorderWidth;
			inside.Inflate(-borderWidth, -borderWidth);
			if (inside.Height < 0)
			{
				inside.Height = 0;
			}
			if (inside.Width < 0)
			{
				inside.Width = 0;
			}
			Rectangle rectangle = inside;
			if (this.layout.ColumnHeadersVisible)
			{
				Rectangle rectangle2 = rectangle;
				rectangle2.Height = Math.Min(this.columnHeadersHeight, rectangle2.Height);
				rectangle.Y += rectangle2.Height;
				rectangle.Height -= rectangle2.Height;
				layoutData.ColumnHeaders = rectangle2;
			}
			else
			{
				layoutData.ColumnHeaders = Rectangle.Empty;
			}
			if (this.layout.RowHeadersVisible)
			{
				Rectangle rectangle3 = rectangle;
				rectangle3.Width = Math.Min(this.rowHeadersWidth, rectangle3.Width);
				if (this.RightToLeftInternal)
				{
					rectangle3.X += rectangle.Width - rectangle3.Width;
				}
				else
				{
					rectangle.X += rectangle3.Width;
				}
				rectangle.Width -= rectangle3.Width;
				layoutData.RowHeaders = rectangle3;
				if (this.layout.ColumnHeadersVisible)
				{
					Rectangle columnHeaders = layoutData.ColumnHeaders;
					Rectangle rectangle4 = columnHeaders;
					rectangle4.Width = Math.Min(this.rowHeadersWidth, rectangle4.Width);
					columnHeaders.Width -= rectangle4.Width;
					if (this.RightToLeftInternal)
					{
						rectangle4.X += rectangle.Width;
					}
					else
					{
						columnHeaders.X += rectangle4.Width;
					}
					layoutData.TopLeftHeader = rectangle4;
					layoutData.ColumnHeaders = columnHeaders;
				}
				else
				{
					layoutData.TopLeftHeader = Rectangle.Empty;
				}
			}
			else
			{
				layoutData.RowHeaders = Rectangle.Empty;
				layoutData.TopLeftHeader = Rectangle.Empty;
			}
			if (this.SingleVerticalBorderAdded)
			{
				if (!this.RightToLeftInternal)
				{
					rectangle.X++;
				}
				if (rectangle.Width > 0)
				{
					rectangle.Width--;
				}
			}
			if (this.SingleHorizontalBorderAdded)
			{
				rectangle.Y++;
				if (rectangle.Height > 0)
				{
					rectangle.Height--;
				}
			}
			layoutData.Data = rectangle;
			layoutData.Inside = inside;
			this.layout = layoutData;
			this.layout.dirty = false;
			bool flag = this.AdjustFillingColumns();
			this.layout = layoutData;
			this.LayoutScrollBars();
			if (!resizeBoxRect.Equals(this.layout.ResizeBoxRect) && !this.layout.ResizeBoxRect.IsEmpty)
			{
				base.Invalidate(this.layout.ResizeBoxRect);
			}
			return flag;
		}

		// Token: 0x06002EA5 RID: 11941 RVA: 0x00083B94 File Offset: 0x00082B94
		private void ComputeLayoutShortcut(bool computeVisibleRows)
		{
			if (computeVisibleRows)
			{
				this.ComputeVisibleRows();
			}
			if (this.vertScrollBar.Enabled)
			{
				int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
				int rowsHeight2 = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				int value = this.vertScrollBar.Value;
				int num = Math.Max((this.vertScrollBar.Height - 2 * SystemInformation.VerticalScrollBarArrowHeight) * this.vertScrollBar.LargeChange / this.vertScrollBar.Maximum, 8);
				this.vertScrollBar.Maximum = rowsHeight - rowsHeight2;
				this.vertScrollBar.Value = this.ComputeHeightOfScrolledOffRows();
				this.vertScrollBar.LargeChange = this.layout.Data.Height - rowsHeight2;
				this.verticalOffset = this.vertScrollBar.Value;
				if (this.vertScrollBar.Visible && (value != this.verticalOffset || num != Math.Max((this.vertScrollBar.Height - 2 * SystemInformation.VerticalScrollBarArrowHeight) * this.vertScrollBar.LargeChange / this.vertScrollBar.Maximum, 8)))
				{
					this.vertScrollBar.Invalidate();
				}
			}
		}

		// Token: 0x06002EA6 RID: 11942 RVA: 0x00083CB8 File Offset: 0x00082CB8
		private void ComputeVisibleColumns()
		{
			int num = 0;
			int num2 = 0;
			int width = this.layout.Data.Width;
			int num3 = 0;
			int num4 = 0;
			int num5 = -1;
			int num6 = -1;
			int num7 = this.displayedBandsInfo.FirstDisplayedScrollingCol;
			if (width <= 0 || this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0)
			{
				this.displayedBandsInfo.FirstDisplayedFrozenCol = -1;
				this.displayedBandsInfo.NumDisplayedFrozenCols = 0;
				this.displayedBandsInfo.FirstDisplayedScrollingCol = -1;
				this.displayedBandsInfo.NumDisplayedScrollingCols = 0;
				this.displayedBandsInfo.LastDisplayedFrozenCol = -1;
				this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
				return;
			}
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.None);
			while (dataGridViewColumn != null && (dataGridViewColumn.Frozen || !dataGridViewColumn.Visible))
			{
				if (dataGridViewColumn.Visible)
				{
					if (num5 == -1)
					{
						num5 = dataGridViewColumn.Index;
					}
					num3 += dataGridViewColumn.Width;
					num4++;
					num6 = dataGridViewColumn.Index;
					if (num3 >= width)
					{
						break;
					}
				}
				dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.None, DataGridViewElementStates.None);
			}
			if (num3 < width && num7 >= 0)
			{
				dataGridViewColumn = this.Columns[num7];
				if (dataGridViewColumn.Frozen)
				{
					dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					this.negOffset = 0;
					if (dataGridViewColumn == null)
					{
						this.displayedBandsInfo.FirstDisplayedFrozenCol = num5;
						this.displayedBandsInfo.LastDisplayedFrozenCol = num6;
						this.displayedBandsInfo.NumDisplayedFrozenCols = num4;
						this.displayedBandsInfo.FirstDisplayedScrollingCol = (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1);
						this.displayedBandsInfo.NumDisplayedScrollingCols = 0;
						return;
					}
					num7 = dataGridViewColumn.Index;
				}
				num3 -= this.negOffset;
				while (num3 < width && dataGridViewColumn != null)
				{
					num3 += dataGridViewColumn.Thickness;
					num2++;
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
				num = num2;
				if (num3 < width)
				{
					bool flag = false;
					if (this.negOffset > 0)
					{
						flag = true;
						if (width - num3 > this.negOffset)
						{
							num3 += this.negOffset;
							this.horizontalOffset -= this.negOffset;
							this.negOffset = 0;
						}
						else
						{
							this.horizontalOffset -= width - num3;
							this.negOffset -= width - num3;
							num3 = width;
						}
					}
					if (num3 < width && this.horizontalOffset > 0)
					{
						dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[num7], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						while (dataGridViewColumn != null && num3 + dataGridViewColumn.Thickness <= width)
						{
							num3 += dataGridViewColumn.Thickness;
							num2++;
							flag = true;
							num7 = dataGridViewColumn.Index;
							this.horizontalOffset -= dataGridViewColumn.Thickness;
							dataGridViewColumn = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						}
					}
					if (num3 < width && this.horizontalOffset > 0)
					{
						dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[num7], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						num7 = dataGridViewColumn.Index;
						this.negOffset = dataGridViewColumn.Thickness - width + num3;
						this.horizontalOffset -= width - num3;
						num2++;
						flag = true;
						num3 = width;
					}
					num = num2;
					if (flag)
					{
						this.InvalidateData();
						base.Invalidate(this.layout.ColumnHeaders);
					}
				}
				int num8 = num - 1;
				if (num3 > width)
				{
					num8--;
				}
				if (num8 < 0)
				{
					this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
				}
				else
				{
					dataGridViewColumn = this.Columns[num7];
					for (int i = 0; i < num8; i++)
					{
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					}
					this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = dataGridViewColumn.Index;
				}
			}
			else
			{
				this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
			}
			this.displayedBandsInfo.FirstDisplayedFrozenCol = num5;
			this.displayedBandsInfo.LastDisplayedFrozenCol = num6;
			this.displayedBandsInfo.NumDisplayedFrozenCols = num4;
			this.displayedBandsInfo.FirstDisplayedScrollingCol = num7;
			this.displayedBandsInfo.NumDisplayedScrollingCols = num;
		}

		// Token: 0x06002EA7 RID: 11943 RVA: 0x00084098 File Offset: 0x00083098
		private void ComputeVisibleRows()
		{
			int num = -1;
			int num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			int num3 = -1;
			int num4 = -1;
			int num5 = 0;
			int height = this.layout.Data.Height;
			int num6 = 0;
			int num7 = 0;
			int count = this.Rows.Count;
			if (height <= 0 || count == 0)
			{
				this.displayedBandsInfo.NumDisplayedFrozenRows = (this.displayedBandsInfo.NumTotallyDisplayedFrozenRows = (this.displayedBandsInfo.NumDisplayedScrollingRows = (this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = 0)));
				this.displayedBandsInfo.FirstDisplayedFrozenRow = (this.displayedBandsInfo.FirstDisplayedScrollingRow = (this.displayedBandsInfo.LastDisplayedFrozenRow = (this.displayedBandsInfo.LastDisplayedScrollingRow = -1)));
				return;
			}
			int i;
			for (i = 0; i < count; i++)
			{
				DataGridViewElementStates rowState = this.Rows.GetRowState(i);
				if ((rowState & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None && (rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
				{
					break;
				}
				if ((rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
				{
					num6 += this.Rows.SharedRow(i).GetHeight(i);
					if (num == -1)
					{
						num = i;
					}
					num3 = i;
					if (num6 <= height)
					{
						num5++;
					}
					if (num6 >= height)
					{
						break;
					}
				}
			}
			if (num6 > height)
			{
				this.displayedBandsInfo.NumDisplayedFrozenRows = num5 + 1;
			}
			else
			{
				this.displayedBandsInfo.NumDisplayedFrozenRows = num5;
			}
			if (num6 < height && i < count)
			{
				if (num2 == -1)
				{
					num2 = i;
				}
				while (num2 < count && ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None || (this.Rows.GetRowState(num2) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None))
				{
					num2++;
				}
				for (int j = num2; j < count; j++)
				{
					if ((this.Rows.GetRowState(j) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
					{
						num6 += this.Rows.SharedRow(j).GetHeight(j);
						num7++;
						num4 = j;
					}
					if (num6 >= height)
					{
						break;
					}
				}
				if (num6 < height)
				{
					for (int k = num2 - 1; k >= num5; k--)
					{
						if ((this.Rows.GetRowState(k) & (DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible)) == DataGridViewElementStates.Visible)
						{
							int height2 = this.Rows.SharedRow(k).GetHeight(k);
							if (num6 + height2 > height)
							{
								break;
							}
							num6 += height2;
							num2 = k;
							num7++;
							num4 = k;
						}
					}
				}
				this.displayedBandsInfo.NumDisplayedScrollingRows = num7;
				if (num6 > height)
				{
					this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = num7 - 1;
				}
				else
				{
					this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = num7;
				}
				if (num7 == 0)
				{
					num2 = -1;
				}
			}
			else
			{
				this.displayedBandsInfo.NumDisplayedScrollingRows = (this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = 0);
				num2 = -1;
			}
			this.displayedBandsInfo.FirstDisplayedFrozenRow = num;
			this.displayedBandsInfo.FirstDisplayedScrollingRow = num2;
			this.displayedBandsInfo.NumTotallyDisplayedFrozenRows = num5;
			this.displayedBandsInfo.LastDisplayedFrozenRow = num3;
			this.displayedBandsInfo.LastDisplayedScrollingRow = num4;
		}

		// Token: 0x06002EA8 RID: 11944 RVA: 0x00084374 File Offset: 0x00083374
		private Point ConvertCellToGridCoord(int columnIndex, int rowIndex, int x, int y)
		{
			int num;
			if (columnIndex > -1)
			{
				num = this.GetColumnXFromIndex(columnIndex);
				if (this.RightToLeftInternal)
				{
					num -= this.Columns[columnIndex].Width;
				}
			}
			else if (this.RightToLeftInternal)
			{
				num = this.layout.RowHeaders.Left - 1;
			}
			else
			{
				num = this.layout.RowHeaders.Left;
			}
			int num2;
			if (rowIndex > -1)
			{
				num2 = this.GetRowYFromIndex(rowIndex);
			}
			else
			{
				num2 = this.layout.ColumnHeaders.Top;
			}
			return new Point(num + x, num2 + y);
		}

		// Token: 0x06002EA9 RID: 11945 RVA: 0x00084404 File Offset: 0x00083404
		private void CorrectColumnDisplayIndexesAfterDeletion(DataGridViewColumn dataGridViewColumn)
		{
			try
			{
				this.dataGridViewOper[2048] = true;
				foreach (object obj in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj;
					if (dataGridViewColumn2.DisplayIndex > dataGridViewColumn.DisplayIndex)
					{
						dataGridViewColumn2.DisplayIndexInternal = dataGridViewColumn2.DisplayIndex - 1;
						dataGridViewColumn2.DisplayIndexHasChanged = true;
					}
				}
				this.FlushDisplayIndexChanged(true);
			}
			finally
			{
				this.dataGridViewOper[2048] = false;
				this.FlushDisplayIndexChanged(false);
			}
		}

		// Token: 0x06002EAA RID: 11946 RVA: 0x000844B8 File Offset: 0x000834B8
		private void CorrectColumnDisplayIndexesAfterInsertion(DataGridViewColumn dataGridViewColumn)
		{
			try
			{
				this.dataGridViewOper[2048] = true;
				foreach (object obj in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj;
					if (dataGridViewColumn2 != dataGridViewColumn && dataGridViewColumn2.DisplayIndex >= dataGridViewColumn.DisplayIndex)
					{
						dataGridViewColumn2.DisplayIndexInternal = dataGridViewColumn2.DisplayIndex + 1;
						dataGridViewColumn2.DisplayIndexHasChanged = true;
					}
				}
				this.FlushDisplayIndexChanged(true);
			}
			finally
			{
				this.dataGridViewOper[2048] = false;
				this.FlushDisplayIndexChanged(false);
			}
		}

		// Token: 0x06002EAB RID: 11947 RVA: 0x00084570 File Offset: 0x00083570
		private void CorrectColumnFrozenState(DataGridViewColumn dataGridViewColumn, int anticipatedColumnIndex)
		{
			int num;
			if (dataGridViewColumn.DisplayIndex == -1 || dataGridViewColumn.DisplayIndex > this.Columns.Count)
			{
				num = anticipatedColumnIndex;
			}
			else
			{
				num = dataGridViewColumn.DisplayIndex;
			}
			int num2 = num - 1;
			DataGridViewColumn columnAtDisplayIndex;
			do
			{
				columnAtDisplayIndex = this.Columns.GetColumnAtDisplayIndex(num2);
				num2--;
			}
			while (num2 >= 0 && (columnAtDisplayIndex == null || !columnAtDisplayIndex.Visible));
			if (columnAtDisplayIndex != null && !columnAtDisplayIndex.Frozen && dataGridViewColumn.Frozen)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddFrozenColumn"));
			}
			num2 = num;
			DataGridViewColumn columnAtDisplayIndex2;
			do
			{
				columnAtDisplayIndex2 = this.Columns.GetColumnAtDisplayIndex(num2);
				num2++;
			}
			while (num2 < this.Columns.Count && (columnAtDisplayIndex2 == null || !columnAtDisplayIndex2.Visible));
			if (columnAtDisplayIndex2 != null && columnAtDisplayIndex2.Frozen && !dataGridViewColumn.Frozen)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddNonFrozenColumn"));
			}
		}

		// Token: 0x06002EAC RID: 11948 RVA: 0x0008463C File Offset: 0x0008363C
		private void CorrectColumnFrozenStates(DataGridViewColumn[] dataGridViewColumns)
		{
			DataGridView dataGridView = new DataGridView();
			foreach (object obj in this.Columns)
			{
				DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
				DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)dataGridViewColumn.Clone();
				dataGridViewColumn2.DisplayIndex = dataGridViewColumn.DisplayIndex;
				dataGridView.Columns.Add(dataGridViewColumn2);
			}
			foreach (DataGridViewColumn dataGridViewColumn3 in dataGridViewColumns)
			{
				DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)dataGridViewColumn3.Clone();
				dataGridViewColumn2.DisplayIndex = dataGridViewColumn3.DisplayIndex;
				dataGridView.Columns.Add(dataGridViewColumn2);
			}
		}

		// Token: 0x06002EAD RID: 11949 RVA: 0x00084704 File Offset: 0x00083704
		private void CorrectColumnFrozenStates(DataGridViewColumn dataGridViewColumn, bool frozenStateChanging)
		{
			if ((dataGridViewColumn.Frozen && !frozenStateChanging) || (!dataGridViewColumn.Frozen && frozenStateChanging))
			{
				DataGridViewColumn dataGridViewColumn2 = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (dataGridViewColumn2 == null)
				{
					DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
					if (firstColumn != dataGridViewColumn)
					{
						dataGridViewColumn2 = firstColumn;
					}
				}
				while (dataGridViewColumn2 != null)
				{
					if (!this.Columns.DisplayInOrder(dataGridViewColumn2.Index, dataGridViewColumn.Index))
					{
						return;
					}
					dataGridViewColumn2.Frozen = true;
					dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				}
			}
			else
			{
				DataGridViewColumn dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (dataGridViewColumn2 == null)
				{
					DataGridViewColumn dataGridViewColumn3 = dataGridViewColumn;
					do
					{
						dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						if (dataGridViewColumn2 != null)
						{
							dataGridViewColumn3 = dataGridViewColumn2;
						}
					}
					while (dataGridViewColumn2 != null);
					if (dataGridViewColumn3 != dataGridViewColumn)
					{
						dataGridViewColumn2 = dataGridViewColumn3;
					}
				}
				while (dataGridViewColumn2 != null && this.Columns.DisplayInOrder(dataGridViewColumn.Index, dataGridViewColumn2.Index))
				{
					dataGridViewColumn2.Frozen = false;
					dataGridViewColumn2 = this.Columns.GetPreviousColumn(dataGridViewColumn2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
			}
		}

		// Token: 0x06002EAE RID: 11950 RVA: 0x000847F0 File Offset: 0x000837F0
		private void CorrectColumnFrozenStatesForMove(DataGridViewColumn dataGridViewColumn, int newDisplayIndex)
		{
			if (!dataGridViewColumn.Visible || (newDisplayIndex < dataGridViewColumn.DisplayIndex && dataGridViewColumn.Frozen) || (newDisplayIndex > dataGridViewColumn.DisplayIndex && !dataGridViewColumn.Frozen))
			{
				return;
			}
			int count = this.Columns.Count;
			if (newDisplayIndex < dataGridViewColumn.DisplayIndex)
			{
				int num = newDisplayIndex;
				DataGridViewColumn columnAtDisplayIndex;
				do
				{
					columnAtDisplayIndex = this.Columns.GetColumnAtDisplayIndex(num);
					num++;
				}
				while (num < count && (columnAtDisplayIndex == null || columnAtDisplayIndex == dataGridViewColumn || !columnAtDisplayIndex.Visible));
				if (columnAtDisplayIndex != null && columnAtDisplayIndex.Frozen)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotMoveNonFrozenColumn"));
				}
			}
			else
			{
				int num = newDisplayIndex;
				DataGridViewColumn columnAtDisplayIndex2;
				do
				{
					columnAtDisplayIndex2 = this.Columns.GetColumnAtDisplayIndex(num);
					num--;
				}
				while (num >= 0 && (columnAtDisplayIndex2 == null || !columnAtDisplayIndex2.Visible));
				if (columnAtDisplayIndex2 != null && !columnAtDisplayIndex2.Frozen)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotMoveFrozenColumn"));
				}
			}
		}

		// Token: 0x06002EAF RID: 11951 RVA: 0x000848BC File Offset: 0x000838BC
		private void CorrectColumnIndexesAfterDeletion(DataGridViewColumn dataGridViewColumn)
		{
			for (int i = dataGridViewColumn.Index; i < this.Columns.Count; i++)
			{
				this.Columns[i].IndexInternal = this.Columns[i].Index - 1;
			}
		}

		// Token: 0x06002EB0 RID: 11952 RVA: 0x00084908 File Offset: 0x00083908
		private void CorrectColumnIndexesAfterInsertion(DataGridViewColumn dataGridViewColumn, int insertionCount)
		{
			for (int i = dataGridViewColumn.Index + insertionCount; i < this.Columns.Count; i++)
			{
				this.Columns[i].IndexInternal = i;
			}
		}

		// Token: 0x06002EB1 RID: 11953 RVA: 0x00084944 File Offset: 0x00083944
		private void CorrectFocus(bool onlyIfGridHasFocus)
		{
			if ((!onlyIfGridHasFocus || this.Focused) && this.editingControl != null)
			{
				this.editingControl.FocusInternal();
			}
		}

		// Token: 0x06002EB2 RID: 11954 RVA: 0x00084968 File Offset: 0x00083968
		private void CorrectRowFrozenState(DataGridViewRow dataGridViewRow, DataGridViewElementStates rowState, int anticipatedRowIndex)
		{
			int previousRow = this.Rows.GetPreviousRow(anticipatedRowIndex, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			if (previousRow != -1 && (this.Rows.GetRowState(previousRow) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None && (rowState & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddFrozenRow"));
			}
			int nextRow = this.Rows.GetNextRow((previousRow == -1) ? (anticipatedRowIndex - 1) : previousRow, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			if (nextRow != -1 && (this.Rows.GetRowState(nextRow) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None && (rowState & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddNonFrozenRow"));
			}
		}

		// Token: 0x06002EB3 RID: 11955 RVA: 0x000849F0 File Offset: 0x000839F0
		private void CorrectRowFrozenStates(DataGridViewRow[] dataGridViewRows, int rowIndexInserted)
		{
			bool flag = false;
			bool flag2 = true;
			bool flag3 = false;
			int num = this.Rows.GetPreviousRow(rowIndexInserted, DataGridViewElementStates.Visible);
			if (num != -1)
			{
				flag2 = (this.Rows.GetRowState(num) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen;
			}
			num = this.Rows.GetNextRow(rowIndexInserted - 1, DataGridViewElementStates.Visible);
			if (num != -1)
			{
				flag = true;
				flag3 = (this.Rows.GetRowState(num) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen;
			}
			for (int i = 0; i < dataGridViewRows.Length; i++)
			{
				bool frozen = dataGridViewRows[i].Frozen;
				if (!flag2 && frozen)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddFrozenRow"));
				}
				flag2 = frozen;
				if (i == dataGridViewRows.Length - 1 && !frozen && flag && flag3)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddNonFrozenRow"));
				}
			}
		}

		// Token: 0x06002EB4 RID: 11956 RVA: 0x00084AB0 File Offset: 0x00083AB0
		private void CorrectRowFrozenStates(DataGridViewRow dataGridViewRow, int rowIndex, bool frozenStateChanging)
		{
			if (((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None && !frozenStateChanging) || ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None && frozenStateChanging))
			{
				int num = this.Rows.GetPreviousRow(rowIndex, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (num == -1)
				{
					int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					if (firstRow != rowIndex)
					{
						num = firstRow;
					}
				}
				while (num != -1)
				{
					if (num >= rowIndex)
					{
						return;
					}
					this.Rows.SetRowState(num, DataGridViewElementStates.Frozen, true);
					num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				}
			}
			else
			{
				int num = this.Rows.GetNextRow(rowIndex, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (num == -1)
				{
					int num2 = rowIndex;
					do
					{
						num = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
						if (num != -1)
						{
							num2 = num;
						}
					}
					while (num != -1);
					if (num2 != rowIndex)
					{
						num = num2;
					}
				}
				while (num != -1 && num > rowIndex)
				{
					this.Rows.SetRowState(num, DataGridViewElementStates.Frozen, false);
					num = this.Rows.GetPreviousRow(num, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				}
			}
		}

		// Token: 0x06002EB5 RID: 11957 RVA: 0x00084B90 File Offset: 0x00083B90
		private void CorrectRowIndexesAfterDeletion(int rowIndexDeleted)
		{
			int count = this.Rows.Count;
			for (int i = rowIndexDeleted; i < count; i++)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(i);
				if (dataGridViewRow.Index >= 0)
				{
					dataGridViewRow.IndexInternal = dataGridViewRow.Index - 1;
				}
			}
			if (this.newRowIndex == rowIndexDeleted)
			{
				this.newRowIndex = -1;
				return;
			}
			if (this.newRowIndex != -1)
			{
				this.newRowIndex--;
			}
		}

		// Token: 0x06002EB6 RID: 11958 RVA: 0x00084C04 File Offset: 0x00083C04
		private void CorrectRowIndexesAfterInsertion(int rowIndexInserted, int insertionCount)
		{
			int count = this.Rows.Count;
			for (int i = rowIndexInserted + insertionCount; i < count; i++)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(i);
				if (dataGridViewRow.Index >= 0)
				{
					dataGridViewRow.IndexInternal = dataGridViewRow.Index + insertionCount;
				}
			}
			if (this.newRowIndex != -1)
			{
				this.newRowIndex += insertionCount;
			}
		}

		// Token: 0x06002EB7 RID: 11959 RVA: 0x00084C66 File Offset: 0x00083C66
		protected override AccessibleObject CreateAccessibilityInstance()
		{
			return new DataGridView.DataGridViewAccessibleObject(this);
		}

		// Token: 0x06002EB8 RID: 11960 RVA: 0x00084C6E File Offset: 0x00083C6E
		protected override Control.ControlCollection CreateControlsInstance()
		{
			return new DataGridView.DataGridViewControlCollection(this);
		}

		// Token: 0x06002EB9 RID: 11961 RVA: 0x00084C76 File Offset: 0x00083C76
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected virtual DataGridViewColumnCollection CreateColumnsInstance()
		{
			return new DataGridViewColumnCollection(this);
		}

		// Token: 0x06002EBA RID: 11962 RVA: 0x00084C7E File Offset: 0x00083C7E
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected virtual DataGridViewRowCollection CreateRowsInstance()
		{
			return new DataGridViewRowCollection(this);
		}

		// Token: 0x06002EBB RID: 11963 RVA: 0x00084C88 File Offset: 0x00083C88
		private NativeMethods.RECT[] CreateScrollableRegion(Rectangle scroll)
		{
			if (this.cachedScrollableRegion != null)
			{
				return this.cachedScrollableRegion;
			}
			using (Region region = new Region(scroll))
			{
				IntPtr intPtr = IntPtr.Zero;
				using (Graphics graphics = base.CreateGraphicsInternal())
				{
					intPtr = region.GetHrgn(graphics);
				}
				if (intPtr != IntPtr.Zero)
				{
					this.cachedScrollableRegion = UnsafeNativeMethods.GetRectsFromRegion(intPtr);
					IntSecurity.ObjectFromWin32Handle.Assert();
					try
					{
						region.ReleaseHrgn(intPtr);
					}
					finally
					{
						CodeAccessPermission.RevertAssert();
					}
				}
			}
			return this.cachedScrollableRegion;
		}

		// Token: 0x06002EBC RID: 11964 RVA: 0x00084D38 File Offset: 0x00083D38
		private void DiscardNewRow()
		{
			DataGridViewRowCancelEventArgs dataGridViewRowCancelEventArgs = new DataGridViewRowCancelEventArgs(this.Rows[this.newRowIndex]);
			this.OnUserDeletingRow(dataGridViewRowCancelEventArgs);
			if (dataGridViewRowCancelEventArgs.Cancel)
			{
				return;
			}
			DataGridViewRow dataGridViewRow = this.Rows[this.newRowIndex];
			this.Rows.RemoveAtInternal(this.newRowIndex, false);
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs(dataGridViewRow);
			this.OnUserDeletedRow(dataGridViewRowEventArgs);
			if (this.AllowUserToAddRowsInternal)
			{
				this.newRowIndex = this.Rows.Count - 1;
				this.OnDefaultValuesNeeded(new DataGridViewRowEventArgs(this.Rows[this.newRowIndex]));
				this.InvalidateRowPrivate(this.newRowIndex);
			}
		}

		// Token: 0x06002EBD RID: 11965 RVA: 0x00084DE4 File Offset: 0x00083DE4
		private void DiscardZonesInScrollingArea(ref Rectangle rectScrollingArea, int emptyBackgroundWidth, int emptyBackgroundHeight, int frozenVisibleRowsHeight, bool discardFrozenColumns, bool discardFrozenRows)
		{
			rectScrollingArea.Width -= emptyBackgroundWidth;
			rectScrollingArea.Height -= emptyBackgroundHeight;
			if (this.RightToLeftInternal)
			{
				rectScrollingArea.X += emptyBackgroundWidth;
			}
			if (discardFrozenColumns)
			{
				int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (!this.RightToLeftInternal)
				{
					rectScrollingArea.X += columnsWidth;
				}
				rectScrollingArea.Width -= columnsWidth;
			}
			if (discardFrozenRows)
			{
				rectScrollingArea.Y += frozenVisibleRowsHeight;
				rectScrollingArea.Height -= frozenVisibleRowsHeight;
			}
		}

		// Token: 0x06002EBE RID: 11966 RVA: 0x00084E7C File Offset: 0x00083E7C
		public int DisplayedColumnCount(bool includePartialColumns)
		{
			int width = this.layout.Data.Width;
			int num = 0;
			int num2 = 0;
			int num3 = 0;
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (dataGridViewColumn != null && num < width)
			{
				num3++;
				num += dataGridViewColumn.Thickness;
				if (num <= width)
				{
					num2++;
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
			}
			if (num < width && this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
			{
				if (this.negOffset > 0)
				{
					num -= this.negOffset;
					num2--;
				}
				dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				while (dataGridViewColumn != null && num < width)
				{
					num3++;
					num += dataGridViewColumn.Thickness;
					if (num <= width)
					{
						num2++;
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					}
				}
			}
			if (!includePartialColumns)
			{
				return num2;
			}
			return num3;
		}

		// Token: 0x06002EBF RID: 11967 RVA: 0x00084F59 File Offset: 0x00083F59
		public int DisplayedRowCount(bool includePartialRow)
		{
			if (!includePartialRow)
			{
				return this.displayedBandsInfo.NumTotallyDisplayedFrozenRows + this.displayedBandsInfo.NumTotallyDisplayedScrollingRows;
			}
			return this.displayedBandsInfo.NumDisplayedFrozenRows + this.displayedBandsInfo.NumDisplayedScrollingRows;
		}

		// Token: 0x06002EC0 RID: 11968 RVA: 0x00084F90 File Offset: 0x00083F90
		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				this.dataGridViewOper[1048576] = true;
				try
				{
					for (int i = 0; i < this.Columns.Count; i++)
					{
						this.Columns[i].Dispose();
					}
					this.Columns.Clear();
					this.UnwireScrollBarsEvents();
					if (this.vertScrollBar != null)
					{
						this.vertScrollBar.Dispose();
						this.vertScrollBar = null;
					}
					if (this.horizScrollBar != null)
					{
						this.horizScrollBar.Dispose();
						this.horizScrollBar = null;
					}
					if (this.pens != null)
					{
						int count = this.pens.Count;
						if (count > 0)
						{
							foreach (object obj in this.pens.Values)
							{
								Pen pen = (Pen)obj;
								pen.Dispose();
							}
							this.pens.Clear();
						}
						this.pens = null;
					}
					if (this.brushes != null)
					{
						int count2 = this.brushes.Count;
						if (count2 > 0)
						{
							foreach (object obj2 in this.brushes.Values)
							{
								SolidBrush solidBrush = (SolidBrush)obj2;
								solidBrush.Dispose();
							}
							this.brushes.Clear();
						}
						this.brushes = null;
					}
					if (this.placeholderStringFormat != null)
					{
						this.placeholderStringFormat.Dispose();
						this.placeholderStringFormat = null;
					}
					if (this.latestEditingControl != null)
					{
						this.latestEditingControl.Dispose();
						this.latestEditingControl = null;
					}
					if (this.editingControl != null)
					{
						this.editingControl.Dispose();
						this.editingControl = null;
					}
					if (this.editingPanel != null)
					{
						this.editingPanel.Dispose();
						this.editingPanel = null;
					}
					if (this.gridPen != null)
					{
						this.gridPen.Dispose();
						this.gridPen = null;
					}
					if (this.dataConnection != null)
					{
						this.dataConnection.Dispose();
					}
					this.toolTipControl.Dispose();
				}
				finally
				{
					this.dataGridViewOper[1048576] = false;
				}
			}
			base.Dispose(disposing);
		}

		// Token: 0x06002EC1 RID: 11969 RVA: 0x0008520C File Offset: 0x0008420C
		private void DrawColHeaderShadow(Graphics g, int mouseX)
		{
			Rectangle rectangle = this.CalcColRelocationFeedbackRect(mouseX);
			this.DrawShadowRect(rectangle);
			if (this.dataGridViewState2[1024])
			{
				Rectangle rectangle2 = new Rectangle(0, this.layout.ColumnHeaders.Top, 3, this.layout.ColumnHeaders.Height);
				if (this.trackColumnEdge == -1)
				{
					rectangle2.X = this.GetColumnXFromIndex(this.Columns.GetFirstColumn(DataGridViewElementStates.Visible).Index);
					if (this.RightToLeftInternal)
					{
						rectangle2.X -= 3;
					}
				}
				else
				{
					int num = 0;
					if (this.Columns.GetNextColumn(this.Columns[this.trackColumnEdge], DataGridViewElementStates.Visible, DataGridViewElementStates.None) == null)
					{
						if (!this.RightToLeftInternal)
						{
							num = 3;
						}
					}
					else if (this.RightToLeftInternal)
					{
						num = 0;
					}
					else
					{
						num = 2;
					}
					if (this.RightToLeftInternal)
					{
						rectangle2.X = Math.Max(this.layout.ColumnHeaders.X, this.GetColumnXFromIndex(this.trackColumnEdge) - this.Columns[this.trackColumnEdge].Width - num);
					}
					else
					{
						rectangle2.X = Math.Min(this.GetColumnXFromIndex(this.trackColumnEdge) + this.Columns[this.trackColumnEdge].Width - num, this.layout.ColumnHeaders.Right - 3);
					}
				}
				if (this.ApplyVisualStylesToHeaderCells)
				{
					g.FillRectangle(this.GetCachedBrush(SystemColors.HotTrack), rectangle2);
					return;
				}
				ControlPaint.FillReversibleRectangle(base.RectangleToScreen(rectangle2), Color.White);
			}
		}

		// Token: 0x06002EC2 RID: 11970 RVA: 0x000853A4 File Offset: 0x000843A4
		private void DrawColSplitBar(int mouseX)
		{
			Rectangle rectangle = this.CalcColResizeFeedbackRect(mouseX);
			this.DrawSplitBar(rectangle);
		}

		// Token: 0x06002EC3 RID: 11971 RVA: 0x000853C0 File Offset: 0x000843C0
		private void DrawRowSplitBar(int mouseY)
		{
			Rectangle rectangle = this.CalcRowResizeFeedbackRect(mouseY);
			this.DrawSplitBar(rectangle);
		}

		// Token: 0x06002EC4 RID: 11972 RVA: 0x000853DC File Offset: 0x000843DC
		private void DrawShadowRect(Rectangle r)
		{
			IntPtr handle = base.Handle;
			IntPtr dcex = UnsafeNativeMethods.GetDCEx(new HandleRef(this, handle), NativeMethods.NullHandleRef, 1026);
			IntPtr intPtr = ControlPaint.CreateHalftoneHBRUSH();
			IntPtr intPtr2 = SafeNativeMethods.SelectObject(new HandleRef(this, dcex), new HandleRef(null, intPtr));
			SafeNativeMethods.PatBlt(new HandleRef(this, dcex), r.X, r.Y, r.Width, 3, 5898313);
			SafeNativeMethods.PatBlt(new HandleRef(this, dcex), r.X, r.Y + r.Height - 3, r.Width, 3, 5898313);
			SafeNativeMethods.PatBlt(new HandleRef(this, dcex), r.X, r.Y + 3, 3, r.Height - 6, 5898313);
			SafeNativeMethods.PatBlt(new HandleRef(this, dcex), r.X + r.Width - 3, r.Y + 3, 3, r.Height - 6, 5898313);
			SafeNativeMethods.SelectObject(new HandleRef(this, dcex), new HandleRef(null, intPtr2));
			SafeNativeMethods.DeleteObject(new HandleRef(null, intPtr));
			UnsafeNativeMethods.ReleaseDC(new HandleRef(this, handle), new HandleRef(this, dcex));
		}

		// Token: 0x06002EC5 RID: 11973 RVA: 0x00085514 File Offset: 0x00084514
		private void DrawSplitBar(Rectangle r)
		{
			IntPtr handle = base.Handle;
			IntPtr dcex = UnsafeNativeMethods.GetDCEx(new HandleRef(this, handle), NativeMethods.NullHandleRef, 1026);
			IntPtr intPtr = ControlPaint.CreateHalftoneHBRUSH();
			IntPtr intPtr2 = SafeNativeMethods.SelectObject(new HandleRef(this, dcex), new HandleRef(null, intPtr));
			SafeNativeMethods.PatBlt(new HandleRef(this, dcex), r.X, r.Y, r.Width, r.Height, 5898313);
			SafeNativeMethods.SelectObject(new HandleRef(this, dcex), new HandleRef(null, intPtr2));
			SafeNativeMethods.DeleteObject(new HandleRef(null, intPtr));
			UnsafeNativeMethods.ReleaseDC(new HandleRef(this, handle), new HandleRef(this, dcex));
		}

		// Token: 0x06002EC6 RID: 11974 RVA: 0x000855BC File Offset: 0x000845BC
		private void EditingControls_CommonMouseEventHandler(object sender, MouseEventArgs e, DataGridView.DataGridViewMouseEvent dgvme)
		{
			int num = this.editingPanel.Location.X + e.X;
			int num2 = this.editingPanel.Location.Y + e.Y;
			if (sender == this.editingControl)
			{
				num += this.editingControl.Location.X;
				num2 += this.editingControl.Location.Y;
			}
			if (dgvme == DataGridView.DataGridViewMouseEvent.MouseDown && e.Clicks == 1)
			{
				this.dataGridViewOper[4096] = false;
			}
			MouseEventArgs mouseEventArgs = new MouseEventArgs(e.Button, e.Clicks, num, num2, e.Delta);
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(mouseEventArgs.X, mouseEventArgs.Y);
			int num3 = mouseEventArgs.X - hitTestInfo.ColumnX;
			if (this.RightToLeftInternal)
			{
				num3 += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
			}
			DataGridViewCellMouseEventArgs dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num3, mouseEventArgs.Y - hitTestInfo.RowY, mouseEventArgs);
			try
			{
				this.dataGridViewState2[134217728] = true;
				if ((dgvme == DataGridView.DataGridViewMouseEvent.MouseDown || dgvme == DataGridView.DataGridViewMouseEvent.Click || dgvme == DataGridView.DataGridViewMouseEvent.MouseClick) && (DateTime.Now.Ticks - this.lastMouseClickInfo.timeStamp) / 10000L <= (long)SystemInformation.DoubleClickTime && e.Button == this.lastMouseClickInfo.button && e.Clicks == 1 && dataGridViewCellMouseEventArgs.ColumnIndex == this.lastMouseClickInfo.col && dataGridViewCellMouseEventArgs.RowIndex == this.lastMouseClickInfo.row)
				{
					Size doubleClickSize = SystemInformation.DoubleClickSize;
					if (Math.Abs(dataGridViewCellMouseEventArgs.X - this.lastMouseClickInfo.x) <= doubleClickSize.Width / 2 && Math.Abs(dataGridViewCellMouseEventArgs.Y - this.lastMouseClickInfo.y) <= doubleClickSize.Height / 2)
					{
						mouseEventArgs = new MouseEventArgs(e.Button, 2, num, num2, e.Delta);
						dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(dataGridViewCellMouseEventArgs.ColumnIndex, dataGridViewCellMouseEventArgs.RowIndex, dataGridViewCellMouseEventArgs.X, dataGridViewCellMouseEventArgs.Y, mouseEventArgs);
						switch (dgvme)
						{
						case DataGridView.DataGridViewMouseEvent.Click:
							this.OnDoubleClick(mouseEventArgs);
							if (e.Button == MouseButtons.Left && dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
							{
								this.OnCellDoubleClick(new DataGridViewCellEventArgs(dataGridViewCellMouseEventArgs.ColumnIndex, dataGridViewCellMouseEventArgs.RowIndex));
							}
							break;
						case DataGridView.DataGridViewMouseEvent.MouseClick:
							this.dataGridViewOper[4096] = true;
							this.OnMouseDoubleClick(mouseEventArgs);
							if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
							{
								this.OnCellMouseDoubleClick(dataGridViewCellMouseEventArgs);
							}
							break;
						case DataGridView.DataGridViewMouseEvent.MouseDown:
							this.OnMouseDown(mouseEventArgs);
							if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
							{
								this.OnCellMouseDown(dataGridViewCellMouseEventArgs);
							}
							break;
						}
						return;
					}
				}
				if (this.dataGridViewOper[4096])
				{
					if (e.Clicks == 2)
					{
						mouseEventArgs = new MouseEventArgs(e.Button, 1, num, num2, e.Delta);
						dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num3, mouseEventArgs.Y - hitTestInfo.RowY, mouseEventArgs);
					}
					switch (dgvme)
					{
					case DataGridView.DataGridViewMouseEvent.DoubleClick:
						dgvme = DataGridView.DataGridViewMouseEvent.Click;
						break;
					case DataGridView.DataGridViewMouseEvent.MouseDoubleClick:
						dgvme = DataGridView.DataGridViewMouseEvent.MouseClick;
						break;
					}
				}
				switch (dgvme)
				{
				case DataGridView.DataGridViewMouseEvent.Click:
					this.OnClick(mouseEventArgs);
					if (e.Button == MouseButtons.Left && dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
					{
						this.OnCellClick(new DataGridViewCellEventArgs(dataGridViewCellMouseEventArgs.ColumnIndex, dataGridViewCellMouseEventArgs.RowIndex));
					}
					break;
				case DataGridView.DataGridViewMouseEvent.DoubleClick:
					this.OnDoubleClick(mouseEventArgs);
					if (e.Button == MouseButtons.Left && dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
					{
						this.OnCellDoubleClick(new DataGridViewCellEventArgs(dataGridViewCellMouseEventArgs.ColumnIndex, dataGridViewCellMouseEventArgs.RowIndex));
					}
					break;
				case DataGridView.DataGridViewMouseEvent.MouseClick:
					this.OnMouseClick(mouseEventArgs);
					if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
					{
						this.OnCellMouseClick(dataGridViewCellMouseEventArgs);
					}
					break;
				case DataGridView.DataGridViewMouseEvent.MouseDoubleClick:
					this.OnMouseDoubleClick(mouseEventArgs);
					if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
					{
						this.OnCellMouseDoubleClick(dataGridViewCellMouseEventArgs);
					}
					break;
				case DataGridView.DataGridViewMouseEvent.MouseDown:
					this.OnMouseDown(mouseEventArgs);
					if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
					{
						this.OnCellMouseDown(dataGridViewCellMouseEventArgs);
					}
					break;
				case DataGridView.DataGridViewMouseEvent.MouseUp:
					if (this.dataGridViewState2[8388608])
					{
						MouseEventArgs mouseEventArgs2 = new MouseEventArgs(e.Button, 2, num, num2, e.Delta);
						dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(dataGridViewCellMouseEventArgs.ColumnIndex, dataGridViewCellMouseEventArgs.RowIndex, dataGridViewCellMouseEventArgs.X, dataGridViewCellMouseEventArgs.Y, mouseEventArgs2);
					}
					this.OnCellMouseUp(dataGridViewCellMouseEventArgs);
					this.OnMouseUp(mouseEventArgs);
					break;
				case DataGridView.DataGridViewMouseEvent.MouseMove:
					this.OnCellMouseMove(dataGridViewCellMouseEventArgs);
					break;
				}
			}
			finally
			{
				this.dataGridViewState2[134217728] = false;
			}
		}

		// Token: 0x06002EC7 RID: 11975 RVA: 0x00085BD8 File Offset: 0x00084BD8
		private void EditingControls_Click(object sender, EventArgs e)
		{
			MouseEventArgs mouseEventArgs = e as MouseEventArgs;
			if (mouseEventArgs != null)
			{
				this.EditingControls_CommonMouseEventHandler(sender, mouseEventArgs, DataGridView.DataGridViewMouseEvent.Click);
			}
		}

		// Token: 0x06002EC8 RID: 11976 RVA: 0x00085BF8 File Offset: 0x00084BF8
		private void EditingControls_DoubleClick(object sender, EventArgs e)
		{
			MouseEventArgs mouseEventArgs = e as MouseEventArgs;
			if (mouseEventArgs != null)
			{
				this.EditingControls_CommonMouseEventHandler(sender, mouseEventArgs, DataGridView.DataGridViewMouseEvent.DoubleClick);
			}
		}

		// Token: 0x06002EC9 RID: 11977 RVA: 0x00085C18 File Offset: 0x00084C18
		private void EditingControls_MouseClick(object sender, MouseEventArgs e)
		{
			this.EditingControls_CommonMouseEventHandler(sender, e, DataGridView.DataGridViewMouseEvent.MouseClick);
		}

		// Token: 0x06002ECA RID: 11978 RVA: 0x00085C23 File Offset: 0x00084C23
		private void EditingControls_MouseDoubleClick(object sender, MouseEventArgs e)
		{
			this.EditingControls_CommonMouseEventHandler(sender, e, DataGridView.DataGridViewMouseEvent.MouseDoubleClick);
		}

		// Token: 0x06002ECB RID: 11979 RVA: 0x00085C2E File Offset: 0x00084C2E
		private void EditingControls_MouseDown(object sender, MouseEventArgs e)
		{
			this.EditingControls_CommonMouseEventHandler(sender, e, DataGridView.DataGridViewMouseEvent.MouseDown);
		}

		// Token: 0x06002ECC RID: 11980 RVA: 0x00085C3C File Offset: 0x00084C3C
		private void EditingControls_MouseEnter(object sender, EventArgs e)
		{
			if (sender == this.editingPanel)
			{
				this.dataGridViewState1[16777216] = true;
				this.oldCursor = this.Cursor;
				this.CursorInternal = ((IDataGridViewEditingControl)this.editingControl).EditingPanelCursor;
			}
			if (this.dataGridViewState2[32])
			{
				this.OnMouseEnter(EventArgs.Empty);
			}
			this.UpdateMouseEnteredCell(null, null);
		}

		// Token: 0x06002ECD RID: 11981 RVA: 0x00085CA8 File Offset: 0x00084CA8
		private void EditingControls_MouseLeave(object sender, EventArgs e)
		{
			if (sender == this.editingPanel && this.dataGridViewState1[16777216])
			{
				this.dataGridViewState1[16777216] = false;
				this.CursorInternal = this.oldCursor;
			}
			this.UpdateMouseEnteredCell(null, null);
			Point point = base.PointToClient(Control.MousePosition);
			if (!base.ClientRectangle.Contains(point))
			{
				this.OnMouseLeave(EventArgs.Empty);
			}
		}

		// Token: 0x06002ECE RID: 11982 RVA: 0x00085D1D File Offset: 0x00084D1D
		private void EditingControls_MouseMove(object sender, MouseEventArgs e)
		{
			this.EditingControls_CommonMouseEventHandler(sender, e, DataGridView.DataGridViewMouseEvent.MouseMove);
		}

		// Token: 0x06002ECF RID: 11983 RVA: 0x00085D28 File Offset: 0x00084D28
		private void EditingControls_MouseUp(object sender, MouseEventArgs e)
		{
			this.EditingControls_CommonMouseEventHandler(sender, e, DataGridView.DataGridViewMouseEvent.MouseUp);
		}

		// Token: 0x06002ED0 RID: 11984 RVA: 0x00085D34 File Offset: 0x00084D34
		private void EndColumnHeadersResize(MouseEventArgs e)
		{
			try
			{
				if (this.currentRowSplitBar != -1)
				{
					base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar), true);
					this.lastRowSplitBar = (this.currentRowSplitBar = -1);
				}
				int num = Math.Min(e.Y + this.mouseBarOffset, this.layout.Data.Bottom - 1);
				int num2 = num - this.layout.ColumnHeaders.Y - this.ColumnHeadersHeight + 1;
				if (this.trackRowAnchor != num && num2 != 0)
				{
					this.ColumnHeadersHeight += num2;
				}
			}
			finally
			{
				this.RealeaseMouse();
			}
		}

		// Token: 0x06002ED1 RID: 11985 RVA: 0x00085DE4 File Offset: 0x00084DE4
		private void EndColumnRelocation(MouseEventArgs e, DataGridView.HitTestInfo hti)
		{
			try
			{
				if (this.lastHeaderShadow != -1)
				{
					this.dataGridViewState2[1024] = false;
					this.trackColumnEdge = -1;
					this.lastHeaderShadow = -1;
					base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
				}
				int num;
				if (this.ColumnRelocationTarget(e, hti, out num))
				{
					if (num == -1)
					{
						this.Columns[this.trackColumn].DisplayIndex = 0;
					}
					else if (this.Columns[this.trackColumn].DisplayIndex > this.Columns[num].DisplayIndex)
					{
						this.Columns[this.trackColumn].DisplayIndex = this.Columns[num].DisplayIndex + 1;
					}
					else
					{
						this.Columns[this.trackColumn].DisplayIndex = this.Columns[num].DisplayIndex;
					}
				}
			}
			finally
			{
				this.RealeaseMouse();
			}
		}

		// Token: 0x06002ED2 RID: 11986 RVA: 0x00085EFC File Offset: 0x00084EFC
		private void EndColumnResize(MouseEventArgs e)
		{
			try
			{
				if (this.currentColSplitBar != -1)
				{
					base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar), true);
					this.lastColSplitBar = (this.currentColSplitBar = -1);
				}
				int num;
				int num2;
				if (this.RightToLeftInternal)
				{
					num = Math.Max(e.X + this.mouseBarOffset, this.layout.Data.X);
					num2 = this.GetColumnXFromIndex(this.trackColumn) - this.Columns[this.trackColumn].Thickness - num + 1;
				}
				else
				{
					num = Math.Min(e.X + this.mouseBarOffset, this.layout.Data.Right - 1);
					num2 = num - (this.GetColumnXFromIndex(this.trackColumn) + this.Columns[this.trackColumn].Thickness) + 1;
				}
				if (this.trackColAnchor != num && num2 != 0)
				{
					int num3 = this.Columns[this.trackColumn].Thickness + num2;
					this.Columns[this.trackColumn].Thickness = num3;
				}
			}
			finally
			{
				this.RealeaseMouse();
			}
		}

		// Token: 0x06002ED3 RID: 11987 RVA: 0x00086038 File Offset: 0x00085038
		public bool EndEdit()
		{
			return this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit);
		}

		// Token: 0x06002ED4 RID: 11988 RVA: 0x00086048 File Offset: 0x00085048
		public bool EndEdit(DataGridViewDataErrorContexts context)
		{
			if (this.EditMode == DataGridViewEditMode.EditOnEnter)
			{
				return this.CommitEdit(context);
			}
			return this.EndEdit(context, DataGridView.DataGridViewValidateCellInternal.Never, false, false, false, false, false, true, true, true);
		}

		// Token: 0x06002ED5 RID: 11989 RVA: 0x00086078 File Offset: 0x00085078
		private bool EndEdit(DataGridViewDataErrorContexts context, DataGridView.DataGridViewValidateCellInternal validateCell, bool fireCellLeave, bool fireCellEnter, bool fireRowLeave, bool fireRowEnter, bool fireLeave, bool keepFocus, bool resetCurrentCell, bool resetAnchorCell)
		{
			if (this.ptCurrentCell.X == -1)
			{
				return true;
			}
			this.dataGridViewOper[4194304] = true;
			bool flag;
			try
			{
				int y = this.ptCurrentCell.Y;
				int x = this.ptCurrentCell.X;
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = this.CommitEdit(ref currentCellInternal, context, validateCell, fireCellLeave, fireCellEnter, fireRowLeave, fireRowEnter, fireLeave);
				if (dataGridViewDataErrorEventArgs != null)
				{
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
					if (dataGridViewDataErrorEventArgs.Cancel)
					{
						return false;
					}
					dataGridViewDataErrorEventArgs = this.CancelEditPrivate();
					if (dataGridViewDataErrorEventArgs != null)
					{
						if (dataGridViewDataErrorEventArgs.ThrowException)
						{
							throw dataGridViewDataErrorEventArgs.Exception;
						}
						if (dataGridViewDataErrorEventArgs.Cancel)
						{
							return false;
						}
					}
				}
				if (!this.IsCurrentCellInEditMode)
				{
					flag = true;
				}
				else if (y != this.ptCurrentCell.Y || x != this.ptCurrentCell.X)
				{
					flag = true;
				}
				else
				{
					if (this.editingControl != null)
					{
						this.UnwireEditingControlEvents();
						this.dataGridViewState2[8] = this.MouseOverEditingControl;
						this.dataGridViewState2[16] = this.MouseOverEditingPanel;
						this.dataGridViewState1[16384] = true;
						try
						{
							currentCellInternal.DetachEditingControl();
						}
						finally
						{
							this.dataGridViewState1[16384] = false;
						}
						ImeMode cachedImeMode = this.editingControl.CachedImeMode;
						this.latestEditingControl = this.editingControl;
						this.editingControl = null;
						this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
						if (this.EditMode == DataGridViewEditMode.EditOnEnter && resetCurrentCell)
						{
							this.SetCurrentCellAddressCore(-1, -1, resetAnchorCell, false, false);
						}
						if (keepFocus)
						{
							this.FocusInternal();
						}
						base.ImeMode = cachedImeMode;
					}
					else
					{
						this.dataGridViewState1[32768] = false;
						this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
					}
					if (!this.IsInnerCellOutOfBounds(x, y))
					{
						DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(x, y);
						this.OnCellEndEdit(dataGridViewCellEventArgs);
					}
					flag = true;
				}
			}
			finally
			{
				this.dataGridViewOper[4194304] = false;
			}
			return flag;
		}

		// Token: 0x06002ED6 RID: 11990 RVA: 0x000862B8 File Offset: 0x000852B8
		private void EndRowHeadersResize(MouseEventArgs e)
		{
			try
			{
				if (this.currentColSplitBar != -1)
				{
					base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar), true);
					this.lastColSplitBar = (this.currentColSplitBar = -1);
				}
				int num;
				int num2;
				if (this.RightToLeftInternal)
				{
					num = Math.Max(e.X + this.mouseBarOffset, this.layout.Data.Left - 1);
					num2 = this.layout.RowHeaders.Right - this.RowHeadersWidth - num - 1;
				}
				else
				{
					num = Math.Min(e.X + this.mouseBarOffset, this.layout.Data.Right - 1);
					num2 = num - this.layout.RowHeaders.X - this.RowHeadersWidth + 1;
				}
				if (this.trackColAnchor != num && num2 != 0)
				{
					this.RowHeadersWidth += num2;
				}
			}
			finally
			{
				this.RealeaseMouse();
			}
		}

		// Token: 0x06002ED7 RID: 11991 RVA: 0x000863B0 File Offset: 0x000853B0
		private void EndRowResize(MouseEventArgs e)
		{
			try
			{
				if (this.currentRowSplitBar != -1)
				{
					base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar), true);
					this.lastRowSplitBar = (this.currentRowSplitBar = -1);
				}
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(this.trackRow);
				int num;
				int num2;
				dataGridViewRow.GetHeightInfo(this.trackRow, out num, out num2);
				int num3 = Math.Min(e.Y + this.mouseBarOffset, this.layout.Data.Bottom - 1);
				int num4 = num3 - (this.GetRowYFromIndex(this.trackRow) + num) + 1;
				if (this.trackRowAnchor != num3 && num4 != 0)
				{
					int num5 = num + num4;
					num5 = Math.Max(num5, num2);
					if (!this.OnRowHeightInfoPushed(this.trackRow, num5, num2))
					{
						if (dataGridViewRow.Index == -1)
						{
							dataGridViewRow = this.Rows[this.trackRow];
						}
						dataGridViewRow.ThicknessInternal = num5;
					}
				}
			}
			finally
			{
				this.RealeaseMouse();
			}
		}

		// Token: 0x06002ED8 RID: 11992 RVA: 0x000864B0 File Offset: 0x000854B0
		private void ExitBulkLayout(bool invalidInAdjustFillingColumns)
		{
			if (this.inBulkLayoutCount > 0)
			{
				this.inBulkLayoutCount--;
				if (this.inBulkLayoutCount == 0)
				{
					this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
				}
			}
		}

		// Token: 0x06002ED9 RID: 11993 RVA: 0x000864DB File Offset: 0x000854DB
		private void ExitBulkPaint(int columnIndex, int rowIndex)
		{
			if (this.inBulkPaintCount > 0)
			{
				this.inBulkPaintCount--;
				if (this.inBulkPaintCount == 0)
				{
					if (columnIndex >= 0)
					{
						this.InvalidateColumnInternal(columnIndex);
						return;
					}
					if (rowIndex >= 0)
					{
						this.InvalidateRowPrivate(rowIndex);
						return;
					}
					base.Invalidate();
				}
			}
		}

		// Token: 0x06002EDA RID: 11994 RVA: 0x0008651C File Offset: 0x0008551C
		private void FirstVisibleScrollingRowTempted(int rowIndex)
		{
			int height = this.layout.Data.Height;
			if (height <= 0)
			{
				return;
			}
			int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			if (rowsHeight < height)
			{
				this.displayedBandsInfo.FirstDisplayedScrollingRow = rowIndex;
			}
		}

		// Token: 0x06002EDB RID: 11995 RVA: 0x00086560 File Offset: 0x00085560
		private void FlushDisplayedChanged()
		{
			if (this.displayedBandsInfo.Dirty && base.Visible)
			{
				if (!this.RowHeadersVisible && this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0)
				{
					this.UpdateRowsDisplayedState(false);
				}
				else
				{
					int num = Screen.FromControl(this).WorkingArea.Height / 2;
					int num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
					if (num2 != -1)
					{
						for (int i = this.displayedBandsInfo.NumDisplayedScrollingRows; i > 0; i--)
						{
							if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None)
							{
								this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, true);
							}
							num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
						}
						int num3 = num2;
						num2 = this.Rows.GetPreviousRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						while (num2 != -1 && (this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
						{
							this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
							num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						}
						num2 = num3;
					}
					else
					{
						num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					}
					while (num2 != -1 && (this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
					{
						this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					}
					int j = this.displayedBandsInfo.NumDisplayedFrozenRows;
					num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (j > 0)
					{
						if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None)
						{
							this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, true);
						}
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
						j--;
					}
					while (num2 != -1 && (this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
					{
						this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					}
					int num4 = -1;
					int num5 = -1;
					if (this.displayedBandsInfo.NumDisplayedFrozenRows > 0)
					{
						int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
						if (this.displayedBandsInfo.NumDisplayedFrozenRows > 1)
						{
							num4 = this.Rows.GetNextRow(firstRow, DataGridViewElementStates.Visible, this.displayedBandsInfo.NumDisplayedFrozenRows - 2);
						}
						else
						{
							num4 = firstRow;
						}
					}
					if (this.displayedBandsInfo.FirstDisplayedScrollingRow != -1)
					{
						if (this.displayedBandsInfo.NumDisplayedScrollingRows > 1)
						{
							num5 = this.Rows.GetNextRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, DataGridViewElementStates.Visible, this.displayedBandsInfo.NumDisplayedScrollingRows - 2);
						}
						else
						{
							num5 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
						}
					}
					num2 = this.displayedBandsInfo.OldFirstDisplayedScrollingRow;
					while (num2 != -1 && num2 < this.displayedBandsInfo.FirstDisplayedScrollingRow && !this.RowNeedsDisplayedState(num2, num4, num5) && (this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
					{
						this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					}
					num2 = this.displayedBandsInfo.OldFirstDisplayedScrollingRow;
					if (num2 != -1 && num2 < this.Rows.Count && (this.displayedBandsInfo.FirstDisplayedScrollingRow == -1 || this.displayedBandsInfo.FirstDisplayedScrollingRow < num2) && !this.RowNeedsDisplayedState(num2, num4, num5))
					{
						while (num2 != -1 && (this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
						{
							this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
							num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
						}
					}
					if (this.displayedBandsInfo.RowInsertionOccurred)
					{
						num2 = this.displayedBandsInfo.OldFirstDisplayedScrollingRow;
						if (num2 != -1)
						{
							num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible, this.displayedBandsInfo.OldNumDisplayedScrollingRows - 1);
							if (num2 == -1)
							{
								num2 = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
							}
							int num6 = 0;
							while (num2 != -1 && num6 <= num && !this.RowNeedsDisplayedState(num2, num4, num5))
							{
								if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
								{
									this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
								}
								num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible);
								num6++;
							}
						}
						num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
						if (num2 != -1)
						{
							num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, this.displayedBandsInfo.OldNumDisplayedFrozenRows - 1);
							if (num2 == -1)
							{
								num2 = this.Rows.GetLastRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
							}
							int num7 = 0;
							while (num2 != -1 && num7 <= num && !this.RowNeedsDisplayedState(num2, num4, num5))
							{
								if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
								{
									this.Rows.SetRowState(num2, DataGridViewElementStates.Displayed, false);
								}
								num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible);
								num7++;
							}
						}
					}
				}
				if (!this.ColumnHeadersVisible && this.Rows.GetRowCount(DataGridViewElementStates.Visible) == 0)
				{
					this.UpdateColumnsDisplayedState(false);
				}
				else
				{
					int num8 = this.displayedBandsInfo.FirstDisplayedScrollingCol;
					DataGridViewColumn dataGridViewColumn;
					if (num8 != -1)
					{
						int k = this.displayedBandsInfo.NumDisplayedScrollingCols;
						dataGridViewColumn = this.Columns[num8];
						while (k > 0)
						{
							if (!dataGridViewColumn.Displayed)
							{
								dataGridViewColumn.DisplayedInternal = true;
							}
							dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							k--;
						}
						DataGridViewColumn dataGridViewColumn2 = dataGridViewColumn;
						dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						while (dataGridViewColumn != null && dataGridViewColumn.Displayed)
						{
							dataGridViewColumn.DisplayedInternal = false;
							dataGridViewColumn = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						}
						dataGridViewColumn = dataGridViewColumn2;
					}
					else
					{
						dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					}
					while (dataGridViewColumn != null && dataGridViewColumn.Displayed)
					{
						dataGridViewColumn.DisplayedInternal = false;
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					}
					int l = this.displayedBandsInfo.NumDisplayedFrozenCols;
					dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (l > 0)
					{
						if (!dataGridViewColumn.Displayed)
						{
							dataGridViewColumn.DisplayedInternal = true;
						}
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						l--;
					}
					while (dataGridViewColumn != null && dataGridViewColumn.Displayed)
					{
						dataGridViewColumn.DisplayedInternal = false;
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					}
					num8 = this.displayedBandsInfo.OldFirstDisplayedScrollingCol;
					while (num8 != -1 && num8 < this.Columns.Count && this.displayedBandsInfo.FirstDisplayedScrollingCol != -1 && num8 != this.displayedBandsInfo.FirstDisplayedScrollingCol && this.Columns.DisplayInOrder(num8, this.displayedBandsInfo.FirstDisplayedScrollingCol) && !this.ColumnNeedsDisplayedState(this.Columns[num8]))
					{
						dataGridViewColumn = this.Columns[num8];
						if (!dataGridViewColumn.Displayed)
						{
							break;
						}
						dataGridViewColumn.DisplayedInternal = false;
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						num8 = ((dataGridViewColumn == null) ? (-1) : dataGridViewColumn.Index);
					}
					num8 = this.displayedBandsInfo.OldFirstDisplayedScrollingCol;
					if (num8 != -1 && num8 < this.Columns.Count && (this.displayedBandsInfo.FirstDisplayedScrollingCol == -1 || (this.displayedBandsInfo.FirstDisplayedScrollingCol != num8 && this.Columns.DisplayInOrder(this.displayedBandsInfo.FirstDisplayedScrollingCol, num8))) && !this.ColumnNeedsDisplayedState(this.Columns[num8]))
					{
						dataGridViewColumn = this.Columns[num8];
						while (dataGridViewColumn != null && dataGridViewColumn.Displayed)
						{
							dataGridViewColumn.DisplayedInternal = false;
							dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						}
					}
					if (this.displayedBandsInfo.ColumnInsertionOccurred)
					{
						dataGridViewColumn = this.Columns[this.Columns.Count - 1];
						while (dataGridViewColumn != null && !this.ColumnNeedsDisplayedState(dataGridViewColumn))
						{
							if (dataGridViewColumn.Displayed)
							{
								dataGridViewColumn.DisplayedInternal = false;
							}
							dataGridViewColumn = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						}
					}
				}
				this.displayedBandsInfo.Dirty = false;
			}
		}

		// Token: 0x06002EDC RID: 11996 RVA: 0x00086D30 File Offset: 0x00085D30
		private void FlushDisplayIndexChanged(bool raiseEvent)
		{
			foreach (object obj in this.Columns)
			{
				DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
				if (dataGridViewColumn.DisplayIndexHasChanged)
				{
					dataGridViewColumn.DisplayIndexHasChanged = false;
					if (raiseEvent)
					{
						this.OnColumnDisplayIndexChanged(dataGridViewColumn);
					}
				}
			}
		}

		// Token: 0x06002EDD RID: 11997 RVA: 0x00086D9C File Offset: 0x00085D9C
		private void FlushSelectionChanged()
		{
			if (this.dataGridViewState2[262144])
			{
				this.OnSelectionChanged(EventArgs.Empty);
			}
		}

		// Token: 0x06002EDE RID: 11998 RVA: 0x00086DBB File Offset: 0x00085DBB
		protected override AccessibleObject GetAccessibilityObjectById(int objectId)
		{
			return base.AccessibilityObject.GetChild(objectId - 1);
		}

		// Token: 0x06002EDF RID: 11999 RVA: 0x00086DCC File Offset: 0x00085DCC
		internal SolidBrush GetCachedBrush(Color color)
		{
			SolidBrush solidBrush = (SolidBrush)this.brushes[color];
			if (solidBrush == null)
			{
				solidBrush = new SolidBrush(color);
				this.brushes.Add(color, solidBrush);
			}
			return solidBrush;
		}

		// Token: 0x06002EE0 RID: 12000 RVA: 0x00086E10 File Offset: 0x00085E10
		internal Pen GetCachedPen(Color color)
		{
			Pen pen = (Pen)this.pens[color];
			if (pen == null)
			{
				pen = new Pen(color);
				this.pens.Add(color, pen);
			}
			return pen;
		}

		// Token: 0x06002EE1 RID: 12001 RVA: 0x00086E54 File Offset: 0x00085E54
		internal TypeConverter GetCachedTypeConverter(Type type)
		{
			if (this.converters.ContainsKey(type))
			{
				return (TypeConverter)this.converters[type];
			}
			TypeConverter converter = TypeDescriptor.GetConverter(type);
			this.converters.Add(type, converter);
			return converter;
		}

		// Token: 0x06002EE2 RID: 12002 RVA: 0x00086E98 File Offset: 0x00085E98
		internal Rectangle GetCellAdjustedDisplayRectangle(int columnIndex, int rowIndex, bool cutOverflow)
		{
			Rectangle cellDisplayRectangle = this.GetCellDisplayRectangle(columnIndex, rowIndex, cutOverflow);
			if (this.SingleVerticalBorderAdded && columnIndex == this.FirstDisplayedColumnIndex)
			{
				if (!this.RightToLeftInternal)
				{
					cellDisplayRectangle.X--;
				}
				cellDisplayRectangle.Width++;
			}
			if (this.SingleHorizontalBorderAdded && rowIndex == this.FirstDisplayedRowIndex)
			{
				cellDisplayRectangle.Y--;
				cellDisplayRectangle.Width++;
			}
			return cellDisplayRectangle;
		}

		// Token: 0x06002EE3 RID: 12003 RVA: 0x00086F18 File Offset: 0x00085F18
		public int GetCellCount(DataGridViewElementStates includeFilter)
		{
			if ((includeFilter & ~(DataGridViewElementStates.Displayed | DataGridViewElementStates.Frozen | DataGridViewElementStates.ReadOnly | DataGridViewElementStates.Resizable | DataGridViewElementStates.Selected | DataGridViewElementStates.Visible)) != DataGridViewElementStates.None)
			{
				throw new ArgumentException(SR.GetString("DataGridView_InvalidDataGridViewElementStateCombination", new object[] { "includeFilter" }));
			}
			int num = 0;
			bool flag;
			bool flag2;
			bool flag3;
			bool flag4;
			bool flag5;
			if ((includeFilter & DataGridViewElementStates.Selected) == DataGridViewElementStates.Selected)
			{
				if (includeFilter == DataGridViewElementStates.Selected)
				{
					num = this.individualSelectedCells.Count;
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.CellSelect:
						return num;
					case DataGridViewSelectionMode.FullRowSelect:
					case DataGridViewSelectionMode.RowHeaderSelect:
						return num + this.selectedBandIndexes.Count * this.Columns.Count;
					case DataGridViewSelectionMode.FullColumnSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
						return num + this.selectedBandIndexes.Count * this.Rows.Count;
					}
				}
				flag = (includeFilter & DataGridViewElementStates.Displayed) == DataGridViewElementStates.Displayed;
				flag2 = (includeFilter & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen;
				flag3 = (includeFilter & DataGridViewElementStates.Resizable) == DataGridViewElementStates.Resizable;
				flag4 = (includeFilter & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.ReadOnly;
				flag5 = (includeFilter & DataGridViewElementStates.Visible) == DataGridViewElementStates.Visible;
				foreach (object obj in ((IEnumerable)this.individualSelectedCells))
				{
					DataGridViewCell dataGridViewCell = (DataGridViewCell)obj;
					if (this.GetCellCount_CellIncluded(dataGridViewCell, dataGridViewCell.RowIndex, flag, flag2, flag3, flag4, flag5))
					{
						num++;
					}
				}
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					return num;
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					foreach (object obj2 in ((IEnumerable)this.selectedBandIndexes))
					{
						int num2 = (int)obj2;
						DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num2);
						foreach (object obj3 in dataGridViewRow.Cells)
						{
							DataGridViewCell dataGridViewCell2 = (DataGridViewCell)obj3;
							if (this.GetCellCount_CellIncluded(dataGridViewCell2, num2, flag, flag2, flag3, flag4, flag5))
							{
								num++;
							}
						}
					}
					return num;
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
				{
					for (int i = 0; i < this.Rows.Count; i++)
					{
						DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(i);
						foreach (object obj4 in ((IEnumerable)this.selectedBandIndexes))
						{
							int num3 = (int)obj4;
							DataGridViewCell dataGridViewCell3 = dataGridViewRow2.Cells[num3];
							if (this.GetCellCount_CellIncluded(dataGridViewCell3, i, flag, flag2, flag3, flag4, flag5))
							{
								num++;
							}
						}
					}
					return num;
				}
				}
			}
			if ((includeFilter == DataGridViewElementStates.ReadOnly && this.ReadOnly) || includeFilter == DataGridViewElementStates.None)
			{
				return this.Rows.Count * this.Columns.Count;
			}
			flag = (includeFilter & DataGridViewElementStates.Displayed) == DataGridViewElementStates.Displayed;
			flag2 = (includeFilter & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen;
			flag3 = (includeFilter & DataGridViewElementStates.Resizable) == DataGridViewElementStates.Resizable;
			flag4 = (includeFilter & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.ReadOnly;
			flag5 = (includeFilter & DataGridViewElementStates.Visible) == DataGridViewElementStates.Visible;
			for (int j = 0; j < this.Rows.Count; j++)
			{
				DataGridViewRow dataGridViewRow3 = this.Rows.SharedRow(j);
				if (!flag5 || (this.Rows.GetRowState(j) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
				{
					foreach (object obj5 in dataGridViewRow3.Cells)
					{
						DataGridViewCell dataGridViewCell4 = (DataGridViewCell)obj5;
						if (this.GetCellCount_CellIncluded(dataGridViewCell4, j, flag, flag2, flag3, flag4, flag5))
						{
							num++;
						}
					}
				}
			}
			return num;
		}

		// Token: 0x06002EE4 RID: 12004 RVA: 0x000872D0 File Offset: 0x000862D0
		private bool GetCellCount_CellIncluded(DataGridViewCell dataGridViewCell, int rowIndex, bool displayedRequired, bool frozenRequired, bool resizableRequired, bool readOnlyRequired, bool visibleRequired)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			return (!displayedRequired || ((rowState & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None && dataGridViewCell.OwningColumn.Displayed)) && (!frozenRequired || (rowState & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None || dataGridViewCell.OwningColumn.Frozen || dataGridViewCell.StateIncludes(DataGridViewElementStates.Frozen)) && (!resizableRequired || this.RowIsResizable(rowIndex) || dataGridViewCell.OwningColumn.Resizable == DataGridViewTriState.True) && (!readOnlyRequired || this.ReadOnly || (rowState & DataGridViewElementStates.ReadOnly) != DataGridViewElementStates.None || dataGridViewCell.OwningColumn.ReadOnly || dataGridViewCell.StateIncludes(DataGridViewElementStates.ReadOnly)) && (!visibleRequired || ((rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None && dataGridViewCell.OwningColumn.Visible));
		}

		// Token: 0x06002EE5 RID: 12005 RVA: 0x00087398 File Offset: 0x00086398
		public Rectangle GetCellDisplayRectangle(int columnIndex, int rowIndex, bool cutOverflow)
		{
			Rectangle rectangle;
			if (columnIndex >= 0)
			{
				if (columnIndex >= this.Columns.Count)
				{
					throw new ArgumentOutOfRangeException("columnIndex");
				}
				rectangle = this.GetColumnDisplayRectanglePrivate(columnIndex, cutOverflow);
			}
			else
			{
				if (columnIndex != -1)
				{
					throw new ArgumentOutOfRangeException("columnIndex");
				}
				if (rowIndex >= 0)
				{
					rectangle = this.layout.RowHeaders;
				}
				else
				{
					rectangle = this.layout.TopLeftHeader;
				}
			}
			Rectangle rectangle2;
			if (rowIndex >= 0)
			{
				if (rowIndex >= this.Rows.Count)
				{
					throw new ArgumentOutOfRangeException("rowIndex");
				}
				rectangle2 = this.GetRowDisplayRectanglePrivate(rowIndex, cutOverflow);
			}
			else
			{
				if (rowIndex != -1)
				{
					throw new ArgumentOutOfRangeException("rowIndex");
				}
				if (columnIndex >= 0)
				{
					rectangle2 = this.layout.ColumnHeaders;
				}
				else
				{
					rectangle2 = this.layout.TopLeftHeader;
				}
			}
			if (!cutOverflow)
			{
				int num = rectangle2.Bottom - rectangle.Bottom;
				if (num > 0)
				{
					rectangle.Height += num;
				}
				if (this.RightToLeftInternal)
				{
					int num2 = rectangle2.X - rectangle.X;
					if (num2 > 0)
					{
						rectangle2.Width += num2;
						rectangle2.X -= num2;
					}
				}
				else
				{
					int num2 = rectangle.Right - rectangle2.Right;
					if (num2 > 0)
					{
						rectangle2.Width += num2;
					}
				}
			}
			rectangle2.Intersect(rectangle);
			return rectangle2;
		}

		// Token: 0x06002EE6 RID: 12006 RVA: 0x000874E0 File Offset: 0x000864E0
		internal DataGridViewCell GetCellInternal(int columnIndex, int rowIndex)
		{
			if (rowIndex >= 0)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
				if (columnIndex >= 0)
				{
					return dataGridViewRow.Cells[columnIndex];
				}
				return dataGridViewRow.HeaderCell;
			}
			else
			{
				if (columnIndex >= 0)
				{
					return this.Columns[columnIndex].HeaderCell;
				}
				return this.TopLeftHeaderCell;
			}
		}

		// Token: 0x06002EE7 RID: 12007 RVA: 0x00087534 File Offset: 0x00086534
		public virtual DataObject GetClipboardContent()
		{
			if (this.ClipboardCopyMode == DataGridViewClipboardCopyMode.Disable)
			{
				throw new NotSupportedException(SR.GetString("DataGridView_DisabledClipboardCopy"));
			}
			if (this.CurrentCellIsEditedAndOnlySelectedCell)
			{
				return null;
			}
			string[] array = new string[]
			{
				DataFormats.Html,
				DataFormats.Text,
				DataFormats.UnicodeText,
				DataFormats.CommaSeparatedValue
			};
			DataObject dataObject = new DataObject();
			bool flag = false;
			bool flag2 = false;
			StringBuilder stringBuilder = null;
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
			{
				bool flag3 = false;
				bool flag4 = false;
				bool flag5 = false;
				if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
				{
					flag5 = this.Rows.GetRowCount(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible) != 0;
					flag3 = flag5 && this.Columns.GetColumnCount(DataGridViewElementStates.Visible) != 0;
				}
				else if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
				{
					flag4 = this.Columns.GetColumnCount(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible) != 0;
					flag3 = flag4 && this.Rows.GetRowCount(DataGridViewElementStates.Visible) != 0;
				}
				if (!flag3 && this.individualSelectedCells.Count > 0)
				{
					foreach (object obj in ((IEnumerable)this.individualSelectedCells))
					{
						DataGridViewCell dataGridViewCell = (DataGridViewCell)obj;
						if (dataGridViewCell.Visible)
						{
							flag3 = true;
							break;
						}
					}
				}
				if (!flag3)
				{
					return null;
				}
				if (this.SelectionMode == DataGridViewSelectionMode.CellSelect)
				{
					flag2 = (flag = this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText);
					flag &= this.ColumnHeadersVisible;
					flag2 &= this.RowHeadersVisible;
				}
				else
				{
					flag2 = (flag = false);
					if (this.ColumnHeadersVisible)
					{
						if (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)
						{
							if (flag4)
							{
								flag = true;
							}
						}
						else
						{
							flag = this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText;
						}
					}
					if (this.RowHeadersVisible)
					{
						if (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)
						{
							if (flag5)
							{
								flag2 = true;
							}
						}
						else
						{
							flag2 = this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText;
						}
					}
				}
				int num = int.MaxValue;
				int num2 = -1;
				DataGridViewColumn dataGridViewColumn = null;
				DataGridViewColumn dataGridViewColumn2 = null;
				if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
				{
					DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
					DataGridViewColumn lastColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					using (IEnumerator enumerator2 = ((IEnumerable)this.selectedBandIndexes).GetEnumerator())
					{
						while (enumerator2.MoveNext())
						{
							object obj2 = enumerator2.Current;
							int num3 = (int)obj2;
							if ((this.Rows.GetRowState(num3) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
							{
								if (num3 < num)
								{
									num = num3;
								}
								if (num3 > num2)
								{
									num2 = num3;
								}
								dataGridViewColumn = firstColumn;
								dataGridViewColumn2 = lastColumn;
							}
						}
						goto IL_0E22;
					}
				}
				if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
				{
					int num4 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
					foreach (object obj3 in ((IEnumerable)this.selectedBandIndexes))
					{
						int num5 = (int)obj3;
						if (this.Columns[num5].Visible)
						{
							if (dataGridViewColumn == null || this.Columns.DisplayInOrder(num5, dataGridViewColumn.Index))
							{
								dataGridViewColumn = this.Columns[num5];
							}
							if (dataGridViewColumn2 == null || this.Columns.DisplayInOrder(dataGridViewColumn2.Index, num5))
							{
								dataGridViewColumn2 = this.Columns[num5];
							}
							num = num4;
							num2 = lastRow;
						}
					}
				}
				IL_0E22:
				foreach (object obj4 in ((IEnumerable)this.individualSelectedCells))
				{
					DataGridViewCell dataGridViewCell2 = (DataGridViewCell)obj4;
					if (dataGridViewCell2.Visible)
					{
						if (dataGridViewCell2.RowIndex < num)
						{
							num = dataGridViewCell2.RowIndex;
						}
						if (dataGridViewCell2.RowIndex > num2)
						{
							num2 = dataGridViewCell2.RowIndex;
						}
						if (dataGridViewColumn == null || this.Columns.DisplayInOrder(dataGridViewCell2.ColumnIndex, dataGridViewColumn.Index))
						{
							dataGridViewColumn = dataGridViewCell2.OwningColumn;
						}
						if (dataGridViewColumn2 == null || this.Columns.DisplayInOrder(dataGridViewColumn2.Index, dataGridViewCell2.ColumnIndex))
						{
							dataGridViewColumn2 = dataGridViewCell2.OwningColumn;
						}
					}
				}
				foreach (string text in array)
				{
					if (stringBuilder == null)
					{
						stringBuilder = new StringBuilder(1024);
					}
					else
					{
						stringBuilder.Length = 0;
					}
					if (flag)
					{
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn dataGridViewColumn4;
							for (DataGridViewColumn dataGridViewColumn3 = dataGridViewColumn2; dataGridViewColumn3 != null; dataGridViewColumn3 = dataGridViewColumn4)
							{
								if (dataGridViewColumn3 != dataGridViewColumn)
								{
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								}
								else
								{
									dataGridViewColumn4 = null;
								}
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, dataGridViewColumn3 == dataGridViewColumn2, !flag2 && dataGridViewColumn4 == null, true, false, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, false, true, true, false, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, true, false, true, false, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							DataGridViewColumn dataGridViewColumn5;
							for (DataGridViewColumn dataGridViewColumn3 = dataGridViewColumn; dataGridViewColumn3 != null; dataGridViewColumn3 = dataGridViewColumn5)
							{
								if (dataGridViewColumn3 != dataGridViewColumn2)
								{
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								}
								else
								{
									dataGridViewColumn5 = null;
								}
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, !flag2 && dataGridViewColumn3 == dataGridViewColumn, dataGridViewColumn5 == null, true, false, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
					}
					bool flag6 = true;
					int num6 = num;
					while (num6 != -1)
					{
						int num7;
						if (num6 != num2)
						{
							num7 = this.Rows.GetNextRow(num6, DataGridViewElementStates.Visible);
						}
						else
						{
							num7 = -1;
						}
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn dataGridViewColumn4;
							for (DataGridViewColumn dataGridViewColumn3 = dataGridViewColumn2; dataGridViewColumn3 != null; dataGridViewColumn3 = dataGridViewColumn4)
							{
								if (dataGridViewColumn3 != dataGridViewColumn)
								{
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								}
								else
								{
									dataGridViewColumn4 = null;
								}
								string text2 = this.Rows.SharedRow(num6).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num6, dataGridViewColumn3 == dataGridViewColumn2, !flag2 && dataGridViewColumn4 == null, !flag && flag6, num7 == -1, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num6).HeaderCell.GetClipboardContentInternal(num6, false, true, !flag && flag6, num7 == -1, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num6).HeaderCell.GetClipboardContentInternal(num6, true, false, !flag && flag6, num7 == -1, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							DataGridViewColumn dataGridViewColumn5;
							for (DataGridViewColumn dataGridViewColumn3 = dataGridViewColumn; dataGridViewColumn3 != null; dataGridViewColumn3 = dataGridViewColumn5)
							{
								if (dataGridViewColumn3 != dataGridViewColumn2)
								{
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								}
								else
								{
									dataGridViewColumn5 = null;
								}
								string text2 = this.Rows.SharedRow(num6).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num6, !flag2 && dataGridViewColumn3 == dataGridViewColumn, dataGridViewColumn5 == null, !flag && flag6, num7 == -1, text) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						num6 = num7;
						flag6 = false;
					}
					if (string.Equals(text, DataFormats.Html, StringComparison.OrdinalIgnoreCase))
					{
						DataGridView.GetClipboardContentForHtml(stringBuilder);
					}
					dataObject.SetData(text, false, stringBuilder.ToString());
				}
				break;
			}
			case DataGridViewSelectionMode.FullRowSelect:
				if (this.Rows.GetRowCount(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible) == 0)
				{
					return null;
				}
				if (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)
				{
					flag = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Selected) == -1;
					flag2 = true;
				}
				else
				{
					flag2 = (flag = this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText);
				}
				flag &= this.ColumnHeadersVisible;
				flag2 &= this.RowHeadersVisible;
				foreach (string text3 in array)
				{
					if (stringBuilder == null)
					{
						stringBuilder = new StringBuilder(1024);
					}
					else
					{
						stringBuilder.Length = 0;
					}
					if (flag)
					{
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, true, !flag2 && dataGridViewColumn4 == null, true, false, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn4 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn4;
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, false, !flag2 && dataGridViewColumn4 == null, true, false, text3) as string;
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0, true, true, false, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, true, this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0, true, false, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, !flag2, dataGridViewColumn5 == null, true, false, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn5 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn5;
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, false, dataGridViewColumn5 == null, true, false, text3) as string;
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
						}
					}
					bool flag7 = true;
					int num8 = this.Rows.GetFirstRow(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible);
					int num9 = this.Rows.GetNextRow(num8, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible);
					while (num8 != -1)
					{
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = this.Rows.SharedRow(num8).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num8, true, !flag2 && dataGridViewColumn4 == null, !flag && flag7, num9 == -1, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn4 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn4;
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = this.Rows.SharedRow(num8).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num8, false, !flag2 && dataGridViewColumn4 == null, !flag && flag7, num9 == -1, text3) as string;
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num8).HeaderCell.GetClipboardContentInternal(num8, this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 0, true, !flag && flag7, num9 == -1, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num8).HeaderCell.GetClipboardContentInternal(num8, true, dataGridViewColumn3 == null, !flag && flag7, num9 == -1, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = this.Rows.SharedRow(num8).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num8, !flag2, dataGridViewColumn5 == null, !flag && flag7, num9 == -1, text3) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn5 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn5;
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = this.Rows.SharedRow(num8).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num8, false, dataGridViewColumn5 == null, !flag && flag7, num9 == -1, text3) as string;
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
						}
						num8 = num9;
						if (num8 != -1)
						{
							num9 = this.Rows.GetNextRow(num8, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible);
						}
						flag7 = false;
					}
					if (string.Equals(text3, DataFormats.Html, StringComparison.OrdinalIgnoreCase))
					{
						DataGridView.GetClipboardContentForHtml(stringBuilder);
					}
					dataObject.SetData(text3, false, stringBuilder.ToString());
				}
				break;
			case DataGridViewSelectionMode.FullColumnSelect:
			{
				if (this.Columns.GetColumnCount(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible) == 0)
				{
					return null;
				}
				if (this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableWithAutoHeaderText)
				{
					flag = true;
					flag2 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Selected) == null;
				}
				else
				{
					flag2 = (flag = this.clipboardCopyMode == DataGridViewClipboardCopyMode.EnableAlwaysIncludeHeaderText);
				}
				flag &= this.ColumnHeadersVisible;
				flag2 &= this.RowHeadersVisible;
				int num4 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
				foreach (string text4 in array)
				{
					if (stringBuilder == null)
					{
						stringBuilder = new StringBuilder(1024);
					}
					else
					{
						stringBuilder.Length = 0;
					}
					if (flag)
					{
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn lastColumn2 = this.Columns.GetLastColumn(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							DataGridViewColumn dataGridViewColumn3 = lastColumn2;
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, true, !flag2 && dataGridViewColumn4 == null, true, num4 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn4 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn4;
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, false, !flag2 && dataGridViewColumn4 == null, true, num4 == -1, text4) as string;
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, lastColumn2 == null, true, true, num4 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible);
							if (flag2)
							{
								string text2 = this.TopLeftHeaderCell.GetClipboardContentInternal(-1, true, dataGridViewColumn3 == null, true, num4 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, !flag2, dataGridViewColumn5 == null, true, num4 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn5 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn5;
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = dataGridViewColumn3.HeaderCell.GetClipboardContentInternal(-1, false, dataGridViewColumn5 == null, true, num4 == -1, text4) as string;
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
						}
					}
					bool flag8 = true;
					int num10 = num4;
					int num11 = -1;
					if (num10 != -1)
					{
						num11 = this.Rows.GetNextRow(num10, DataGridViewElementStates.Visible);
					}
					while (num10 != -1)
					{
						if (this.RightToLeftInternal)
						{
							DataGridViewColumn lastColumn3 = this.Columns.GetLastColumn(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							DataGridViewColumn dataGridViewColumn3 = lastColumn3;
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = this.Rows.SharedRow(num10).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num10, true, !flag2 && dataGridViewColumn4 == null, !flag && flag8, num11 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn4 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn4;
									dataGridViewColumn4 = this.Columns.GetPreviousColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = this.Rows.SharedRow(num10).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num10, false, !flag2 && dataGridViewColumn4 == null, !flag && flag8, num11 == -1, text4) as string;
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num10).HeaderCell.GetClipboardContentInternal(num10, lastColumn3 == null, true, !flag && flag8, num11 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
						}
						else
						{
							DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Selected | DataGridViewElementStates.Visible);
							if (flag2)
							{
								string text2 = this.Rows.SharedRow(num10).HeaderCell.GetClipboardContentInternal(num10, true, dataGridViewColumn3 == null, !flag && flag8, num11 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
							}
							if (dataGridViewColumn3 != null)
							{
								DataGridViewColumn dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								string text2 = this.Rows.SharedRow(num10).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num10, !flag2, dataGridViewColumn5 == null, !flag && flag8, num11 == -1, text4) as string;
								if (text2 != null)
								{
									stringBuilder.Append(text2);
								}
								while (dataGridViewColumn5 != null)
								{
									dataGridViewColumn3 = dataGridViewColumn5;
									dataGridViewColumn5 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Selected | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
									text2 = this.Rows.SharedRow(num10).Cells[dataGridViewColumn3.Index].GetClipboardContentInternal(num10, false, dataGridViewColumn5 == null, !flag && flag8, num11 == -1, text4) as string;
									if (text2 != null)
									{
										stringBuilder.Append(text2);
									}
								}
							}
						}
						num10 = num11;
						if (num10 != -1)
						{
							num11 = this.Rows.GetNextRow(num10, DataGridViewElementStates.Visible);
						}
						flag8 = false;
					}
					if (string.Equals(text4, DataFormats.Html, StringComparison.OrdinalIgnoreCase))
					{
						DataGridView.GetClipboardContentForHtml(stringBuilder);
					}
					dataObject.SetData(text4, false, stringBuilder.ToString());
				}
				break;
			}
			}
			return dataObject;
		}

		// Token: 0x06002EE8 RID: 12008 RVA: 0x000887D4 File Offset: 0x000877D4
		private static void GetClipboardContentForHtml(StringBuilder sbContent)
		{
			int num = 135 + sbContent.Length;
			int num2 = num + 36;
			string text = string.Format(CultureInfo.InvariantCulture, "Version:1.0\r\nStartHTML:00000097\r\nEndHTML:{0}\r\nStartFragment:00000133\r\nEndFragment:{1}\r\n", new object[]
			{
				num2.ToString("00000000", CultureInfo.InvariantCulture),
				num.ToString("00000000", CultureInfo.InvariantCulture)
			}) + "<HTML>\r\n<BODY>\r\n<!--StartFragment-->";
			sbContent.Insert(0, text);
			sbContent.Append("\r\n<!--EndFragment-->\r\n</BODY>\r\n</HTML>");
		}

		// Token: 0x06002EE9 RID: 12009 RVA: 0x00088852 File Offset: 0x00087852
		public Rectangle GetColumnDisplayRectangle(int columnIndex, bool cutOverflow)
		{
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			return this.GetColumnDisplayRectanglePrivate(columnIndex, cutOverflow);
		}

		// Token: 0x06002EEA RID: 12010 RVA: 0x0008887C File Offset: 0x0008787C
		private Rectangle GetColumnDisplayRectanglePrivate(int columnIndex, bool cutOverflow)
		{
			if (!this.Columns[columnIndex].Displayed)
			{
				return Rectangle.Empty;
			}
			Rectangle data = this.layout.Data;
			bool flag = false;
			int num;
			if (this.RightToLeftInternal)
			{
				num = data.Right;
			}
			else
			{
				num = data.X;
			}
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (dataGridViewColumn != null && !flag && (!this.RightToLeftInternal || num >= data.X) && (this.RightToLeftInternal || num <= data.Right))
			{
				if (dataGridViewColumn.Index == columnIndex)
				{
					flag = true;
				}
				else
				{
					if (this.RightToLeftInternal)
					{
						num -= dataGridViewColumn.Thickness;
					}
					else
					{
						num += dataGridViewColumn.Thickness;
					}
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
			}
			if (!flag && this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
			{
				dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				while (dataGridViewColumn != null && !flag && (!this.RightToLeftInternal || num >= data.X) && (this.RightToLeftInternal || num <= data.Right))
				{
					if (dataGridViewColumn.Index == columnIndex)
					{
						flag = true;
					}
					else
					{
						if (this.RightToLeftInternal)
						{
							num -= dataGridViewColumn.Thickness;
						}
						else
						{
							num += dataGridViewColumn.Thickness;
						}
						if (dataGridViewColumn.Index == this.displayedBandsInfo.FirstDisplayedScrollingCol)
						{
							if (this.RightToLeftInternal)
							{
								num += this.negOffset;
							}
							else
							{
								num -= this.negOffset;
							}
						}
						dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					}
				}
			}
			if (flag)
			{
				int num2 = dataGridViewColumn.Thickness;
				if (dataGridViewColumn.Index == this.displayedBandsInfo.FirstDisplayedScrollingCol)
				{
					num2 -= this.negOffset;
				}
				int num3;
				if (cutOverflow && ((!this.RightToLeftInternal && num + num2 > data.Right) || (this.RightToLeftInternal && num - num2 < data.X)))
				{
					if (this.RightToLeftInternal)
					{
						num3 = num - data.X;
					}
					else
					{
						num3 = data.Right - num;
					}
				}
				else
				{
					num3 = num2;
				}
				Rectangle rectangle;
				if (this.RightToLeftInternal)
				{
					rectangle = new Rectangle(num - num3, data.Y, num3, data.Height);
				}
				else
				{
					rectangle = new Rectangle(num, data.Y, num3, data.Height);
				}
				if (this.layout.ColumnHeadersVisible)
				{
					rectangle.Height += this.layout.ColumnHeaders.Height;
					rectangle.Y -= this.layout.ColumnHeaders.Height;
				}
				return rectangle;
			}
			return Rectangle.Empty;
		}

		// Token: 0x06002EEB RID: 12011 RVA: 0x00088B18 File Offset: 0x00087B18
		private int GetColumnIndexFromX(int x, out int xColumnLeftEdge)
		{
			Rectangle data = this.layout.Data;
			if (!this.RightToLeftInternal && x == data.X - 1)
			{
				x++;
			}
			else if (this.RightToLeftInternal && x == data.Right)
			{
				x--;
			}
			int num;
			if (this.RightToLeftInternal)
			{
				num = data.Right - 1;
			}
			else
			{
				num = data.X;
			}
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (dataGridViewColumn != null && ((!this.RightToLeftInternal && num < data.Right) || (this.RightToLeftInternal && num >= data.X)))
			{
				if (this.RightToLeftInternal)
				{
					num -= dataGridViewColumn.Thickness;
				}
				else
				{
					num += dataGridViewColumn.Thickness;
				}
				if (!this.RightToLeftInternal && num > x)
				{
					xColumnLeftEdge = num - dataGridViewColumn.Thickness;
					return dataGridViewColumn.Index;
				}
				if (this.RightToLeftInternal && num < x)
				{
					xColumnLeftEdge = num + dataGridViewColumn.Thickness;
					return dataGridViewColumn.Index;
				}
				dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			}
			if (this.RightToLeftInternal)
			{
				num += this.negOffset;
			}
			else
			{
				num -= this.negOffset;
			}
			if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
			{
				dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				while (dataGridViewColumn != null && ((!this.RightToLeftInternal && num < data.Right) || (this.RightToLeftInternal && num >= data.X)))
				{
					if (this.RightToLeftInternal)
					{
						num -= dataGridViewColumn.Thickness;
					}
					else
					{
						num += dataGridViewColumn.Thickness;
					}
					if (!this.RightToLeftInternal && num > x)
					{
						xColumnLeftEdge = num - dataGridViewColumn.Thickness;
						return dataGridViewColumn.Index;
					}
					if (this.RightToLeftInternal && num < x)
					{
						xColumnLeftEdge = num + dataGridViewColumn.Thickness;
						return dataGridViewColumn.Index;
					}
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				}
			}
			xColumnLeftEdge = -1;
			return -1;
		}

		// Token: 0x06002EEC RID: 12012 RVA: 0x00088CF9 File Offset: 0x00087CF9
		private static int GetColumnScrollRate(int xOffset)
		{
			if (xOffset <= 10)
			{
				return 480;
			}
			if (xOffset <= 15)
			{
				return 313;
			}
			if (xOffset <= 25)
			{
				return 180;
			}
			if (xOffset <= 35)
			{
				return 123;
			}
			return Math.Max(1, 4000 / xOffset);
		}

		// Token: 0x06002EED RID: 12013 RVA: 0x00088D34 File Offset: 0x00087D34
		internal int GetColumnXFromIndex(int index)
		{
			int num;
			if (this.RightToLeftInternal)
			{
				num = this.layout.Data.Right - 1;
			}
			else
			{
				num = this.layout.Data.X;
			}
			DataGridViewColumn dataGridViewColumn;
			for (dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None))
			{
				if (index == dataGridViewColumn.Index)
				{
					return num;
				}
				if (this.RightToLeftInternal)
				{
					num -= dataGridViewColumn.Thickness;
				}
				else
				{
					num += dataGridViewColumn.Thickness;
				}
			}
			if (this.RightToLeftInternal)
			{
				num += this.negOffset;
			}
			else
			{
				num -= this.negOffset;
			}
			int num2 = num;
			if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
			{
				dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
			}
			else
			{
				dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
			}
			while (dataGridViewColumn != null)
			{
				if (index == dataGridViewColumn.Index)
				{
					return num;
				}
				if (this.RightToLeftInternal)
				{
					num -= dataGridViewColumn.Thickness;
				}
				else
				{
					num += dataGridViewColumn.Thickness;
				}
				dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			}
			num = num2;
			dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
			for (dataGridViewColumn = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); dataGridViewColumn != null; dataGridViewColumn = this.Columns.GetPreviousColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen))
			{
				if (this.RightToLeftInternal)
				{
					num += dataGridViewColumn.Thickness;
				}
				else
				{
					num -= dataGridViewColumn.Thickness;
				}
				if (index == dataGridViewColumn.Index)
				{
					return num;
				}
			}
			return 0;
		}

		// Token: 0x06002EEE RID: 12014 RVA: 0x00088EB0 File Offset: 0x00087EB0
		private int GetNegOffsetFromHorizontalOffset(int horizontalOffset)
		{
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
			while (dataGridViewColumn != null && dataGridViewColumn.Thickness <= horizontalOffset)
			{
				horizontalOffset -= dataGridViewColumn.Thickness;
				dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			}
			return horizontalOffset;
		}

		// Token: 0x06002EEF RID: 12015 RVA: 0x00088EF8 File Offset: 0x00087EF8
		private bool GetOutOfBoundCorrectedHitTestInfo(ref DataGridView.HitTestInfo hti, ref int mouseX, ref int mouseY, out int xOffset, out int yOffset)
		{
			xOffset = (yOffset = 0);
			Rectangle rectangle = this.layout.Data;
			int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
			int rowsHeight2 = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			int num = this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight2);
			int num2 = this.ComputeHeightOfTrailingScrollingRows();
			int num3 = Math.Max(0, this.layout.Data.Width - this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible));
			int num4 = Math.Max(0, this.layout.Data.Height - rowsHeight2 - num2);
			if (this.dataGridViewOper[8])
			{
				if (this.layout.RowHeadersVisible)
				{
					rectangle = Rectangle.Union(rectangle, this.layout.RowHeaders);
				}
				this.DiscardZonesInScrollingArea(ref rectangle, num3, num4, rowsHeight2, false, true);
				if (mouseY >= rectangle.Top && mouseY <= rectangle.Bottom)
				{
					hti = this.HitTest(this.RightToLeftInternal ? (rectangle.Right - 1) : rectangle.Left, mouseY);
					if (this.ptAnchorCell.Y != -1 && (this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None && this.trackRowEdge != -1 && (this.Rows.GetRowState(this.trackRowEdge) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None && hti.row >= 0 && (this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
					{
						int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
						int num5;
						if (hti.col >= 0)
						{
							num5 = hti.col;
						}
						else
						{
							DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
							num5 = ((firstColumn == null) ? (-1) : firstColumn.Index);
						}
						if (num5 >= 0 && firstRow >= 0)
						{
							if (!this.ScrollIntoView(num5, firstRow, false))
							{
								return false;
							}
							hti = this.HitTest(this.RightToLeftInternal ? rectangle.Right : rectangle.Left, mouseY);
						}
					}
					return true;
				}
				if (mouseY < rectangle.Top)
				{
					if (this.ptAnchorCell.Y != -1 && ((this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None || (this.trackRowEdge != -1 && (this.Rows.GetRowState(this.trackRowEdge) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)) && this.verticalOffset != 0)
					{
						yOffset = mouseY - rectangle.Top;
						if (this.RightToLeftInternal)
						{
							mouseX = rectangle.Right - 1;
						}
						else
						{
							mouseX = rectangle.Left + 1;
						}
					}
					else
					{
						hti = this.HitTest(this.RightToLeftInternal ? rectangle.Right : rectangle.Left, mouseY);
					}
				}
				else if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0 && this.verticalOffset + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow) <= rowsHeight - rowsHeight2 - num)
				{
					yOffset = mouseY - rectangle.Bottom;
					if (this.RightToLeftInternal)
					{
						mouseX = rectangle.Right - 1;
					}
					else
					{
						mouseX = rectangle.Left + 1;
					}
				}
				return true;
			}
			else
			{
				if (!this.dataGridViewOper[4])
				{
					if (this.dataGridViewOper[16])
					{
						bool flag = false;
						this.DiscardZonesInScrollingArea(ref rectangle, num3, num4, rowsHeight2, true, true);
						if (mouseY < rectangle.Top)
						{
							if (((this.ptAnchorCell.Y != -1 && (this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None) || (this.ptCurrentCell.Y != -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)) && this.verticalOffset != 0)
							{
								yOffset = mouseY - rectangle.Top;
							}
							else if (mouseY < this.layout.Data.Top)
							{
								mouseY = this.layout.Data.Top + 1;
								flag = true;
							}
						}
						else if (mouseY > rectangle.Bottom)
						{
							if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
							{
								if (this.verticalOffset + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow) <= rowsHeight - rowsHeight2 - num)
								{
									yOffset = mouseY - rectangle.Bottom;
								}
								else
								{
									mouseY = rectangle.Bottom - 1;
									flag = true;
								}
							}
							else
							{
								mouseY = rectangle.Bottom - 1;
								flag = true;
							}
						}
						if ((!this.RightToLeftInternal && mouseX < rectangle.Left) || (this.RightToLeftInternal && mouseX > rectangle.Right))
						{
							if (((this.ptAnchorCell.X != -1 && !this.Columns[this.ptAnchorCell.X].Frozen) || (this.ptCurrentCell.X != -1 && !this.Columns[this.ptCurrentCell.X].Frozen)) && this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0 && (this.negOffset > 0 || this.Columns.GetPreviousColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen) != null))
							{
								if (this.RightToLeftInternal)
								{
									xOffset = rectangle.Right - mouseX;
								}
								else
								{
									xOffset = mouseX - rectangle.Left;
								}
							}
							else if (!this.RightToLeftInternal && mouseX < this.layout.Data.Left)
							{
								mouseX = this.layout.Data.Left + 1;
								flag = true;
							}
							else if (this.RightToLeftInternal && mouseX > this.layout.Data.Right)
							{
								mouseX = this.layout.Data.Right - 1;
								flag = true;
							}
						}
						else if ((!this.RightToLeftInternal && mouseX > rectangle.Right) || (this.RightToLeftInternal && mouseX < rectangle.Left))
						{
							if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0 && (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol == -1 || this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.LastTotallyDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None) != null))
							{
								DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
								int num6 = 0;
								for (DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); dataGridViewColumn != nextColumn; dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
								{
									num6 += dataGridViewColumn.Thickness;
								}
								if (this.HorizontalOffset != num6)
								{
									if (this.RightToLeftInternal)
									{
										xOffset = rectangle.Left - mouseX;
									}
									else
									{
										xOffset = mouseX - rectangle.Right;
									}
								}
								else
								{
									if (this.RightToLeftInternal)
									{
										mouseX = rectangle.Left + 1;
									}
									else
									{
										mouseX = rectangle.Right - 1;
									}
									flag = true;
								}
							}
							else
							{
								if (this.RightToLeftInternal)
								{
									mouseX = rectangle.Left + 1;
								}
								else
								{
									mouseX = rectangle.Right - 1;
								}
								flag = true;
							}
						}
						if (flag)
						{
							hti = this.HitTest(mouseX, mouseY);
						}
					}
					return true;
				}
				if (this.layout.ColumnHeadersVisible)
				{
					rectangle = Rectangle.Union(rectangle, this.layout.ColumnHeaders);
				}
				this.DiscardZonesInScrollingArea(ref rectangle, num3, num4, rowsHeight2, true, false);
				if (mouseX >= rectangle.Left && mouseX <= rectangle.Right)
				{
					hti = this.HitTest(mouseX, rectangle.Top);
					if (this.ptAnchorCell.X != -1 && this.Columns[this.ptAnchorCell.X].Frozen && this.trackColumnEdge != -1 && this.Columns[this.trackColumnEdge].Frozen && hti.col >= 0 && !this.Columns[hti.col].Frozen)
					{
						int index = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen).Index;
						int num7;
						if (hti.row >= 0)
						{
							num7 = hti.row;
						}
						else
						{
							num7 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
						}
						if (num7 >= 0 && index >= 0)
						{
							if (!this.ScrollIntoView(index, num7, false))
							{
								return false;
							}
							hti = this.HitTest(mouseX, rectangle.Top);
						}
					}
					return true;
				}
				if ((!this.RightToLeftInternal && mouseX < rectangle.Left) || (this.RightToLeftInternal && mouseX > rectangle.Right))
				{
					if (this.ptAnchorCell.X != -1 && (!this.Columns[this.ptAnchorCell.X].Frozen || (this.trackColumnEdge != -1 && !this.Columns[this.trackColumnEdge].Frozen)) && this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0 && (this.negOffset > 0 || this.Columns.GetPreviousColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen) != null))
					{
						if (this.RightToLeftInternal)
						{
							xOffset = rectangle.Right - mouseX;
						}
						else
						{
							xOffset = mouseX - rectangle.Left;
						}
						mouseY = rectangle.Top + 1;
					}
					else
					{
						hti = this.HitTest(mouseX, rectangle.Top);
					}
				}
				else if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
				{
					if (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol != -1 && this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.LastTotallyDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None) == null)
					{
						return true;
					}
					DataGridViewColumn nextColumn2 = this.Columns.GetNextColumn(this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					int num8 = 0;
					for (DataGridViewColumn dataGridViewColumn2 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); dataGridViewColumn2 != nextColumn2; dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
					{
						num8 += dataGridViewColumn2.Thickness;
					}
					if (this.HorizontalOffset != num8)
					{
						if (this.RightToLeftInternal)
						{
							xOffset = rectangle.Left - mouseX;
						}
						else
						{
							xOffset = mouseX - rectangle.Right;
						}
						mouseY = rectangle.Top + 1;
					}
				}
				return true;
			}
		}

		// Token: 0x06002EF0 RID: 12016 RVA: 0x00089960 File Offset: 0x00088960
		internal override Size GetPreferredSizeCore(Size proposedConstraints)
		{
			int num = 2 * (this.BorderWidth + this.Padding.Size.Width);
			int num2 = 2 * (this.BorderWidth + this.Padding.Size.Height);
			bool flag = this.scrollBars == ScrollBars.Both || this.scrollBars == ScrollBars.Horizontal;
			bool flag2 = this.scrollBars == ScrollBars.Both || this.scrollBars == ScrollBars.Vertical;
			int num3 = 16 + num;
			if (flag2)
			{
				num3 += this.vertScrollBar.Width;
			}
			if (this.RowHeadersVisible)
			{
				num3 += this.RowHeadersWidth;
			}
			int num4 = Math.Min(num3 + this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible), proposedConstraints.Width);
			if (num4 < num3)
			{
				num4 = num3;
			}
			int num5 = 16 + num2;
			if (flag)
			{
				num5 += this.horizScrollBar.Height;
			}
			if (this.ColumnHeadersVisible)
			{
				num5 += this.ColumnHeadersHeight;
			}
			int num6 = Math.Min(num5 + this.Rows.GetRowsHeight(DataGridViewElementStates.Visible), proposedConstraints.Height);
			if (num6 < num5)
			{
				num6 = num5;
			}
			return new Size(num4, num6);
		}

		// Token: 0x06002EF1 RID: 12017 RVA: 0x00089A8E File Offset: 0x00088A8E
		public Rectangle GetRowDisplayRectangle(int rowIndex, bool cutOverflow)
		{
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			return this.GetRowDisplayRectanglePrivate(rowIndex, cutOverflow);
		}

		// Token: 0x06002EF2 RID: 12018 RVA: 0x00089AB8 File Offset: 0x00088AB8
		private Rectangle GetRowDisplayRectanglePrivate(int rowIndex, bool cutOverflow)
		{
			if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None)
			{
				return Rectangle.Empty;
			}
			Rectangle data = this.layout.Data;
			int num = data.Y;
			bool flag = false;
			int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (num2 != -1 && !flag && num <= data.Bottom)
			{
				if (num2 == rowIndex)
				{
					flag = true;
				}
				else
				{
					num += this.Rows.SharedRow(num2).GetHeight(num2);
					num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				}
			}
			if (!flag && this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
			{
				num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				while (num2 != -1 && !flag && num <= data.Bottom)
				{
					if (num2 == rowIndex)
					{
						flag = true;
					}
					else
					{
						num += this.Rows.SharedRow(num2).GetHeight(num2);
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					}
				}
			}
			if (flag)
			{
				int num3;
				if (cutOverflow && num + this.Rows.SharedRow(num2).GetHeight(num2) > data.Bottom)
				{
					num3 = data.Bottom - num;
				}
				else
				{
					num3 = this.Rows.SharedRow(num2).GetHeight(num2);
				}
				Rectangle rectangle = new Rectangle(data.X, num, data.Width, num3);
				if (this.layout.RowHeadersVisible)
				{
					rectangle.Width += this.layout.RowHeaders.Width;
					if (!this.RightToLeftInternal)
					{
						rectangle.X -= this.layout.RowHeaders.Width;
					}
				}
				return rectangle;
			}
			return Rectangle.Empty;
		}

		// Token: 0x06002EF3 RID: 12019 RVA: 0x00089C54 File Offset: 0x00088C54
		private int GetRowIndexFromY(int y, out int yRowTopEdge)
		{
			Rectangle data = this.layout.Data;
			if (y == data.Y - 1)
			{
				y++;
			}
			int num = data.Y;
			int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (num2 != -1 && num < data.Bottom)
			{
				int num3 = this.Rows.SharedRow(num2).GetHeight(num2);
				num += num3;
				if (num > y)
				{
					yRowTopEdge = num - num3;
					return num2;
				}
				num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			}
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
			{
				num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				while (num2 != -1 && num < data.Bottom)
				{
					int num3 = this.Rows.SharedRow(num2).GetHeight(num2);
					num += num3;
					if (num > y)
					{
						yRowTopEdge = num - num3;
						return num2;
					}
					num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
				}
			}
			yRowTopEdge = -1;
			return -1;
		}

		// Token: 0x06002EF4 RID: 12020 RVA: 0x00089D34 File Offset: 0x00088D34
		private static int GetRowScrollRate(int yOffset)
		{
			if (yOffset <= 10)
			{
				return 90;
			}
			if (yOffset <= 15)
			{
				return 57;
			}
			if (yOffset <= 25)
			{
				return 30;
			}
			if (yOffset <= 35)
			{
				return 18;
			}
			return Math.Max(1, 600 / yOffset);
		}

		// Token: 0x06002EF5 RID: 12021 RVA: 0x00089D64 File Offset: 0x00088D64
		internal int GetRowYFromIndex(int index)
		{
			int num = this.layout.Data.Y;
			int num2;
			for (num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible); num2 != -1; num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible))
			{
				if (index == num2)
				{
					return num;
				}
				num += this.Rows.SharedRow(num2).GetHeight(num2);
			}
			int num3 = num;
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0)
			{
				if (index >= this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				}
				else
				{
					num2 = -1;
				}
			}
			else
			{
				num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
			}
			if (num2 != -1)
			{
				while (num2 != -1)
				{
					if (index == num2)
					{
						return num;
					}
					num += this.Rows.SharedRow(num2).GetHeight(num2);
					num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
				}
			}
			num = num3;
			for (num2 = this.Rows.GetPreviousRow(this.displayedBandsInfo.FirstDisplayedScrollingRow, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); num2 != -1; num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen))
			{
				num -= this.Rows.SharedRow(num2).GetHeight(num2);
				if (index == num2)
				{
					return num;
				}
			}
			return 0;
		}

		// Token: 0x06002EF6 RID: 12022 RVA: 0x00089E84 File Offset: 0x00088E84
		private bool GetTabKeyEffective(bool shift, bool ctrl)
		{
			if (this.StandardTab)
			{
				return ctrl && (shift || (this.VisibleCellExists && !this.CurrentCellIsLastVisibleCell)) && (!shift || (this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell));
			}
			return !ctrl && (shift || (this.VisibleCellExists && !this.CurrentCellIsLastVisibleCell)) && (!shift || (this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell));
		}

		// Token: 0x06002EF7 RID: 12023 RVA: 0x00089F00 File Offset: 0x00088F00
		public DataGridView.HitTestInfo HitTest(int x, int y)
		{
			DataGridView.HitTestInfo hitTestInfo = new DataGridView.HitTestInfo();
			if (!this.layout.Inside.Contains(x, y))
			{
				return hitTestInfo;
			}
			if (this.horizScrollBar != null && this.horizScrollBar.Visible && this.horizScrollBar.Bounds.Contains(x, y))
			{
				hitTestInfo.type = DataGridViewHitTestType.HorizontalScrollBar;
				return hitTestInfo;
			}
			if (this.vertScrollBar != null && this.vertScrollBar.Visible && this.vertScrollBar.Bounds.Contains(x, y))
			{
				hitTestInfo.type = DataGridViewHitTestType.VerticalScrollBar;
				return hitTestInfo;
			}
			if (this.layout.TopLeftHeader.Contains(x, y))
			{
				hitTestInfo.type = DataGridViewHitTestType.TopLeftHeader;
				hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeader;
				if (this.RightToLeftInternal)
				{
					hitTestInfo.colStart = this.layout.TopLeftHeader.Right - 1;
				}
				else
				{
					hitTestInfo.colStart = this.layout.TopLeftHeader.Left;
				}
				hitTestInfo.rowStart = this.layout.TopLeftHeader.Top;
				if ((!this.RightToLeftInternal && this.layout.TopLeftHeader.Right - x < 6) || (this.RightToLeftInternal && x - this.layout.TopLeftHeader.Left < 6))
				{
					if (this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft;
						if (this.RightToLeftInternal)
						{
							hitTestInfo.mouseBarOffset = this.layout.TopLeftHeader.Left - x - 1;
						}
						else
						{
							hitTestInfo.mouseBarOffset = this.layout.TopLeftHeader.Right - x - 1;
						}
					}
				}
				else if (this.layout.TopLeftHeader.Top + this.layout.TopLeftHeader.Height - y < 5 && this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing)
				{
					hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop;
					hitTestInfo.mouseBarOffset = this.layout.TopLeftHeader.Top + this.layout.TopLeftHeader.Height - y - 1;
				}
				return hitTestInfo;
			}
			if (this.layout.ColumnHeaders.Contains(x, y))
			{
				int num;
				hitTestInfo.col = this.GetColumnIndexFromX(x, out num);
				if (hitTestInfo.col < 0)
				{
					return DataGridView.HitTestInfo.Nowhere;
				}
				hitTestInfo.type = DataGridViewHitTestType.ColumnHeader;
				hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader;
				hitTestInfo.rowStart = this.layout.ColumnHeaders.Top;
				hitTestInfo.colStart = num;
				int thickness = this.Columns[hitTestInfo.col].Thickness;
				if ((!this.RightToLeftInternal && num + thickness - x < 6) || (this.RightToLeftInternal && x - num + thickness < 6))
				{
					if (this.RightToLeftInternal)
					{
						hitTestInfo.mouseBarOffset = num - thickness - x + 1;
					}
					else
					{
						hitTestInfo.mouseBarOffset = num + thickness - x - 1;
					}
					DataGridViewColumn dataGridViewColumn = this.Columns[hitTestInfo.col];
					if (dataGridViewColumn.Resizable == DataGridViewTriState.True && (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight;
					}
					else
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight;
					}
				}
				else if ((!this.RightToLeftInternal && x - num < 6) || (this.RightToLeftInternal && num - x < 6))
				{
					DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[hitTestInfo.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					if (previousColumn != null)
					{
						hitTestInfo.adjacentCol = previousColumn.Index;
						if (this.RightToLeftInternal)
						{
							hitTestInfo.mouseBarOffset = num - x + 1;
						}
						else
						{
							hitTestInfo.mouseBarOffset = num - x - 1;
						}
						if (previousColumn.Resizable == DataGridViewTriState.True && (previousColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || previousColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft;
						}
						else
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft;
						}
					}
					else if (this.RowHeadersVisible && this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight;
						if (this.RightToLeftInternal)
						{
							hitTestInfo.mouseBarOffset = num - x;
						}
						else
						{
							hitTestInfo.mouseBarOffset = num - x - 1;
						}
					}
					else
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft;
					}
				}
				else if (this.layout.ColumnHeaders.Bottom - y < 5 && this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing)
				{
					hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom;
					hitTestInfo.mouseBarOffset = this.layout.ColumnHeaders.Bottom - y - 1;
				}
			}
			if (this.layout.RowHeaders.Contains(x, y))
			{
				int num2;
				hitTestInfo.row = this.GetRowIndexFromY(y, out num2);
				if (hitTestInfo.row < 0)
				{
					return DataGridView.HitTestInfo.Nowhere;
				}
				hitTestInfo.type = DataGridViewHitTestType.RowHeader;
				hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowHeader;
				hitTestInfo.rowStart = num2;
				if (this.RightToLeftInternal)
				{
					hitTestInfo.colStart = this.layout.RowHeaders.Right - 1;
				}
				else
				{
					hitTestInfo.colStart = this.layout.RowHeaders.Left;
				}
				int height = this.Rows.SharedRow(hitTestInfo.row).GetHeight(hitTestInfo.row);
				if (num2 + height - y < 5)
				{
					if (this.RowIsResizable(hitTestInfo.row) && this.AutoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom;
						hitTestInfo.mouseBarOffset = num2 + height - y - 1;
					}
				}
				else if (y - num2 < 5)
				{
					int num3 = -1;
					if (hitTestInfo.row != this.displayedBandsInfo.FirstDisplayedScrollingRow || this.displayedBandsInfo.NumDisplayedFrozenRows > 0)
					{
						num3 = this.Rows.GetPreviousRow(hitTestInfo.row, DataGridViewElementStates.Visible);
					}
					if (num3 != -1)
					{
						if (this.RowIsResizable(num3) && this.AutoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowResizeTop;
							hitTestInfo.adjacentRow = num3;
							hitTestInfo.mouseBarOffset = num2 - y - 1;
						}
					}
					else if (this.ColumnHeadersVisible && this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom;
						hitTestInfo.mouseBarOffset = num2 - y - 1;
					}
				}
				else if (((!this.RightToLeftInternal && this.layout.RowHeaders.Right - x < 6) || (this.RightToLeftInternal && x - this.layout.RowHeaders.Left < 6)) && this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing)
				{
					hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeRight;
					if (this.RightToLeftInternal)
					{
						hitTestInfo.mouseBarOffset = this.layout.RowHeaders.Left - x - 1;
					}
					else
					{
						hitTestInfo.mouseBarOffset = this.layout.RowHeaders.Right - x - 1;
					}
				}
			}
			if (this.layout.Data.Contains(x, y))
			{
				int num4;
				hitTestInfo.col = this.GetColumnIndexFromX(x, out num4);
				int num5;
				hitTestInfo.row = this.GetRowIndexFromY(y, out num5);
				if (hitTestInfo.col < 0 || hitTestInfo.row < 0)
				{
					return DataGridView.HitTestInfo.Nowhere;
				}
				hitTestInfo.type = DataGridViewHitTestType.Cell;
				hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.Cell;
				hitTestInfo.rowStart = num5;
				hitTestInfo.colStart = num4;
				if (!this.ColumnHeadersVisible)
				{
					int thickness2 = this.Columns[hitTestInfo.col].Thickness;
					if ((!this.RightToLeftInternal && num4 + thickness2 - x < 6) || (this.RightToLeftInternal && x - num4 + thickness2 < 6))
					{
						if (this.RightToLeftInternal)
						{
							hitTestInfo.mouseBarOffset = num4 - thickness2 - x + 1;
						}
						else
						{
							hitTestInfo.mouseBarOffset = num4 + thickness2 - x - 1;
						}
						DataGridViewColumn dataGridViewColumn2 = this.Columns[hitTestInfo.col];
						if (dataGridViewColumn2.Resizable == DataGridViewTriState.True && (dataGridViewColumn2.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || dataGridViewColumn2.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight;
						}
						return hitTestInfo;
					}
					if ((!this.RightToLeftInternal && x - num4 < 6) || (this.RightToLeftInternal && num4 - x < 6))
					{
						DataGridViewColumn dataGridViewColumn3 = null;
						if (hitTestInfo.col != this.displayedBandsInfo.FirstDisplayedScrollingCol || this.displayedBandsInfo.LastTotallyDisplayedScrollingCol >= 0)
						{
							dataGridViewColumn3 = this.Columns.GetPreviousColumn(this.Columns[hitTestInfo.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						}
						if (dataGridViewColumn3 != null)
						{
							hitTestInfo.adjacentCol = dataGridViewColumn3.Index;
							if (this.RightToLeftInternal)
							{
								hitTestInfo.mouseBarOffset = num4 - x + 1;
							}
							else
							{
								hitTestInfo.mouseBarOffset = num4 - x - 1;
							}
							if (dataGridViewColumn3.Resizable == DataGridViewTriState.True && (dataGridViewColumn3.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || dataGridViewColumn3.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill))
							{
								hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft;
							}
							return hitTestInfo;
						}
						if (this.RowHeadersVisible && this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing)
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeLeft;
							if (this.RightToLeftInternal)
							{
								hitTestInfo.mouseBarOffset = num4 - x;
							}
							else
							{
								hitTestInfo.mouseBarOffset = num4 - x - 1;
							}
							return hitTestInfo;
						}
					}
				}
				else if ((!this.RightToLeftInternal && x - num4 < 6) || (this.RightToLeftInternal && num4 - x < 6))
				{
					DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
					if (hitTestInfo.col == firstColumn.Index && this.RowHeadersVisible && this.RowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeLeft;
						if (this.RightToLeftInternal)
						{
							hitTestInfo.mouseBarOffset = num4 - x;
						}
						else
						{
							hitTestInfo.mouseBarOffset = num4 - x - 1;
						}
						return hitTestInfo;
					}
				}
				if (!this.RowHeadersVisible)
				{
					int height2 = this.Rows.SharedRow(hitTestInfo.row).GetHeight(hitTestInfo.row);
					if (num5 + height2 - y < 5)
					{
						if (this.RowIsResizable(hitTestInfo.row) && this.AutoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom;
							hitTestInfo.mouseBarOffset = num5 + height2 - y - 1;
						}
					}
					else if (y - num5 < 5)
					{
						int num6 = -1;
						if (hitTestInfo.row != this.displayedBandsInfo.FirstDisplayedScrollingRow || this.displayedBandsInfo.NumDisplayedFrozenRows > 0)
						{
							num6 = this.Rows.GetPreviousRow(hitTestInfo.row, DataGridViewElementStates.Visible);
						}
						if (num6 != -1)
						{
							if (this.RowIsResizable(num6) && this.AutoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
							{
								hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.RowResizeTop;
								hitTestInfo.adjacentRow = num6;
								hitTestInfo.mouseBarOffset = num5 - y - 1;
							}
						}
						else if (this.ColumnHeadersVisible && this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing)
						{
							hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop;
							hitTestInfo.mouseBarOffset = num5 - y - 1;
						}
					}
				}
				else if (y - num5 < 5)
				{
					int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					if (hitTestInfo.row == firstRow && this.ColumnHeadersVisible && this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.EnableResizing)
					{
						hitTestInfo.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop;
						hitTestInfo.mouseBarOffset = num5 - y - 1;
					}
				}
			}
			return hitTestInfo;
		}

		// Token: 0x06002EF8 RID: 12024 RVA: 0x0008A924 File Offset: 0x00089924
		private void HorizScrollTimer_Tick(object sender, EventArgs e)
		{
			base.BeginInvoke(new MethodInvoker(this.HorizScrollTimerHandler));
		}

		// Token: 0x06002EF9 RID: 12025 RVA: 0x0008A93C File Offset: 0x0008993C
		private void HorizScrollTimerHandler()
		{
			Point point = base.PointToClient(Control.MousePosition);
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(point.X, point.Y);
			int x = point.X;
			int y = point.Y;
			int num;
			int num2;
			if (this.GetOutOfBoundCorrectedHitTestInfo(ref hitTestInfo, ref x, ref y, out num, out num2))
			{
				if (num != 0)
				{
					int num3 = Math.Abs(num);
					int num4 = num / num3;
					this.ScrollColumns(num4);
					this.horizScrollTimer.Interval = DataGridView.GetColumnScrollRate(num3);
					if (this.dataGridViewOper[4])
					{
						hitTestInfo = this.HitTest(point.X + (this.RightToLeftInternal ? 1 : (-1)) * (num + num4), y);
						if (hitTestInfo.col >= 0)
						{
							this.OnColumnSelectMouseMove(hitTestInfo);
							return;
						}
					}
					else if (this.dataGridViewOper[16])
					{
						if (num2 != 0)
						{
							hitTestInfo = this.HitTest(point.X + (this.RightToLeftInternal ? 1 : (-1)) * (num + num4), point.Y - num2 - num2 / Math.Abs(num2));
						}
						else
						{
							hitTestInfo = this.HitTest(point.X + (this.RightToLeftInternal ? 1 : (-1)) * (num + num4), y);
						}
						if (hitTestInfo.col >= 0 && hitTestInfo.row >= 0)
						{
							this.OnCellSelectMouseMove(hitTestInfo);
							return;
						}
					}
				}
				else
				{
					if (this.dataGridViewOper[4] && hitTestInfo.col >= 0)
					{
						this.OnColumnSelectMouseMove(hitTestInfo);
					}
					else if (this.dataGridViewOper[16] && hitTestInfo.col >= 0 && hitTestInfo.row >= 0)
					{
						this.OnCellSelectMouseMove(hitTestInfo);
					}
					this.HorizScrollTimer.Enabled = false;
				}
			}
		}

		// Token: 0x06002EFA RID: 12026 RVA: 0x0008AADC File Offset: 0x00089ADC
		private bool InitializeEditingCellValue(ref DataGridViewCellStyle dataGridViewCellStyle, ref DataGridViewCell dataGridViewCell)
		{
			DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = null;
			this.uneditedFormattedValue = dataGridViewCell.GetFormattedValue(this.ptCurrentCell.Y, ref dataGridViewCellStyle, DataGridViewDataErrorContexts.Formatting);
			this.dataGridViewState1[512] = true;
			try
			{
				IDataGridViewEditingCell dataGridViewEditingCell = dataGridViewCell as IDataGridViewEditingCell;
				object editingCellFormattedValue = dataGridViewEditingCell.GetEditingCellFormattedValue(DataGridViewDataErrorContexts.Formatting);
				if ((editingCellFormattedValue == null && this.uneditedFormattedValue != null) || (editingCellFormattedValue != null && this.uneditedFormattedValue == null) || (editingCellFormattedValue != null && !this.uneditedFormattedValue.Equals(editingCellFormattedValue)))
				{
					dataGridViewCell = this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X];
					dataGridViewEditingCell = dataGridViewCell as IDataGridViewEditingCell;
					dataGridViewEditingCell.EditingCellFormattedValue = this.uneditedFormattedValue;
					dataGridViewEditingCell.EditingCellValueChanged = false;
				}
			}
			catch (Exception ex)
			{
				if (ClientUtils.IsCriticalException(ex))
				{
					throw;
				}
				dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, this.ptCurrentCell.X, this.ptCurrentCell.Y, DataGridViewDataErrorContexts.InitialValueRestoration);
				this.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
			}
			finally
			{
				this.dataGridViewState1[512] = false;
			}
			if (dataGridViewDataErrorEventArgs == null)
			{
				return true;
			}
			if (dataGridViewDataErrorEventArgs.ThrowException)
			{
				throw dataGridViewDataErrorEventArgs.Exception;
			}
			return !dataGridViewDataErrorEventArgs.Cancel;
		}

		// Token: 0x06002EFB RID: 12027 RVA: 0x0008AC1C File Offset: 0x00089C1C
		private bool InitializeEditingControlValue(ref DataGridViewCellStyle dataGridViewCellStyle, DataGridViewCell dataGridViewCell)
		{
			DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = null;
			object formattedValue = dataGridViewCell.GetFormattedValue(this.ptCurrentCell.Y, ref dataGridViewCellStyle, DataGridViewDataErrorContexts.Formatting);
			this.dataGridViewState1[16384] = true;
			this.dataGridViewState1[512] = true;
			try
			{
				dataGridViewCell.InitializeEditingControl(this.ptCurrentCell.Y, formattedValue, dataGridViewCellStyle);
				((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = false;
			}
			catch (Exception ex)
			{
				if (ClientUtils.IsCriticalException(ex))
				{
					throw;
				}
				dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, this.ptCurrentCell.X, this.ptCurrentCell.Y, DataGridViewDataErrorContexts.InitialValueRestoration);
				this.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
			}
			finally
			{
				this.dataGridViewState1[16384] = false;
				this.dataGridViewState1[512] = false;
			}
			if (dataGridViewDataErrorEventArgs == null)
			{
				this.uneditedFormattedValue = formattedValue;
				return true;
			}
			if (dataGridViewDataErrorEventArgs.ThrowException)
			{
				throw dataGridViewDataErrorEventArgs.Exception;
			}
			return !dataGridViewDataErrorEventArgs.Cancel;
		}

		// Token: 0x06002EFC RID: 12028 RVA: 0x0008AD24 File Offset: 0x00089D24
		public void InvalidateCell(DataGridViewCell dataGridViewCell)
		{
			if (dataGridViewCell == null)
			{
				throw new ArgumentNullException("dataGridViewCell");
			}
			if (dataGridViewCell.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_CellDoesNotBelongToDataGridView"));
			}
			this.InvalidateCellPrivate(dataGridViewCell);
		}

		// Token: 0x06002EFD RID: 12029 RVA: 0x0008AD54 File Offset: 0x00089D54
		private void InvalidateCellPrivate(DataGridViewCell dataGridViewCell)
		{
			this.InvalidateCell(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex);
		}

		// Token: 0x06002EFE RID: 12030 RVA: 0x0008AD68 File Offset: 0x00089D68
		public void InvalidateCell(int columnIndex, int rowIndex)
		{
			if (columnIndex < -1 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (rowIndex < -1 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			this.InvalidateCellPrivate(columnIndex, rowIndex);
		}

		// Token: 0x06002EFF RID: 12031 RVA: 0x0008ADB8 File Offset: 0x00089DB8
		private void InvalidateCellPrivate(int columnIndex, int rowIndex)
		{
			if (base.IsHandleCreated)
			{
				Rectangle cellAdjustedDisplayRectangle = this.GetCellAdjustedDisplayRectangle(columnIndex, rowIndex, true);
				if (!cellAdjustedDisplayRectangle.IsEmpty)
				{
					base.Invalidate(cellAdjustedDisplayRectangle);
				}
			}
		}

		// Token: 0x06002F00 RID: 12032 RVA: 0x0008ADE7 File Offset: 0x00089DE7
		public void InvalidateColumn(int columnIndex)
		{
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			this.InvalidateColumnInternal(columnIndex);
		}

		// Token: 0x06002F01 RID: 12033 RVA: 0x0008AE10 File Offset: 0x00089E10
		internal void InvalidateColumnInternal(int columnIndex)
		{
			if (base.IsHandleCreated)
			{
				Rectangle columnDisplayRectanglePrivate = this.GetColumnDisplayRectanglePrivate(columnIndex, true);
				if (!columnDisplayRectanglePrivate.IsEmpty)
				{
					base.Invalidate(columnDisplayRectanglePrivate);
				}
			}
		}

		// Token: 0x06002F02 RID: 12034 RVA: 0x0008AE3E File Offset: 0x00089E3E
		private void InvalidateData()
		{
			if (base.IsHandleCreated)
			{
				base.Invalidate(this.layout.Data);
			}
		}

		// Token: 0x06002F03 RID: 12035 RVA: 0x0008AE59 File Offset: 0x00089E59
		private void InvalidateInside()
		{
			if (base.IsHandleCreated)
			{
				base.Invalidate(this.layout.Inside);
			}
		}

		// Token: 0x06002F04 RID: 12036 RVA: 0x0008AE74 File Offset: 0x00089E74
		public void InvalidateRow(int rowIndex)
		{
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			this.InvalidateRowPrivate(rowIndex);
		}

		// Token: 0x06002F05 RID: 12037 RVA: 0x0008AE9C File Offset: 0x00089E9C
		private void InvalidateRowPrivate(int rowIndex)
		{
			if (base.IsHandleCreated)
			{
				Rectangle rowDisplayRectanglePrivate = this.GetRowDisplayRectanglePrivate(rowIndex, true);
				if (!rowDisplayRectanglePrivate.IsEmpty)
				{
					base.Invalidate(rowDisplayRectanglePrivate);
				}
			}
		}

		// Token: 0x06002F06 RID: 12038 RVA: 0x0008AECA File Offset: 0x00089ECA
		private void InvalidateRowHeights()
		{
			this.Rows.InvalidateCachedRowsHeights();
			if (base.IsHandleCreated)
			{
				this.PerformLayoutPrivate(false, false, false, false);
				base.Invalidate();
			}
		}

		// Token: 0x06002F07 RID: 12039 RVA: 0x0008AEF0 File Offset: 0x00089EF0
		private void InvalidateRows(int lo, int hi)
		{
			if (this.Rows.GetRowCount(DataGridViewElementStates.Visible) == 0)
			{
				return;
			}
			Rectangle data = this.layout.Data;
			if ((this.Rows.GetRowState(lo) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
			{
				lo = this.Rows.GetNextRow(lo, DataGridViewElementStates.Visible);
			}
			if (lo == -1)
			{
				return;
			}
			if ((this.Rows.GetRowState(hi) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
			{
				hi = this.Rows.GetPreviousRow(hi, DataGridViewElementStates.Visible);
			}
			Rectangle rectangle = this.GetRowDisplayRectangle(lo, true);
			int num;
			if (rectangle.IsEmpty)
			{
				if ((this.Rows.GetRowState(lo) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
				{
					return;
				}
				if (this.displayedBandsInfo.NumDisplayedScrollingRows == 0)
				{
					return;
				}
				if (lo >= this.displayedBandsInfo.FirstDisplayedScrollingRow && this.Rows.GetRowCount(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, lo) >= this.displayedBandsInfo.NumDisplayedScrollingRows)
				{
					return;
				}
				num = this.GetRowDisplayRectangle(this.displayedBandsInfo.FirstDisplayedScrollingRow, true).Top;
			}
			else
			{
				num = rectangle.Top;
			}
			rectangle = this.GetRowDisplayRectangle(hi, true);
			int num2;
			if (rectangle.IsEmpty)
			{
				if ((this.Rows.GetRowState(hi) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.Frozen)
				{
					num2 = data.Bottom;
				}
				else if (hi > this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					num2 = data.Bottom;
				}
				else
				{
					if (this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) == 0)
					{
						return;
					}
					num2 = 0;
					int i = 0;
					while (i < this.displayedBandsInfo.NumDisplayedFrozenRows)
					{
						if ((this.Rows.GetRowState(i) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
						{
							if (i == this.displayedBandsInfo.NumDisplayedFrozenRows - 1)
							{
								num2 = this.GetRowDisplayRectangle(i, true).Bottom;
								break;
							}
							i++;
						}
					}
					if (num2 <= num)
					{
						return;
					}
				}
			}
			else
			{
				num2 = rectangle.Bottom;
			}
			base.Invalidate(new Rectangle(data.X, num, data.Width, num2 - num));
		}

		// Token: 0x06002F08 RID: 12040 RVA: 0x0008B0C8 File Offset: 0x0008A0C8
		private void InvalidateScrollBars()
		{
			if (this.horizScrollBar != null && this.horizScrollBar.Visible)
			{
				this.horizScrollBar.Invalidate();
			}
			if (this.vertScrollBar != null && this.vertScrollBar.Visible)
			{
				this.vertScrollBar.Invalidate();
			}
		}

		// Token: 0x06002F09 RID: 12041 RVA: 0x0008B115 File Offset: 0x0008A115
		private bool IsColumnOutOfBounds(int columnIndex)
		{
			return columnIndex >= this.Columns.Count || columnIndex == -1;
		}

		// Token: 0x06002F0A RID: 12042 RVA: 0x0008B12B File Offset: 0x0008A12B
		private bool IsInnerCellOutOfBounds(int columnIndex, int rowIndex)
		{
			return columnIndex >= this.Columns.Count || rowIndex >= this.Rows.Count || columnIndex == -1 || rowIndex == -1;
		}

		// Token: 0x06002F0B RID: 12043 RVA: 0x0008B153 File Offset: 0x0008A153
		private bool IsRowOutOfBounds(int rowIndex)
		{
			return rowIndex >= this.Rows.Count || rowIndex == -1;
		}

		// Token: 0x06002F0C RID: 12044 RVA: 0x0008B169 File Offset: 0x0008A169
		protected override bool IsInputChar(char charCode)
		{
			return (this.editingControl != null && this.dataGridViewState1[32]) || base.IsInputChar(charCode);
		}

		// Token: 0x06002F0D RID: 12045 RVA: 0x0008B18C File Offset: 0x0008A18C
		protected override bool IsInputKey(Keys keyData)
		{
			if ((keyData & Keys.Alt) == Keys.Alt)
			{
				return false;
			}
			Keys keys = keyData & Keys.KeyCode;
			if (keys <= Keys.D0)
			{
				if (keys == Keys.Tab)
				{
					return this.GetTabKeyEffective((keyData & Keys.Shift) == Keys.Shift, (keyData & Keys.Control) == Keys.Control);
				}
				if (keys == Keys.Return)
				{
					return true;
				}
				switch (keys)
				{
				case Keys.Escape:
					return this.IsEscapeKeyEffective;
				case Keys.IMEConvert:
				case Keys.IMENonconvert:
				case Keys.IMEAccept:
				case Keys.IMEModeChange:
				case Keys.Select:
				case Keys.Print:
				case Keys.Execute:
				case Keys.Snapshot:
				case Keys.Help:
					goto IL_0133;
				case Keys.Space:
					if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Shift && (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect || this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect) && this.ptCurrentCell.X != -1)
					{
						return true;
					}
					goto IL_0133;
				case Keys.Prior:
				case Keys.Next:
				case Keys.End:
				case Keys.Home:
				case Keys.Left:
				case Keys.Up:
				case Keys.Right:
				case Keys.Down:
				case Keys.Delete:
				case Keys.D0:
					return true;
				case Keys.Insert:
					break;
				default:
					goto IL_0133;
				}
			}
			else
			{
				switch (keys)
				{
				case Keys.A:
					if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Control)
					{
						return true;
					}
					goto IL_0133;
				case Keys.B:
					goto IL_0133;
				case Keys.C:
					break;
				default:
					if (keys != Keys.NumPad0 && keys != Keys.F2)
					{
						goto IL_0133;
					}
					return true;
				}
			}
			if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Control)
			{
				return true;
			}
			IL_0133:
			return base.IsInputKey(keyData);
		}

		// Token: 0x06002F0E RID: 12046 RVA: 0x0008B2D4 File Offset: 0x0008A2D4
		private void LayoutScrollBars()
		{
			base.SuspendLayout();
			try
			{
				bool flag = (this.scrollBars == ScrollBars.Both || this.scrollBars == ScrollBars.Horizontal) && this.dataGridViewState2[33554432];
				bool flag2 = this.scrollBars == ScrollBars.Both || this.scrollBars == ScrollBars.Vertical;
				bool flag3 = false;
				bool flag4 = false;
				bool flag5 = false;
				bool rightToLeftInternal = this.RightToLeftInternal;
				int columnCount = this.Columns.GetColumnCount(DataGridViewElementStates.Visible);
				int rowCount = this.Rows.GetRowCount(DataGridViewElementStates.Visible);
				int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible);
				int columnsWidth2 = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
				int rowsHeight2 = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				int num = (this.horizScrollBar.Height = SystemInformation.HorizontalScrollBarHeight);
				int num2 = (this.vertScrollBar.Width = SystemInformation.VerticalScrollBarWidth);
				int num3;
				if (flag && columnsWidth > this.layout.Data.Width && columnsWidth2 < this.layout.Data.Width && num <= this.layout.Data.Height)
				{
					int height = this.layout.Data.Height;
					DataGridView.LayoutData layoutData = this.layout;
					layoutData.Data.Height = layoutData.Data.Height - num;
					flag4 = (flag3 = true);
					if (columnsWidth - this.layout.Data.Width <= num2 || this.layout.Data.Width - columnsWidth2 <= num2)
					{
						num3 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
						this.ComputeVisibleRows();
						if (this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != rowCount - this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && rowsHeight - rowsHeight2 != this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight2))
						{
							flag4 = columnsWidth2 < this.layout.Data.Width - num2;
						}
						this.displayedBandsInfo.FirstDisplayedScrollingRow = num3;
					}
					if (flag4)
					{
						if (this.layout.RowHeadersVisible)
						{
							DataGridView.LayoutData layoutData2 = this.layout;
							layoutData2.RowHeaders.Height = layoutData2.RowHeaders.Height - num;
						}
					}
					else
					{
						this.layout.Data.Height = height;
					}
				}
				num3 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				this.ComputeVisibleRows();
				if (flag2 && this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != rowCount - this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && rowsHeight - rowsHeight2 != this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight2) && this.layout.Data.Height > rowsHeight2 && num2 <= this.layout.Data.Width)
				{
					DataGridView.LayoutData layoutData3 = this.layout;
					layoutData3.Data.Width = layoutData3.Data.Width - num2;
					if (rightToLeftInternal)
					{
						DataGridView.LayoutData layoutData4 = this.layout;
						layoutData4.Data.X = layoutData4.Data.X + num2;
					}
					if (this.layout.ColumnHeadersVisible)
					{
						DataGridView.LayoutData layoutData5 = this.layout;
						layoutData5.ColumnHeaders.Width = layoutData5.ColumnHeaders.Width - num2;
						if (rightToLeftInternal)
						{
							DataGridView.LayoutData layoutData6 = this.layout;
							layoutData6.ColumnHeaders.X = layoutData6.ColumnHeaders.X + num2;
						}
					}
					flag5 = true;
				}
				this.displayedBandsInfo.FirstDisplayedScrollingCol = this.ComputeFirstVisibleScrollingColumn();
				this.ComputeVisibleColumns();
				if (flag && flag5 && !flag4 && columnsWidth > this.layout.Data.Width && columnsWidth2 < this.layout.Data.Width && num <= this.layout.Data.Height)
				{
					this.displayedBandsInfo.FirstDisplayedScrollingRow = num3;
					if (this.layout.ColumnHeadersVisible)
					{
						DataGridView.LayoutData layoutData7 = this.layout;
						layoutData7.ColumnHeaders.Width = layoutData7.ColumnHeaders.Width + num2;
						if (rightToLeftInternal)
						{
							DataGridView.LayoutData layoutData8 = this.layout;
							layoutData8.ColumnHeaders.X = layoutData8.ColumnHeaders.X - num2;
						}
					}
					DataGridView.LayoutData layoutData9 = this.layout;
					layoutData9.Data.Width = layoutData9.Data.Width + num2;
					if (rightToLeftInternal)
					{
						DataGridView.LayoutData layoutData10 = this.layout;
						layoutData10.Data.X = layoutData10.Data.X - num2;
					}
					DataGridView.LayoutData layoutData11 = this.layout;
					layoutData11.Data.Height = layoutData11.Data.Height - num;
					flag5 = false;
					this.ComputeVisibleRows();
					if (this.displayedBandsInfo.NumTotallyDisplayedFrozenRows == this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible) && this.displayedBandsInfo.NumTotallyDisplayedScrollingRows != rowCount && rowsHeight - rowsHeight2 != this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight2) && this.layout.Data.Height > rowsHeight2 && num2 <= this.layout.Data.Width)
					{
						DataGridView.LayoutData layoutData12 = this.layout;
						layoutData12.Data.Width = layoutData12.Data.Width - num2;
						if (rightToLeftInternal)
						{
							DataGridView.LayoutData layoutData13 = this.layout;
							layoutData13.Data.X = layoutData13.Data.X + num2;
						}
						if (this.layout.ColumnHeadersVisible)
						{
							DataGridView.LayoutData layoutData14 = this.layout;
							layoutData14.ColumnHeaders.Width = layoutData14.ColumnHeaders.Width - num2;
							if (rightToLeftInternal)
							{
								DataGridView.LayoutData layoutData15 = this.layout;
								layoutData15.ColumnHeaders.X = layoutData15.ColumnHeaders.X + num2;
							}
						}
						flag5 = true;
					}
					flag4 = flag5 || flag3;
				}
				this.layout.ResizeBoxRect = default(Rectangle);
				if (flag5 && flag4)
				{
					this.layout.ResizeBoxRect = new Rectangle(rightToLeftInternal ? (this.layout.Data.X - this.vertScrollBar.Width) : this.layout.Data.Right, this.layout.Data.Bottom, this.vertScrollBar.Width, this.horizScrollBar.Height);
				}
				if (flag4 && columnCount > 0)
				{
					int num4 = columnsWidth - this.layout.Data.Width;
					this.horizScrollBar.Minimum = 0;
					this.horizScrollBar.Maximum = columnsWidth - columnsWidth2;
					this.horizScrollBar.SmallChange = 1;
					this.horizScrollBar.LargeChange = Math.Max(columnsWidth - columnsWidth2 - num4, 0);
					this.horizScrollBar.Enabled = base.Enabled;
					this.horizScrollBar.Bounds = new Rectangle(rightToLeftInternal ? (this.layout.Inside.X + this.layout.ResizeBoxRect.Width) : this.layout.Inside.X, this.layout.Data.Bottom, this.layout.Inside.Width - this.layout.ResizeBoxRect.Width, this.horizScrollBar.Height);
					this.horizScrollBar.Visible = true;
					this.horizScrollBar.Invalidate();
				}
				else
				{
					this.horizScrollBar.Visible = false;
					this.HorizontalOffset = 0;
					this.horizScrollBar.Enabled = false;
					this.horizScrollBar.Minimum = 0;
					this.horizScrollBar.Maximum = 1;
					this.horizScrollBar.SmallChange = 1;
					this.horizScrollBar.LargeChange = 1;
					this.horizScrollBar.Value = 0;
				}
				if (flag5)
				{
					int num5 = this.layout.Data.Y;
					int num6 = this.layout.Data.Height;
					if (this.layout.ColumnHeadersVisible)
					{
						num5 = this.layout.ColumnHeaders.Y;
						num6 += this.layout.ColumnHeaders.Height;
					}
					else if (this.SingleHorizontalBorderAdded)
					{
						num5--;
						num6++;
					}
					this.vertScrollBar.Minimum = 0;
					this.vertScrollBar.Maximum = rowsHeight - rowsHeight2;
					this.vertScrollBar.Value = this.ComputeHeightOfScrolledOffRows();
					this.vertScrollBar.LargeChange = this.layout.Data.Height - rowsHeight2;
					this.vertScrollBar.Bounds = new Rectangle(rightToLeftInternal ? (this.layout.Data.X - this.vertScrollBar.Width) : this.layout.Data.Right, num5, this.vertScrollBar.Width, num6);
					this.vertScrollBar.Enabled = base.Enabled;
					this.vertScrollBar.Visible = true;
					this.vertScrollBar.Invalidate();
					this.verticalOffset = this.vertScrollBar.Value;
				}
				else
				{
					this.vertScrollBar.Visible = false;
					this.verticalOffset = 0;
					this.vertScrollBar.Enabled = false;
					this.vertScrollBar.Minimum = 0;
					this.vertScrollBar.Maximum = 1;
					this.vertScrollBar.LargeChange = 1;
					this.vertScrollBar.Value = 0;
				}
			}
			finally
			{
				base.ResumeLayout(false);
			}
		}

		// Token: 0x06002F0F RID: 12047 RVA: 0x0008BBE4 File Offset: 0x0008ABE4
		private void MakeFirstDisplayedCellCurrentCell(bool includeNewRow)
		{
			Point firstDisplayedCellAddress = this.FirstDisplayedCellAddress;
			if (firstDisplayedCellAddress.X != -1 && (includeNewRow || !this.AllowUserToAddRowsInternal || firstDisplayedCellAddress.Y != this.Rows.Count - 1))
			{
				this.SetAndSelectCurrentCellAddress(firstDisplayedCellAddress.X, firstDisplayedCellAddress.Y, true, false, false, true, false);
			}
		}

		// Token: 0x06002F10 RID: 12048 RVA: 0x0008BC40 File Offset: 0x0008AC40
		private static DataGridViewAutoSizeRowMode MapAutoSizeRowsModeToRowMode(DataGridViewAutoSizeRowsMode autoSizeRowsMode)
		{
			switch (autoSizeRowsMode)
			{
			case DataGridViewAutoSizeRowsMode.AllHeaders:
				return DataGridViewAutoSizeRowMode.RowHeader;
			case DataGridViewAutoSizeRowsMode.AllCellsExceptHeaders:
				return DataGridViewAutoSizeRowMode.AllCellsExceptHeader;
			case DataGridViewAutoSizeRowsMode.AllCells:
				return DataGridViewAutoSizeRowMode.AllCells;
			case DataGridViewAutoSizeRowsMode.DisplayedHeaders:
				return DataGridViewAutoSizeRowMode.RowHeader;
			case DataGridViewAutoSizeRowsMode.DisplayedCellsExceptHeaders:
				return DataGridViewAutoSizeRowMode.AllCellsExceptHeader;
			case DataGridViewAutoSizeRowsMode.DisplayedCells:
				return DataGridViewAutoSizeRowMode.AllCells;
			}
			return DataGridViewAutoSizeRowMode.RowHeader;
		}

		// Token: 0x06002F11 RID: 12049 RVA: 0x0008BC84 File Offset: 0x0008AC84
		private void MoveColumnHeadersOrRowResize(MouseEventArgs e)
		{
			this.lastRowSplitBar = this.currentRowSplitBar;
			this.currentRowSplitBar = e.Y;
			Rectangle rectangle = this.CalcRowResizeFeedbackRect(this.lastRowSplitBar);
			if (this.editingControl != null && !this.dataGridViewState1[4096] && this.editingPanel.Bounds.IntersectsWith(rectangle))
			{
				this.editingPanel.Invalidate();
				this.editingPanel.Update();
				this.editingControl.Invalidate();
				this.editingControl.Update();
			}
			base.Invalidate(rectangle);
			base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
		}

		// Token: 0x06002F12 RID: 12050 RVA: 0x0008BD2C File Offset: 0x0008AD2C
		private void MapDataGridViewColumnToDataBoundField(DataGridViewColumn dataGridViewColumn)
		{
			DataGridView.DataGridViewDataConnection dataGridViewDataConnection = this.DataConnection;
			int num = ((dataGridViewDataConnection == null) ? (-1) : dataGridViewDataConnection.BoundColumnIndex(dataGridViewColumn.DataPropertyName));
			if (num != -1)
			{
				dataGridViewColumn.IsDataBoundInternal = true;
				dataGridViewColumn.BoundColumnIndex = num;
				dataGridViewColumn.BoundColumnConverter = dataGridViewDataConnection.BoundColumnConverter(num);
				dataGridViewColumn.ValueType = dataGridViewDataConnection.BoundColumnValueType(num);
				dataGridViewColumn.ReadOnly = dataGridViewDataConnection.DataFieldIsReadOnly(dataGridViewColumn.BoundColumnIndex) || dataGridViewColumn.ReadOnly;
				this.InvalidateColumnInternal(dataGridViewColumn.Index);
				if (dataGridViewColumn.SortMode != DataGridViewColumnSortMode.NotSortable && !this.dataGridViewOper[1024])
				{
					dataGridViewColumn.HeaderCell.SortGlyphDirection = dataGridViewDataConnection.BoundColumnSortOrder(num);
					if (this.sortedColumn == null && dataGridViewColumn.HeaderCell.SortGlyphDirection != SortOrder.None)
					{
						this.sortedColumn = dataGridViewColumn;
						this.sortOrder = dataGridViewColumn.HeaderCell.SortGlyphDirection;
						return;
					}
				}
			}
			else
			{
				dataGridViewColumn.IsDataBoundInternal = false;
				dataGridViewColumn.BoundColumnIndex = -1;
				dataGridViewColumn.BoundColumnConverter = null;
				this.InvalidateColumnInternal(dataGridViewColumn.Index);
			}
		}

		// Token: 0x06002F13 RID: 12051 RVA: 0x0008BE28 File Offset: 0x0008AE28
		private void MoveColumnRelocation(MouseEventArgs e, DataGridView.HitTestInfo hti)
		{
			this.lastHeaderShadow = e.X;
			this.dataGridViewState2[1024] = this.ColumnRelocationTarget(e, hti, out this.trackColumnEdge);
			base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
		}

		// Token: 0x06002F14 RID: 12052 RVA: 0x0008BE80 File Offset: 0x0008AE80
		private void MoveRowHeadersOrColumnResize(MouseEventArgs e)
		{
			this.lastColSplitBar = this.currentColSplitBar;
			this.currentColSplitBar = e.X;
			Rectangle rectangle = this.CalcColResizeFeedbackRect(this.lastColSplitBar);
			if (this.editingControl != null && !this.dataGridViewState1[4096] && this.editingPanel.Bounds.IntersectsWith(rectangle))
			{
				this.editingPanel.Invalidate();
				this.editingPanel.Update();
				this.editingControl.Invalidate();
				this.editingControl.Update();
			}
			base.Invalidate(rectangle);
			base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar));
		}

		// Token: 0x06002F15 RID: 12053 RVA: 0x0008BF28 File Offset: 0x0008AF28
		public virtual void NotifyCurrentCellDirty(bool dirty)
		{
			if (!this.dataGridViewState1[512])
			{
				this.IsCurrentCellDirtyInternal = dirty;
				if (dirty && this.editingControl != null && ((IDataGridViewEditingControl)this.editingControl).RepositionEditingControlOnValueChange)
				{
					this.PositionEditingControl(true, true, false);
				}
			}
		}

		// Token: 0x06002F16 RID: 12054 RVA: 0x0008BF74 File Offset: 0x0008AF74
		internal void OnAddedColumn(DataGridViewColumn dataGridViewColumn)
		{
			if (dataGridViewColumn.DisplayIndex == -1 || dataGridViewColumn.DisplayIndex >= this.Columns.Count)
			{
				dataGridViewColumn.DisplayIndexInternal = dataGridViewColumn.Index;
			}
			this.CorrectColumnDisplayIndexesAfterInsertion(dataGridViewColumn);
			if (dataGridViewColumn.HasHeaderCell)
			{
				dataGridViewColumn.HeaderCell.DataGridViewInternal = this;
			}
			this.AdjustExpandingRows(dataGridViewColumn.Index, false);
			DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = dataGridViewColumn.InheritedAutoSizeMode;
			bool flag = inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill;
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(dataGridViewColumn.Index, true, flag);
			}
			if (!flag)
			{
				dataGridViewColumn.CachedThickness = dataGridViewColumn.Thickness;
				this.AutoResizeColumnInternal(dataGridViewColumn.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, true);
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(dataGridViewColumn.Index, true, true);
				}
			}
			this.OnColumnAdded(new DataGridViewColumnEventArgs(dataGridViewColumn));
		}

		// Token: 0x06002F17 RID: 12055 RVA: 0x0008C040 File Offset: 0x0008B040
		internal void OnAddedRow_PreNotification(int rowIndex)
		{
			if (this.AllowUserToAddRowsInternal && this.newRowIndex == -1)
			{
				this.newRowIndex = rowIndex;
			}
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None && !this.ReadOnly)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
				foreach (object obj in dataGridViewRow.Cells)
				{
					DataGridViewCell dataGridViewCell = (DataGridViewCell)obj;
					if (!dataGridViewCell.OwningColumn.ReadOnly && this.IsSharedCellReadOnly(dataGridViewCell, rowIndex))
					{
						this.individualReadOnlyCells.Add(dataGridViewCell);
					}
				}
			}
		}

		// Token: 0x06002F18 RID: 12056 RVA: 0x0008C0F8 File Offset: 0x0008B0F8
		internal void OnAddedRow_PostNotification(int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None)
			{
				bool flag = (rowState & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None;
				DataGridViewAutoSizeRowsModeInternal dataGridViewAutoSizeRowsModeInternal = (DataGridViewAutoSizeRowsModeInternal)this.autoSizeRowsMode;
				bool flag2 = false;
				if (dataGridViewAutoSizeRowsModeInternal != DataGridViewAutoSizeRowsModeInternal.None && ((dataGridViewAutoSizeRowsModeInternal & DataGridViewAutoSizeRowsModeInternal.DisplayedRows) == DataGridViewAutoSizeRowsModeInternal.None || flag))
				{
					int height = this.Rows.SharedRow(rowIndex).GetHeight(rowIndex);
					this.Rows.SharedRow(rowIndex).CachedThickness = height;
					this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
					flag2 = true;
				}
				DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = DataGridViewAutoSizeColumnCriteriaInternal.AllRows;
				if (flag)
				{
					dataGridViewAutoSizeColumnCriteriaInternal |= DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows;
				}
				bool flag3;
				if (this.Rows.GetRowCount(DataGridViewElementStates.Visible) > 1)
				{
					flag3 = this.AdjustExpandingColumns(dataGridViewAutoSizeColumnCriteriaInternal, rowIndex);
				}
				else
				{
					flag3 = this.AutoResizeAllVisibleColumnsInternal(dataGridViewAutoSizeColumnCriteriaInternal, true);
				}
				bool flag4 = this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize;
				bool flag5 = this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing;
				if (!flag5 && !flag3)
				{
					flag4 = true;
				}
				if (flag5)
				{
					this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, flag4, true);
				}
				if (!flag4)
				{
					this.AutoResizeColumnHeadersHeight(true, true);
				}
				if (flag2)
				{
					this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
				}
				if (flag5 && !flag4)
				{
					this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, true, true);
				}
			}
		}

		// Token: 0x06002F19 RID: 12057 RVA: 0x0008C22C File Offset: 0x0008B22C
		internal void OnAddedRows_PreNotification(DataGridViewRow[] dataGridViewRows)
		{
			foreach (DataGridViewRow dataGridViewRow in dataGridViewRows)
			{
				this.OnAddedRow_PreNotification(dataGridViewRow.Index);
			}
		}

		// Token: 0x06002F1A RID: 12058 RVA: 0x0008C25C File Offset: 0x0008B25C
		internal void OnAddedRows_PostNotification(DataGridViewRow[] dataGridViewRows)
		{
			foreach (DataGridViewRow dataGridViewRow in dataGridViewRows)
			{
				this.OnAddedRow_PostNotification(dataGridViewRow.Index);
			}
		}

		// Token: 0x06002F1B RID: 12059 RVA: 0x0008C28C File Offset: 0x0008B28C
		internal void OnAddingColumn(DataGridViewColumn dataGridViewColumn)
		{
			if (dataGridViewColumn == null)
			{
				throw new ArgumentNullException("dataGridViewColumn");
			}
			if (dataGridViewColumn.DataGridView != null)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_ColumnAlreadyBelongsToDataGridView"));
			}
			if (!this.InInitialization && dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic && (this.SelectionMode == DataGridViewSelectionMode.FullColumnSelect || this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect))
			{
				throw new InvalidOperationException(SR.GetString("DataGridViewColumn_SortModeAndSelectionModeClash", new object[]
				{
					DataGridViewColumnSortMode.Automatic.ToString(),
					this.SelectionMode.ToString()
				}));
			}
			if (dataGridViewColumn.Visible)
			{
				if (!this.ColumnHeadersVisible && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.ColumnHeader)))
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoSizedColumn"));
				}
				if (dataGridViewColumn.Frozen && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.Fill || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.Fill)))
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoFillColumn"));
				}
				this.dataGridViewState2[67108864] = true;
			}
			float num = this.Columns.GetColumnsFillWeight(DataGridViewElementStates.None) + dataGridViewColumn.FillWeight;
			if (num > 65535f)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_WeightSumCannotExceedLongMaxValue", new object[] { ushort.MaxValue.ToString(CultureInfo.CurrentCulture) }));
			}
			this.CorrectColumnFrozenState(dataGridViewColumn, this.Columns.Count);
			if (this.Rows.Count > 0)
			{
				if (dataGridViewColumn.CellType == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddUntypedColumn"));
				}
				if (dataGridViewColumn.CellTemplate.DefaultNewRowValue != null && this.newRowIndex != -1)
				{
					DataGridViewRow dataGridViewRow = this.Rows[this.newRowIndex];
				}
				int num2 = this.Columns.Count + 1;
				try
				{
					for (int i = 0; i < this.Rows.Count; i++)
					{
						DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(i);
						if (dataGridViewRow2.Cells.Count < num2)
						{
							DataGridViewCell dataGridViewCell = (DataGridViewCell)dataGridViewColumn.CellTemplate.Clone();
							dataGridViewRow2.Cells.AddInternal(dataGridViewCell);
							if (i == this.newRowIndex)
							{
								dataGridViewCell.SetValueInternal(i, dataGridViewCell.DefaultNewRowValue);
							}
							dataGridViewCell.DataGridViewInternal = this;
							dataGridViewCell.OwningRowInternal = dataGridViewRow2;
							dataGridViewCell.OwningColumnInternal = dataGridViewColumn;
						}
					}
				}
				catch
				{
					for (int j = 0; j < this.Rows.Count; j++)
					{
						DataGridViewRow dataGridViewRow3 = this.Rows.SharedRow(j);
						if (dataGridViewRow3.Cells.Count != num2)
						{
							break;
						}
						dataGridViewRow3.Cells.RemoveAtInternal(num2 - 1);
					}
					throw;
				}
			}
		}

		// Token: 0x06002F1C RID: 12060 RVA: 0x0008C53C File Offset: 0x0008B53C
		internal void OnAddingColumns(DataGridViewColumn[] dataGridViewColumns)
		{
			float num = this.Columns.GetColumnsFillWeight(DataGridViewElementStates.None);
			foreach (DataGridViewColumn dataGridViewColumn in dataGridViewColumns)
			{
				if (dataGridViewColumn == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_AtLeastOneColumnIsNull"));
				}
				if (dataGridViewColumn.DataGridView != null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_ColumnAlreadyBelongsToDataGridView"));
				}
				if (this.Rows.Count > 0 && dataGridViewColumn.CellType == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddUntypedColumn"));
				}
				if (!this.InInitialization && dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic && (this.SelectionMode == DataGridViewSelectionMode.FullColumnSelect || this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect))
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewColumn_SortModeAndSelectionModeClash", new object[]
					{
						DataGridViewColumnSortMode.Automatic.ToString(),
						this.SelectionMode.ToString()
					}));
				}
				if (dataGridViewColumn.Visible)
				{
					if (!this.ColumnHeadersVisible && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.ColumnHeader)))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoSizedColumn"));
					}
					if (dataGridViewColumn.Frozen && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.Fill || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.Fill)))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoFillColumn"));
					}
					this.dataGridViewState2[67108864] = true;
				}
				num += dataGridViewColumn.FillWeight;
				if (num > 65535f)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_WeightSumCannotExceedLongMaxValue", new object[] { ushort.MaxValue.ToString(CultureInfo.CurrentCulture) }));
				}
			}
			int num2 = dataGridViewColumns.Length;
			for (int j = 0; j < num2 - 1; j++)
			{
				for (int k = j + 1; k < num2; k++)
				{
					if (dataGridViewColumns[j] == dataGridViewColumns[k])
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddIdenticalColumns"));
					}
				}
			}
			this.CorrectColumnFrozenStates(dataGridViewColumns);
			if (this.Rows.Count > 0)
			{
				foreach (DataGridViewColumn dataGridViewColumn2 in dataGridViewColumns)
				{
					if (dataGridViewColumn2.CellTemplate.DefaultNewRowValue != null && this.newRowIndex != -1)
					{
						DataGridViewRow dataGridViewRow = this.Rows[this.newRowIndex];
						break;
					}
				}
				int count = this.Columns.Count;
				int num3 = 0;
				try
				{
					foreach (DataGridViewColumn dataGridViewColumn3 in dataGridViewColumns)
					{
						num3++;
						for (int n = 0; n < this.Rows.Count; n++)
						{
							DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(n);
							if (dataGridViewRow2.Cells.Count < count + num3)
							{
								DataGridViewCell dataGridViewCell = (DataGridViewCell)dataGridViewColumn3.CellTemplate.Clone();
								dataGridViewRow2.Cells.AddInternal(dataGridViewCell);
								if (n == this.newRowIndex)
								{
									dataGridViewCell.Value = dataGridViewCell.DefaultNewRowValue;
								}
								dataGridViewCell.DataGridViewInternal = this;
								dataGridViewCell.OwningRowInternal = dataGridViewRow2;
								dataGridViewCell.OwningColumnInternal = dataGridViewColumn3;
							}
						}
					}
				}
				catch
				{
					for (int num4 = 0; num4 < this.Rows.Count; num4++)
					{
						DataGridViewRow dataGridViewRow3 = this.Rows.SharedRow(num4);
						while (dataGridViewRow3.Cells.Count > count)
						{
							dataGridViewRow3.Cells.RemoveAtInternal(dataGridViewRow3.Cells.Count - 1);
						}
					}
					throw;
				}
			}
		}

		// Token: 0x06002F1D RID: 12061 RVA: 0x0008C8C0 File Offset: 0x0008B8C0
		internal void OnAddingRow(DataGridViewRow dataGridViewRow, DataGridViewElementStates rowState, bool checkFrozenState)
		{
			if (dataGridViewRow == null)
			{
				throw new ArgumentNullException("dataGridViewRow");
			}
			if (checkFrozenState)
			{
				this.CorrectRowFrozenState(dataGridViewRow, rowState, this.Rows.Count);
			}
			if (this.ReadOnly && dataGridViewRow.DataGridView == null && dataGridViewRow.ReadOnly)
			{
				dataGridViewRow.ReadOnly = false;
			}
			int num = 0;
			foreach (object obj in this.Columns)
			{
				DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
				DataGridViewCell dataGridViewCell = dataGridViewRow.Cells[num];
				if ((this.ReadOnly || dataGridViewColumn.ReadOnly) && dataGridViewCell.StateIncludes(DataGridViewElementStates.ReadOnly))
				{
					dataGridViewCell.ReadOnlyInternal = false;
				}
				num++;
			}
		}

		// Token: 0x06002F1E RID: 12062 RVA: 0x0008C98C File Offset: 0x0008B98C
		internal void OnAddingRows(DataGridViewRow[] dataGridViewRows, bool checkFrozenStates)
		{
			foreach (DataGridViewRow dataGridViewRow in dataGridViewRows)
			{
				if (dataGridViewRow == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_AtLeastOneRowIsNull"));
				}
				if (dataGridViewRow.DataGridView != null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_RowAlreadyBelongsToDataGridView"));
				}
				if (dataGridViewRow.Selected)
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewRowCollection_CannotAddOrInsertSelectedRow"));
				}
				if (dataGridViewRow.Cells.Count > this.Columns.Count)
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewRowCollection_TooManyCells"));
				}
			}
			int num = dataGridViewRows.Length;
			for (int j = 0; j < num - 1; j++)
			{
				for (int k = j + 1; k < num; k++)
				{
					if (dataGridViewRows[j] == dataGridViewRows[k])
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddIdenticalRows"));
					}
				}
			}
			if (checkFrozenStates)
			{
				this.CorrectRowFrozenStates(dataGridViewRows, this.Rows.Count);
			}
			foreach (DataGridViewRow dataGridViewRow2 in dataGridViewRows)
			{
				this.CompleteCellsCollection(dataGridViewRow2);
				this.OnAddingRow(dataGridViewRow2, dataGridViewRow2.State, false);
			}
		}

		// Token: 0x06002F1F RID: 12063 RVA: 0x0008CAA4 File Offset: 0x0008BAA4
		internal void OnAdvancedBorderStyleChanged(DataGridViewAdvancedBorderStyle dgvabs)
		{
			if (!this.dataGridViewOper[65536])
			{
				if (dgvabs == this.advancedCellBorderStyle)
				{
					this.OnCellBorderStyleChanged(EventArgs.Empty);
					return;
				}
				if (dgvabs == this.advancedColumnHeadersBorderStyle)
				{
					this.OnColumnHeadersBorderStyleChanged(EventArgs.Empty);
					return;
				}
				if (dgvabs == this.advancedRowHeadersBorderStyle)
				{
					this.OnRowHeadersBorderStyleChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x06002F20 RID: 12064 RVA: 0x0008CB04 File Offset: 0x0008BB04
		protected virtual void OnAllowUserToAddRowsChanged(EventArgs e)
		{
			this.PushAllowUserToAddRows();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOADDROWSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002F21 RID: 12065 RVA: 0x0008CB54 File Offset: 0x0008BB54
		protected virtual void OnAllowUserToDeleteRowsChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTODELETEROWSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002F22 RID: 12066 RVA: 0x0008CB9C File Offset: 0x0008BB9C
		protected virtual void OnAllowUserToOrderColumnsChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTOORDERCOLUMNSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002F23 RID: 12067 RVA: 0x0008CBE4 File Offset: 0x0008BBE4
		protected virtual void OnAllowUserToResizeColumnsChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZECOLUMNSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002F24 RID: 12068 RVA: 0x0008CC2C File Offset: 0x0008BC2C
		protected virtual void OnAllowUserToResizeRowsChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALLOWUSERTORESIZEROWSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002F25 RID: 12069 RVA: 0x0008CC74 File Offset: 0x0008BC74
		protected virtual void OnAlternatingRowsDefaultCellStyleChanged(EventArgs e)
		{
			DataGridViewCellStyleChangedEventArgs dataGridViewCellStyleChangedEventArgs = e as DataGridViewCellStyleChangedEventArgs;
			if (dataGridViewCellStyleChangedEventArgs != null && !dataGridViewCellStyleChangedEventArgs.ChangeAffectsPreferredSize)
			{
				this.InvalidateData();
			}
			else
			{
				this.OnRowsGlobalAutoSize();
				if (this.editingControl != null)
				{
					this.PositionEditingControl(true, true, false);
				}
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWALTERNATINGROWSDEFAULTCELLSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002F26 RID: 12070 RVA: 0x0008CCF0 File Offset: 0x0008BCF0
		protected virtual void OnAutoGenerateColumnsChanged(EventArgs e)
		{
			if (this.AutoGenerateColumns && this.DataSource != null)
			{
				this.RefreshColumnsAndRows();
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWAUTOGENERATECOLUMNSCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002F27 RID: 12071 RVA: 0x0008CD50 File Offset: 0x0008BD50
		internal void OnAutoSizeColumnModeChanged(DataGridViewColumn dataGridViewColumn, DataGridViewAutoSizeColumnMode previousInheritedMode)
		{
			DataGridViewAutoSizeColumnModeEventArgs dataGridViewAutoSizeColumnModeEventArgs = new DataGridViewAutoSizeColumnModeEventArgs(dataGridViewColumn, previousInheritedMode);
			this.OnAutoSizeColumnModeChanged(dataGridViewAutoSizeColumnModeEventArgs);
		}

		// Token: 0x06002F28 RID: 12072 RVA: 0x0008CD6C File Offset: 0x0008BD6C
		protected virtual void OnAutoSizeColumnModeChanged(DataGridViewAutoSizeColumnModeEventArgs e)
		{
			DataGridViewColumn column = e.Column;
			if (e.Column == null)
			{
				throw new InvalidOperationException(SR.GetString("InvalidNullArgument", new object[] { "e.Column" }));
			}
			DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = column.InheritedAutoSizeMode;
			DataGridViewAutoSizeColumnMode previousMode = e.PreviousMode;
			bool flag = previousMode != DataGridViewAutoSizeColumnMode.Fill && previousMode != DataGridViewAutoSizeColumnMode.None && previousMode != DataGridViewAutoSizeColumnMode.NotSet;
			if (inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill || previousMode == DataGridViewAutoSizeColumnMode.Fill)
			{
				this.dataGridViewState2[67108864] = true;
			}
			bool flag2 = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
			if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None)
			{
				if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill)
				{
					if (!flag)
					{
						column.CachedThickness = column.Thickness;
					}
					this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, flag2);
				}
			}
			else if (column.Thickness != column.CachedThickness && flag)
			{
				column.ThicknessInternal = Math.Max(column.MinimumWidth, column.CachedThickness);
			}
			this.PerformLayoutPrivate(false, true, true, false);
			if (!flag2)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(column.Index, true, true);
				}
				if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None && inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill)
				{
					this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, true);
				}
			}
			DataGridViewAutoSizeColumnModeEventHandler dataGridViewAutoSizeColumnModeEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNMODECHANGED] as DataGridViewAutoSizeColumnModeEventHandler;
			if (dataGridViewAutoSizeColumnModeEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewAutoSizeColumnModeEventHandler(this, e);
			}
		}

		// Token: 0x06002F29 RID: 12073 RVA: 0x0008CED0 File Offset: 0x0008BED0
		protected virtual void OnAutoSizeColumnsModeChanged(DataGridViewAutoSizeColumnsModeEventArgs e)
		{
			DataGridViewAutoSizeColumnMode[] previousModes = e.PreviousModes;
			if (previousModes == null)
			{
				throw new ArgumentNullException("e.PreviousModes");
			}
			if (previousModes.Length != this.Columns.Count)
			{
				throw new ArgumentException(SR.GetString("DataGridView_PreviousModesHasWrongLength"));
			}
			foreach (object obj in this.Columns)
			{
				DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)obj;
				if (dataGridViewColumn.Visible)
				{
					DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = dataGridViewColumn.InheritedAutoSizeMode;
					DataGridViewAutoSizeColumnMode dataGridViewAutoSizeColumnMode = previousModes[dataGridViewColumn.Index];
					bool flag = dataGridViewAutoSizeColumnMode != DataGridViewAutoSizeColumnMode.Fill && dataGridViewAutoSizeColumnMode != DataGridViewAutoSizeColumnMode.None && dataGridViewAutoSizeColumnMode != DataGridViewAutoSizeColumnMode.NotSet;
					if (inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill || dataGridViewAutoSizeColumnMode == DataGridViewAutoSizeColumnMode.Fill)
					{
						this.dataGridViewState2[67108864] = true;
					}
					if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None)
					{
						if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill)
						{
							if (!flag)
							{
								dataGridViewColumn.CachedThickness = dataGridViewColumn.Thickness;
							}
							this.AutoResizeColumnInternal(dataGridViewColumn.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None);
						}
					}
					else if (dataGridViewColumn.Thickness != dataGridViewColumn.CachedThickness && flag)
					{
						dataGridViewColumn.ThicknessInternal = Math.Max(dataGridViewColumn.MinimumWidth, dataGridViewColumn.CachedThickness);
					}
				}
			}
			this.PerformLayoutPrivate(false, true, true, false);
			if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(true, true);
				}
				foreach (object obj2 in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj2;
					DataGridViewAutoSizeColumnMode inheritedAutoSizeMode2 = dataGridViewColumn2.InheritedAutoSizeMode;
					if (inheritedAutoSizeMode2 != DataGridViewAutoSizeColumnMode.None && inheritedAutoSizeMode2 != DataGridViewAutoSizeColumnMode.Fill)
					{
						this.AutoResizeColumnInternal(dataGridViewColumn2.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode2, true);
					}
				}
			}
			DataGridViewAutoSizeColumnsModeEventHandler dataGridViewAutoSizeColumnsModeEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWAUTOSIZECOLUMNSMODECHANGED] as DataGridViewAutoSizeColumnsModeEventHandler;
			if (dataGridViewAutoSizeColumnsModeEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewAutoSizeColumnsModeEventHandler(this, e);
			}
		}

		// Token: 0x06002F2A RID: 12074 RVA: 0x0008D0F0 File Offset: 0x0008C0F0
		protected virtual void OnAutoSizeRowsModeChanged(DataGridViewAutoSizeModeEventArgs e)
		{
			if (this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
			{
				this.RestoreRowsCachedThickness();
			}
			else
			{
				if (!e.PreviousModeAutoSized)
				{
					for (int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num != -1; num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible))
					{
						int height = this.Rows.SharedRow(num).GetHeight(num);
						this.Rows.SharedRow(num).CachedThickness = height;
					}
				}
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
			}
			DataGridViewAutoSizeModeEventHandler dataGridViewAutoSizeModeEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWAUTOSIZEROWSMODECHANGED] as DataGridViewAutoSizeModeEventHandler;
			if (dataGridViewAutoSizeModeEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewAutoSizeModeEventHandler(this, e);
			}
		}

		// Token: 0x06002F2B RID: 12075 RVA: 0x0008D1A8 File Offset: 0x0008C1A8
		protected virtual void OnBackgroundColorChanged(EventArgs e)
		{
			this.InvalidateInside();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWBACKGROUNDCOLORCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002F2C RID: 12076 RVA: 0x0008D1F8 File Offset: 0x0008C1F8
		internal void OnBandContextMenuStripChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnContextMenuStripChanged(dataGridViewColumnEventArgs);
				return;
			}
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowContextMenuStripChanged(dataGridViewRowEventArgs);
		}

		// Token: 0x06002F2D RID: 12077 RVA: 0x0008D234 File Offset: 0x0008C234
		internal void OnBandDefaultCellStyleChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnDefaultCellStyleChanged(dataGridViewColumnEventArgs);
				return;
			}
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowDefaultCellStyleChanged(dataGridViewRowEventArgs);
		}

		// Token: 0x06002F2E RID: 12078 RVA: 0x0008D270 File Offset: 0x0008C270
		internal void OnBandDividerThicknessChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnDividerWidthChanged(dataGridViewColumnEventArgs);
				return;
			}
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowDividerHeightChanged(dataGridViewRowEventArgs);
		}

		// Token: 0x06002F2F RID: 12079 RVA: 0x0008D2AC File Offset: 0x0008C2AC
		internal void OnBandHeaderCellChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnHeaderCellChanged(dataGridViewColumnEventArgs);
				return;
			}
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowHeaderCellChanged(dataGridViewRowEventArgs);
		}

		// Token: 0x06002F30 RID: 12080 RVA: 0x0008D2E8 File Offset: 0x0008C2E8
		internal void OnBandMinimumThicknessChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnMinimumWidthChanged(dataGridViewColumnEventArgs);
				return;
			}
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowMinimumHeightChanged(dataGridViewRowEventArgs);
		}

		// Token: 0x06002F31 RID: 12081 RVA: 0x0008D324 File Offset: 0x0008C324
		internal void OnBandThicknessChanged(DataGridViewBand dataGridViewBand)
		{
			DataGridViewColumn dataGridViewColumn = dataGridViewBand as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
				this.OnColumnWidthChanged(dataGridViewColumnEventArgs);
				return;
			}
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs((DataGridViewRow)dataGridViewBand);
			this.OnRowHeightChanged(dataGridViewRowEventArgs);
		}

		// Token: 0x06002F32 RID: 12082 RVA: 0x0008D35D File Offset: 0x0008C35D
		internal void OnBandThicknessChanging()
		{
			if (this.InAdjustFillingColumns)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAlterAutoFillColumnParameter"));
			}
		}

		// Token: 0x06002F33 RID: 12083 RVA: 0x0008D378 File Offset: 0x0008C378
		protected override void OnBindingContextChanged(EventArgs e)
		{
			if (this.dataGridViewState2[16777216])
			{
				return;
			}
			this.dataGridViewState2[16777216] = true;
			try
			{
				if (this.dataConnection != null)
				{
					this.CurrentCell = null;
					try
					{
						this.dataConnection.SetDataConnection(this.DataSource, this.DataMember);
					}
					catch (ArgumentException)
					{
						if (base.DesignMode)
						{
							this.DataMember = string.Empty;
							this.RefreshColumnsAndRows();
							return;
						}
						throw;
					}
					this.RefreshColumnsAndRows();
					base.OnBindingContextChanged(e);
					if (this.dataConnection.CurrencyManager != null)
					{
						this.OnDataBindingComplete(ListChangedType.Reset);
					}
				}
				else
				{
					base.OnBindingContextChanged(e);
				}
			}
			finally
			{
				this.dataGridViewState2[16777216] = false;
			}
		}

		// Token: 0x06002F34 RID: 12084 RVA: 0x0008D44C File Offset: 0x0008C44C
		protected virtual void OnBorderStyleChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWBORDERSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002F35 RID: 12085 RVA: 0x0008D494 File Offset: 0x0008C494
		protected virtual void OnCancelRowEdit(QuestionEventArgs e)
		{
			QuestionEventHandler questionEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCANCELROWEDIT] as QuestionEventHandler;
			if (questionEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				questionEventHandler(this, e);
				this.CorrectFocus(true);
			}
		}

		// Token: 0x06002F36 RID: 12086 RVA: 0x0008D4E4 File Offset: 0x0008C4E4
		protected virtual void OnCellBeginEdit(DataGridViewCellCancelEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellCancelEventHandler dataGridViewCellCancelEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLBEGINEDIT] as DataGridViewCellCancelEventHandler;
			if (dataGridViewCellCancelEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellCancelEventHandler(this, e);
			}
		}

		// Token: 0x06002F37 RID: 12087 RVA: 0x0008D568 File Offset: 0x0008C568
		protected virtual void OnCellBorderStyleChanged(EventArgs e)
		{
			this.PerformLayoutPrivate(false, false, true, false);
			base.Invalidate();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLBORDERSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002F38 RID: 12088 RVA: 0x0008D5C0 File Offset: 0x0008C5C0
		internal void OnCellClickInternal(DataGridViewCellEventArgs e)
		{
			this.OnCellClick(e);
		}

		// Token: 0x06002F39 RID: 12089 RVA: 0x0008D5CC File Offset: 0x0008C5CC
		protected virtual void OnCellClick(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.ClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnClickInternal(e);
			}
			else
			{
				cellInternal.OnClickInternal(e);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLCLICK] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06002F3A RID: 12090 RVA: 0x0008D6A8 File Offset: 0x0008C6A8
		internal void OnCellCommonChange(int columnIndex, int rowIndex)
		{
			if (columnIndex == -1)
			{
				this.OnRowHeaderGlobalAutoSize(rowIndex);
				return;
			}
			if (rowIndex == -1)
			{
				this.OnColumnHeaderGlobalAutoSize(columnIndex);
				return;
			}
			this.InvalidateCellPrivate(columnIndex, rowIndex);
			bool flag = false;
			if (rowIndex != -1)
			{
				flag = (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None;
			}
			DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)this.Columns[columnIndex].InheritedAutoSizeMode;
			bool flag2 = (inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.AllRows) != DataGridViewAutoSizeColumnCriteriaInternal.NotSet;
			if (flag)
			{
				flag2 |= (inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows) != DataGridViewAutoSizeColumnCriteriaInternal.NotSet;
			}
			bool flag3 = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None;
			if (flag3)
			{
				this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), !flag2, true);
			}
			if (flag2)
			{
				this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, true);
				if (flag3)
				{
					this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
				}
			}
		}

		// Token: 0x06002F3B RID: 12091 RVA: 0x0008D768 File Offset: 0x0008C768
		internal void OnCellContentClickInternal(DataGridViewCellEventArgs e)
		{
			this.OnCellContentClick(e);
		}

		// Token: 0x06002F3C RID: 12092 RVA: 0x0008D774 File Offset: 0x0008C774
		protected virtual void OnCellContentClick(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.ContentClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnContentClickInternal(e);
			}
			else
			{
				cellInternal.OnContentClickInternal(e);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTCLICK] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06002F3D RID: 12093 RVA: 0x0008D850 File Offset: 0x0008C850
		internal void OnCellContentDoubleClickInternal(DataGridViewCellEventArgs e)
		{
			this.OnCellContentDoubleClick(e);
		}

		// Token: 0x06002F3E RID: 12094 RVA: 0x0008D85C File Offset: 0x0008C85C
		protected virtual void OnCellContentDoubleClick(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.ContentDoubleClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnContentDoubleClickInternal(e);
			}
			else
			{
				cellInternal.OnContentDoubleClickInternal(e);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLCONTENTDOUBLECLICK] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06002F3F RID: 12095 RVA: 0x0008D938 File Offset: 0x0008C938
		internal void OnCellContextMenuStripChanged(DataGridViewCell dataGridViewCell)
		{
			DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(dataGridViewCell);
			this.OnCellContextMenuStripChanged(dataGridViewCellEventArgs);
		}

		// Token: 0x06002F40 RID: 12096 RVA: 0x0008D954 File Offset: 0x0008C954
		protected virtual void OnCellContextMenuStripChanged(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPCHANGED] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06002F41 RID: 12097 RVA: 0x0008D9D8 File Offset: 0x0008C9D8
		internal ContextMenuStrip OnCellContextMenuStripNeeded(int columnIndex, int rowIndex, ContextMenuStrip contextMenuStrip)
		{
			DataGridViewCellContextMenuStripNeededEventArgs dataGridViewCellContextMenuStripNeededEventArgs = new DataGridViewCellContextMenuStripNeededEventArgs(columnIndex, rowIndex, contextMenuStrip);
			this.OnCellContextMenuStripNeeded(dataGridViewCellContextMenuStripNeededEventArgs);
			return dataGridViewCellContextMenuStripNeededEventArgs.ContextMenuStrip;
		}

		// Token: 0x06002F42 RID: 12098 RVA: 0x0008D9FC File Offset: 0x0008C9FC
		protected virtual void OnCellContextMenuStripNeeded(DataGridViewCellContextMenuStripNeededEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellContextMenuStripNeededEventHandler dataGridViewCellContextMenuStripNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPNEEDED] as DataGridViewCellContextMenuStripNeededEventHandler;
			if (dataGridViewCellContextMenuStripNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellContextMenuStripNeededEventHandler(this, e);
			}
		}

		// Token: 0x06002F43 RID: 12099 RVA: 0x0008DA80 File Offset: 0x0008CA80
		protected virtual void OnCellDoubleClick(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.DoubleClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnDoubleClickInternal(e);
			}
			else
			{
				cellInternal.OnDoubleClickInternal(e);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLDOUBLECLICK] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06002F44 RID: 12100 RVA: 0x0008DB5C File Offset: 0x0008CB5C
		protected virtual void OnCellEndEdit(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLENDEDIT] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06002F45 RID: 12101 RVA: 0x0008DBE0 File Offset: 0x0008CBE0
		internal void OnCellEnter(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			this.OnCellEnter(new DataGridViewCellEventArgs(columnIndex, rowIndex));
			if (dataGridViewCell != null)
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					dataGridViewCell = null;
					return;
				}
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
			}
		}

		// Token: 0x06002F46 RID: 12102 RVA: 0x0008DC1C File Offset: 0x0008CC1C
		protected virtual void OnCellEnter(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLENTER] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x06002F47 RID: 12103 RVA: 0x0008DCD0 File Offset: 0x0008CCD0
		internal void OnCellErrorTextChanged(DataGridViewCell dataGridViewCell)
		{
			DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(dataGridViewCell);
			this.OnCellErrorTextChanged(dataGridViewCellEventArgs);
		}

		// Token: 0x06002F48 RID: 12104 RVA: 0x0008DCEC File Offset: 0x0008CCEC
		protected virtual void OnCellErrorTextChanged(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			this.UpdateCellErrorText(e.ColumnIndex, e.RowIndex);
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTCHANGED] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06002F49 RID: 12105 RVA: 0x0008DD84 File Offset: 0x0008CD84
		internal string OnCellErrorTextNeeded(int columnIndex, int rowIndex, string errorText)
		{
			DataGridViewCellErrorTextNeededEventArgs dataGridViewCellErrorTextNeededEventArgs = new DataGridViewCellErrorTextNeededEventArgs(columnIndex, rowIndex, errorText);
			this.OnCellErrorTextNeeded(dataGridViewCellErrorTextNeededEventArgs);
			return dataGridViewCellErrorTextNeededEventArgs.ErrorText;
		}

		// Token: 0x06002F4A RID: 12106 RVA: 0x0008DDA8 File Offset: 0x0008CDA8
		protected virtual void OnCellErrorTextNeeded(DataGridViewCellErrorTextNeededEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellErrorTextNeededEventHandler dataGridViewCellErrorTextNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLERRORTEXTNEEDED] as DataGridViewCellErrorTextNeededEventHandler;
			if (dataGridViewCellErrorTextNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellErrorTextNeededEventHandler(this, e);
			}
		}

		// Token: 0x06002F4B RID: 12107 RVA: 0x0008DE2C File Offset: 0x0008CE2C
		internal DataGridViewCellFormattingEventArgs OnCellFormatting(int columnIndex, int rowIndex, object val, Type formattedValueType, DataGridViewCellStyle cellStyle)
		{
			DataGridViewCellFormattingEventArgs dataGridViewCellFormattingEventArgs = new DataGridViewCellFormattingEventArgs(columnIndex, rowIndex, val, formattedValueType, cellStyle);
			this.OnCellFormatting(dataGridViewCellFormattingEventArgs);
			return dataGridViewCellFormattingEventArgs;
		}

		// Token: 0x06002F4C RID: 12108 RVA: 0x0008DE50 File Offset: 0x0008CE50
		protected virtual void OnCellFormatting(DataGridViewCellFormattingEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellFormattingEventHandler dataGridViewCellFormattingEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLFORMATTING] as DataGridViewCellFormattingEventHandler;
			if (dataGridViewCellFormattingEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellFormattingEventHandler(this, e);
			}
		}

		// Token: 0x06002F4D RID: 12109 RVA: 0x0008DED4 File Offset: 0x0008CED4
		internal void OnCellLeave(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			this.OnCellLeave(new DataGridViewCellEventArgs(columnIndex, rowIndex));
			if (dataGridViewCell != null)
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					dataGridViewCell = null;
					return;
				}
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
			}
		}

		// Token: 0x06002F4E RID: 12110 RVA: 0x0008DF10 File Offset: 0x0008CF10
		protected virtual void OnCellLeave(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLLEAVE] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x06002F4F RID: 12111 RVA: 0x0008DFC4 File Offset: 0x0008CFC4
		protected virtual void OnCellMouseClick(DataGridViewCellMouseEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseClickInternal(e);
			}
			else
			{
				cellInternal.OnMouseClickInternal(e);
			}
			this.dataGridViewState2[8388608] = false;
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		// Token: 0x06002F50 RID: 12112 RVA: 0x0008E0B4 File Offset: 0x0008D0B4
		protected virtual void OnCellMouseDoubleClick(DataGridViewCellMouseEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseDoubleClickUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseDoubleClickInternal(e);
			}
			else
			{
				cellInternal.OnMouseDoubleClickInternal(e);
			}
			this.dataGridViewState2[8388608] = true;
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOUBLECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		// Token: 0x06002F51 RID: 12113 RVA: 0x0008E1A4 File Offset: 0x0008D1A4
		protected virtual void OnCellMouseDown(DataGridViewCellMouseEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			Keys modifierKeys = Control.ModifierKeys;
			bool flag = (modifierKeys & Keys.Control) == Keys.Control && (modifierKeys & Keys.Alt) == Keys.None;
			bool flag2 = (modifierKeys & Keys.Shift) == Keys.Shift;
			bool flag3 = (modifierKeys & Keys.Alt) == Keys.Alt;
			Point point = this.ConvertCellToGridCoord(e.ColumnIndex, e.RowIndex, e.X, e.Y);
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(point.X, point.Y);
			if (!this.dataGridViewState2[134217728] && e.Button == MouseButtons.Left)
			{
				switch (hitTestInfo.typeInternal)
				{
				case DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft:
				case DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight:
				case DataGridView.DataGridViewHitTestTypeInternal.RowResizeTop:
				case DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom:
				case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft:
				case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight:
				case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop:
				case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom:
				case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom:
				case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop:
				case DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeRight:
				case DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeLeft:
					this.dataGridViewOper[8388608] = e.Clicks == 1;
					break;
				}
			}
			try
			{
				if (e.RowIndex >= 0 && cellInternal.MouseDownUnsharesRowInternal(e))
				{
					DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
					this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseDownInternal(e);
				}
				else
				{
					cellInternal.OnMouseDownInternal(e);
				}
				DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEDOWN] as DataGridViewCellMouseEventHandler;
				if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellMouseEventHandler(this, e);
				}
				if (!this.dataGridViewState2[134217728] && e.Button == MouseButtons.Left)
				{
					switch (hitTestInfo.typeInternal)
					{
					case DataGridView.DataGridViewHitTestTypeInternal.Cell:
						this.OnCellMouseDown(hitTestInfo, flag2, flag);
						break;
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader:
					case DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft:
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft:
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight:
						if (flag3 && this.AllowUserToOrderColumns && (this.SelectionMode == DataGridViewSelectionMode.FullColumnSelect || this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect))
						{
							this.BeginColumnRelocation(point.X, hitTestInfo.col);
						}
						else
						{
							this.OnColumnHeaderMouseDown(hitTestInfo, flag2, flag);
						}
						break;
					case DataGridView.DataGridViewHitTestTypeInternal.RowHeader:
						this.OnRowHeaderMouseDown(hitTestInfo, flag2, flag);
						break;
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft:
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight:
					{
						int num = ((hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight) ? hitTestInfo.col : hitTestInfo.adjacentCol);
						if (e.Clicks == 1)
						{
							this.BeginColumnResize(point.X, hitTestInfo.mouseBarOffset, num);
						}
						break;
					}
					case DataGridView.DataGridViewHitTestTypeInternal.RowResizeTop:
					case DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom:
					{
						int num2 = ((hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom) ? hitTestInfo.row : hitTestInfo.adjacentRow);
						if (e.Clicks == 1)
						{
							this.BeginRowResize(point.Y, hitTestInfo.mouseBarOffset, num2);
						}
						break;
					}
					case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeader:
						this.OnTopLeftHeaderMouseDown();
						break;
					case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft:
					case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight:
					case DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeRight:
					case DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeLeft:
						if (e.Clicks == 1)
						{
							this.BeginRowHeadersResize(point.X, hitTestInfo.mouseBarOffset);
						}
						break;
					case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop:
					case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom:
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom:
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop:
						if (e.Clicks == 1)
						{
							this.BeginColumnHeadersResize(point.Y, hitTestInfo.mouseBarOffset);
						}
						break;
					}
					if (this.ptCurrentCell.X == -1)
					{
						this.MakeFirstDisplayedCellCurrentCell(true);
					}
				}
			}
			finally
			{
				this.dataGridViewOper[8388608] = false;
			}
		}

		// Token: 0x06002F52 RID: 12114 RVA: 0x0008E570 File Offset: 0x0008D570
		private void OnCellMouseDown(DataGridView.HitTestInfo hti, bool isShiftDown, bool isControlDown)
		{
			if (this.ptCurrentCell.X >= 0 && (this.ptCurrentCell.X != hti.col || this.ptCurrentCell.Y != hti.row))
			{
				Point point = this.ptCurrentCell;
				if (!this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, this.ptCurrentCell.X != hti.col || this.ptCurrentCell.Y != hti.row, this.ptCurrentCell.Y != hti.row))
				{
					return;
				}
				if (this.ptCurrentCell != point)
				{
					isControlDown = (isShiftDown = false);
				}
			}
			if (hti.col >= this.Columns.Count)
			{
				DataGridViewColumn lastColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (this.ptCurrentCell.X != -1 || lastColumn == null)
				{
					return;
				}
				hti.col = lastColumn.Index;
			}
			if (hti.row >= this.Rows.Count)
			{
				int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
				if (this.ptCurrentCell.X != -1 || lastRow == -1)
				{
					return;
				}
				hti.row = lastRow;
			}
			bool flag = true;
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					if (isControlDown && this.IsSharedCellSelected(this.Rows.SharedRow(hti.row).Cells[hti.col], hti.row) && (!isShiftDown || !this.MultiSelect))
					{
						flag = false;
					}
					if (flag)
					{
						if ((!this.MultiSelect || !isControlDown) && (!this.MultiSelect || !isShiftDown))
						{
							this.RemoveIndividuallySelectedCells(hti.col, hti.row);
						}
						if (this.MultiSelect)
						{
							if (this.dataGridViewOper[512])
							{
								this.dataGridViewOper[16] = true;
							}
							if (isShiftDown)
							{
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									break;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, hti.col, this.ptAnchorCell.Y, ref y, hti.row);
							}
							else
							{
								this.SetSelectedCellCore(hti.col, hti.row, true);
							}
						}
						else
						{
							this.SetSelectedCellCore(hti.col, hti.row, true);
						}
					}
					else
					{
						this.SetSelectedCellCore(hti.col, hti.row, false);
					}
					this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
					break;
				case DataGridViewSelectionMode.FullRowSelect:
					if (isControlDown && (this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
					{
						flag = false;
					}
					if (flag)
					{
						bool flag2 = false;
						this.trackRow = hti.row;
						this.trackRowEdge = -1;
						if (this.MultiSelect && isShiftDown && this.ptAnchorCell.Y > -1 && (this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							flag2 = true;
						}
						if (!this.MultiSelect || !isControlDown || isShiftDown)
						{
							int i = 0;
							bool flag3 = false;
							if (this.selectedBandIndexes.Count > 8)
							{
								this.inBulkPaintCount++;
								flag3 = true;
							}
							try
							{
								while (i < this.selectedBandIndexes.Count)
								{
									if (this.selectedBandIndexes[i] != hti.row)
									{
										this.SetSelectedRowCore(this.selectedBandIndexes[i], false);
									}
									else
									{
										i++;
									}
								}
							}
							finally
							{
								if (flag3)
								{
									this.ExitBulkPaint(-1, -1);
								}
							}
						}
						if (this.MultiSelect && this.dataGridViewOper[512])
						{
							this.dataGridViewOper[8] = true;
						}
						if (flag2)
						{
							if (hti.row >= this.ptAnchorCell.Y)
							{
								this.SelectRowRange(this.ptAnchorCell.Y, hti.row, true);
							}
							else
							{
								this.SelectRowRange(hti.row, this.ptAnchorCell.Y, true);
							}
						}
						else if ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(hti.row, true);
						}
					}
					else
					{
						this.SetSelectedRowCore(hti.row, false);
					}
					this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
					break;
				case DataGridViewSelectionMode.FullColumnSelect:
					if (isControlDown && this.Columns[hti.col].Selected)
					{
						flag = false;
					}
					if (flag)
					{
						bool flag4 = false;
						this.trackColumn = hti.col;
						this.trackColumnEdge = -1;
						if (this.MultiSelect && isShiftDown && this.ptAnchorCell.X > -1 && this.Columns[this.ptAnchorCell.X].Selected)
						{
							flag4 = true;
						}
						if (!this.MultiSelect || !isControlDown || isShiftDown)
						{
							int j = 0;
							bool flag5 = false;
							if (this.selectedBandIndexes.Count > 8)
							{
								this.inBulkPaintCount++;
								flag5 = true;
							}
							try
							{
								while (j < this.selectedBandIndexes.Count)
								{
									if (this.selectedBandIndexes[j] != hti.col)
									{
										this.SetSelectedColumnCore(this.selectedBandIndexes[j], false);
									}
									else
									{
										j++;
									}
								}
							}
							finally
							{
								if (flag5)
								{
									this.ExitBulkPaint(-1, -1);
								}
							}
						}
						if (this.MultiSelect && this.dataGridViewOper[512])
						{
							this.dataGridViewOper[4] = true;
						}
						if (flag4)
						{
							if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, hti.col))
							{
								this.SelectColumnRange(this.ptAnchorCell.X, hti.col, true);
							}
							else
							{
								this.SelectColumnRange(hti.col, this.ptAnchorCell.X, true);
							}
						}
						else if (!this.selectedBandIndexes.Contains(hti.col))
						{
							this.SetSelectedColumnCore(hti.col, true);
						}
					}
					else
					{
						this.SetSelectedColumnCore(hti.col, false);
					}
					this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
					break;
				case DataGridViewSelectionMode.RowHeaderSelect:
					if (isControlDown && ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None || this.IsSharedCellSelected(this.Rows.SharedRow(hti.row).Cells[hti.col], hti.row)) && (!isShiftDown || !this.MultiSelect))
					{
						flag = false;
					}
					if (flag)
					{
						if (!this.MultiSelect)
						{
							if (this.selectedBandIndexes.Count > 0)
							{
								this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
							}
							else
							{
								this.RemoveIndividuallySelectedCells();
							}
							this.SetSelectedCellCore(hti.col, hti.row, true);
						}
						else
						{
							if (!isControlDown && !isShiftDown)
							{
								bool flag6 = false;
								if (this.selectedBandIndexes.Count > 8)
								{
									this.inBulkPaintCount++;
									flag6 = true;
								}
								try
								{
									while (this.selectedBandIndexes.Count > 0)
									{
										this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
									}
									this.RemoveIndividuallySelectedCells(hti.col, hti.row);
								}
								finally
								{
									if (flag6)
									{
										this.ExitBulkPaint(-1, -1);
									}
								}
							}
							if (this.dataGridViewOper[512])
							{
								this.dataGridViewOper[16] = true;
							}
							if (isShiftDown)
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									break;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, hti.col, this.ptAnchorCell.Y, ref y2, hti.row);
							}
							else
							{
								this.SetSelectedCellCore(hti.col, hti.row, true);
							}
						}
					}
					else if (!this.MultiSelect)
					{
						if (this.selectedBandIndexes.Count > 0)
						{
							this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
						}
						else
						{
							this.SetSelectedCellCore(hti.col, hti.row, false);
						}
					}
					else
					{
						this.SetSelectedCellCore(hti.col, hti.row, false);
					}
					this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
					break;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if (isControlDown && (this.Columns[hti.col].Selected || this.IsSharedCellSelected(this.Rows.SharedRow(hti.row).Cells[hti.col], hti.row)) && (!isShiftDown || !this.MultiSelect))
					{
						flag = false;
					}
					if (flag)
					{
						if (!this.MultiSelect)
						{
							if (this.selectedBandIndexes.Count > 0)
							{
								this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
							}
							else
							{
								this.RemoveIndividuallySelectedCells();
							}
							this.SetSelectedCellCore(hti.col, hti.row, true);
						}
						else
						{
							if (!isControlDown && !isShiftDown)
							{
								bool flag7 = false;
								if (this.selectedBandIndexes.Count > 8)
								{
									this.inBulkPaintCount++;
									flag7 = true;
								}
								try
								{
									while (this.selectedBandIndexes.Count > 0)
									{
										this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
									}
									this.RemoveIndividuallySelectedCells(hti.col, hti.row);
								}
								finally
								{
									if (flag7)
									{
										this.ExitBulkPaint(-1, -1);
									}
								}
							}
							if (this.dataGridViewOper[512])
							{
								this.dataGridViewOper[16] = true;
							}
							if (isShiftDown)
							{
								int x3 = this.ptCurrentCell.X;
								int y3 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									break;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x3, hti.col, this.ptAnchorCell.Y, ref y3, hti.row);
							}
							else
							{
								this.SetSelectedCellCore(hti.col, hti.row, true);
							}
						}
					}
					else if (!this.MultiSelect)
					{
						if (this.selectedBandIndexes.Count > 0)
						{
							this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
						}
						else
						{
							this.SetSelectedCellCore(hti.col, hti.row, false);
						}
					}
					else
					{
						this.SetSelectedCellCore(hti.col, hti.row, false);
					}
					this.SetCurrentCellAddressCore(hti.col, hti.row, !isShiftDown, false, true);
					break;
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
		}

		// Token: 0x06002F53 RID: 12115 RVA: 0x0008F048 File Offset: 0x0008E048
		protected virtual void OnCellMouseEnter(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			this.ptMouseEnteredCell.X = e.ColumnIndex;
			this.ptMouseEnteredCell.Y = e.RowIndex;
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseEnterUnsharesRowInternal(e.RowIndex))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseEnterInternal(e.RowIndex);
			}
			else
			{
				cellInternal.OnMouseEnterInternal(e.RowIndex);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEENTER] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06002F54 RID: 12116 RVA: 0x0008F158 File Offset: 0x0008E158
		protected virtual void OnCellMouseLeave(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			this.ptMouseEnteredCell.X = -2;
			this.ptMouseEnteredCell.Y = -2;
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseLeaveUnsharesRowInternal(e.RowIndex))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseLeaveInternal(e.RowIndex);
			}
			else
			{
				cellInternal.OnMouseLeaveInternal(e.RowIndex);
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSELEAVE] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06002F55 RID: 12117 RVA: 0x0008F260 File Offset: 0x0008E260
		protected virtual void OnCellMouseMove(DataGridViewCellMouseEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseMoveUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseMoveInternal(e);
			}
			else
			{
				cellInternal.OnMouseMoveInternal(e);
			}
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEMOVE] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
			if (!this.dataGridViewState1[2048] && !this.dataGridViewOper[1] && !this.dataGridViewOper[2] && !this.dataGridViewOper[32] && !this.dataGridViewOper[128] && !this.dataGridViewOper[256] && this.AllowUserToOrderColumns && this.SelectionMode != DataGridViewSelectionMode.FullColumnSelect && this.SelectionMode != DataGridViewSelectionMode.ColumnHeaderSelect && e.Button == MouseButtons.Left && this.ptMouseDownCell.Y == -1 && this.ptMouseDownCell.X >= 0 && this.ptMouseDownCell.X < this.Columns.Count)
			{
				Point point = this.ConvertCellToGridCoord(e.ColumnIndex, e.RowIndex, e.X, e.Y);
				DataGridView.HitTestInfo hitTestInfo = this.HitTest(point.X, point.Y);
				DataGridView.DataGridViewHitTestTypeInternal typeInternal = hitTestInfo.typeInternal;
				if (typeInternal != DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader && typeInternal != DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft)
				{
					switch (typeInternal)
					{
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft:
					case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight:
						break;
					default:
						return;
					}
				}
				if (Math.Abs(this.ptMouseDownGridCoord.X - point.X) >= DataGridView.DragSize.Width || Math.Abs(this.ptMouseDownGridCoord.Y - point.Y) >= DataGridView.DragSize.Height)
				{
					this.BeginColumnRelocation(this.ptMouseDownGridCoord.X, this.ptMouseDownCell.X);
				}
			}
		}

		// Token: 0x06002F56 RID: 12118 RVA: 0x0008F4DC File Offset: 0x0008E4DC
		protected virtual void OnCellMouseUp(DataGridViewCellMouseEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCell cellInternal = this.GetCellInternal(e.ColumnIndex, e.RowIndex);
			if (e.RowIndex >= 0 && cellInternal.MouseUpUnsharesRowInternal(e))
			{
				DataGridViewRow dataGridViewRow = this.Rows[e.RowIndex];
				this.GetCellInternal(e.ColumnIndex, e.RowIndex).OnMouseUpInternal(e);
			}
			else
			{
				cellInternal.OnMouseUpInternal(e);
			}
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLMOUSEUP] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		// Token: 0x06002F57 RID: 12119 RVA: 0x0008F5B8 File Offset: 0x0008E5B8
		protected internal virtual void OnCellPainting(DataGridViewCellPaintingEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellPaintingEventHandler dataGridViewCellPaintingEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLPAINTING] as DataGridViewCellPaintingEventHandler;
			if (dataGridViewCellPaintingEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellPaintingEventHandler(this, e);
			}
		}

		// Token: 0x06002F58 RID: 12120 RVA: 0x0008F63C File Offset: 0x0008E63C
		internal DataGridViewCellParsingEventArgs OnCellParsing(int rowIndex, int columnIndex, object formattedValue, Type valueType, DataGridViewCellStyle cellStyle)
		{
			DataGridViewCellParsingEventArgs dataGridViewCellParsingEventArgs = new DataGridViewCellParsingEventArgs(rowIndex, columnIndex, formattedValue, valueType, cellStyle);
			this.OnCellParsing(dataGridViewCellParsingEventArgs);
			return dataGridViewCellParsingEventArgs;
		}

		// Token: 0x06002F59 RID: 12121 RVA: 0x0008F660 File Offset: 0x0008E660
		protected virtual void OnCellParsing(DataGridViewCellParsingEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellParsingEventHandler dataGridViewCellParsingEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLPARSING] as DataGridViewCellParsingEventHandler;
			if (dataGridViewCellParsingEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellParsingEventHandler(this, e);
			}
		}

		// Token: 0x06002F5A RID: 12122 RVA: 0x0008F6E4 File Offset: 0x0008E6E4
		private void OnCellSelectMouseMove(DataGridView.HitTestInfo hti)
		{
			int x = this.ptCurrentCell.X;
			int y = this.ptCurrentCell.Y;
			if ((hti.col != this.ptCurrentCell.X || hti.row != this.ptCurrentCell.Y) && !this.CommitEditForOperation(hti.col, hti.row, true))
			{
				return;
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.ptAnchorCell.X != -1 && !this.IsInnerCellOutOfBounds(hti.col, hti.row))
				{
					this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, hti.col, this.ptAnchorCell.Y, ref y, hti.row);
					if (hti.col != this.ptCurrentCell.X || hti.row != this.ptCurrentCell.Y)
					{
						this.SetCurrentCellAddressCore(hti.col, hti.row, false, false, false);
					}
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
		}

		// Token: 0x06002F5B RID: 12123 RVA: 0x0008F800 File Offset: 0x0008E800
		protected virtual void OnCellStateChanged(DataGridViewCellStateChangedEventArgs e)
		{
			DataGridViewCell cell = e.Cell;
			if (e.StateChanged == DataGridViewElementStates.Selected && this.inBulkPaintCount == 0)
			{
				this.InvalidateCellPrivate(cell);
			}
			DataGridViewCellStateChangedEventHandler dataGridViewCellStateChangedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLSTATECHANGED] as DataGridViewCellStateChangedEventHandler;
			if (dataGridViewCellStateChangedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellStateChangedEventHandler(this, e);
			}
			if (e.StateChanged == DataGridViewElementStates.ReadOnly && this.ptCurrentCell.X == cell.ColumnIndex && this.ptCurrentCell.Y == cell.RowIndex && cell.RowIndex > -1 && !this.dataGridViewOper[16384])
			{
				base.VerifyImeRestrictedModeChanged();
				if (!cell.ReadOnly && this.ColumnEditable(this.ptCurrentCell.X) && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
				{
					this.BeginEditInternal(true);
				}
			}
		}

		// Token: 0x06002F5C RID: 12124 RVA: 0x0008F904 File Offset: 0x0008E904
		internal void OnCellStyleChanged(DataGridViewCell dataGridViewCell)
		{
			DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(dataGridViewCell);
			this.OnCellStyleChanged(dataGridViewCellEventArgs);
		}

		// Token: 0x06002F5D RID: 12125 RVA: 0x0008F920 File Offset: 0x0008E920
		protected virtual void OnCellStyleChanged(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			this.OnCellCommonChange(e.ColumnIndex, e.RowIndex);
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECHANGED] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06002F5E RID: 12126 RVA: 0x0008F9B8 File Offset: 0x0008E9B8
		internal void OnCellStyleContentChanged(DataGridViewCellStyle dataGridViewCellStyle, DataGridViewCellStyle.DataGridViewCellStylePropertyInternal property)
		{
			switch (property)
			{
			case DataGridViewCellStyle.DataGridViewCellStylePropertyInternal.Font:
				if ((dataGridViewCellStyle.Scope & DataGridViewCellStyleScopes.DataGridView) != DataGridViewCellStyleScopes.None && this.dataGridViewState1[33554432])
				{
					this.dataGridViewState1[33554432] = false;
				}
				if ((dataGridViewCellStyle.Scope & DataGridViewCellStyleScopes.ColumnHeaders) != DataGridViewCellStyleScopes.None && this.dataGridViewState1[67108864])
				{
					this.dataGridViewState1[67108864] = false;
				}
				if ((dataGridViewCellStyle.Scope & DataGridViewCellStyleScopes.RowHeaders) != DataGridViewCellStyleScopes.None && this.dataGridViewState1[134217728])
				{
					this.dataGridViewState1[134217728] = false;
				}
				break;
			case DataGridViewCellStyle.DataGridViewCellStylePropertyInternal.ForeColor:
				if ((dataGridViewCellStyle.Scope & DataGridViewCellStyleScopes.DataGridView) != DataGridViewCellStyleScopes.None && this.dataGridViewState1[1024])
				{
					this.dataGridViewState1[1024] = false;
				}
				break;
			}
			DataGridViewCellStyleContentChangedEventArgs dataGridViewCellStyleContentChangedEventArgs = new DataGridViewCellStyleContentChangedEventArgs(dataGridViewCellStyle, property != DataGridViewCellStyle.DataGridViewCellStylePropertyInternal.Color && property != DataGridViewCellStyle.DataGridViewCellStylePropertyInternal.ForeColor);
			this.OnCellStyleContentChanged(dataGridViewCellStyleContentChangedEventArgs);
		}

		// Token: 0x06002F5F RID: 12127 RVA: 0x0008FAB0 File Offset: 0x0008EAB0
		protected virtual void OnCellStyleContentChanged(DataGridViewCellStyleContentChangedEventArgs e)
		{
			bool flag = false;
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.Cell) == DataGridViewCellStyleScopes.Cell && (e.CellStyleScope & DataGridViewCellStyleScopes.DataGridView) == DataGridViewCellStyleScopes.None)
			{
				if (e.ChangeAffectsPreferredSize)
				{
					flag = true;
					this.OnGlobalAutoSize();
				}
				else
				{
					base.Invalidate();
				}
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.Column) == DataGridViewCellStyleScopes.Column)
			{
				if (e.ChangeAffectsPreferredSize)
				{
					flag = true;
					this.OnColumnsGlobalAutoSize();
				}
				else
				{
					this.InvalidateData();
				}
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.Row) == DataGridViewCellStyleScopes.Row && (e.CellStyleScope & DataGridViewCellStyleScopes.Rows) == DataGridViewCellStyleScopes.None && (e.CellStyleScope & DataGridViewCellStyleScopes.AlternatingRows) == DataGridViewCellStyleScopes.None)
			{
				this.InvalidateData();
				if (e.ChangeAffectsPreferredSize)
				{
					flag = true;
					if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
					{
						this.AdjustShrinkingRows(this.autoSizeRowsMode, false, true);
					}
					this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows, true);
					if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
					{
						this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
					}
				}
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.DataGridView) == DataGridViewCellStyleScopes.DataGridView)
			{
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
				if (e.ChangeAffectsPreferredSize)
				{
					flag = false;
				}
				this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.ColumnHeaders) == DataGridViewCellStyleScopes.ColumnHeaders)
			{
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
				if (e.ChangeAffectsPreferredSize)
				{
					flag = false;
				}
				this.OnColumnHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.RowHeaders) == DataGridViewCellStyleScopes.RowHeaders)
			{
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
				if (e.ChangeAffectsPreferredSize)
				{
					flag = false;
				}
				this.OnRowHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.Rows) == DataGridViewCellStyleScopes.Rows)
			{
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
				if (e.ChangeAffectsPreferredSize)
				{
					flag = false;
				}
				this.OnRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if ((e.CellStyleScope & DataGridViewCellStyleScopes.AlternatingRows) == DataGridViewCellStyleScopes.AlternatingRows)
			{
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = e.ChangeAffectsPreferredSize;
				if (e.ChangeAffectsPreferredSize)
				{
					flag = false;
				}
				this.OnAlternatingRowsDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if (flag && this.editingControl != null)
			{
				this.PositionEditingControl(true, true, false);
			}
			DataGridViewCellStyleContentChangedEventHandler dataGridViewCellStyleContentChangedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLSTYLECONTENTCHANGED] as DataGridViewCellStyleContentChangedEventHandler;
			if (dataGridViewCellStyleContentChangedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellStyleContentChangedEventHandler(this, e);
			}
		}

		// Token: 0x06002F60 RID: 12128 RVA: 0x0008FCD4 File Offset: 0x0008ECD4
		internal void OnCellToolTipTextChanged(DataGridViewCell dataGridViewCell)
		{
			DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(dataGridViewCell);
			this.OnCellToolTipTextChanged(dataGridViewCellEventArgs);
		}

		// Token: 0x06002F61 RID: 12129 RVA: 0x0008FCF0 File Offset: 0x0008ECF0
		protected virtual void OnCellToolTipTextChanged(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTCHANGED] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06002F62 RID: 12130 RVA: 0x0008FD74 File Offset: 0x0008ED74
		internal string OnCellToolTipTextNeeded(int columnIndex, int rowIndex, string toolTipText)
		{
			DataGridViewCellToolTipTextNeededEventArgs dataGridViewCellToolTipTextNeededEventArgs = new DataGridViewCellToolTipTextNeededEventArgs(columnIndex, rowIndex, toolTipText);
			this.OnCellToolTipTextNeeded(dataGridViewCellToolTipTextNeededEventArgs);
			return dataGridViewCellToolTipTextNeededEventArgs.ToolTipText;
		}

		// Token: 0x06002F63 RID: 12131 RVA: 0x0008FD98 File Offset: 0x0008ED98
		protected virtual void OnCellToolTipTextNeeded(DataGridViewCellToolTipTextNeededEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellToolTipTextNeededEventHandler dataGridViewCellToolTipTextNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTNEEDED] as DataGridViewCellToolTipTextNeededEventHandler;
			if (dataGridViewCellToolTipTextNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellToolTipTextNeededEventHandler(this, e);
			}
		}

		// Token: 0x06002F64 RID: 12132 RVA: 0x0008FE1C File Offset: 0x0008EE1C
		internal void OnCellValidated(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			this.OnCellValidated(new DataGridViewCellEventArgs(columnIndex, rowIndex));
			if (dataGridViewCell != null)
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					dataGridViewCell = null;
					return;
				}
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
			}
		}

		// Token: 0x06002F65 RID: 12133 RVA: 0x0008FE58 File Offset: 0x0008EE58
		protected virtual void OnCellValidated(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATED] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x06002F66 RID: 12134 RVA: 0x0008FF14 File Offset: 0x0008EF14
		internal bool OnCellValidating(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex, DataGridViewDataErrorContexts context)
		{
			DataGridViewCell dataGridViewCell2 = ((dataGridViewCell == null) ? this.CurrentCellInternal : dataGridViewCell);
			DataGridViewCellStyle inheritedStyle = dataGridViewCell2.GetInheritedStyle(null, rowIndex, false);
			object valueInternal = dataGridViewCell2.GetValueInternal(rowIndex);
			object editedFormattedValue = dataGridViewCell2.GetEditedFormattedValue(valueInternal, rowIndex, ref inheritedStyle, context);
			DataGridViewCellValidatingEventArgs dataGridViewCellValidatingEventArgs = new DataGridViewCellValidatingEventArgs(columnIndex, rowIndex, editedFormattedValue);
			this.OnCellValidating(dataGridViewCellValidatingEventArgs);
			if (dataGridViewCell != null)
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					dataGridViewCell = null;
				}
				else
				{
					dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
				}
			}
			return dataGridViewCellValidatingEventArgs.Cancel;
		}

		// Token: 0x06002F67 RID: 12135 RVA: 0x0008FF94 File Offset: 0x0008EF94
		protected virtual void OnCellValidating(DataGridViewCellValidatingEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			try
			{
				this.noDimensionChangeCount++;
				this.dataGridViewOper[32768] = true;
				DataGridViewCellValidatingEventHandler dataGridViewCellValidatingEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLVALIDATING] as DataGridViewCellValidatingEventHandler;
				if (dataGridViewCellValidatingEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellValidatingEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
				this.dataGridViewOper[32768] = false;
			}
		}

		// Token: 0x06002F68 RID: 12136 RVA: 0x00090070 File Offset: 0x0008F070
		internal void OnCellValueChangedInternal(DataGridViewCellEventArgs e)
		{
			this.OnCellValueChanged(e);
		}

		// Token: 0x06002F69 RID: 12137 RVA: 0x0009007C File Offset: 0x0008F07C
		protected virtual void OnCellValueChanged(DataGridViewCellEventArgs e)
		{
			if (e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			this.OnCellCommonChange(e.ColumnIndex, e.RowIndex);
			DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLVALUECHANGED] as DataGridViewCellEventHandler;
			if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellEventHandler(this, e);
			}
		}

		// Token: 0x06002F6A RID: 12138 RVA: 0x00090114 File Offset: 0x0008F114
		internal object OnCellValueNeeded(int columnIndex, int rowIndex)
		{
			DataGridViewCellValueEventArgs cellValueEventArgs = this.CellValueEventArgs;
			cellValueEventArgs.SetProperties(columnIndex, rowIndex, null);
			this.OnCellValueNeeded(cellValueEventArgs);
			return cellValueEventArgs.Value;
		}

		// Token: 0x06002F6B RID: 12139 RVA: 0x00090140 File Offset: 0x0008F140
		protected virtual void OnCellValueNeeded(DataGridViewCellValueEventArgs e)
		{
			if (e.ColumnIndex < 0 || e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex < 0 || e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellValueEventHandler dataGridViewCellValueEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLVALUENEEDED] as DataGridViewCellValueEventHandler;
			if (dataGridViewCellValueEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellValueEventHandler(this, e);
			}
		}

		// Token: 0x06002F6C RID: 12140 RVA: 0x000901D8 File Offset: 0x0008F1D8
		internal void OnCellValuePushed(int columnIndex, int rowIndex, object value)
		{
			DataGridViewCellValueEventArgs cellValueEventArgs = this.CellValueEventArgs;
			cellValueEventArgs.SetProperties(columnIndex, rowIndex, value);
			this.OnCellValuePushed(cellValueEventArgs);
		}

		// Token: 0x06002F6D RID: 12141 RVA: 0x000901FC File Offset: 0x0008F1FC
		protected virtual void OnCellValuePushed(DataGridViewCellValueEventArgs e)
		{
			if (e.ColumnIndex < 0 || e.ColumnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("e.ColumnIndex");
			}
			if (e.RowIndex < 0 || e.RowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("e.RowIndex");
			}
			DataGridViewCellValueEventHandler dataGridViewCellValueEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCELLVALUEPUSHED] as DataGridViewCellValueEventHandler;
			if (dataGridViewCellValueEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellValueEventHandler(this, e);
			}
		}

		// Token: 0x06002F6E RID: 12142 RVA: 0x00090294 File Offset: 0x0008F294
		internal void OnClearedRows()
		{
			foreach (object obj in this.lstRows)
			{
				DataGridViewRow dataGridViewRow = (DataGridViewRow)obj;
				if (dataGridViewRow.Displayed)
				{
					dataGridViewRow.DisplayedInternal = false;
					DataGridViewRowStateChangedEventArgs dataGridViewRowStateChangedEventArgs = new DataGridViewRowStateChangedEventArgs(dataGridViewRow, DataGridViewElementStates.Displayed);
					this.OnRowStateChanged(-1, dataGridViewRowStateChangedEventArgs);
				}
			}
			this.lstRows.Clear();
		}

		// Token: 0x06002F6F RID: 12143 RVA: 0x00090310 File Offset: 0x0008F310
		internal void OnClearingColumns()
		{
			this.CurrentCell = null;
			this.Rows.ClearInternal(false);
			this.sortedColumn = null;
			this.sortOrder = SortOrder.None;
		}

		// Token: 0x06002F70 RID: 12144 RVA: 0x00090334 File Offset: 0x0008F334
		internal void OnClearingRows()
		{
			this.lstRows.Clear();
			int num = this.displayedBandsInfo.NumDisplayedFrozenRows + this.displayedBandsInfo.NumDisplayedScrollingRows;
			if (num > 0)
			{
				this.lstRows.Capacity = num;
				int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Displayed);
				while (num > 0 && num2 != -1)
				{
					this.lstRows.Add(this.Rows[num2]);
					num--;
					if (num > 0)
					{
						num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Displayed);
					}
				}
			}
			this.CurrentCell = null;
			this.newRowIndex = -1;
			this.dataGridViewState2[262144] = this.selectedBandIndexes.Count > 0 || this.individualSelectedCells.Count > 0;
			this.selectedBandIndexes.Clear();
			if (this.selectedBandSnapshotIndexes != null)
			{
				this.selectedBandSnapshotIndexes.Clear();
			}
			this.individualSelectedCells.Clear();
			this.individualReadOnlyCells.Clear();
		}

		// Token: 0x06002F71 RID: 12145 RVA: 0x0009042C File Offset: 0x0008F42C
		protected virtual void OnColumnAdded(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNADDED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06002F72 RID: 12146 RVA: 0x00090494 File Offset: 0x0008F494
		internal void OnColumnCollectionChanged_PreNotification(CollectionChangeEventArgs ccea)
		{
			if (this.DataSource != null && !this.dataGridViewOper[1024])
			{
				if (ccea.Action == CollectionChangeAction.Add)
				{
					DataGridViewColumn dataGridViewColumn = (DataGridViewColumn)ccea.Element;
					if (dataGridViewColumn.DataPropertyName.Length != 0)
					{
						this.MapDataGridViewColumnToDataBoundField(dataGridViewColumn);
					}
				}
				else if (ccea.Action == CollectionChangeAction.Refresh)
				{
					for (int i = 0; i < this.Columns.Count; i++)
					{
						if (this.Columns[i].DataPropertyName.Length != 0)
						{
							this.MapDataGridViewColumnToDataBoundField(this.Columns[i]);
						}
					}
				}
			}
			this.ResetUIState(false, false);
		}

		// Token: 0x06002F73 RID: 12147 RVA: 0x0009053C File Offset: 0x0008F53C
		internal void OnColumnCollectionChanged_PostNotification(DataGridViewColumn dataGridViewColumn)
		{
			if (this.Columns.Count != 0 && this.Rows.Count == 0)
			{
				if (this.DataSource != null && !this.dataGridViewOper[1024])
				{
					this.RefreshRows(true);
				}
				else if (this.AllowUserToAddRowsInternal)
				{
					this.AddNewRow(false);
				}
			}
			if (this.AutoSize && (dataGridViewColumn == null || dataGridViewColumn.Visible))
			{
				LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Columns);
			}
		}

		// Token: 0x06002F74 RID: 12148 RVA: 0x000905B9 File Offset: 0x0008F5B9
		internal void OnColumnCommonChange(int columnIndex)
		{
			this.OnColumnGlobalAutoSize(columnIndex);
		}

		// Token: 0x06002F75 RID: 12149 RVA: 0x000905C4 File Offset: 0x0008F5C4
		protected virtual void OnColumnContextMenuStripChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNCONTEXTMENUSTRIPCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06002F76 RID: 12150 RVA: 0x0009062A File Offset: 0x0008F62A
		internal void OnColumnDataPropertyNameChanged(DataGridViewColumn dataGridViewColumn)
		{
			this.OnColumnDataPropertyNameChanged(new DataGridViewColumnEventArgs(dataGridViewColumn));
		}

		// Token: 0x06002F77 RID: 12151 RVA: 0x00090638 File Offset: 0x0008F638
		protected virtual void OnColumnDataPropertyNameChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			if (this.DataSource != null && e.Column.DataPropertyName.Length != 0 && !this.dataGridViewOper[1024])
			{
				this.MapDataGridViewColumnToDataBoundField(e.Column);
			}
			else if (this.DataSource != null && e.Column.DataPropertyName.Length == 0 && e.Column.IsDataBound)
			{
				e.Column.IsDataBoundInternal = false;
				e.Column.BoundColumnIndex = -1;
				e.Column.BoundColumnConverter = null;
				this.InvalidateColumnInternal(e.Column.Index);
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNDATAPROPERTYNAMECHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06002F78 RID: 12152 RVA: 0x00090734 File Offset: 0x0008F734
		protected virtual void OnColumnDefaultCellStyleChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			this.OnColumnGlobalAutoSize(e.Column.Index);
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNDEFAULTCELLSTYLECHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06002F79 RID: 12153 RVA: 0x000907AC File Offset: 0x0008F7AC
		internal void OnColumnDisplayIndexChanged(DataGridViewColumn dataGridViewColumn)
		{
			DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
			this.OnColumnDisplayIndexChanged(dataGridViewColumnEventArgs);
		}

		// Token: 0x06002F7A RID: 12154 RVA: 0x000907C8 File Offset: 0x0008F7C8
		internal void OnColumnDisplayIndexChanging(DataGridViewColumn dataGridViewColumn, int newDisplayIndex)
		{
			if (this.dataGridViewOper[2048])
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAlterDisplayIndexWithinAdjustments"));
			}
			this.CorrectColumnFrozenStatesForMove(dataGridViewColumn, newDisplayIndex);
			try
			{
				this.dataGridViewOper[2048] = true;
				if (newDisplayIndex < dataGridViewColumn.DisplayIndex)
				{
					using (IEnumerator enumerator = this.Columns.GetEnumerator())
					{
						while (enumerator.MoveNext())
						{
							object obj = enumerator.Current;
							DataGridViewColumn dataGridViewColumn2 = (DataGridViewColumn)obj;
							if (newDisplayIndex <= dataGridViewColumn2.DisplayIndex && dataGridViewColumn2.DisplayIndex < dataGridViewColumn.DisplayIndex)
							{
								dataGridViewColumn2.DisplayIndexInternal = dataGridViewColumn2.DisplayIndex + 1;
								dataGridViewColumn2.DisplayIndexHasChanged = true;
							}
						}
						goto IL_010D;
					}
				}
				foreach (object obj2 in this.Columns)
				{
					DataGridViewColumn dataGridViewColumn3 = (DataGridViewColumn)obj2;
					if (dataGridViewColumn.DisplayIndex < dataGridViewColumn3.DisplayIndex && dataGridViewColumn3.DisplayIndex <= newDisplayIndex)
					{
						dataGridViewColumn3.DisplayIndexInternal = dataGridViewColumn3.DisplayIndex - 1;
						dataGridViewColumn3.DisplayIndexHasChanged = true;
					}
				}
				IL_010D:;
			}
			finally
			{
				this.dataGridViewOper[2048] = false;
			}
		}

		// Token: 0x06002F7B RID: 12155 RVA: 0x00090920 File Offset: 0x0008F920
		protected virtual void OnColumnDisplayIndexChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNDISPLAYINDEXCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06002F7C RID: 12156 RVA: 0x00090988 File Offset: 0x0008F988
		internal void OnColumnDisplayIndexChanged_PreNotification()
		{
			this.Columns.InvalidateCachedColumnsOrder();
			this.PerformLayoutPrivate(false, false, true, false);
			if (this.editingControl != null)
			{
				this.PositionEditingControl(true, true, false);
			}
			base.Invalidate(Rectangle.Union(this.layout.ColumnHeaders, this.layout.Data));
		}

		// Token: 0x06002F7D RID: 12157 RVA: 0x000909DC File Offset: 0x0008F9DC
		internal void OnColumnDisplayIndexChanged_PostNotification()
		{
			this.FlushDisplayIndexChanged(true);
		}

		// Token: 0x06002F7E RID: 12158 RVA: 0x000909E8 File Offset: 0x0008F9E8
		protected virtual void OnColumnDividerDoubleClick(DataGridViewColumnDividerDoubleClickEventArgs e)
		{
			DataGridViewColumnDividerDoubleClickEventHandler dataGridViewColumnDividerDoubleClickEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERDOUBLECLICK] as DataGridViewColumnDividerDoubleClickEventHandler;
			if (dataGridViewColumnDividerDoubleClickEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnDividerDoubleClickEventHandler(this, e);
			}
			if (!e.Handled && e.Button == MouseButtons.Left && e.ColumnIndex < this.Columns.Count)
			{
				if (e.ColumnIndex == -1)
				{
					this.AutoResizeRowHeadersWidth(DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders, true, true);
					return;
				}
				DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = this.Columns[e.ColumnIndex].InheritedAutoSizeMode;
				if (inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.None || inheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
				{
					this.AutoResizeColumnInternal(e.ColumnIndex, DataGridViewAutoSizeColumnCriteriaInternal.Header | DataGridViewAutoSizeColumnCriteriaInternal.AllRows, true);
					return;
				}
				this.AutoResizeColumnInternal(e.ColumnIndex, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, true);
			}
		}

		// Token: 0x06002F7F RID: 12159 RVA: 0x00090AAC File Offset: 0x0008FAAC
		protected virtual void OnColumnDividerWidthChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			this.OnColumnGlobalAutoSize(e.Column.Index);
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNDIVIDERWIDTHCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06002F80 RID: 12160 RVA: 0x00090B23 File Offset: 0x0008FB23
		internal void OnColumnFillWeightChanged(DataGridViewColumn dataGridViewColumn)
		{
			if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
			{
				this.dataGridViewState2[67108864] = true;
				this.PerformLayoutPrivate(false, true, false, false);
			}
		}

		// Token: 0x06002F81 RID: 12161 RVA: 0x00090B4C File Offset: 0x0008FB4C
		internal void OnColumnFillWeightChanging(DataGridViewColumn dataGridViewColumn, float fillWeight)
		{
			if (this.InAdjustFillingColumns)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotAlterAutoFillColumnParameter"));
			}
			float num = this.Columns.GetColumnsFillWeight(DataGridViewElementStates.None) - dataGridViewColumn.FillWeight + fillWeight;
			if (num > 65535f)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_WeightSumCannotExceedLongMaxValue", new object[] { ushort.MaxValue.ToString(CultureInfo.CurrentCulture) }));
			}
		}

		// Token: 0x06002F82 RID: 12162 RVA: 0x00090BBC File Offset: 0x0008FBBC
		private void OnColumnGlobalAutoSize(int columnIndex)
		{
			if (!this.Columns[columnIndex].Visible)
			{
				return;
			}
			this.InvalidateColumnInternal(columnIndex);
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
			DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)this.Columns[columnIndex].InheritedAutoSizeMode;
			if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnCriteriaInternal.None && inheritedAutoSizeMode != DataGridViewAutoSizeColumnCriteriaInternal.Fill)
			{
				this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, flag);
			}
			if (!flag)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
			}
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(columnIndex, true, true);
			}
			if (!flag && inheritedAutoSizeMode != DataGridViewAutoSizeColumnCriteriaInternal.None && inheritedAutoSizeMode != DataGridViewAutoSizeColumnCriteriaInternal.Fill)
			{
				this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, true);
			}
		}

		// Token: 0x06002F83 RID: 12163 RVA: 0x00090C58 File Offset: 0x0008FC58
		protected virtual void OnColumnHeaderCellChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			this.OnColumnHeaderGlobalAutoSize(e.Column.Index);
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERCELLCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06002F84 RID: 12164 RVA: 0x00090CD0 File Offset: 0x0008FCD0
		private void OnColumnHeaderGlobalAutoSize(int columnIndex)
		{
			if (!this.ColumnHeadersVisible)
			{
				return;
			}
			this.InvalidateCellPrivate(columnIndex, -1);
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)this.Columns[columnIndex].InheritedAutoSizeMode;
			DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.Header;
			bool flag = dataGridViewAutoSizeColumnCriteriaInternal == DataGridViewAutoSizeColumnCriteriaInternal.NotSet;
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(columnIndex, true, flag);
			}
			if (!flag)
			{
				bool flag2 = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
				this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, flag2);
				if (!flag2)
				{
					this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
					this.AutoResizeColumnInternal(columnIndex, inheritedAutoSizeMode, true);
				}
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(columnIndex, true, true);
				}
			}
		}

		// Token: 0x06002F85 RID: 12165 RVA: 0x00090D6C File Offset: 0x0008FD6C
		protected virtual void OnColumnHeaderMouseClick(DataGridViewCellMouseEventArgs e)
		{
			if (e.Button == MouseButtons.Left && this.SelectionMode != DataGridViewSelectionMode.FullColumnSelect && this.SelectionMode != DataGridViewSelectionMode.ColumnHeaderSelect)
			{
				DataGridViewColumn dataGridViewColumn = this.Columns[e.ColumnIndex];
				if (dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic && (!this.VirtualMode || dataGridViewColumn.IsDataBound))
				{
					ListSortDirection listSortDirection = ListSortDirection.Ascending;
					if (this.sortedColumn == dataGridViewColumn && this.sortOrder == SortOrder.Ascending)
					{
						listSortDirection = ListSortDirection.Descending;
					}
					if (this.DataSource == null || (this.DataSource != null && this.dataConnection.List is IBindingList && ((IBindingList)this.dataConnection.List).SupportsSorting && dataGridViewColumn.IsDataBound))
					{
						this.Sort(dataGridViewColumn, listSortDirection);
					}
				}
			}
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		// Token: 0x06002F86 RID: 12166 RVA: 0x00090E68 File Offset: 0x0008FE68
		protected virtual void OnColumnHeaderMouseDoubleClick(DataGridViewCellMouseEventArgs e)
		{
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSEDOUBLECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		// Token: 0x06002F87 RID: 12167 RVA: 0x00090EB0 File Offset: 0x0008FEB0
		private void OnColumnHeaderMouseDown(DataGridView.HitTestInfo hti, bool isShiftDown, bool isControlDown)
		{
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
				{
					bool flag = true;
					if (isControlDown && this.Columns[hti.col].Selected)
					{
						flag = false;
					}
					if (flag)
					{
						int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
						if (firstRow > -1 && hti.col != this.ptCurrentCell.X)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.CurrentCellChange, DataGridView.DataGridViewValidateCellInternal.Always, true, true, firstRow != this.ptCurrentCell.Y, firstRow != this.ptCurrentCell.Y, false, this.EditMode != DataGridViewEditMode.EditOnEnter, true, false))
							{
								break;
							}
							if (firstRow != y && y != -1)
							{
								DataGridViewCell dataGridViewCell = null;
								if (this.IsInnerCellOutOfBounds(x, y))
								{
									break;
								}
								if (this.OnRowValidating(ref dataGridViewCell, x, y))
								{
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnRowEnter(ref dataGridViewCell, x, y, true, true);
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnCellEnter(ref dataGridViewCell, x, y);
									break;
								}
								else
								{
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnRowValidated(ref dataGridViewCell, x, y);
								}
							}
						}
						if (!this.IsColumnOutOfBounds(hti.col))
						{
							bool flag2 = false;
							this.trackColumn = hti.col;
							this.trackColumnEdge = -1;
							if (this.MultiSelect && isShiftDown && this.ptAnchorCell.X > -1 && this.Columns[this.ptAnchorCell.X].Selected)
							{
								flag2 = true;
							}
							if (!this.MultiSelect || !isControlDown || isShiftDown)
							{
								int i = 0;
								bool flag3 = false;
								if (this.selectedBandIndexes.Count > 8)
								{
									this.inBulkPaintCount++;
									flag3 = true;
								}
								try
								{
									while (i < this.selectedBandIndexes.Count)
									{
										if (this.selectedBandIndexes[i] != hti.col)
										{
											this.SetSelectedColumnCore(this.selectedBandIndexes[i], false);
										}
										else
										{
											i++;
										}
									}
									if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
									{
										this.RemoveIndividuallySelectedCells();
									}
								}
								finally
								{
									if (flag3)
									{
										this.ExitBulkPaint(-1, -1);
									}
								}
							}
							if (this.MultiSelect && this.dataGridViewOper[512])
							{
								this.dataGridViewOper[4] = true;
							}
							if (flag2)
							{
								if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, hti.col))
								{
									this.SelectColumnRange(this.ptAnchorCell.X, hti.col, true);
								}
								else
								{
									this.SelectColumnRange(hti.col, this.ptAnchorCell.X, true);
								}
							}
							else if (!this.selectedBandIndexes.Contains(hti.col))
							{
								this.SetSelectedColumnCore(hti.col, true);
							}
							if (firstRow != -1)
							{
								if (hti.col != this.ptCurrentCell.X)
								{
									if (!this.IsInnerCellOutOfBounds(hti.col, firstRow))
									{
										this.ScrollIntoView(hti.col, firstRow, false);
										if (!this.IsInnerCellOutOfBounds(hti.col, firstRow))
										{
											this.SetCurrentCellAddressCore(hti.col, firstRow, !isShiftDown, false, true);
										}
									}
								}
								else if (-1 != this.ptCurrentCell.X)
								{
									this.SetCurrentCellAddressCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false, false);
								}
							}
						}
					}
					else
					{
						this.SetSelectedColumnCore(hti.col, false);
					}
					break;
				}
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
		}

		// Token: 0x06002F88 RID: 12168 RVA: 0x00091294 File Offset: 0x00090294
		protected virtual void OnColumnHeadersBorderStyleChanged(EventArgs e)
		{
			this.PerformLayoutPrivate(false, false, true, false);
			base.Invalidate();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSBORDERSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002F89 RID: 12169 RVA: 0x000912EC File Offset: 0x000902EC
		protected virtual void OnColumnHeadersDefaultCellStyleChanged(EventArgs e)
		{
			if (this.ColumnHeadersVisible)
			{
				base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
				DataGridViewCellStyleChangedEventArgs dataGridViewCellStyleChangedEventArgs = e as DataGridViewCellStyleChangedEventArgs;
				if (dataGridViewCellStyleChangedEventArgs == null || dataGridViewCellStyleChangedEventArgs.ChangeAffectsPreferredSize)
				{
					this.OnColumnHeadersGlobalAutoSize();
					if (this.editingControl != null)
					{
						this.PositionEditingControl(true, true, false);
					}
				}
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSDEFAULTCELLSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002F8A RID: 12170 RVA: 0x00091388 File Offset: 0x00090388
		private void OnColumnHeadersGlobalAutoSize()
		{
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			bool flag2 = this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize;
			if (!flag2)
			{
				this.AutoResizeColumnHeadersHeight(flag, false);
			}
			if (!flag)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, false);
			}
			bool flag3 = this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.Header, false);
			if (!flag || flag3)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
			}
			if (!flag2)
			{
				this.AutoResizeColumnHeadersHeight(true, true);
			}
			if (!flag)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.Header, true);
		}

		// Token: 0x06002F8B RID: 12171 RVA: 0x00091420 File Offset: 0x00090420
		protected virtual void OnColumnHeadersHeightChanged(EventArgs e)
		{
			if (this.editingControl != null)
			{
				this.PositionEditingControl(true, false, false);
			}
			this.UpdateMouseEnteredCell(null, null);
			this.OnColumnHeadersGlobalAutoSize();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002F8C RID: 12172 RVA: 0x00091488 File Offset: 0x00090488
		protected virtual void OnColumnHeadersHeightSizeModeChanged(DataGridViewAutoSizeModeEventArgs e)
		{
			if (this.columnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				if (!e.PreviousModeAutoSized)
				{
					this.cachedColumnHeadersHeight = this.ColumnHeadersHeight;
				}
				this.AutoResizeColumnHeadersHeight(true, true);
			}
			else if (e.PreviousModeAutoSized)
			{
				this.ColumnHeadersHeight = this.cachedColumnHeadersHeight;
			}
			DataGridViewAutoSizeModeEventHandler dataGridViewAutoSizeModeEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTSIZEMODECHANGED] as DataGridViewAutoSizeModeEventHandler;
			if (dataGridViewAutoSizeModeEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewAutoSizeModeEventHandler(this, e);
			}
		}

		// Token: 0x06002F8D RID: 12173 RVA: 0x0009150C File Offset: 0x0009050C
		internal void OnColumnHidden(DataGridViewColumn dataGridViewColumn)
		{
			if (dataGridViewColumn.Displayed)
			{
				dataGridViewColumn.DisplayedInternal = false;
				DataGridViewColumnStateChangedEventArgs dataGridViewColumnStateChangedEventArgs = new DataGridViewColumnStateChangedEventArgs(dataGridViewColumn, DataGridViewElementStates.Displayed);
				this.OnColumnStateChanged(dataGridViewColumnStateChangedEventArgs);
			}
		}

		// Token: 0x06002F8E RID: 12174 RVA: 0x00091538 File Offset: 0x00090538
		internal void OnColumnMinimumWidthChanging(DataGridViewColumn dataGridViewColumn, int minimumWidth)
		{
			if (dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill && dataGridViewColumn.Width < minimumWidth)
			{
				try
				{
					this.dataGridViewState2[67108864] = true;
					dataGridViewColumn.DesiredMinimumWidth = minimumWidth;
					this.PerformLayoutPrivate(false, true, true, false);
				}
				finally
				{
					dataGridViewColumn.DesiredMinimumWidth = 0;
				}
			}
		}

		// Token: 0x06002F8F RID: 12175 RVA: 0x00091594 File Offset: 0x00090594
		protected virtual void OnColumnMinimumWidthChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			if (e.Column.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
			{
				this.PerformLayoutPrivate(false, true, false, false);
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNMINIMUMWIDTHCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06002F90 RID: 12176 RVA: 0x00091614 File Offset: 0x00090614
		internal void OnColumnNameChanged(DataGridViewColumn dataGridViewColumn)
		{
			DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
			this.OnColumnNameChanged(dataGridViewColumnEventArgs);
		}

		// Token: 0x06002F91 RID: 12177 RVA: 0x00091630 File Offset: 0x00090630
		protected virtual void OnColumnNameChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumn column = e.Column;
			if (column.HasHeaderCell && column.HeaderCell.Value is string && string.Compare((string)column.HeaderCell.Value, column.Name, false, CultureInfo.InvariantCulture) == 0)
			{
				this.InvalidateCellPrivate(column.Index, -1);
				DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)column.InheritedAutoSizeMode;
				DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.Header;
				bool flag = dataGridViewAutoSizeColumnCriteriaInternal == DataGridViewAutoSizeColumnCriteriaInternal.NotSet || !this.ColumnHeadersVisible;
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(column.Index, true, flag);
				}
				if (!flag)
				{
					bool flag2 = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
					this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, flag2);
					if (!flag2)
					{
						this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
						this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, true);
					}
					if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
					{
						this.AutoResizeColumnHeadersHeight(column.Index, true, true);
					}
				}
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNNAMECHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06002F92 RID: 12178 RVA: 0x0009177D File Offset: 0x0009077D
		internal void OnColumnRemoved(DataGridViewColumn dataGridViewColumn)
		{
			this.OnColumnRemoved(new DataGridViewColumnEventArgs(dataGridViewColumn));
		}

		// Token: 0x06002F93 RID: 12179 RVA: 0x0009178C File Offset: 0x0009078C
		protected virtual void OnColumnRemoved(DataGridViewColumnEventArgs e)
		{
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNREMOVED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06002F94 RID: 12180 RVA: 0x000917D4 File Offset: 0x000907D4
		private void OnColumnSelectMouseMove(DataGridView.HitTestInfo hti)
		{
			if (this.ptCurrentCell.X != -1 && hti.col != this.ptCurrentCell.X && !this.CommitEditForOperation(hti.col, this.ptCurrentCell.Y, true))
			{
				return;
			}
			if (this.IsColumnOutOfBounds(hti.col))
			{
				return;
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.trackColumnEdge >= 0 && (this.Columns.DisplayInOrder(this.trackColumn, this.trackColumnEdge) || this.trackColumnEdge == this.trackColumn) && this.Columns.DisplayInOrder(this.trackColumnEdge, hti.col))
				{
					DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[this.trackColumnEdge], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(nextColumn.Index, hti.col, true);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge >= 0 && this.Columns.DisplayInOrder(this.trackColumn, this.trackColumnEdge) && this.Columns.DisplayInOrder(hti.col, this.trackColumnEdge) && (this.Columns.DisplayInOrder(this.trackColumn, hti.col) || hti.col == this.trackColumn))
				{
					DataGridViewColumn nextColumn2 = this.Columns.GetNextColumn(this.Columns[hti.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(nextColumn2.Index, this.trackColumnEdge, false);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge == -1 && this.Columns.DisplayInOrder(this.trackColumn, hti.col))
				{
					DataGridViewColumn nextColumn3 = this.Columns.GetNextColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(nextColumn3.Index, hti.col, true);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge >= 0 && (this.Columns.DisplayInOrder(this.trackColumnEdge, this.trackColumn) || this.trackColumnEdge == this.trackColumn) && this.Columns.DisplayInOrder(hti.col, this.trackColumnEdge))
				{
					DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[this.trackColumnEdge], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(hti.col, previousColumn.Index, true);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge >= 0 && this.Columns.DisplayInOrder(this.trackColumnEdge, this.trackColumn) && this.Columns.DisplayInOrder(this.trackColumnEdge, hti.col) && (this.Columns.DisplayInOrder(hti.col, this.trackColumn) || hti.col == this.trackColumn))
				{
					DataGridViewColumn previousColumn2 = this.Columns.GetPreviousColumn(this.Columns[hti.col], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(this.trackColumnEdge, previousColumn2.Index, false);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge == -1 && this.Columns.DisplayInOrder(hti.col, this.trackColumn))
				{
					DataGridViewColumn previousColumn3 = this.Columns.GetPreviousColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(hti.col, previousColumn3.Index, true);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge >= 0 && this.Columns.DisplayInOrder(this.trackColumn, this.trackColumnEdge) && this.Columns.DisplayInOrder(hti.col, this.trackColumn))
				{
					DataGridViewColumn dataGridViewColumn = this.Columns.GetNextColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(dataGridViewColumn.Index, this.trackColumnEdge, false);
					dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(hti.col, dataGridViewColumn.Index, true);
					this.trackColumnEdge = hti.col;
				}
				else if (this.trackColumnEdge >= 0 && this.Columns.DisplayInOrder(this.trackColumn, hti.col) && this.Columns.DisplayInOrder(this.trackColumnEdge, this.trackColumn))
				{
					DataGridViewColumn dataGridViewColumn2 = this.Columns.GetPreviousColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(this.trackColumnEdge, dataGridViewColumn2.Index, false);
					dataGridViewColumn2 = this.Columns.GetNextColumn(this.Columns[this.trackColumn], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectColumnRange(dataGridViewColumn2.Index, hti.col, true);
					this.trackColumnEdge = hti.col;
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
			if (this.ptCurrentCell.X != -1 && hti.col != this.ptCurrentCell.X)
			{
				if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(hti.col))
				{
					return;
				}
				this.SetCurrentCellAddressCore(hti.col, this.ptCurrentCell.Y, false, false, false);
			}
		}

		// Token: 0x06002F95 RID: 12181 RVA: 0x00091D7C File Offset: 0x00090D7C
		private void OnColumnsGlobalAutoSize()
		{
			this.InvalidateData();
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
			bool flag2 = this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows, flag);
			if (!flag)
			{
				if (flag2)
				{
					this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
				}
				this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows, true);
			}
		}

		// Token: 0x06002F96 RID: 12182 RVA: 0x00091DD0 File Offset: 0x00090DD0
		internal void OnColumnSortModeChanged(DataGridViewColumn dataGridViewColumn)
		{
			DataGridViewColumnEventArgs dataGridViewColumnEventArgs = new DataGridViewColumnEventArgs(dataGridViewColumn);
			this.OnColumnSortModeChanged(dataGridViewColumnEventArgs);
		}

		// Token: 0x06002F97 RID: 12183 RVA: 0x00091DEC File Offset: 0x00090DEC
		protected virtual void OnColumnSortModeChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumn column = e.Column;
			if (column.HasHeaderCell)
			{
				if (column.SortMode == DataGridViewColumnSortMode.NotSortable || (column.SortMode == DataGridViewColumnSortMode.Programmatic && this.SortedColumn == column))
				{
					column.HeaderCell.SortGlyphDirection = SortOrder.None;
				}
				DataGridViewAutoSizeColumnCriteriaInternal inheritedAutoSizeMode = (DataGridViewAutoSizeColumnCriteriaInternal)column.InheritedAutoSizeMode;
				DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = inheritedAutoSizeMode & DataGridViewAutoSizeColumnCriteriaInternal.Header;
				bool flag = dataGridViewAutoSizeColumnCriteriaInternal == DataGridViewAutoSizeColumnCriteriaInternal.NotSet || !this.ColumnHeadersVisible;
				if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
				{
					this.AutoResizeColumnHeadersHeight(column.Index, true, flag);
				}
				if (!flag)
				{
					bool flag2 = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) == DataGridViewAutoSizeRowsMode.None;
					this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, flag2);
					if (!flag2)
					{
						this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
						this.AutoResizeColumnInternal(column.Index, inheritedAutoSizeMode, true);
					}
					if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
					{
						this.AutoResizeColumnHeadersHeight(column.Index, true, true);
					}
				}
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNSORTMODECHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06002F98 RID: 12184 RVA: 0x00091F18 File Offset: 0x00090F18
		protected virtual void OnColumnStateChanged(DataGridViewColumnStateChangedEventArgs e)
		{
			DataGridViewColumn column = e.Column;
			DataGridViewElementStates stateChanged = e.StateChanged;
			if (stateChanged != DataGridViewElementStates.Frozen)
			{
				if (stateChanged != DataGridViewElementStates.Selected)
				{
					if (stateChanged == DataGridViewElementStates.Visible)
					{
						if (!column.Visible && column.Displayed)
						{
							column.DisplayedInternal = false;
						}
						this.dataGridViewState2[67108864] = true;
						this.PerformLayoutPrivate(false, false, true, true);
						bool flag = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None || ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)1) != DataGridViewAutoSizeRowsMode.None && this.RowHeadersVisible);
						bool flag2 = false;
						DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = column.InheritedAutoSizeMode;
						if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None && inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill)
						{
							int thicknessInternal = column.ThicknessInternal;
							if (column.Visible)
							{
								column.CachedThickness = thicknessInternal;
								this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, !flag);
								flag2 = true;
							}
							else if (thicknessInternal != column.CachedThickness)
							{
								column.ThicknessInternal = Math.Max(column.MinimumWidth, column.CachedThickness);
							}
						}
						if (flag)
						{
							if (column.Visible)
							{
								this.AdjustExpandingRows(column.Index, true);
							}
							else
							{
								this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
							}
							if (flag2)
							{
								this.AutoResizeColumnInternal(column.Index, (DataGridViewAutoSizeColumnCriteriaInternal)inheritedAutoSizeMode, true);
							}
						}
						else
						{
							base.Invalidate();
						}
					}
				}
				else if (column.Visible && this.inBulkPaintCount == 0)
				{
					this.InvalidateColumnInternal(column.Index);
				}
			}
			else if (column.Visible)
			{
				if (column.Frozen)
				{
					if (this.horizontalOffset >= column.Thickness)
					{
						this.horizontalOffset -= column.Thickness;
					}
					else
					{
						this.horizontalOffset = (this.negOffset = 0);
					}
				}
				else
				{
					this.horizontalOffset = (this.negOffset = 0);
				}
				if (this.horizScrollBar.Enabled)
				{
					this.horizScrollBar.Value = this.horizontalOffset;
				}
				this.dataGridViewState2[67108864] = true;
				this.PerformLayoutPrivate(false, false, true, true);
				base.Invalidate();
			}
			DataGridViewColumnStateChangedEventHandler dataGridViewColumnStateChangedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNSTATECHANGED] as DataGridViewColumnStateChangedEventHandler;
			if (dataGridViewColumnStateChangedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnStateChangedEventHandler(this, e);
			}
			if (e.StateChanged == DataGridViewElementStates.ReadOnly && column.Index == this.ptCurrentCell.X && !this.dataGridViewOper[16384])
			{
				base.VerifyImeRestrictedModeChanged();
				if (!column.ReadOnly && this.ColumnEditable(this.ptCurrentCell.X) && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
				{
					this.BeginEditInternal(true);
				}
			}
		}

		// Token: 0x06002F99 RID: 12185 RVA: 0x000921E2 File Offset: 0x000911E2
		internal void OnColumnToolTipTextChanged(DataGridViewColumn dataGridViewColumn)
		{
			this.OnColumnToolTipTextChanged(new DataGridViewColumnEventArgs(dataGridViewColumn));
		}

		// Token: 0x06002F9A RID: 12186 RVA: 0x000921F0 File Offset: 0x000911F0
		protected virtual void OnColumnToolTipTextChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNTOOLTIPTEXTCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
		}

		// Token: 0x06002F9B RID: 12187 RVA: 0x00092258 File Offset: 0x00091258
		protected virtual void OnColumnWidthChanged(DataGridViewColumnEventArgs e)
		{
			if (e.Column.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			this.Columns.InvalidateCachedColumnsWidths();
			if (e.Column.Visible && base.IsHandleCreated)
			{
				this.PerformLayoutPrivate(false, false, false, false);
				Rectangle rectangle = this.layout.Data;
				if (this.layout.ColumnHeadersVisible)
				{
					rectangle = Rectangle.Union(rectangle, this.layout.ColumnHeaders);
				}
				else if (this.SingleHorizontalBorderAdded)
				{
					rectangle.Y--;
					rectangle.Height++;
				}
				if (rectangle.Width > 0 && rectangle.Height > 0)
				{
					int columnXFromIndex = this.GetColumnXFromIndex(e.Column.Index);
					if (this.RightToLeftInternal)
					{
						rectangle.Width -= rectangle.Right - columnXFromIndex;
					}
					else
					{
						rectangle.Width -= columnXFromIndex - rectangle.X;
						rectangle.X = columnXFromIndex;
					}
					if (rectangle.Width > 0 && rectangle.Height > 0)
					{
						base.Invalidate(rectangle);
					}
				}
				if (this.editingControl != null)
				{
					this.PositionEditingControl(this.ptCurrentCell.X != e.Column.Index, true, false);
				}
				this.UpdateMouseEnteredCell(null, null);
				if (this.AutoSize)
				{
					LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Columns);
				}
			}
			DataGridViewColumnEventHandler dataGridViewColumnEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCOLUMNWIDTHCHANGED] as DataGridViewColumnEventHandler;
			if (dataGridViewColumnEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewColumnEventHandler(this, e);
			}
			if (!this.InAdjustFillingColumns)
			{
				this.OnColumnGlobalAutoSize(e.Column.Index);
			}
		}

		// Token: 0x06002F9C RID: 12188 RVA: 0x00092428 File Offset: 0x00091428
		internal void OnCommonCellContentClick(int columnIndex, int rowIndex, bool doubleClick)
		{
			if (this.ptMouseDownCell.X == -2 || (this.dataGridViewState2[268435456] && this.ptMouseDownCell.X == columnIndex && this.ptMouseDownCell.Y == rowIndex && (this.ptMouseDownCell.X == -1 || this.ptMouseDownCell.Y == -1 || (columnIndex == this.ptCurrentCell.X && rowIndex == this.ptCurrentCell.Y))))
			{
				DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(columnIndex, rowIndex);
				if (doubleClick)
				{
					this.OnCellContentDoubleClick(dataGridViewCellEventArgs);
					return;
				}
				this.OnCellContentClick(dataGridViewCellEventArgs);
			}
		}

		// Token: 0x06002F9D RID: 12189 RVA: 0x000924C4 File Offset: 0x000914C4
		protected virtual void OnCurrentCellChanged(EventArgs e)
		{
			base.VerifyImeRestrictedModeChanged();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002F9E RID: 12190 RVA: 0x00092514 File Offset: 0x00091514
		protected virtual void OnCurrentCellDirtyStateChanged(EventArgs e)
		{
			if (this.RowHeadersVisible && this.ShowEditingIcon)
			{
				this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
			}
			if (this.IsCurrentCellDirty && this.newRowIndex == this.ptCurrentCell.Y)
			{
				this.newRowIndex = -1;
				this.AddNewRow(true);
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWCURRENTCELLDIRTYSTATECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002F9F RID: 12191 RVA: 0x000925A7 File Offset: 0x000915A7
		protected override void OnCursorChanged(EventArgs e)
		{
			base.OnCursorChanged(e);
			if (!this.dataGridViewState2[2097152])
			{
				this.oldCursor = this.Cursor;
			}
		}

		// Token: 0x06002FA0 RID: 12192 RVA: 0x000925CE File Offset: 0x000915CE
		internal void OnDataBindingComplete(ListChangedType listChangedType)
		{
			this.OnDataBindingComplete(new DataGridViewBindingCompleteEventArgs(listChangedType));
		}

		// Token: 0x06002FA1 RID: 12193 RVA: 0x000925DC File Offset: 0x000915DC
		protected virtual void OnDataBindingComplete(DataGridViewBindingCompleteEventArgs e)
		{
			DataGridViewBindingCompleteEventHandler dataGridViewBindingCompleteEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDATABINDINGCOMPLETE] as DataGridViewBindingCompleteEventHandler;
			if (dataGridViewBindingCompleteEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewBindingCompleteEventHandler(this, e);
			}
		}

		// Token: 0x06002FA2 RID: 12194 RVA: 0x00092624 File Offset: 0x00091624
		protected virtual void OnDataError(bool displayErrorDialogIfNoHandler, DataGridViewDataErrorEventArgs e)
		{
			DataGridViewDataErrorEventHandler dataGridViewDataErrorEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDATAERROR] as DataGridViewDataErrorEventHandler;
			if (!this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				if (dataGridViewDataErrorEventHandler == null)
				{
					if (displayErrorDialogIfNoHandler)
					{
						string text;
						if (e.Exception == null)
						{
							text = SR.GetString("DataGridView_ErrorMessageText_NoException");
						}
						else
						{
							text = SR.GetString("DataGridView_ErrorMessageText_WithException", new object[] { e.Exception });
						}
						if (this.RightToLeftInternal)
						{
							MessageBox.Show(text, SR.GetString("DataGridView_ErrorMessageCaption"), MessageBoxButtons.OK, MessageBoxIcon.Hand, MessageBoxDefaultButton.Button1, MessageBoxOptions.RightAlign | MessageBoxOptions.RtlReading);
						}
						else
						{
							MessageBox.Show(text, SR.GetString("DataGridView_ErrorMessageCaption"), MessageBoxButtons.OK, MessageBoxIcon.Hand);
						}
						this.CorrectFocus(true);
						return;
					}
				}
				else
				{
					dataGridViewDataErrorEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
		}

		// Token: 0x06002FA3 RID: 12195 RVA: 0x000926F0 File Offset: 0x000916F0
		internal void OnDataErrorInternal(DataGridViewDataErrorEventArgs e)
		{
			this.OnDataError(!base.DesignMode, e);
		}

		// Token: 0x06002FA4 RID: 12196 RVA: 0x00092704 File Offset: 0x00091704
		internal void OnDataGridViewElementStateChanged(DataGridViewElement element, int index, DataGridViewElementStates elementState)
		{
			DataGridViewColumn dataGridViewColumn = element as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				DataGridViewColumnStateChangedEventArgs dataGridViewColumnStateChangedEventArgs = new DataGridViewColumnStateChangedEventArgs(dataGridViewColumn, elementState);
				this.OnColumnStateChanged(dataGridViewColumnStateChangedEventArgs);
			}
			else
			{
				DataGridViewRow dataGridViewRow = element as DataGridViewRow;
				if (dataGridViewRow != null)
				{
					DataGridViewRowStateChangedEventHandler dataGridViewRowStateChangedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWSTATECHANGED] as DataGridViewRowStateChangedEventHandler;
					if (dataGridViewRowStateChangedEventHandler != null && dataGridViewRow.DataGridView != null && dataGridViewRow.Index == -1)
					{
						dataGridViewRow = this.Rows[index];
					}
					DataGridViewRowStateChangedEventArgs dataGridViewRowStateChangedEventArgs = new DataGridViewRowStateChangedEventArgs(dataGridViewRow, elementState);
					this.OnRowStateChanged((dataGridViewRow.Index == -1) ? index : dataGridViewRow.Index, dataGridViewRowStateChangedEventArgs);
				}
				else
				{
					DataGridViewCell dataGridViewCell = element as DataGridViewCell;
					if (dataGridViewCell != null)
					{
						DataGridViewCellStateChangedEventArgs dataGridViewCellStateChangedEventArgs = new DataGridViewCellStateChangedEventArgs(dataGridViewCell, elementState);
						this.OnCellStateChanged(dataGridViewCellStateChangedEventArgs);
					}
				}
			}
			if ((elementState & DataGridViewElementStates.Selected) == DataGridViewElementStates.Selected)
			{
				if (this.noSelectionChangeCount > 0)
				{
					this.dataGridViewState2[262144] = true;
					return;
				}
				this.OnSelectionChanged(EventArgs.Empty);
			}
		}

		// Token: 0x06002FA5 RID: 12197 RVA: 0x000927E4 File Offset: 0x000917E4
		internal void OnDataGridViewElementStateChanging(DataGridViewElement element, int index, DataGridViewElementStates elementState)
		{
			DataGridViewColumn dataGridViewColumn = element as DataGridViewColumn;
			if (dataGridViewColumn != null)
			{
				switch (elementState)
				{
				case DataGridViewElementStates.Frozen:
					break;
				case DataGridViewElementStates.Displayed | DataGridViewElementStates.Frozen:
					return;
				case DataGridViewElementStates.ReadOnly:
					if (this.ptCurrentCell.X == dataGridViewColumn.Index && this.IsCurrentCellInEditMode && !dataGridViewColumn.ReadOnly && !this.dataGridViewOper[16384] && !this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.Always, false, false, false, false, false, true, false, false))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CommitFailedCannotCompleteOperation"));
					}
					return;
				default:
					if (elementState != DataGridViewElementStates.Visible)
					{
						return;
					}
					break;
				}
				if (elementState == DataGridViewElementStates.Visible)
				{
					if (!dataGridViewColumn.Visible && dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader && !this.ColumnHeadersVisible)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CannotMakeAutoSizedColumnVisible"));
					}
					if (!dataGridViewColumn.Visible && dataGridViewColumn.Frozen && dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
					{
						dataGridViewColumn.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
					}
					else if (dataGridViewColumn.Visible && this.ptCurrentCell.X == dataGridViewColumn.Index)
					{
						this.ResetCurrentCell();
					}
				}
				if (elementState == DataGridViewElementStates.Frozen && !dataGridViewColumn.Frozen && dataGridViewColumn.Visible && dataGridViewColumn.InheritedAutoSizeMode == DataGridViewAutoSizeColumnMode.Fill)
				{
					dataGridViewColumn.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
				}
				this.CorrectColumnFrozenStates(dataGridViewColumn, elementState == DataGridViewElementStates.Frozen);
				return;
			}
			DataGridViewRow dataGridViewRow = element as DataGridViewRow;
			if (dataGridViewRow != null)
			{
				int num = ((dataGridViewRow.Index > -1) ? dataGridViewRow.Index : index);
				switch (elementState)
				{
				case DataGridViewElementStates.Frozen:
					break;
				case DataGridViewElementStates.Displayed | DataGridViewElementStates.Frozen:
					return;
				case DataGridViewElementStates.ReadOnly:
					if (this.ptCurrentCell.Y == num && (this.Rows.GetRowState(num) & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None && !this.ReadOnly && this.IsCurrentCellInEditMode && !this.dataGridViewOper[16384] && !this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.Always, false, false, false, false, false, true, false, false))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CommitFailedCannotCompleteOperation"));
					}
					return;
				default:
					if (elementState != DataGridViewElementStates.Visible)
					{
						return;
					}
					break;
				}
				if (elementState == DataGridViewElementStates.Visible && this.ptCurrentCell.Y == num)
				{
					if (this.DataSource != null)
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CurrencyManagerRowCannotBeInvisible"));
					}
					this.ResetCurrentCell();
				}
				this.CorrectRowFrozenStates(dataGridViewRow, num, elementState == DataGridViewElementStates.Frozen);
				return;
			}
			DataGridViewCell dataGridViewCell = element as DataGridViewCell;
			if (dataGridViewCell != null)
			{
				if (elementState != DataGridViewElementStates.ReadOnly)
				{
					return;
				}
				if (this.ptCurrentCell.X == dataGridViewCell.ColumnIndex && this.ptCurrentCell.Y == dataGridViewCell.RowIndex && this.IsCurrentCellInEditMode && !dataGridViewCell.ReadOnly && !this.dataGridViewOper[16384] && !this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.Always, false, false, false, false, false, true, false, false))
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CommitFailedCannotCompleteOperation"));
				}
			}
		}

		// Token: 0x06002FA6 RID: 12198 RVA: 0x00092AA0 File Offset: 0x00091AA0
		protected virtual void OnDataMemberChanged(EventArgs e)
		{
			this.RefreshColumnsAndRows();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDATAMEMBERCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
			if (this.dataConnection != null && this.dataConnection.CurrencyManager != null)
			{
				this.OnDataBindingComplete(ListChangedType.Reset);
			}
		}

		// Token: 0x06002FA7 RID: 12199 RVA: 0x00092B0C File Offset: 0x00091B0C
		protected virtual void OnDataSourceChanged(EventArgs e)
		{
			this.RefreshColumnsAndRows();
			this.InvalidateRowHeights();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDATASOURCECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
			if (this.dataConnection != null && this.dataConnection.CurrencyManager != null)
			{
				this.OnDataBindingComplete(ListChangedType.Reset);
			}
		}

		// Token: 0x06002FA8 RID: 12200 RVA: 0x00092B7C File Offset: 0x00091B7C
		protected virtual void OnDefaultCellStyleChanged(EventArgs e)
		{
			DataGridViewCellStyleChangedEventArgs dataGridViewCellStyleChangedEventArgs = e as DataGridViewCellStyleChangedEventArgs;
			if (dataGridViewCellStyleChangedEventArgs != null && !dataGridViewCellStyleChangedEventArgs.ChangeAffectsPreferredSize)
			{
				base.Invalidate();
			}
			else
			{
				this.OnGlobalAutoSize();
				if (this.editingControl != null)
				{
					this.PositionEditingControl(true, true, false);
				}
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDEFAULTCELLSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002FA9 RID: 12201 RVA: 0x00092BF8 File Offset: 0x00091BF8
		protected virtual void OnDefaultValuesNeeded(DataGridViewRowEventArgs e)
		{
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWDEFAULTVALUESNEEDED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06002FAA RID: 12202 RVA: 0x00092C40 File Offset: 0x00091C40
		protected override void OnDoubleClick(EventArgs e)
		{
			base.OnDoubleClick(e);
			if (!this.dataGridViewState2[134217728] && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				MouseEventArgs mouseEventArgs = e as MouseEventArgs;
				if (mouseEventArgs != null)
				{
					DataGridView.HitTestInfo hitTestInfo = this.HitTest(mouseEventArgs.X, mouseEventArgs.Y);
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar && mouseEventArgs.Button == MouseButtons.Left)
					{
						this.OnCellDoubleClick(new DataGridViewCellEventArgs(hitTestInfo.col, hitTestInfo.row));
					}
				}
			}
		}

		// Token: 0x06002FAB RID: 12203 RVA: 0x00092CDC File Offset: 0x00091CDC
		protected virtual void OnEditingControlShowing(DataGridViewEditingControlShowingEventArgs e)
		{
			DataGridViewEditingControlShowingEventHandler dataGridViewEditingControlShowingEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWEDITINGCONTROLSHOWING] as DataGridViewEditingControlShowingEventHandler;
			if (dataGridViewEditingControlShowingEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewEditingControlShowingEventHandler(this, e);
			}
		}

		// Token: 0x06002FAC RID: 12204 RVA: 0x00092D24 File Offset: 0x00091D24
		protected virtual void OnEditModeChanged(EventArgs e)
		{
			if (this.Focused && this.EditMode == DataGridViewEditMode.EditOnEnter && this.ptCurrentCell.X > -1 && !this.IsCurrentCellInEditMode)
			{
				this.BeginEditInternal(true);
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWEDITMODECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002FAD RID: 12205 RVA: 0x00092D9C File Offset: 0x00091D9C
		protected override void OnEnabledChanged(EventArgs e)
		{
			base.OnEnabledChanged(e);
			if (base.GetAnyDisposingInHierarchy())
			{
				return;
			}
			if (base.IsHandleCreated && base.Enabled)
			{
				if (this.vertScrollBar != null && this.vertScrollBar.Visible)
				{
					this.vertScrollBar.Enabled = true;
				}
				if (this.horizScrollBar != null && this.horizScrollBar.Visible)
				{
					this.horizScrollBar.Enabled = true;
				}
			}
		}

		// Token: 0x06002FAE RID: 12206 RVA: 0x00092E0C File Offset: 0x00091E0C
		protected override void OnEnter(EventArgs e)
		{
			if (this.editingControl != null && this.editingControl.ContainsFocus)
			{
				return;
			}
			base.OnEnter(e);
			if (base.DesignMode)
			{
				return;
			}
			this.dataGridViewState1[64] = false;
			if (this.ptCurrentCell.X > -1)
			{
				DataGridViewCell dataGridViewCell = null;
				this.OnRowEnter(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false);
				if (this.ptCurrentCell.X == -1)
				{
					return;
				}
				this.OnCellEnter(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
			}
			else if (!this.dataGridViewOper[8192])
			{
				this.MakeFirstDisplayedCellCurrentCell(true);
			}
			if (this.ptCurrentCell.X > -1 && !this.IsCurrentCellInEditMode)
			{
				if (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null))
				{
					this.BeginEditInternal(true);
					if (this.ptCurrentCell.X > -1 && this.CurrentCellInternal.EditType == null && !this.dataGridViewOper[8192])
					{
						this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
						return;
					}
				}
				else if (!this.dataGridViewOper[8192])
				{
					this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
			}
		}

		// Token: 0x06002FAF RID: 12207 RVA: 0x00092F80 File Offset: 0x00091F80
		protected override void OnFontChanged(EventArgs e)
		{
			base.OnFontChanged(e);
			if (base.GetAnyDisposingInHierarchy())
			{
				return;
			}
			if (this.dataGridViewState1[67108864] && this.ColumnHeadersDefaultCellStyle.Font != base.Font)
			{
				this.ColumnHeadersDefaultCellStyle.Font = base.Font;
				this.dataGridViewState1[67108864] = true;
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = true;
				this.OnColumnHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if (this.dataGridViewState1[134217728] && this.RowHeadersDefaultCellStyle.Font != base.Font)
			{
				this.RowHeadersDefaultCellStyle.Font = base.Font;
				this.dataGridViewState1[134217728] = true;
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = true;
				this.OnRowHeadersDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
			if (this.dataGridViewState1[33554432] && this.DefaultCellStyle.Font != base.Font)
			{
				this.DefaultCellStyle.Font = base.Font;
				this.dataGridViewState1[33554432] = true;
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = true;
				this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
		}

		// Token: 0x06002FB0 RID: 12208 RVA: 0x000930BC File Offset: 0x000920BC
		protected override void OnForeColorChanged(EventArgs e)
		{
			base.OnForeColorChanged(e);
			if (base.GetAnyDisposingInHierarchy())
			{
				return;
			}
			if (this.dataGridViewState1[1024] && this.DefaultCellStyle.ForeColor != base.ForeColor)
			{
				this.DefaultCellStyle.ForeColor = base.ForeColor;
				this.dataGridViewState1[1024] = true;
				this.CellStyleChangedEventArgs.ChangeAffectsPreferredSize = false;
				this.OnDefaultCellStyleChanged(this.CellStyleChangedEventArgs);
			}
		}

		// Token: 0x06002FB1 RID: 12209 RVA: 0x00093140 File Offset: 0x00092140
		private void OnGlobalAutoSize()
		{
			base.Invalidate();
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			if (flag)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize, this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None);
			}
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(true, false);
			}
			if (this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, false, true);
			}
			this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.Header | DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows, true);
			if (flag && (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize || this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None))
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(true, true);
			}
			if (this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
			}
		}

		// Token: 0x06002FB2 RID: 12210 RVA: 0x00093214 File Offset: 0x00092214
		protected override void OnGotFocus(EventArgs e)
		{
			base.OnGotFocus(e);
			if (this.ptCurrentCell.X != -1)
			{
				this.InvalidateCell(this.ptCurrentCell.X, this.ptCurrentCell.Y);
			}
			if (!this.dataGridViewOper[131072] && (!this.dataGridViewOper[4194304] || this.EditMode != DataGridViewEditMode.EditOnEnter) && (!this.dataGridViewOper[8192] || this.EditMode != DataGridViewEditMode.EditOnEnter) && this.ptCurrentCell.X > -1)
			{
				this.AccessibilityNotifyCurrentCellChanged(this.ptCurrentCell);
			}
		}

		// Token: 0x06002FB3 RID: 12211 RVA: 0x000932B4 File Offset: 0x000922B4
		protected virtual void OnGridColorChanged(EventArgs e)
		{
			this.InvalidateInside();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWGRIDCOLORCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002FB4 RID: 12212 RVA: 0x00093304 File Offset: 0x00092304
		protected override void OnHandleCreated(EventArgs e)
		{
			base.OnHandleCreated(e);
			if (this.layout.dirty)
			{
				this.PerformLayoutPrivate(false, true, false, false);
			}
			if (this.ptCurrentCell.X == -1)
			{
				this.MakeFirstDisplayedCellCurrentCell(false);
			}
			else
			{
				this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
			}
			if (this.dataGridViewState2[1048576])
			{
				this.dataGridViewState2[1048576] = false;
				this.OnGlobalAutoSize();
			}
			SystemEvents.UserPreferenceChanged += this.OnUserPreferenceChanged;
		}

		// Token: 0x06002FB5 RID: 12213 RVA: 0x0009339E File Offset: 0x0009239E
		protected override void OnHandleDestroyed(EventArgs e)
		{
			SystemEvents.UserPreferenceChanged -= this.OnUserPreferenceChanged;
			base.OnHandleDestroyed(e);
		}

		// Token: 0x06002FB6 RID: 12214 RVA: 0x000933B8 File Offset: 0x000923B8
		internal void OnInsertedColumn_PreNotification(DataGridViewColumn dataGridViewColumn)
		{
			this.displayedBandsInfo.CorrectColumnIndexAfterInsertion(dataGridViewColumn.Index, 1);
			this.CorrectColumnIndexesAfterInsertion(dataGridViewColumn, 1);
			this.OnAddedColumn(dataGridViewColumn);
		}

		// Token: 0x06002FB7 RID: 12215 RVA: 0x000933DC File Offset: 0x000923DC
		internal void OnInsertedColumn_PostNotification(Point newCurrentCell)
		{
			if (newCurrentCell.X != -1)
			{
				this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, this.Columns.GetColumnCount(DataGridViewElementStates.Visible) == 1);
			}
		}

		// Token: 0x06002FB8 RID: 12216 RVA: 0x0009341C File Offset: 0x0009241C
		internal void OnInsertedRow_PreNotification(int rowIndex, int insertionCount)
		{
			this.displayedBandsInfo.CorrectRowIndexAfterInsertion(rowIndex, insertionCount);
			this.CorrectRowIndexesAfterInsertion(rowIndex, insertionCount);
			this.OnAddedRow_PreNotification(rowIndex);
		}

		// Token: 0x06002FB9 RID: 12217 RVA: 0x0009343C File Offset: 0x0009243C
		internal void OnInsertedRow_PostNotification(int rowIndex, Point newCurrentCell, bool lastInsertion)
		{
			this.OnAddedRow_PostNotification(rowIndex);
			if (lastInsertion && newCurrentCell.Y != -1)
			{
				this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, this.Rows.GetRowCount(DataGridViewElementStates.Visible) == 1);
			}
		}

		// Token: 0x06002FBA RID: 12218 RVA: 0x00093486 File Offset: 0x00092486
		internal void OnInsertedRows_PreNotification(int rowIndex, DataGridViewRow[] dataGridViewRows)
		{
			this.displayedBandsInfo.CorrectRowIndexAfterInsertion(rowIndex, dataGridViewRows.Length);
			this.CorrectRowIndexesAfterInsertion(rowIndex, dataGridViewRows.Length);
			this.OnAddedRows_PreNotification(dataGridViewRows);
		}

		// Token: 0x06002FBB RID: 12219 RVA: 0x000934A8 File Offset: 0x000924A8
		internal void OnInsertedRows_PostNotification(DataGridViewRow[] dataGridViewRows, Point newCurrentCell)
		{
			this.OnAddedRows_PostNotification(dataGridViewRows);
			if (newCurrentCell.Y != -1)
			{
				this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, false);
			}
		}

		// Token: 0x06002FBC RID: 12220 RVA: 0x000934D8 File Offset: 0x000924D8
		internal void OnInsertingColumn(int columnIndexInserted, DataGridViewColumn dataGridViewColumn, out Point newCurrentCell)
		{
			if (dataGridViewColumn.DataGridView != null)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_ColumnAlreadyBelongsToDataGridView"));
			}
			if (!this.InInitialization && dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic && (this.SelectionMode == DataGridViewSelectionMode.FullColumnSelect || this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect))
			{
				throw new InvalidOperationException(SR.GetString("DataGridViewColumn_SortModeAndSelectionModeClash", new object[]
				{
					DataGridViewColumnSortMode.Automatic.ToString(),
					this.SelectionMode.ToString()
				}));
			}
			if (dataGridViewColumn.Visible)
			{
				if (!this.ColumnHeadersVisible && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.ColumnHeader || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.ColumnHeader)))
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoSizedColumn"));
				}
				if (dataGridViewColumn.Frozen && (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.Fill || (dataGridViewColumn.AutoSizeMode == DataGridViewAutoSizeColumnMode.NotSet && this.AutoSizeColumnsMode == DataGridViewAutoSizeColumnsMode.Fill)))
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddAutoFillColumn"));
				}
			}
			this.CorrectColumnFrozenState(dataGridViewColumn, columnIndexInserted);
			if (this.ptCurrentCell.X != -1)
			{
				newCurrentCell = new Point((columnIndexInserted <= this.ptCurrentCell.X) ? (this.ptCurrentCell.X + 1) : this.ptCurrentCell.X, this.ptCurrentCell.Y);
				this.ResetCurrentCell();
			}
			else
			{
				newCurrentCell = new Point(-1, -1);
			}
			if (this.Rows.Count > 0)
			{
				if (dataGridViewColumn.CellType == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAddUntypedColumn"));
				}
				if (dataGridViewColumn.CellTemplate.DefaultNewRowValue != null && this.newRowIndex != -1)
				{
					DataGridViewRow dataGridViewRow = this.Rows[this.newRowIndex];
				}
				int num = this.Columns.Count + 1;
				try
				{
					for (int i = 0; i < this.Rows.Count; i++)
					{
						DataGridViewRow dataGridViewRow2 = this.Rows.SharedRow(i);
						if (dataGridViewRow2.Cells.Count < num)
						{
							DataGridViewCell dataGridViewCell = (DataGridViewCell)dataGridViewColumn.CellTemplate.Clone();
							dataGridViewRow2.Cells.InsertInternal(columnIndexInserted, dataGridViewCell);
							if (i == this.newRowIndex)
							{
								dataGridViewCell.Value = dataGridViewCell.DefaultNewRowValue;
							}
							dataGridViewCell.DataGridViewInternal = this;
							dataGridViewCell.OwningRowInternal = dataGridViewRow2;
							dataGridViewCell.OwningColumnInternal = dataGridViewColumn;
						}
					}
				}
				catch
				{
					for (int j = 0; j < this.Rows.Count; j++)
					{
						DataGridViewRow dataGridViewRow3 = this.Rows.SharedRow(j);
						if (dataGridViewRow3.Cells.Count != num)
						{
							break;
						}
						dataGridViewRow3.Cells.RemoveAtInternal(columnIndexInserted);
					}
					throw;
				}
			}
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.FullColumnSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
			{
				int num2 = this.selectedBandIndexes.Count;
				for (int k = 0; k < num2; k++)
				{
					int num3 = this.selectedBandIndexes[k];
					if (columnIndexInserted <= num3)
					{
						this.selectedBandIndexes[k] = num3 + 1;
					}
				}
				if (this.selectedBandSnapshotIndexes != null)
				{
					num2 = this.selectedBandSnapshotIndexes.Count;
					for (int k = 0; k < num2; k++)
					{
						int num4 = this.selectedBandSnapshotIndexes[k];
						if (columnIndexInserted <= num4)
						{
							this.selectedBandSnapshotIndexes[k] = num4 + 1;
						}
					}
				}
				break;
			}
			case DataGridViewSelectionMode.RowHeaderSelect:
				break;
			default:
				return;
			}
		}

		// Token: 0x06002FBD RID: 12221 RVA: 0x00093814 File Offset: 0x00092814
		internal void OnInsertingRow(int rowIndexInserted, DataGridViewRow dataGridViewRow, DataGridViewElementStates rowState, ref Point newCurrentCell, bool firstInsertion, int insertionCount, bool force)
		{
			if (firstInsertion)
			{
				if (this.ptCurrentCell.Y != -1 && rowIndexInserted <= this.ptCurrentCell.Y)
				{
					newCurrentCell = new Point(this.ptCurrentCell.X, this.ptCurrentCell.Y + insertionCount);
					if (force)
					{
						this.dataGridViewState1[4194304] = true;
						this.SetCurrentCellAddressCore(-1, -1, true, false, false);
					}
					else
					{
						this.ResetCurrentCell();
					}
				}
				else
				{
					newCurrentCell = new Point(-1, -1);
				}
			}
			else if (newCurrentCell.Y != -1)
			{
				newCurrentCell.Y += insertionCount;
			}
			this.OnAddingRow(dataGridViewRow, rowState, false);
			this.CorrectRowFrozenState(dataGridViewRow, rowState, rowIndexInserted);
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.FullRowSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
			{
				int num = this.selectedBandIndexes.Count;
				for (int i = 0; i < num; i++)
				{
					int num2 = this.selectedBandIndexes[i];
					if (rowIndexInserted <= num2)
					{
						this.selectedBandIndexes[i] = num2 + insertionCount;
					}
				}
				if (this.selectedBandSnapshotIndexes != null)
				{
					num = this.selectedBandSnapshotIndexes.Count;
					for (int i = 0; i < num; i++)
					{
						int num3 = this.selectedBandSnapshotIndexes[i];
						if (rowIndexInserted <= num3)
						{
							this.selectedBandSnapshotIndexes[i] = num3 + insertionCount;
						}
					}
				}
				break;
			}
			case DataGridViewSelectionMode.FullColumnSelect:
				break;
			default:
				return;
			}
		}

		// Token: 0x06002FBE RID: 12222 RVA: 0x00093968 File Offset: 0x00092968
		internal void OnInsertingRows(int rowIndexInserted, DataGridViewRow[] dataGridViewRows, ref Point newCurrentCell)
		{
			if (this.ptCurrentCell.Y != -1 && rowIndexInserted <= this.ptCurrentCell.Y)
			{
				newCurrentCell = new Point(this.ptCurrentCell.X, this.ptCurrentCell.Y + dataGridViewRows.Length);
				this.ResetCurrentCell();
			}
			else
			{
				newCurrentCell = new Point(-1, -1);
			}
			this.OnAddingRows(dataGridViewRows, false);
			this.CorrectRowFrozenStates(dataGridViewRows, rowIndexInserted);
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.FullRowSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
			{
				int num = this.selectedBandIndexes.Count;
				for (int i = 0; i < num; i++)
				{
					int num2 = this.selectedBandIndexes[i];
					if (rowIndexInserted <= num2)
					{
						this.selectedBandIndexes[i] = num2 + dataGridViewRows.Length;
					}
				}
				if (this.selectedBandSnapshotIndexes != null)
				{
					num = this.selectedBandSnapshotIndexes.Count;
					for (int i = 0; i < num; i++)
					{
						int num3 = this.selectedBandSnapshotIndexes[i];
						if (rowIndexInserted <= num3)
						{
							this.selectedBandSnapshotIndexes[i] = num3 + dataGridViewRows.Length;
						}
					}
				}
				break;
			}
			case DataGridViewSelectionMode.FullColumnSelect:
				break;
			default:
				return;
			}
		}

		// Token: 0x06002FBF RID: 12223 RVA: 0x00093A78 File Offset: 0x00092A78
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected override void OnKeyDown(KeyEventArgs e)
		{
			base.OnKeyDown(e);
			if (e.Handled)
			{
				return;
			}
			if (this.ptCurrentCell.X != -1)
			{
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				if (currentCellInternal.KeyDownUnsharesRowInternal(e, this.ptCurrentCell.Y))
				{
					DataGridViewRow dataGridViewRow = this.Rows[this.ptCurrentCell.Y];
					this.CurrentCellInternal.OnKeyDownInternal(e, this.ptCurrentCell.Y);
				}
				else
				{
					currentCellInternal.OnKeyDownInternal(e, this.ptCurrentCell.Y);
				}
			}
			if (!e.Handled)
			{
				Keys keys = e.KeyData & Keys.KeyCode;
				if (keys <= Keys.D0)
				{
					if (keys != Keys.Tab && keys != Keys.Return)
					{
						switch (keys)
						{
						case Keys.Escape:
						case Keys.Space:
						case Keys.Prior:
						case Keys.Next:
						case Keys.End:
						case Keys.Home:
						case Keys.Left:
						case Keys.Up:
						case Keys.Right:
						case Keys.Down:
						case Keys.Insert:
						case Keys.Delete:
						case Keys.D0:
							break;
						case Keys.IMEConvert:
						case Keys.IMENonconvert:
						case Keys.IMEAccept:
						case Keys.IMEModeChange:
						case Keys.Select:
						case Keys.Print:
						case Keys.Execute:
						case Keys.Snapshot:
						case Keys.Help:
							return;
						default:
							return;
						}
					}
				}
				else
				{
					switch (keys)
					{
					case Keys.A:
					case Keys.C:
						break;
					case Keys.B:
						return;
					default:
						if (keys != Keys.NumPad0 && keys != Keys.F2)
						{
							return;
						}
						break;
					}
				}
				e.Handled = this.ProcessDataGridViewKey(e);
			}
		}

		// Token: 0x06002FC0 RID: 12224 RVA: 0x00093BBC File Offset: 0x00092BBC
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected override void OnKeyPress(KeyPressEventArgs e)
		{
			base.OnKeyPress(e);
			if (e.Handled)
			{
				return;
			}
			if (this.ptCurrentCell.X != -1)
			{
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				if (currentCellInternal.KeyPressUnsharesRowInternal(e, this.ptCurrentCell.Y))
				{
					DataGridViewRow dataGridViewRow = this.Rows[this.ptCurrentCell.Y];
					this.CurrentCellInternal.OnKeyPressInternal(e, this.ptCurrentCell.Y);
					return;
				}
				currentCellInternal.OnKeyPressInternal(e, this.ptCurrentCell.Y);
			}
		}

		// Token: 0x06002FC1 RID: 12225 RVA: 0x00093C44 File Offset: 0x00092C44
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		protected override void OnKeyUp(KeyEventArgs e)
		{
			base.OnKeyUp(e);
			if (e.Handled)
			{
				return;
			}
			if (this.ptCurrentCell.X != -1)
			{
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				if (currentCellInternal.KeyUpUnsharesRowInternal(e, this.ptCurrentCell.Y))
				{
					DataGridViewRow dataGridViewRow = this.Rows[this.ptCurrentCell.Y];
					this.CurrentCellInternal.OnKeyUpInternal(e, this.ptCurrentCell.Y);
					return;
				}
				currentCellInternal.OnKeyUpInternal(e, this.ptCurrentCell.Y);
			}
		}

		// Token: 0x06002FC2 RID: 12226 RVA: 0x00093CCC File Offset: 0x00092CCC
		protected override void OnLayout(LayoutEventArgs e)
		{
			if (this.dataGridViewState1[16384])
			{
				return;
			}
			base.OnLayout(e);
			this.PerformLayoutPrivate(false, false, false, false);
			if (this.RightToLeftInternal)
			{
				base.Invalidate();
			}
			if (this.editingControl != null)
			{
				this.PositionEditingControl(true, true, false);
			}
		}

		// Token: 0x06002FC3 RID: 12227 RVA: 0x00093D1C File Offset: 0x00092D1C
		protected override void OnLeave(EventArgs e)
		{
			if (this.ptCurrentCell.X > -1 && !this.dataGridViewState1[64])
			{
				DataGridViewCell dataGridViewCell = null;
				this.OnCellLeave(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
				if (this.ptCurrentCell.X == -1)
				{
					return;
				}
				this.OnRowLeave(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
			}
			if (!this.dataGridViewState1[64])
			{
				base.OnLeave(e);
				if (this.ptCurrentCell.X > -1 && this.ptCurrentCell.Y > -1)
				{
					this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
			}
		}

		// Token: 0x06002FC4 RID: 12228 RVA: 0x00093DE1 File Offset: 0x00092DE1
		protected override void OnLostFocus(EventArgs e)
		{
			base.OnLostFocus(e);
			if (this.ptCurrentCell.X != -1)
			{
				this.InvalidateCell(this.ptCurrentCell.X, this.ptCurrentCell.Y);
			}
		}

		// Token: 0x06002FC5 RID: 12229 RVA: 0x00093E14 File Offset: 0x00092E14
		protected override void OnMouseClick(MouseEventArgs e)
		{
			bool flag = false;
			if (!this.dataGridViewState2[134217728] && !this.dataGridViewOper[1048576] && !base.IsDisposed && !this.dataGridViewOper[1] && !this.dataGridViewOper[2] && !this.dataGridViewOper[128] && !this.dataGridViewOper[256])
			{
				DataGridView.HitTestInfo hitTestInfo = this.HitTest(e.X, e.Y);
				if (this.ptMouseDownCell.X == hitTestInfo.col && this.ptMouseDownCell.Y == hitTestInfo.row && (e.Button != MouseButtons.Left || this.ptMouseDownCell.X == -1 || this.ptMouseDownCell.Y == -1 || (this.ptMouseDownCell.X == this.ptCurrentCell.X && this.ptMouseDownCell.Y == this.ptCurrentCell.Y)))
				{
					DataGridViewCellMouseEventArgs dataGridViewCellMouseEventArgs = null;
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
					{
						int num = e.X - hitTestInfo.ColumnX;
						if (this.RightToLeftInternal)
						{
							num += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
						}
						dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, e);
						this.RecordCellMouseClick(dataGridViewCellMouseEventArgs);
						if (e.Button == MouseButtons.Left)
						{
							this.OnCellClick(new DataGridViewCellEventArgs(hitTestInfo.col, hitTestInfo.row));
						}
						base.OnMouseClick(e);
						flag = true;
						if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
						{
							this.OnCellMouseClick(dataGridViewCellMouseEventArgs);
						}
					}
					else
					{
						base.OnMouseClick(e);
						flag = true;
					}
					if (!this.dataGridViewOper[32])
					{
						DataGridView.DataGridViewHitTestTypeInternal typeInternal = hitTestInfo.typeInternal;
						switch (typeInternal)
						{
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader:
							break;
						case DataGridView.DataGridViewHitTestTypeInternal.RowHeader:
							if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
							{
								this.OnRowHeaderMouseClick(dataGridViewCellMouseEventArgs);
								goto IL_02B3;
							}
							goto IL_02B3;
						default:
							if (typeInternal != DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft)
							{
								switch (typeInternal)
								{
								case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft:
								case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight:
									break;
								default:
									goto IL_02B3;
								}
							}
							break;
						}
						if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
						{
							this.OnColumnHeaderMouseClick(dataGridViewCellMouseEventArgs);
						}
					}
				}
			}
			IL_02B3:
			if (!flag)
			{
				base.OnMouseClick(e);
			}
		}

		// Token: 0x06002FC6 RID: 12230 RVA: 0x000940E0 File Offset: 0x000930E0
		protected override void OnMouseDoubleClick(MouseEventArgs e)
		{
			base.OnMouseDoubleClick(e);
			if (!this.dataGridViewState2[134217728] && !this.dataGridViewOper[1] && !this.dataGridViewOper[2] && !this.dataGridViewOper[128] && !this.dataGridViewOper[256])
			{
				DataGridView.HitTestInfo hitTestInfo = this.HitTest(e.X, e.Y);
				if (this.ptMouseDownCell.X == hitTestInfo.col && this.ptMouseDownCell.Y == hitTestInfo.row)
				{
					DataGridViewCellMouseEventArgs dataGridViewCellMouseEventArgs = null;
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
					{
						int num = e.X - hitTestInfo.ColumnX;
						if (this.RightToLeftInternal)
						{
							num += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
						}
						dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, e);
						this.OnCellMouseDoubleClick(dataGridViewCellMouseEventArgs);
					}
					if (!this.dataGridViewOper[32])
					{
						switch (hitTestInfo.typeInternal)
						{
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeader:
						case DataGridView.DataGridViewHitTestTypeInternal.FirstColumnHeaderLeft:
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderLeft:
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeaderRight:
							if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
							{
								this.OnColumnHeaderMouseDoubleClick(dataGridViewCellMouseEventArgs);
								return;
							}
							break;
						case DataGridView.DataGridViewHitTestTypeInternal.RowHeader:
							if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
							{
								this.OnRowHeaderMouseDoubleClick(dataGridViewCellMouseEventArgs);
								return;
							}
							break;
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft:
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight:
						{
							int num2 = ((hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight) ? hitTestInfo.col : hitTestInfo.adjacentCol);
							if (num2 < this.Columns.Count)
							{
								HandledMouseEventArgs handledMouseEventArgs = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
								DataGridViewColumnDividerDoubleClickEventArgs dataGridViewColumnDividerDoubleClickEventArgs = new DataGridViewColumnDividerDoubleClickEventArgs(num2, handledMouseEventArgs);
								this.OnColumnDividerDoubleClick(dataGridViewColumnDividerDoubleClickEventArgs);
								return;
							}
							break;
						}
						case DataGridView.DataGridViewHitTestTypeInternal.RowResizeTop:
						case DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom:
						{
							int num3 = ((hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom) ? hitTestInfo.row : hitTestInfo.adjacentRow);
							if (num3 < this.Rows.Count)
							{
								HandledMouseEventArgs handledMouseEventArgs2 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
								DataGridViewRowDividerDoubleClickEventArgs dataGridViewRowDividerDoubleClickEventArgs = new DataGridViewRowDividerDoubleClickEventArgs(num3, handledMouseEventArgs2);
								this.OnRowDividerDoubleClick(dataGridViewRowDividerDoubleClickEventArgs);
								return;
							}
							break;
						}
						case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeader:
							break;
						case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft:
						case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight:
						case DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeRight:
						case DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeLeft:
						{
							HandledMouseEventArgs handledMouseEventArgs3 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
							DataGridViewColumnDividerDoubleClickEventArgs dataGridViewColumnDividerDoubleClickEventArgs2 = new DataGridViewColumnDividerDoubleClickEventArgs(-1, handledMouseEventArgs3);
							this.OnColumnDividerDoubleClick(dataGridViewColumnDividerDoubleClickEventArgs2);
							break;
						}
						case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop:
						case DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom:
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom:
						case DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop:
						{
							HandledMouseEventArgs handledMouseEventArgs4 = new HandledMouseEventArgs(e.Button, e.Clicks, e.X, e.Y, e.Delta, false);
							DataGridViewRowDividerDoubleClickEventArgs dataGridViewRowDividerDoubleClickEventArgs2 = new DataGridViewRowDividerDoubleClickEventArgs(-1, handledMouseEventArgs4);
							this.OnRowDividerDoubleClick(dataGridViewRowDividerDoubleClickEventArgs2);
							return;
						}
						default:
							return;
						}
					}
				}
			}
		}

		// Token: 0x06002FC7 RID: 12231 RVA: 0x00094424 File Offset: 0x00093424
		protected override void OnMouseDown(MouseEventArgs e)
		{
			if (!this.dataGridViewState2[134217728])
			{
				this.dataGridViewOper[512] = true;
			}
			base.OnMouseDown(e);
			if (this.dataGridViewState2[134217728])
			{
				return;
			}
			if (this.ptMouseDownCell.X != -2)
			{
				return;
			}
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(e.X, e.Y);
			if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
			{
				this.ptMouseDownCell.X = hitTestInfo.col;
				this.ptMouseDownCell.Y = hitTestInfo.row;
				this.ptMouseDownGridCoord = new Point(e.X, e.Y);
				int num = e.X - hitTestInfo.ColumnX;
				if (this.RightToLeftInternal)
				{
					num += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
				}
				DataGridViewCellMouseEventArgs dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, e);
				this.OnCellMouseDown(dataGridViewCellMouseEventArgs);
			}
		}

		// Token: 0x06002FC8 RID: 12232 RVA: 0x00094558 File Offset: 0x00093558
		protected override void OnMouseEnter(EventArgs e)
		{
			if (!this.dataGridViewState2[8] && !this.dataGridViewState2[16] && this.dataGridViewState2[32] && !this.toolTipControl.Activated)
			{
				base.OnMouseEnter(e);
			}
			this.dataGridViewState2[8] = false;
			this.dataGridViewState2[16] = false;
			this.dataGridViewState2[32] = false;
		}

		// Token: 0x06002FC9 RID: 12233 RVA: 0x000945D0 File Offset: 0x000935D0
		protected override void OnMouseLeave(EventArgs e)
		{
			if (this.dataGridViewState1[16777216])
			{
				this.dataGridViewState1[16777216] = false;
				this.CursorInternal = this.oldCursor;
			}
			bool mouseOverEditingControl = this.MouseOverEditingControl;
			bool mouseOverEditingPanel = this.MouseOverEditingPanel;
			bool flag = this.toolTipControl.Activated && base.ClientRectangle.Contains(base.PointToClient(Control.MousePosition));
			if (!mouseOverEditingPanel && !mouseOverEditingControl && !flag && this.ptMouseEnteredCell.X != -2)
			{
				if (this.ptMouseEnteredCell.X >= -1 && this.ptMouseEnteredCell.X < this.Columns.Count && this.ptMouseEnteredCell.Y >= -1 && this.ptMouseEnteredCell.Y < this.Rows.Count)
				{
					DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(this.ptMouseEnteredCell.X, this.ptMouseEnteredCell.Y);
					this.OnCellMouseLeave(dataGridViewCellEventArgs);
				}
				else
				{
					this.ptMouseEnteredCell.X = (this.ptMouseEnteredCell.Y = -2);
				}
			}
			this.ResetTrackingState();
			this.dataGridViewOper[512] = false;
			if (!mouseOverEditingPanel && !mouseOverEditingControl && !flag && !this.MouseOverScrollBar)
			{
				this.toolTipControl.Activate(false);
				base.OnMouseLeave(e);
				this.dataGridViewState2[32] = true;
			}
		}

		// Token: 0x06002FCA RID: 12234 RVA: 0x00094740 File Offset: 0x00093740
		protected override void OnMouseMove(MouseEventArgs e)
		{
			base.OnMouseMove(e);
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(e.X, e.Y);
			this.UpdateMouseEnteredCell(hitTestInfo, e);
			if (this.dataGridViewOper[1])
			{
				this.MoveRowHeadersOrColumnResize(e);
			}
			else if (this.dataGridViewOper[2])
			{
				this.MoveColumnHeadersOrRowResize(e);
			}
			else if (this.dataGridViewOper[32])
			{
				this.MoveColumnRelocation(e, hitTestInfo);
			}
			else if (this.dataGridViewOper[128])
			{
				this.MoveColumnHeadersOrRowResize(e);
			}
			else if (this.dataGridViewOper[256])
			{
				this.MoveRowHeadersOrColumnResize(e);
			}
			if (this.dataGridViewOper[1] || this.dataGridViewOper[256] || ((hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeLeft || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeLeft || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeRight || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnResizeRight || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeLeft || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowHeadersResizeRight) && !this.dataGridViewOper[128] && !this.dataGridViewOper[32] && !this.dataGridViewOper[4] && !this.dataGridViewOper[8] && !this.dataGridViewOper[16]))
			{
				if (!this.dataGridViewState1[16777216])
				{
					this.dataGridViewState1[16777216] = true;
					this.oldCursor = this.Cursor;
				}
				this.CursorInternal = Cursors.SizeWE;
				return;
			}
			if (this.dataGridViewOper[2] || this.dataGridViewOper[128] || ((hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowResizeBottom || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeTop || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.TopLeftHeaderResizeBottom || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.RowResizeTop || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeTop || hitTestInfo.typeInternal == DataGridView.DataGridViewHitTestTypeInternal.ColumnHeadersResizeBottom) && !this.dataGridViewOper[256] && !this.dataGridViewOper[32] && !this.dataGridViewOper[4] && !this.dataGridViewOper[8] && !this.dataGridViewOper[16]))
			{
				if (!this.dataGridViewState1[16777216])
				{
					this.dataGridViewState1[16777216] = true;
					this.oldCursor = this.Cursor;
				}
				this.CursorInternal = Cursors.SizeNS;
				return;
			}
			if (this.dataGridViewState1[16777216])
			{
				this.dataGridViewState1[16777216] = false;
				this.CursorInternal = this.oldCursor;
			}
			if (this.dataGridViewOper[4] || this.dataGridViewOper[8] || this.dataGridViewOper[16])
			{
				int x = e.X;
				int y = e.Y;
				int num;
				int num2;
				if (this.GetOutOfBoundCorrectedHitTestInfo(ref hitTestInfo, ref x, ref y, out num, out num2))
				{
					if (num == 0)
					{
						if (this.horizScrollTimer != null && this.horizScrollTimer.Enabled)
						{
							this.horizScrollTimer.Enabled = false;
						}
					}
					else if (this.horizScrollTimer == null || !this.horizScrollTimer.Enabled)
					{
						this.HorizScrollTimer.Interval = DataGridView.GetColumnScrollRate(Math.Abs(num));
						this.HorizScrollTimer.Enabled = true;
					}
					if (num2 == 0)
					{
						if (this.vertScrollTimer != null && this.vertScrollTimer.Enabled)
						{
							this.vertScrollTimer.Enabled = false;
						}
					}
					else if (this.vertScrollTimer == null || !this.vertScrollTimer.Enabled)
					{
						this.VertScrollTimer.Interval = DataGridView.GetRowScrollRate(Math.Abs(num2));
						this.VertScrollTimer.Enabled = true;
					}
					if (this.HorizScrollTimer.Enabled || this.VertScrollTimer.Enabled)
					{
						return;
					}
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
					{
						if (this.dataGridViewOper[4] && hitTestInfo.col >= 0)
						{
							this.OnColumnSelectMouseMove(hitTestInfo);
						}
						else if (this.dataGridViewOper[8] && hitTestInfo.row >= 0)
						{
							this.OnRowSelectMouseMove(hitTestInfo);
						}
						else if (this.dataGridViewOper[16] && hitTestInfo.col >= 0 && hitTestInfo.row >= 0)
						{
							this.OnCellSelectMouseMove(hitTestInfo);
						}
					}
				}
			}
			if (!this.toolTipControl.Activated)
			{
				this.ptToolTipCell = new Point(-1, -1);
			}
		}

		// Token: 0x06002FCB RID: 12235 RVA: 0x00094BB0 File Offset: 0x00093BB0
		protected override void OnMouseUp(MouseEventArgs e)
		{
			if (!this.dataGridViewState2[134217728])
			{
				this.dataGridViewState1[2048] = false;
				DataGridView.HitTestInfo hitTestInfo = this.HitTest(e.X, e.Y);
				if (!this.dataGridViewOper[1] && !this.dataGridViewOper[2] && !this.dataGridViewOper[32] && !this.dataGridViewOper[128] && !this.dataGridViewOper[256])
				{
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
					{
						int num = e.X - hitTestInfo.ColumnX;
						if (this.RightToLeftInternal)
						{
							num += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
						}
						DataGridViewCellMouseEventArgs dataGridViewCellMouseEventArgs;
						if (this.dataGridViewState2[8388608])
						{
							MouseEventArgs mouseEventArgs = new MouseEventArgs(e.Button, 2, e.X, e.Y, e.Delta);
							dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, mouseEventArgs);
						}
						else
						{
							dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, e);
						}
						if (hitTestInfo.col >= 0 && this.ptMouseDownCell.X == hitTestInfo.col && hitTestInfo.row >= 0 && this.ptMouseDownCell.Y == hitTestInfo.row && this.EditMode == DataGridViewEditMode.EditOnEnter && this.editingControl != null)
						{
							this.OnClick(e);
							this.OnMouseClick(e);
						}
						this.CorrectFocus(true);
						if (dataGridViewCellMouseEventArgs.ColumnIndex < this.Columns.Count && dataGridViewCellMouseEventArgs.RowIndex < this.Rows.Count)
						{
							this.OnCellMouseUp(dataGridViewCellMouseEventArgs);
						}
					}
					else if (hitTestInfo.Type == DataGridViewHitTestType.None)
					{
						this.CorrectFocus(true);
					}
				}
				else
				{
					if (this.dataGridViewOper[1])
					{
						this.EndColumnResize(e);
					}
					if (this.dataGridViewOper[2])
					{
						this.EndRowResize(e);
					}
					if (this.dataGridViewOper[32])
					{
						this.EndColumnRelocation(e, hitTestInfo);
					}
					if (this.dataGridViewOper[128])
					{
						this.EndColumnHeadersResize(e);
					}
					if (this.dataGridViewOper[256])
					{
						this.EndRowHeadersResize(e);
					}
					this.CorrectFocus(true);
					hitTestInfo = this.HitTest(e.X, e.Y);
					if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
					{
						int num2 = e.X - hitTestInfo.ColumnX;
						if (this.RightToLeftInternal)
						{
							num2 += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
						}
						this.OnCellMouseUp(new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num2, e.Y - hitTestInfo.RowY, e));
					}
				}
				this.ResetTrackingState();
			}
			base.OnMouseUp(e);
		}

		// Token: 0x06002FCC RID: 12236 RVA: 0x00094EF8 File Offset: 0x00093EF8
		protected override void OnMouseWheel(MouseEventArgs e)
		{
			base.OnMouseWheel(e);
			HandledMouseEventArgs handledMouseEventArgs = e as HandledMouseEventArgs;
			if (handledMouseEventArgs != null && handledMouseEventArgs.Handled)
			{
				return;
			}
			if ((Control.ModifierKeys & (Keys.Shift | Keys.Alt)) != Keys.None || Control.MouseButtons != MouseButtons.None)
			{
				return;
			}
			bool flag = (Control.ModifierKeys & Keys.Control) == Keys.None;
			ScrollBar scrollBar = (flag ? this.vertScrollBar : this.horizScrollBar);
			if (!scrollBar.Visible || !scrollBar.Enabled)
			{
				return;
			}
			if (handledMouseEventArgs != null)
			{
				handledMouseEventArgs.Handled = true;
			}
			int mouseWheelScrollLines = SystemInformation.MouseWheelScrollLines;
			if (mouseWheelScrollLines == 0)
			{
				return;
			}
			float num;
			if (flag)
			{
				this.cumulativeVerticalWheelDelta += e.Delta;
				num = (float)this.cumulativeVerticalWheelDelta / 120f;
			}
			else
			{
				this.cumulativeHorizontalWheelDelta += e.Delta;
				num = (float)this.cumulativeHorizontalWheelDelta / 120f;
			}
			int num2 = (int)num;
			if (mouseWheelScrollLines == -1)
			{
				if (num2 != 0)
				{
					if (this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, false, false))
					{
						return;
					}
					if (flag)
					{
						int num3 = this.VerticalOffset;
						this.VerticalOffset -= num2 * this.vertScrollBar.LargeChange;
						if (Math.Abs(this.VerticalOffset - num3) >= Math.Abs(num2 * this.vertScrollBar.LargeChange))
						{
							this.cumulativeVerticalWheelDelta -= num2 * 120;
							return;
						}
						this.cumulativeVerticalWheelDelta = 0;
						return;
					}
					else
					{
						int num4 = this.HorizontalOffset;
						this.HorizontalOffset -= num2 * this.horizScrollBar.LargeChange;
						if (Math.Abs(this.HorizontalOffset - num4) >= Math.Abs(num2 * this.horizScrollBar.LargeChange))
						{
							this.cumulativeHorizontalWheelDelta -= num2 * 120;
							return;
						}
						this.cumulativeHorizontalWheelDelta = 0;
						return;
					}
				}
			}
			else
			{
				int num5 = (int)((float)mouseWheelScrollLines * num);
				if (num5 != 0)
				{
					if (this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, false, false))
					{
						return;
					}
					if (flag)
					{
						if (num5 > 0)
						{
							int num6 = num5;
							while (this.vertScrollBar.Value != this.vertScrollBar.Minimum && num6 > 0)
							{
								this.ScrollRowsByCount(-1, ScrollEventType.SmallDecrement);
								num6--;
							}
							if (this.vertScrollBar.Value == this.vertScrollBar.Minimum)
							{
								this.cumulativeVerticalWheelDelta = 0;
								return;
							}
							this.cumulativeVerticalWheelDelta -= (int)((float)num5 * (120f / (float)mouseWheelScrollLines));
							return;
						}
						else
						{
							int num6 = -num5;
							int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
							while (num6 > 0 && this.vertScrollBar.Value + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow) <= this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight))
							{
								this.ScrollRowsByCount(1, ScrollEventType.SmallIncrement);
								num6--;
							}
							if (this.vertScrollBar.Value + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow) > this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight))
							{
								this.cumulativeVerticalWheelDelta = 0;
								return;
							}
							this.cumulativeVerticalWheelDelta -= (int)((float)num5 * (120f / (float)mouseWheelScrollLines));
							return;
						}
					}
					else
					{
						int num7;
						int num8;
						if (num5 > 0)
						{
							num7 = this.horizScrollBar.Minimum;
							num8 = -1;
						}
						else
						{
							num7 = this.horizScrollBar.Maximum;
							num8 = 1;
						}
						int num6 = Math.Abs(num5);
						while (this.horizScrollBar.Value != num7 && num6 > 0)
						{
							this.ScrollColumns(num8);
							num6--;
						}
						if (this.horizScrollBar.Value == num7)
						{
							this.cumulativeHorizontalWheelDelta = 0;
							return;
						}
						this.cumulativeHorizontalWheelDelta -= (int)((float)num5 * (120f / (float)mouseWheelScrollLines));
					}
				}
			}
		}

		// Token: 0x06002FCD RID: 12237 RVA: 0x000952BE File Offset: 0x000942BE
		internal void OnMouseWheelInternal(MouseEventArgs e)
		{
			this.OnMouseWheel(e);
		}

		// Token: 0x06002FCE RID: 12238 RVA: 0x000952C8 File Offset: 0x000942C8
		protected virtual void OnMultiSelectChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWMULTISELECTCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002FCF RID: 12239 RVA: 0x00095310 File Offset: 0x00094310
		protected virtual void OnNewRowNeeded(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWNEWROWNEEDED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06002FD0 RID: 12240 RVA: 0x0009537C File Offset: 0x0009437C
		protected override void OnPaint(PaintEventArgs e)
		{
			try
			{
				if (this.layout.dirty)
				{
					this.PerformLayoutPrivate(false, true, false, false);
				}
				Graphics graphics = e.Graphics;
				bool flag = false;
				bool flag2 = false;
				Rectangle rectangle = e.ClipRectangle;
				Rectangle rectangle2 = this.layout.Data;
				if (this.layout.RowHeadersVisible)
				{
					rectangle2 = Rectangle.Union(rectangle2, this.layout.RowHeaders);
				}
				else if (this.SingleVerticalBorderAdded)
				{
					flag = true;
					if (!this.RightToLeftInternal)
					{
						rectangle2.X--;
					}
					rectangle2.Width++;
				}
				if (this.layout.ColumnHeadersVisible)
				{
					rectangle2 = Rectangle.Union(rectangle2, this.layout.ColumnHeaders);
				}
				else if (this.SingleHorizontalBorderAdded)
				{
					flag2 = true;
					if (rectangle2.Y == this.layout.Data.Y)
					{
						rectangle2.Y--;
						rectangle2.Height++;
					}
				}
				if (this.currentRowSplitBar != -1)
				{
					rectangle = Rectangle.Union(rectangle, this.CalcRowResizeFeedbackRect(this.currentRowSplitBar));
				}
				else if (this.currentColSplitBar != -1)
				{
					rectangle = Rectangle.Union(rectangle, this.CalcColResizeFeedbackRect(this.currentColSplitBar));
				}
				if (rectangle.IntersectsWith(rectangle2))
				{
					using (Region clip = graphics.Clip)
					{
						graphics.SetClip(rectangle2);
						this.PaintBackground(graphics, rectangle, rectangle2);
						this.PaintGrid(graphics, rectangle2, rectangle, flag, flag2);
						graphics.Clip = clip;
					}
				}
				this.PaintBorder(graphics, rectangle, this.layout.ClientRectangle);
				if (rectangle.IntersectsWith(this.layout.ResizeBoxRect))
				{
					graphics.FillRectangle(SystemBrushes.Control, this.layout.ResizeBoxRect);
				}
				base.OnPaint(e);
			}
			catch (Exception ex)
			{
				if (ClientUtils.IsCriticalException(ex))
				{
					throw;
				}
			}
		}

		// Token: 0x06002FD1 RID: 12241 RVA: 0x00095580 File Offset: 0x00094580
		internal override void OnParentBecameInvisible()
		{
			base.OnParentBecameInvisible();
			if (base.GetState(2))
			{
				this.OnVisibleChangedPrivate();
			}
		}

		// Token: 0x06002FD2 RID: 12242 RVA: 0x00095598 File Offset: 0x00094598
		protected virtual void OnReadOnlyChanged(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWREADONLYCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
			base.VerifyImeRestrictedModeChanged();
			if (!this.ReadOnly && this.ptCurrentCell.X != -1 && this.ColumnEditable(this.ptCurrentCell.X) && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)) && !this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X].ReadOnly)
			{
				this.BeginEditInternal(true);
			}
		}

		// Token: 0x06002FD3 RID: 12243 RVA: 0x00095672 File Offset: 0x00094672
		internal void OnRemovedColumn_PreNotification(DataGridViewColumn dataGridViewColumn)
		{
			if (dataGridViewColumn.HasHeaderCell)
			{
				dataGridViewColumn.HeaderCell.SortGlyphDirectionInternal = SortOrder.None;
			}
			this.CorrectColumnIndexesAfterDeletion(dataGridViewColumn);
			this.CorrectColumnDisplayIndexesAfterDeletion(dataGridViewColumn);
			this.displayedBandsInfo.CorrectRowIndexAfterDeletion(dataGridViewColumn.Index);
			this.OnColumnRemoved(dataGridViewColumn);
		}

		// Token: 0x06002FD4 RID: 12244 RVA: 0x000956B0 File Offset: 0x000946B0
		internal void OnRemovedColumn_PostNotification(DataGridViewColumn dataGridViewColumn, Point newCurrentCell)
		{
			if (newCurrentCell.X != -1)
			{
				this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, false);
			}
			this.FlushSelectionChanged();
			this.OnColumnHidden(dataGridViewColumn);
			DataGridViewAutoSizeColumnMode inheritedAutoSizeMode = dataGridViewColumn.GetInheritedAutoSizeMode(this);
			if (inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.None && inheritedAutoSizeMode != DataGridViewAutoSizeColumnMode.Fill && dataGridViewColumn.ThicknessInternal != dataGridViewColumn.CachedThickness)
			{
				dataGridViewColumn.ThicknessInternal = Math.Max(dataGridViewColumn.MinimumWidth, dataGridViewColumn.CachedThickness);
			}
			this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
		}

		// Token: 0x06002FD5 RID: 12245 RVA: 0x00095732 File Offset: 0x00094732
		internal void OnRemovedRow_PreNotification(int rowIndexDeleted)
		{
			this.displayedBandsInfo.CorrectRowIndexAfterDeletion(rowIndexDeleted);
			this.CorrectRowIndexesAfterDeletion(rowIndexDeleted);
			this.ComputeVisibleRows();
		}

		// Token: 0x06002FD6 RID: 12246 RVA: 0x00095750 File Offset: 0x00094750
		internal void OnRemovedRow_PostNotification(DataGridViewRow dataGridViewRow, Point newCurrentCell)
		{
			if (newCurrentCell.Y != -1)
			{
				this.SetAndSelectCurrentCellAddress(newCurrentCell.X, newCurrentCell.Y, true, false, false, false, false);
			}
			this.FlushSelectionChanged();
			bool flag = dataGridViewRow.DataGridView == null && dataGridViewRow.Displayed;
			if (flag)
			{
				dataGridViewRow.DisplayedInternal = false;
				DataGridViewRowStateChangedEventArgs dataGridViewRowStateChangedEventArgs = new DataGridViewRowStateChangedEventArgs(dataGridViewRow, DataGridViewElementStates.Displayed);
				this.OnRowStateChanged(-1, dataGridViewRowStateChangedEventArgs);
			}
			if (this.autoSizeRowsMode != DataGridViewAutoSizeRowsMode.None && dataGridViewRow.ThicknessInternal != dataGridViewRow.CachedThickness)
			{
				dataGridViewRow.ThicknessInternal = Math.Max(dataGridViewRow.MinimumHeight, dataGridViewRow.CachedThickness);
			}
			DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = DataGridViewAutoSizeColumnCriteriaInternal.AllRows;
			if (flag)
			{
				dataGridViewAutoSizeColumnCriteriaInternal |= DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows;
			}
			bool flag2 = this.AutoResizeAllVisibleColumnsInternal(dataGridViewAutoSizeColumnCriteriaInternal, true);
			bool flag3 = this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize;
			bool flag4 = this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			if (flag4 && !flag2)
			{
				flag3 = true;
			}
			if (!flag3)
			{
				this.AutoResizeColumnHeadersHeight(flag4, true);
			}
			if (!flag4)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			if (!flag3 && !flag4)
			{
				this.AutoResizeColumnHeadersHeight(true, true);
			}
		}

		// Token: 0x06002FD7 RID: 12247 RVA: 0x00095850 File Offset: 0x00094850
		internal void OnRemovingColumn(DataGridViewColumn dataGridViewColumn, out Point newCurrentCell, bool force)
		{
			this.dataGridViewState1[4194304] = false;
			int index = dataGridViewColumn.Index;
			if (this.ptCurrentCell.X != -1)
			{
				int num = this.ptCurrentCell.X;
				if (index == this.ptCurrentCell.X)
				{
					DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[index], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					if (nextColumn != null)
					{
						if (nextColumn.Index > index)
						{
							num = nextColumn.Index - 1;
						}
						else
						{
							num = nextColumn.Index;
						}
					}
					else
					{
						DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[index], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						if (previousColumn != null)
						{
							if (previousColumn.Index > index)
							{
								num = previousColumn.Index - 1;
							}
							else
							{
								num = previousColumn.Index;
							}
						}
						else
						{
							num = -1;
						}
					}
				}
				else if (index < this.ptCurrentCell.X)
				{
					num = this.ptCurrentCell.X - 1;
				}
				newCurrentCell = new Point(num, (num == -1) ? (-1) : this.ptCurrentCell.Y);
				if (index == this.ptCurrentCell.X)
				{
					this.SetCurrentCellAddressCore(-1, -1, true, false, false);
				}
				else if (force)
				{
					this.dataGridViewState1[4194304] = true;
					this.SetCurrentCellAddressCore(-1, -1, true, false, false);
				}
				else
				{
					this.ResetCurrentCell();
				}
			}
			else
			{
				newCurrentCell = new Point(-1, -1);
			}
			if (this.Columns.Count == 1)
			{
				this.Rows.ClearInternal(false);
			}
			int num2 = this.Columns.Count - 1;
			for (int i = 0; i < this.Rows.Count; i++)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(i);
				if (dataGridViewRow.Cells.Count > num2)
				{
					dataGridViewRow.Cells.RemoveAtInternal(index);
				}
			}
			if (dataGridViewColumn.HasHeaderCell)
			{
				dataGridViewColumn.HeaderCell.DataGridViewInternal = null;
			}
			if (dataGridViewColumn == this.sortedColumn)
			{
				this.sortedColumn = null;
				this.sortOrder = SortOrder.None;
				if (dataGridViewColumn.IsDataBound)
				{
					for (int j = 0; j < this.Columns.Count; j++)
					{
						if (dataGridViewColumn != this.Columns[j] && this.Columns[j].SortMode != DataGridViewColumnSortMode.NotSortable && string.Compare(dataGridViewColumn.DataPropertyName, this.Columns[j].DataPropertyName, true, CultureInfo.InvariantCulture) == 0)
						{
							this.sortedColumn = this.Columns[j];
							this.sortOrder = this.Columns[j].HeaderCell.SortGlyphDirection;
							break;
						}
					}
				}
			}
			if (dataGridViewColumn.Visible && !dataGridViewColumn.Frozen && this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0)
			{
				if (this.displayedBandsInfo.FirstDisplayedScrollingCol == dataGridViewColumn.Index)
				{
					this.horizontalOffset -= this.negOffset;
					this.negOffset = 0;
				}
				else if (this.Columns.DisplayInOrder(this.displayedBandsInfo.FirstDisplayedScrollingCol, dataGridViewColumn.Index))
				{
					if (this.horizScrollBar.Enabled)
					{
						int num3 = this.horizScrollBar.Maximum - this.horizScrollBar.LargeChange - dataGridViewColumn.Thickness;
						if (num3 >= 0 && num3 < this.horizScrollBar.Value)
						{
							this.horizontalOffset = num3;
							this.negOffset = this.GetNegOffsetFromHorizontalOffset(this.horizontalOffset);
						}
					}
					else
					{
						this.horizontalOffset = (this.negOffset = 0);
					}
				}
				else
				{
					this.horizontalOffset -= dataGridViewColumn.Thickness;
				}
				if (this.horizScrollBar.Enabled)
				{
					this.horizScrollBar.Value = this.horizontalOffset;
				}
			}
			bool flag = false;
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.FullColumnSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
			{
				int num4 = this.selectedBandIndexes.Count;
				int k = 0;
				while (k < num4)
				{
					int num5 = this.selectedBandIndexes[k];
					if (index == num5)
					{
						this.selectedBandIndexes.RemoveAt(k);
						num4--;
						flag = true;
					}
					else
					{
						if (index < num5)
						{
							this.selectedBandIndexes[k] = num5 - 1;
						}
						k++;
					}
				}
				break;
			}
			}
			ref BitVector32 ptr = ref this.dataGridViewState2;
			this.dataGridViewState2[262144] = ptr[262144] | (this.individualSelectedCells.RemoveAllCellsAtBand(true, index) > 0 || flag);
			this.individualReadOnlyCells.RemoveAllCellsAtBand(true, index);
		}

		// Token: 0x06002FD8 RID: 12248 RVA: 0x00095CC8 File Offset: 0x00094CC8
		internal void OnRemovingRow(int rowIndexDeleted, out Point newCurrentCell, bool force)
		{
			this.dataGridViewState1[4194304] = false;
			newCurrentCell = new Point(-1, -1);
			if (this.ptCurrentCell.Y != -1 && rowIndexDeleted <= this.ptCurrentCell.Y)
			{
				int num;
				if (rowIndexDeleted == this.ptCurrentCell.Y)
				{
					int previousRow = this.Rows.GetPreviousRow(rowIndexDeleted, DataGridViewElementStates.Visible);
					int nextRow = this.Rows.GetNextRow(rowIndexDeleted, DataGridViewElementStates.Visible);
					if (previousRow > -1 && this.AllowUserToAddRowsInternal)
					{
						if (nextRow > -1 && nextRow < this.Rows.Count - 1)
						{
							num = nextRow - 1;
						}
						else
						{
							num = previousRow;
						}
					}
					else if (nextRow > -1)
					{
						num = nextRow - 1;
					}
					else
					{
						num = previousRow;
					}
					this.IsCurrentCellDirtyInternal = false;
					this.IsCurrentRowDirtyInternal = false;
				}
				else
				{
					num = this.ptCurrentCell.Y - 1;
				}
				newCurrentCell = new Point(this.ptCurrentCell.X, num);
				if (rowIndexDeleted == this.ptCurrentCell.Y)
				{
					this.SetCurrentCellAddressCore(-1, -1, true, false, false);
				}
				else if (force)
				{
					this.dataGridViewState1[4194304] = true;
					this.SetCurrentCellAddressCore(-1, -1, true, false, false);
				}
				else
				{
					this.ResetCurrentCell();
				}
			}
			bool flag = false;
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.FullRowSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
			{
				int num2 = this.selectedBandIndexes.Count;
				int i = 0;
				while (i < num2)
				{
					int num3 = this.selectedBandIndexes[i];
					if (rowIndexDeleted == num3)
					{
						flag = true;
						this.selectedBandIndexes.RemoveAt(i);
						num2--;
					}
					else
					{
						if (rowIndexDeleted < num3)
						{
							this.selectedBandIndexes[i] = num3 - 1;
						}
						i++;
					}
				}
				if (this.selectedBandSnapshotIndexes != null)
				{
					num2 = this.selectedBandSnapshotIndexes.Count;
					i = 0;
					while (i < num2)
					{
						int num4 = this.selectedBandSnapshotIndexes[i];
						if (rowIndexDeleted == num4)
						{
							this.selectedBandSnapshotIndexes.RemoveAt(i);
							num2--;
						}
						else
						{
							if (rowIndexDeleted < num4)
							{
								this.selectedBandSnapshotIndexes[i] = num4 - 1;
							}
							i++;
						}
					}
				}
				break;
			}
			}
			ref BitVector32 ptr = ref this.dataGridViewState2;
			this.dataGridViewState2[262144] = ptr[262144] | (this.individualSelectedCells.RemoveAllCellsAtBand(false, rowIndexDeleted) > 0 || flag);
			this.individualReadOnlyCells.RemoveAllCellsAtBand(false, rowIndexDeleted);
		}

		// Token: 0x06002FD9 RID: 12249 RVA: 0x00095F1C File Offset: 0x00094F1C
		internal void OnReplacedCell(DataGridViewRow dataGridViewRow, int columnIndex)
		{
			DataGridViewCell dataGridViewCell = dataGridViewRow.Cells[columnIndex];
			if (this.dataGridViewState2[65536])
			{
				this.individualSelectedCells.Add(dataGridViewCell);
			}
			if (this.dataGridViewState2[131072])
			{
				this.individualReadOnlyCells.Add(dataGridViewCell);
			}
			this.OnCellCommonChange(columnIndex, dataGridViewRow.Index);
			if (this.ptCurrentCellCache.X != -1)
			{
				if (!this.IsInnerCellOutOfBounds(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y))
				{
					this.SetCurrentCellAddressCore(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y, false, false, false);
				}
				this.ptCurrentCellCache.X = -1;
				this.ptCurrentCellCache.Y = -1;
			}
		}

		// Token: 0x06002FDA RID: 12250 RVA: 0x00095FE4 File Offset: 0x00094FE4
		internal void OnReplacingCell(DataGridViewRow dataGridViewRow, int columnIndex)
		{
			if (this.ptCurrentCell.X == dataGridViewRow.Index && this.ptCurrentCell.Y == columnIndex)
			{
				this.ptCurrentCellCache.X = this.ptCurrentCell.X;
				this.ptCurrentCellCache.Y = this.ptCurrentCell.Y;
				this.ResetCurrentCell();
			}
			else
			{
				this.ptCurrentCellCache.X = -1;
				this.ptCurrentCellCache.Y = -1;
			}
			DataGridViewCell dataGridViewCell = dataGridViewRow.Cells[columnIndex];
			this.dataGridViewState2[65536] = this.individualSelectedCells.Contains(dataGridViewCell);
			if (this.dataGridViewState2[65536])
			{
				this.individualSelectedCells.Remove(dataGridViewCell);
			}
			this.dataGridViewState2[131072] = this.individualReadOnlyCells.Contains(dataGridViewCell);
			if (this.dataGridViewState2[131072])
			{
				this.individualReadOnlyCells.Remove(dataGridViewCell);
			}
		}

		// Token: 0x06002FDB RID: 12251 RVA: 0x000960E4 File Offset: 0x000950E4
		protected override void OnResize(EventArgs e)
		{
			int borderWidth = this.BorderWidth;
			Rectangle clientRectangle = this.layout.ClientRectangle;
			Rectangle rectangle = new Rectangle(clientRectangle.X + clientRectangle.Width - borderWidth, clientRectangle.Y, borderWidth, clientRectangle.Height);
			Rectangle rectangle2 = new Rectangle(clientRectangle.X, clientRectangle.Y + clientRectangle.Height - borderWidth, clientRectangle.Width, borderWidth);
			if (!this.IsMinimized)
			{
				this.normalClientRectangle = base.ClientRectangle;
			}
			Rectangle rectangle3 = this.normalClientRectangle;
			if (rectangle3.Width != clientRectangle.Width)
			{
				base.Invalidate(rectangle);
				rectangle = new Rectangle(rectangle3.X + rectangle3.Width - borderWidth, rectangle3.Y, borderWidth, rectangle3.Height);
				base.Invalidate(rectangle);
			}
			if (rectangle3.Height != clientRectangle.Height)
			{
				base.Invalidate(rectangle2);
				rectangle2 = new Rectangle(rectangle3.X, rectangle3.Y + rectangle3.Height - borderWidth, rectangle3.Width, borderWidth);
				base.Invalidate(rectangle2);
			}
			if (!this.layout.ResizeBoxRect.IsEmpty)
			{
				base.Invalidate(this.layout.ResizeBoxRect);
			}
			this.layout.ClientRectangle = rectangle3;
			int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			base.OnResize(e);
			if (firstDisplayedScrollingRow != this.displayedBandsInfo.FirstDisplayedScrollingRow)
			{
				base.Invalidate();
			}
		}

		// Token: 0x06002FDC RID: 12252 RVA: 0x00096251 File Offset: 0x00095251
		protected override void OnRightToLeftChanged(EventArgs e)
		{
			this.dataGridViewState2[4096] = false;
			base.OnRightToLeftChanged(e);
			this.CorrectFocus(true);
			this.PerformLayoutPrivate(false, false, true, false);
		}

		// Token: 0x06002FDD RID: 12253 RVA: 0x0009627C File Offset: 0x0009527C
		internal void OnRowCollectionChanged_PostNotification(bool recreateNewRow, bool allowSettingCurrentCell, CollectionChangeAction cca, DataGridViewRow dataGridViewRow, int rowIndex)
		{
			if (recreateNewRow && cca == CollectionChangeAction.Refresh && this.Columns.Count != 0 && this.Rows.Count == 0 && this.AllowUserToAddRowsInternal)
			{
				this.AddNewRow(false);
			}
			if (cca == CollectionChangeAction.Refresh)
			{
				this.FlushSelectionChanged();
			}
			if ((cca == CollectionChangeAction.Refresh || cca == CollectionChangeAction.Add) && this.ptCurrentCell.X == -1 && allowSettingCurrentCell && !this.InSortOperation)
			{
				this.MakeFirstDisplayedCellCurrentCell(false);
			}
			if (this.AutoSize)
			{
				bool flag = true;
				switch (cca)
				{
				case CollectionChangeAction.Add:
				{
					DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
					flag = (rowState & DataGridViewElementStates.Visible) != DataGridViewElementStates.None;
					break;
				}
				case CollectionChangeAction.Remove:
					flag = dataGridViewRow.DataGridView == null && dataGridViewRow.Visible;
					break;
				}
				if (flag)
				{
					LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
				}
			}
		}

		// Token: 0x06002FDE RID: 12254 RVA: 0x0009634C File Offset: 0x0009534C
		protected virtual void OnRowContextMenuStripChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06002FDF RID: 12255 RVA: 0x000963B8 File Offset: 0x000953B8
		internal ContextMenuStrip OnRowContextMenuStripNeeded(int rowIndex, ContextMenuStrip contextMenuStrip)
		{
			DataGridViewRowContextMenuStripNeededEventArgs dataGridViewRowContextMenuStripNeededEventArgs = new DataGridViewRowContextMenuStripNeededEventArgs(rowIndex, contextMenuStrip);
			this.OnRowContextMenuStripNeeded(dataGridViewRowContextMenuStripNeededEventArgs);
			return dataGridViewRowContextMenuStripNeededEventArgs.ContextMenuStrip;
		}

		// Token: 0x06002FE0 RID: 12256 RVA: 0x000963DC File Offset: 0x000953DC
		protected virtual void OnRowContextMenuStripNeeded(DataGridViewRowContextMenuStripNeededEventArgs e)
		{
			DataGridViewRowContextMenuStripNeededEventHandler dataGridViewRowContextMenuStripNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPNEEDED] as DataGridViewRowContextMenuStripNeededEventHandler;
			if (dataGridViewRowContextMenuStripNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowContextMenuStripNeededEventHandler(this, e);
			}
		}

		// Token: 0x06002FE1 RID: 12257 RVA: 0x00096424 File Offset: 0x00095424
		protected virtual void OnRowDefaultCellStyleChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			this.OnRowGlobalAutoSize(e.Row.Index);
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWDEFAULTCELLSTYLECHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06002FE2 RID: 12258 RVA: 0x000964A0 File Offset: 0x000954A0
		protected virtual void OnRowDirtyStateNeeded(QuestionEventArgs e)
		{
			QuestionEventHandler questionEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWDIRTYSTATENEEDED] as QuestionEventHandler;
			if (questionEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				questionEventHandler(this, e);
			}
		}

		// Token: 0x06002FE3 RID: 12259 RVA: 0x000964E8 File Offset: 0x000954E8
		protected virtual void OnRowDividerDoubleClick(DataGridViewRowDividerDoubleClickEventArgs e)
		{
			DataGridViewRowDividerDoubleClickEventHandler dataGridViewRowDividerDoubleClickEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERDOUBLECLICK] as DataGridViewRowDividerDoubleClickEventHandler;
			if (dataGridViewRowDividerDoubleClickEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowDividerDoubleClickEventHandler(this, e);
			}
			if (!e.Handled && e.Button == MouseButtons.Left && e.RowIndex < this.Rows.Count)
			{
				if (e.RowIndex == -1)
				{
					this.AutoResizeColumnHeadersHeight(true, true);
					return;
				}
				if (this.autoSizeRowsMode == DataGridViewAutoSizeRowsMode.None)
				{
					this.AutoResizeRowInternal(e.RowIndex, DataGridViewAutoSizeRowMode.AllCells, true, true);
					return;
				}
				this.AutoResizeRowInternal(e.RowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
			}
		}

		// Token: 0x06002FE4 RID: 12260 RVA: 0x0009659C File Offset: 0x0009559C
		protected virtual void OnRowDividerHeightChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			this.OnRowGlobalAutoSize(e.Row.Index);
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWDIVIDERHEIGHTCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06002FE5 RID: 12261 RVA: 0x00096618 File Offset: 0x00095618
		private void OnRowEnter(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex, bool canCreateNewRow, bool validationFailureOccurred)
		{
			if (!validationFailureOccurred)
			{
				this.dataGridViewState1[524288] = false;
			}
			if (rowIndex < this.Rows.Count && columnIndex < this.Columns.Count)
			{
				bool flag = false;
				if (!validationFailureOccurred && this.AllowUserToAddRowsInternal && this.newRowIndex == rowIndex)
				{
					this.dataGridViewState1[524288] = true;
					if (canCreateNewRow)
					{
						DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs(this.Rows[this.newRowIndex]);
						if (this.VirtualMode || this.DataSource != null)
						{
							if (this.dataConnection != null && this.dataConnection.InterestedInRowEvents)
							{
								this.dataConnection.OnNewRowNeeded();
								flag = true;
							}
							if (this.VirtualMode)
							{
								this.OnNewRowNeeded(dataGridViewRowEventArgs);
							}
						}
						if (this.AllowUserToAddRowsInternal)
						{
							this.OnDefaultValuesNeeded(dataGridViewRowEventArgs);
							this.InvalidateRowPrivate(this.newRowIndex);
						}
					}
				}
				if (flag && rowIndex > this.Rows.Count - 1)
				{
					rowIndex = Math.Min(rowIndex, this.Rows.Count - 1);
				}
				DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(columnIndex, rowIndex);
				this.OnRowEnter(dataGridViewCellEventArgs);
				if (this.dataConnection != null && this.dataConnection.InterestedInRowEvents && !this.dataConnection.PositionChangingOutsideDataGridView && !this.dataConnection.ListWasReset && (!flag || this.dataConnection.List.Count > 0))
				{
					this.dataConnection.OnRowEnter(dataGridViewCellEventArgs);
				}
				if (dataGridViewCell != null)
				{
					if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
					{
						dataGridViewCell = null;
						return;
					}
					dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
				}
			}
		}

		// Token: 0x06002FE6 RID: 12262 RVA: 0x000967B8 File Offset: 0x000957B8
		protected virtual void OnRowEnter(DataGridViewCellEventArgs e)
		{
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWENTER] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x06002FE7 RID: 12263 RVA: 0x00096838 File Offset: 0x00095838
		internal void OnRowErrorTextChanged(DataGridViewRow dataGridViewRow)
		{
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs(dataGridViewRow);
			this.OnRowErrorTextChanged(dataGridViewRowEventArgs);
		}

		// Token: 0x06002FE8 RID: 12264 RVA: 0x00096854 File Offset: 0x00095854
		protected virtual void OnRowErrorTextChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			this.UpdateRowErrorText(e.Row.Index);
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06002FE9 RID: 12265 RVA: 0x000968D0 File Offset: 0x000958D0
		internal string OnRowErrorTextNeeded(int rowIndex, string errorText)
		{
			DataGridViewRowErrorTextNeededEventArgs dataGridViewRowErrorTextNeededEventArgs = new DataGridViewRowErrorTextNeededEventArgs(rowIndex, errorText);
			this.OnRowErrorTextNeeded(dataGridViewRowErrorTextNeededEventArgs);
			return dataGridViewRowErrorTextNeededEventArgs.ErrorText;
		}

		// Token: 0x06002FEA RID: 12266 RVA: 0x000968F4 File Offset: 0x000958F4
		protected virtual void OnRowErrorTextNeeded(DataGridViewRowErrorTextNeededEventArgs e)
		{
			DataGridViewRowErrorTextNeededEventHandler dataGridViewRowErrorTextNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWERRORTEXTNEEDED] as DataGridViewRowErrorTextNeededEventHandler;
			if (dataGridViewRowErrorTextNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowErrorTextNeededEventHandler(this, e);
			}
		}

		// Token: 0x06002FEB RID: 12267 RVA: 0x0009693C File Offset: 0x0009593C
		private void OnRowGlobalAutoSize(int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
			{
				return;
			}
			this.InvalidateRowPrivate(rowIndex);
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			DataGridViewAutoSizeRowsModeInternal dataGridViewAutoSizeRowsModeInternal = (DataGridViewAutoSizeRowsModeInternal)this.autoSizeRowsMode;
			bool flag = false;
			bool flag2 = (rowState & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None;
			if (dataGridViewAutoSizeRowsModeInternal != DataGridViewAutoSizeRowsModeInternal.None && ((dataGridViewAutoSizeRowsModeInternal & DataGridViewAutoSizeRowsModeInternal.DisplayedRows) == DataGridViewAutoSizeRowsModeInternal.None || flag2))
			{
				this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
				flag = true;
			}
			DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = DataGridViewAutoSizeColumnCriteriaInternal.AllRows;
			if (flag2)
			{
				dataGridViewAutoSizeColumnCriteriaInternal |= DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows;
			}
			this.AutoResizeAllVisibleColumnsInternal(dataGridViewAutoSizeColumnCriteriaInternal, true);
			bool flag3 = this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(flag3, true);
			}
			if (!flag3)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			if (flag)
			{
				this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
			}
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize && !flag3)
			{
				this.AutoResizeColumnHeadersHeight(true, true);
			}
		}

		// Token: 0x06002FEC RID: 12268 RVA: 0x00096A20 File Offset: 0x00095A20
		protected virtual void OnRowHeaderCellChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			this.OnRowHeaderGlobalAutoSize(e.Row.Index);
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERCELLCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06002FED RID: 12269 RVA: 0x00096A9C File Offset: 0x00095A9C
		private void OnRowHeaderGlobalAutoSize(int rowIndex)
		{
			if (!this.RowHeadersVisible)
			{
				return;
			}
			this.InvalidateCellPrivate(-1, rowIndex);
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = false;
			if (rowIndex != -1)
			{
				flag = (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None;
			}
			bool flag2 = rowIndex != -1 || this.ColumnHeadersHeightSizeMode != DataGridViewColumnHeadersHeightSizeMode.AutoSize;
			bool flag3 = rowIndex == -1 || (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)1) == DataGridViewAutoSizeRowsMode.None || ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)8) != DataGridViewAutoSizeRowsMode.None && rowIndex != -1 && !flag);
			bool flag4 = false;
			if (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders || (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToDisplayedHeaders && rowIndex != -1 && flag) || (this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing && rowIndex == -1) || (this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.AutoSizeToFirstHeader && rowIndex != -1 && rowIndex == this.Rows.GetFirstRow(DataGridViewElementStates.Visible)))
			{
				this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, flag2, flag3);
				flag4 = true;
			}
			if (!flag2)
			{
				this.AutoResizeColumnHeadersHeight(-1, true, true);
			}
			if (!flag3)
			{
				this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
			}
			if (flag4 && (!flag2 || !flag3))
			{
				this.AutoResizeRowHeadersWidth(rowIndex, this.rowHeadersWidthSizeMode, true, true);
			}
		}

		// Token: 0x06002FEE RID: 12270 RVA: 0x00096BB4 File Offset: 0x00095BB4
		protected virtual void OnRowHeaderMouseClick(DataGridViewCellMouseEventArgs e)
		{
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		// Token: 0x06002FEF RID: 12271 RVA: 0x00096BFC File Offset: 0x00095BFC
		protected virtual void OnRowHeaderMouseDoubleClick(DataGridViewCellMouseEventArgs e)
		{
			DataGridViewCellMouseEventHandler dataGridViewCellMouseEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERMOUSEDOUBLECLICK] as DataGridViewCellMouseEventHandler;
			if (dataGridViewCellMouseEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewCellMouseEventHandler(this, e);
			}
		}

		// Token: 0x06002FF0 RID: 12272 RVA: 0x00096C44 File Offset: 0x00095C44
		private void OnRowHeaderMouseDown(DataGridView.HitTestInfo hti, bool isShiftDown, bool isControlDown)
		{
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
				{
					bool flag = true;
					if (isControlDown && (this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
					{
						flag = false;
					}
					if (flag)
					{
						DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
						if (firstColumn != null && hti.row != this.ptCurrentCell.Y)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.CurrentCellChange, DataGridView.DataGridViewValidateCellInternal.Always, true, true, hti.row != this.ptCurrentCell.Y, hti.row != this.ptCurrentCell.Y, false, this.EditMode != DataGridViewEditMode.EditOnEnter, true, false))
							{
								break;
							}
							if (y != -1)
							{
								DataGridViewCell dataGridViewCell = null;
								if (this.IsInnerCellOutOfBounds(x, y))
								{
									break;
								}
								if (this.OnRowValidating(ref dataGridViewCell, x, y))
								{
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnRowEnter(ref dataGridViewCell, x, y, true, true);
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnCellEnter(ref dataGridViewCell, x, y);
									break;
								}
								else
								{
									if (this.IsInnerCellOutOfBounds(x, y))
									{
										break;
									}
									this.OnRowValidated(ref dataGridViewCell, x, y);
									if (hti.row >= this.Rows.Count)
									{
										int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
										if (this.ptCurrentCell.X == -1 && lastRow != -1)
										{
											if (!this.IsColumnOutOfBounds(x))
											{
												this.SetAndSelectCurrentCellAddress(x, lastRow, true, false, false, false, false);
											}
										}
										break;
									}
									if ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
									{
										break;
									}
								}
							}
						}
						bool flag2 = false;
						this.trackRow = hti.row;
						this.trackRowEdge = -1;
						if (this.MultiSelect && isShiftDown && this.ptAnchorCell.Y > -1 && (this.Rows.GetRowState(this.ptAnchorCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							flag2 = true;
						}
						if (!this.MultiSelect || !isControlDown || isShiftDown)
						{
							int i = 0;
							bool flag3 = false;
							if (this.selectedBandIndexes.Count > 8)
							{
								this.inBulkPaintCount++;
								flag3 = true;
							}
							try
							{
								while (i < this.selectedBandIndexes.Count)
								{
									if (this.selectedBandIndexes[i] != hti.row)
									{
										this.SetSelectedRowCore(this.selectedBandIndexes[i], false);
									}
									else
									{
										i++;
									}
								}
								if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
								{
									this.RemoveIndividuallySelectedCells();
								}
							}
							finally
							{
								if (flag3)
								{
									this.ExitBulkPaint(-1, -1);
								}
							}
						}
						if (this.MultiSelect && this.dataGridViewOper[512])
						{
							this.dataGridViewOper[8] = true;
						}
						if (flag2)
						{
							if (hti.row >= this.ptAnchorCell.Y)
							{
								this.SelectRowRange(this.ptAnchorCell.Y, hti.row, true);
							}
							else
							{
								this.SelectRowRange(hti.row, this.ptAnchorCell.Y, true);
							}
						}
						else if ((this.Rows.GetRowState(hti.row) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(hti.row, true);
						}
						if (firstColumn != null)
						{
							if (hti.row != this.ptCurrentCell.Y)
							{
								if (!this.IsInnerCellOutOfBounds(firstColumn.Index, hti.row))
								{
									this.ScrollIntoView(firstColumn.Index, hti.row, false);
									if (!this.IsInnerCellOutOfBounds(firstColumn.Index, hti.row))
									{
										this.SetCurrentCellAddressCore(firstColumn.Index, hti.row, !flag2, false, true);
									}
								}
							}
							else if (-1 != this.ptCurrentCell.Y)
							{
								this.SetCurrentCellAddressCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false, false);
							}
						}
					}
					else
					{
						this.SetSelectedRowCore(hti.row, false);
					}
					break;
				}
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
		}

		// Token: 0x06002FF1 RID: 12273 RVA: 0x00097098 File Offset: 0x00096098
		protected virtual void OnRowHeadersBorderStyleChanged(EventArgs e)
		{
			this.PerformLayoutPrivate(false, false, true, false);
			base.Invalidate();
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERSBORDERSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002FF2 RID: 12274 RVA: 0x000970F0 File Offset: 0x000960F0
		protected virtual void OnRowHeadersDefaultCellStyleChanged(EventArgs e)
		{
			if (this.RowHeadersVisible)
			{
				base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.RowHeaders));
				DataGridViewCellStyleChangedEventArgs dataGridViewCellStyleChangedEventArgs = e as DataGridViewCellStyleChangedEventArgs;
				if (dataGridViewCellStyleChangedEventArgs == null || dataGridViewCellStyleChangedEventArgs.ChangeAffectsPreferredSize)
				{
					this.OnRowHeadersGlobalAutoSize(false);
					if (this.editingControl != null)
					{
						this.PositionEditingControl(true, true, false);
					}
				}
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERSDEFAULTCELLSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002FF3 RID: 12275 RVA: 0x0009718C File Offset: 0x0009618C
		private void OnRowHeadersGlobalAutoSize(bool expandingRows)
		{
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			bool flag = (this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)1) == DataGridViewAutoSizeRowsMode.None || !this.RowHeadersVisible;
			bool flag2 = this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			if (flag2)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, flag);
			}
			if (!flag)
			{
				if (expandingRows)
				{
					this.AdjustExpandingRows(-1, true);
				}
				else
				{
					this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
				}
				if (flag2)
				{
					this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
				}
			}
		}

		// Token: 0x06002FF4 RID: 12276 RVA: 0x00097214 File Offset: 0x00096214
		protected virtual void OnRowHeadersWidthChanged(EventArgs e)
		{
			if (this.RowHeadersVisible)
			{
				if (this.editingControl != null)
				{
					this.PositionEditingControl(true, false, false);
				}
				this.UpdateMouseEnteredCell(null, null);
				this.OnRowHeadersGlobalAutoSize(false);
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002FF5 RID: 12277 RVA: 0x00097284 File Offset: 0x00096284
		protected virtual void OnRowHeadersWidthSizeModeChanged(DataGridViewAutoSizeModeEventArgs e)
		{
			if (this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.EnableResizing && this.rowHeadersWidthSizeMode != DataGridViewRowHeadersWidthSizeMode.DisableResizing)
			{
				if (!e.PreviousModeAutoSized)
				{
					this.cachedRowHeadersWidth = this.RowHeadersWidth;
				}
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			else if (e.PreviousModeAutoSized)
			{
				this.RowHeadersWidth = this.cachedRowHeadersWidth;
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06002FF6 RID: 12278 RVA: 0x00097318 File Offset: 0x00096318
		protected virtual void OnRowHeightChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			this.UpdateRowHeightInfoPrivate(e.Row.Index, false, false);
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
			this.OnRowGlobalAutoSize(e.Row.Index);
		}

		// Token: 0x06002FF7 RID: 12279 RVA: 0x000973A8 File Offset: 0x000963A8
		internal DataGridViewRowHeightInfoNeededEventArgs OnRowHeightInfoNeeded(int rowIndex, int height, int minimumHeight)
		{
			DataGridViewRowHeightInfoNeededEventArgs rowHeightInfoNeededEventArgs = this.RowHeightInfoNeededEventArgs;
			rowHeightInfoNeededEventArgs.SetProperties(rowIndex, height, minimumHeight);
			this.OnRowHeightInfoNeeded(rowHeightInfoNeededEventArgs);
			return rowHeightInfoNeededEventArgs;
		}

		// Token: 0x06002FF8 RID: 12280 RVA: 0x000973D0 File Offset: 0x000963D0
		protected virtual void OnRowHeightInfoNeeded(DataGridViewRowHeightInfoNeededEventArgs e)
		{
			DataGridViewRowHeightInfoNeededEventHandler dataGridViewRowHeightInfoNeededEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFONEEDED] as DataGridViewRowHeightInfoNeededEventHandler;
			if (dataGridViewRowHeightInfoNeededEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowHeightInfoNeededEventHandler(this, e);
			}
		}

		// Token: 0x06002FF9 RID: 12281 RVA: 0x00097418 File Offset: 0x00096418
		private bool OnRowHeightInfoPushed(int rowIndex, int height, int minimumHeight)
		{
			if (this.VirtualMode || this.DataSource != null)
			{
				DataGridViewRowHeightInfoPushedEventArgs dataGridViewRowHeightInfoPushedEventArgs = new DataGridViewRowHeightInfoPushedEventArgs(rowIndex, height, minimumHeight);
				this.OnRowHeightInfoPushed(dataGridViewRowHeightInfoPushedEventArgs);
				if (dataGridViewRowHeightInfoPushedEventArgs.Handled)
				{
					this.UpdateRowHeightInfoPrivate(rowIndex, false, true);
					return true;
				}
			}
			return false;
		}

		// Token: 0x06002FFA RID: 12282 RVA: 0x0009745C File Offset: 0x0009645C
		protected virtual void OnRowHeightInfoPushed(DataGridViewRowHeightInfoPushedEventArgs e)
		{
			DataGridViewRowHeightInfoPushedEventHandler dataGridViewRowHeightInfoPushedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWHEIGHTINFOPUSHED] as DataGridViewRowHeightInfoPushedEventHandler;
			if (dataGridViewRowHeightInfoPushedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowHeightInfoPushedEventHandler(this, e);
			}
		}

		// Token: 0x06002FFB RID: 12283 RVA: 0x000974A4 File Offset: 0x000964A4
		private void OnRowLeave(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			if (rowIndex < this.Rows.Count && columnIndex < this.Columns.Count)
			{
				DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(columnIndex, rowIndex);
				this.OnRowLeave(dataGridViewCellEventArgs);
				if (dataGridViewCell != null)
				{
					if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
					{
						dataGridViewCell = null;
						return;
					}
					dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
				}
			}
		}

		// Token: 0x06002FFC RID: 12284 RVA: 0x00097508 File Offset: 0x00096508
		protected virtual void OnRowLeave(DataGridViewCellEventArgs e)
		{
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWLEAVE] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x06002FFD RID: 12285 RVA: 0x00097588 File Offset: 0x00096588
		protected virtual void OnRowMinimumHeightChanged(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWMINIMUMHEIGHTCHANGED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06002FFE RID: 12286 RVA: 0x000975F4 File Offset: 0x000965F4
		protected internal virtual void OnRowPostPaint(DataGridViewRowPostPaintEventArgs e)
		{
			DataGridViewRowPostPaintEventHandler dataGridViewRowPostPaintEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWPOSTPAINT] as DataGridViewRowPostPaintEventHandler;
			if (dataGridViewRowPostPaintEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowPostPaintEventHandler(this, e);
			}
		}

		// Token: 0x06002FFF RID: 12287 RVA: 0x0009763C File Offset: 0x0009663C
		protected internal virtual void OnRowPrePaint(DataGridViewRowPrePaintEventArgs e)
		{
			DataGridViewRowPrePaintEventHandler dataGridViewRowPrePaintEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWPREPAINT] as DataGridViewRowPrePaintEventHandler;
			if (dataGridViewRowPrePaintEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowPrePaintEventHandler(this, e);
			}
		}

		// Token: 0x06003000 RID: 12288 RVA: 0x00097684 File Offset: 0x00096684
		internal void OnRowsAddedInternal(int rowIndex, int rowCount)
		{
			this.OnRowsAdded(new DataGridViewRowsAddedEventArgs(rowIndex, rowCount));
		}

		// Token: 0x06003001 RID: 12289 RVA: 0x00097694 File Offset: 0x00096694
		protected virtual void OnRowsAdded(DataGridViewRowsAddedEventArgs e)
		{
			DataGridViewRowsAddedEventHandler dataGridViewRowsAddedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWSADDED] as DataGridViewRowsAddedEventHandler;
			if (dataGridViewRowsAddedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowsAddedEventHandler(this, e);
			}
		}

		// Token: 0x06003002 RID: 12290 RVA: 0x000976DC File Offset: 0x000966DC
		protected virtual void OnRowsDefaultCellStyleChanged(EventArgs e)
		{
			DataGridViewCellStyleChangedEventArgs dataGridViewCellStyleChangedEventArgs = e as DataGridViewCellStyleChangedEventArgs;
			if (dataGridViewCellStyleChangedEventArgs != null && !dataGridViewCellStyleChangedEventArgs.ChangeAffectsPreferredSize)
			{
				this.InvalidateData();
			}
			else
			{
				this.OnRowsGlobalAutoSize();
				if (this.editingControl != null)
				{
					this.PositionEditingControl(true, true, false);
				}
			}
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWSDEFAULTCELLSTYLECHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06003003 RID: 12291 RVA: 0x00097758 File Offset: 0x00096758
		private void OnRowSelectMouseMove(DataGridView.HitTestInfo hti)
		{
			if (this.ptCurrentCell.Y != -1 && hti.row != this.ptCurrentCell.Y && !this.CommitEditForOperation(this.ptCurrentCell.X, hti.row, true))
			{
				return;
			}
			if (this.IsRowOutOfBounds(hti.row))
			{
				return;
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.trackRowEdge >= this.trackRow && hti.row > this.trackRowEdge && this.trackRowEdge >= 0)
				{
					this.SelectRowRange(this.Rows.GetNextRow(this.trackRowEdge, DataGridViewElementStates.Visible), hti.row, true);
					this.trackRowEdge = hti.row;
				}
				else if (this.trackRowEdge > this.trackRow && hti.row < this.trackRowEdge && hti.row >= this.trackRow && this.trackRowEdge >= 0)
				{
					this.SelectRowRange(this.Rows.GetNextRow(hti.row, DataGridViewElementStates.Visible), this.trackRowEdge, false);
					this.trackRowEdge = hti.row;
				}
				else if (hti.row > this.trackRow && this.trackRowEdge == -1)
				{
					this.SelectRowRange(this.Rows.GetNextRow(this.trackRow, DataGridViewElementStates.Visible), hti.row, true);
					this.trackRowEdge = hti.row;
				}
				else if (this.trackRowEdge <= this.trackRow && hti.row < this.trackRowEdge && this.trackRowEdge >= 0)
				{
					this.SelectRowRange(hti.row, this.Rows.GetPreviousRow(this.trackRowEdge, DataGridViewElementStates.Visible), true);
					this.trackRowEdge = hti.row;
				}
				else if (this.trackRowEdge < this.trackRow && hti.row > this.trackRowEdge && hti.row <= this.trackRow && this.trackRowEdge >= 0)
				{
					this.SelectRowRange(this.trackRowEdge, this.Rows.GetPreviousRow(hti.row, DataGridViewElementStates.Visible), false);
					this.trackRowEdge = hti.row;
				}
				else if (hti.row < this.trackRow && this.trackRowEdge == -1)
				{
					this.SelectRowRange(hti.row, this.Rows.GetPreviousRow(this.trackRow, DataGridViewElementStates.Visible), true);
					this.trackRowEdge = hti.row;
				}
				else if (this.trackRowEdge > this.trackRow && hti.row < this.trackRow)
				{
					this.SelectRowRange(this.Rows.GetNextRow(this.trackRow, DataGridViewElementStates.Visible), this.trackRowEdge, false);
					this.SelectRowRange(hti.row, this.Rows.GetPreviousRow(this.trackRow, DataGridViewElementStates.Visible), true);
					this.trackRowEdge = hti.row;
				}
				else if (hti.row > this.trackRow && this.trackRowEdge < this.trackRow && this.trackRowEdge >= 0)
				{
					this.SelectRowRange(this.trackRowEdge, this.Rows.GetPreviousRow(this.trackRow, DataGridViewElementStates.Visible), false);
					this.SelectRowRange(this.Rows.GetNextRow(this.trackRow, DataGridViewElementStates.Visible), hti.row, true);
					this.trackRowEdge = hti.row;
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
			if (this.ptCurrentCell.Y != -1 && hti.row != this.ptCurrentCell.Y)
			{
				if (this.IsRowOutOfBounds(hti.row))
				{
					return;
				}
				this.SetCurrentCellAddressCore(this.ptCurrentCell.X, hti.row, false, false, false);
			}
		}

		// Token: 0x06003004 RID: 12292 RVA: 0x00097B18 File Offset: 0x00096B18
		private void OnRowsGlobalAutoSize()
		{
			this.InvalidateData();
			if (this.noAutoSizeCount > 0)
			{
				return;
			}
			if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, false, true);
			}
			this.AutoResizeAllVisibleColumnsInternal(DataGridViewAutoSizeColumnCriteriaInternal.AllRows | DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows, true);
			bool flag = this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.EnableResizing || this.rowHeadersWidthSizeMode == DataGridViewRowHeadersWidthSizeMode.DisableResizing;
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
			{
				this.AutoResizeColumnHeadersHeight(flag, true);
			}
			if (!flag)
			{
				this.AutoResizeRowHeadersWidth(this.rowHeadersWidthSizeMode, true, true);
			}
			if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
			{
				this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
			}
			if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize && !flag)
			{
				this.AutoResizeColumnHeadersHeight(true, true);
			}
		}

		// Token: 0x06003005 RID: 12293 RVA: 0x00097BBA File Offset: 0x00096BBA
		internal void OnRowsRemovedInternal(int rowIndex, int rowCount)
		{
			this.OnRowsRemoved(new DataGridViewRowsRemovedEventArgs(rowIndex, rowCount));
		}

		// Token: 0x06003006 RID: 12294 RVA: 0x00097BCC File Offset: 0x00096BCC
		protected virtual void OnRowsRemoved(DataGridViewRowsRemovedEventArgs e)
		{
			DataGridViewRowsRemovedEventHandler dataGridViewRowsRemovedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWSREMOVED] as DataGridViewRowsRemovedEventHandler;
			if (dataGridViewRowsRemovedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowsRemovedEventHandler(this, e);
			}
		}

		// Token: 0x06003007 RID: 12295 RVA: 0x00097C14 File Offset: 0x00096C14
		protected virtual void OnRowStateChanged(int rowIndex, DataGridViewRowStateChangedEventArgs e)
		{
			DataGridViewRow dataGridViewRow = e.Row;
			DataGridViewElementStates dataGridViewElementStates = DataGridViewElementStates.None;
			bool flag = false;
			if (rowIndex >= 0)
			{
				dataGridViewElementStates = this.Rows.GetRowState(rowIndex);
				flag = (dataGridViewElementStates & DataGridViewElementStates.Visible) != DataGridViewElementStates.None;
			}
			DataGridViewElementStates stateChanged = e.StateChanged;
			if (stateChanged != DataGridViewElementStates.Frozen)
			{
				if (stateChanged != DataGridViewElementStates.Selected)
				{
					if (stateChanged == DataGridViewElementStates.Visible)
					{
						if (!flag && (dataGridViewElementStates & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
						{
							this.Rows.SetRowState(rowIndex, DataGridViewElementStates.Displayed, false);
						}
						this.PerformLayoutPrivate(false, false, true, true);
						base.Invalidate();
						bool flag2 = (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None;
						DataGridViewAutoSizeRowsModeInternal dataGridViewAutoSizeRowsModeInternal = (DataGridViewAutoSizeRowsModeInternal)this.autoSizeRowsMode;
						bool flag3 = false;
						if (dataGridViewAutoSizeRowsModeInternal != DataGridViewAutoSizeRowsModeInternal.None)
						{
							int thicknessInternal = dataGridViewRow.ThicknessInternal;
							if (flag)
							{
								dataGridViewRow.CachedThickness = thicknessInternal;
								if ((dataGridViewAutoSizeRowsModeInternal & DataGridViewAutoSizeRowsModeInternal.DisplayedRows) == DataGridViewAutoSizeRowsModeInternal.None || flag2)
								{
									this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), false, true);
									flag3 = true;
								}
							}
							else if (thicknessInternal != dataGridViewRow.CachedThickness)
							{
								if (dataGridViewRow.Index == -1)
								{
									dataGridViewRow = this.Rows[rowIndex];
								}
								dataGridViewRow.ThicknessInternal = Math.Max(dataGridViewRow.MinimumHeight, dataGridViewRow.CachedThickness);
							}
						}
						DataGridViewAutoSizeColumnCriteriaInternal dataGridViewAutoSizeColumnCriteriaInternal = DataGridViewAutoSizeColumnCriteriaInternal.AllRows;
						if (flag2)
						{
							dataGridViewAutoSizeColumnCriteriaInternal |= DataGridViewAutoSizeColumnCriteriaInternal.DisplayedRows;
						}
						if (flag && this.Rows.GetRowCount(DataGridViewElementStates.Visible) > 1)
						{
							this.AdjustExpandingColumns(dataGridViewAutoSizeColumnCriteriaInternal, rowIndex);
						}
						else
						{
							this.AutoResizeAllVisibleColumnsInternal(dataGridViewAutoSizeColumnCriteriaInternal, true);
						}
						if (flag3)
						{
							this.AutoResizeRowInternal(rowIndex, DataGridView.MapAutoSizeRowsModeToRowMode(this.autoSizeRowsMode), true, true);
						}
					}
				}
				else if (flag && this.inBulkPaintCount == 0)
				{
					this.InvalidateRowPrivate(rowIndex);
				}
			}
			else if (flag)
			{
				if ((dataGridViewElementStates & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
				{
					this.FirstVisibleScrollingRowTempted(rowIndex);
				}
				this.PerformLayoutPrivate(false, false, true, true);
				base.Invalidate();
			}
			DataGridViewRowStateChangedEventHandler dataGridViewRowStateChangedEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWSTATECHANGED] as DataGridViewRowStateChangedEventHandler;
			if (dataGridViewRowStateChangedEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowStateChangedEventHandler(this, e);
			}
			if (e.StateChanged == DataGridViewElementStates.ReadOnly && rowIndex == this.ptCurrentCell.Y && !this.dataGridViewOper[16384])
			{
				base.VerifyImeRestrictedModeChanged();
				if ((dataGridViewElementStates & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None && !this.ReadOnly && !this.Columns[this.ptCurrentCell.X].ReadOnly && this.ColumnEditable(this.ptCurrentCell.X) && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
				{
					this.BeginEditInternal(true);
				}
			}
		}

		// Token: 0x06003008 RID: 12296 RVA: 0x00097E8C File Offset: 0x00096E8C
		internal void OnRowUnshared(DataGridViewRow dataGridViewRow)
		{
			if (-1 != this.ptCurrentCell.X && dataGridViewRow.Index == this.ptCurrentCell.Y && this.editingControl != null)
			{
				this.CurrentCellInternal.CacheEditingControl();
			}
			DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs(dataGridViewRow);
			this.OnRowUnshared(dataGridViewRowEventArgs);
		}

		// Token: 0x06003009 RID: 12297 RVA: 0x00097EDC File Offset: 0x00096EDC
		protected virtual void OnRowUnshared(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWUNSHARED] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x0600300A RID: 12298 RVA: 0x00097F48 File Offset: 0x00096F48
		private bool OnRowValidating(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			DataGridViewCellCancelEventArgs dataGridViewCellCancelEventArgs = new DataGridViewCellCancelEventArgs(columnIndex, rowIndex);
			this.OnRowValidating(dataGridViewCellCancelEventArgs);
			if (!dataGridViewCellCancelEventArgs.Cancel && this.dataConnection != null && this.dataConnection.InterestedInRowEvents && !this.dataConnection.PositionChangingOutsideDataGridView && !this.dataConnection.ListWasReset)
			{
				this.dataConnection.OnRowValidating(dataGridViewCellCancelEventArgs);
			}
			if (dataGridViewCell != null && rowIndex < this.Rows.Count && columnIndex < this.Columns.Count)
			{
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
			}
			return dataGridViewCellCancelEventArgs.Cancel;
		}

		// Token: 0x0600300B RID: 12299 RVA: 0x00097FE8 File Offset: 0x00096FE8
		protected virtual void OnRowValidating(DataGridViewCellCancelEventArgs e)
		{
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellCancelEventHandler dataGridViewCellCancelEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWVALIDATING] as DataGridViewCellCancelEventHandler;
				if (dataGridViewCellCancelEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellCancelEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x0600300C RID: 12300 RVA: 0x00098068 File Offset: 0x00097068
		private void OnRowValidated(ref DataGridViewCell dataGridViewCell, int columnIndex, int rowIndex)
		{
			this.IsCurrentRowDirtyInternal = false;
			this.dataGridViewState1[2097152] = false;
			if (rowIndex == this.newRowIndex)
			{
				this.InvalidateRowPrivate(rowIndex);
			}
			DataGridViewCellEventArgs dataGridViewCellEventArgs = new DataGridViewCellEventArgs(columnIndex, rowIndex);
			this.OnRowValidated(dataGridViewCellEventArgs);
			if (dataGridViewCell != null)
			{
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					dataGridViewCell = null;
					return;
				}
				dataGridViewCell = this.Rows.SharedRow(rowIndex).Cells[columnIndex];
			}
		}

		// Token: 0x0600300D RID: 12301 RVA: 0x000980D8 File Offset: 0x000970D8
		protected virtual void OnRowValidated(DataGridViewCellEventArgs e)
		{
			try
			{
				this.noDimensionChangeCount++;
				DataGridViewCellEventHandler dataGridViewCellEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWROWVALIDATED] as DataGridViewCellEventHandler;
				if (dataGridViewCellEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
				{
					dataGridViewCellEventHandler(this, e);
					this.CorrectFocus(true);
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
			}
		}

		// Token: 0x0600300E RID: 12302 RVA: 0x00098158 File Offset: 0x00097158
		private void OnScroll(ScrollEventType scrollEventType, int oldValue, int newValue, ScrollOrientation orientation)
		{
			ScrollEventArgs scrollEventArgs = new ScrollEventArgs(scrollEventType, oldValue, newValue, orientation);
			this.OnScroll(scrollEventArgs);
			if (ScrollOrientation.VerticalScroll == orientation)
			{
				if (scrollEventArgs.NewValue == newValue)
				{
					return;
				}
				try
				{
					this.dataGridViewState2[16384] = true;
					int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					int num2 = num;
					newValue = scrollEventArgs.NewValue;
					while (num != -1 && newValue > 0)
					{
						num2 = num;
						num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible);
						newValue--;
					}
					if (num != -1)
					{
						num2 = num;
					}
					if (num2 != -1)
					{
						this.FirstDisplayedScrollingRowIndex = num2;
					}
					return;
				}
				finally
				{
					this.dataGridViewState2[16384] = false;
				}
			}
			if (scrollEventArgs.NewValue != newValue)
			{
				try
				{
					this.dataGridViewState2[32768] = true;
					this.HorizontalOffset = scrollEventArgs.NewValue;
				}
				finally
				{
					this.dataGridViewState2[32768] = false;
				}
			}
		}

		// Token: 0x0600300F RID: 12303 RVA: 0x00098250 File Offset: 0x00097250
		protected virtual void OnScroll(ScrollEventArgs e)
		{
			ScrollEventHandler scrollEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWSCROLL] as ScrollEventHandler;
			if (scrollEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				scrollEventHandler(this, e);
			}
		}

		// Token: 0x06003010 RID: 12304 RVA: 0x00098298 File Offset: 0x00097298
		protected virtual void OnSelectionChanged(EventArgs e)
		{
			this.dataGridViewState2[262144] = false;
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWSELECTIONCHANGED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06003011 RID: 12305 RVA: 0x000982F4 File Offset: 0x000972F4
		internal bool OnSortCompare(DataGridViewColumn dataGridViewSortedColumn, object value1, object value2, int rowIndex1, int rowIndex2, out int sortResult)
		{
			DataGridViewSortCompareEventArgs dataGridViewSortCompareEventArgs = new DataGridViewSortCompareEventArgs(dataGridViewSortedColumn, value1, value2, rowIndex1, rowIndex2);
			this.OnSortCompare(dataGridViewSortCompareEventArgs);
			sortResult = dataGridViewSortCompareEventArgs.SortResult;
			return dataGridViewSortCompareEventArgs.Handled;
		}

		// Token: 0x06003012 RID: 12306 RVA: 0x00098324 File Offset: 0x00097324
		protected virtual void OnSortCompare(DataGridViewSortCompareEventArgs e)
		{
			DataGridViewSortCompareEventHandler dataGridViewSortCompareEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWSORTCOMPARE] as DataGridViewSortCompareEventHandler;
			if (dataGridViewSortCompareEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewSortCompareEventHandler(this, e);
			}
		}

		// Token: 0x06003013 RID: 12307 RVA: 0x0009836C File Offset: 0x0009736C
		protected virtual void OnSorted(EventArgs e)
		{
			EventHandler eventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWSORTED] as EventHandler;
			if (eventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x06003014 RID: 12308 RVA: 0x000983B4 File Offset: 0x000973B4
		internal void OnSortGlyphDirectionChanged(DataGridViewColumnHeaderCell dataGridViewColumnHeaderCell)
		{
			if (dataGridViewColumnHeaderCell.OwningColumn == this.SortedColumn)
			{
				if (dataGridViewColumnHeaderCell.SortGlyphDirection == SortOrder.None)
				{
					this.sortedColumn = null;
					DataGridViewColumn owningColumn = dataGridViewColumnHeaderCell.OwningColumn;
					if (owningColumn.IsDataBound)
					{
						for (int i = 0; i < this.Columns.Count; i++)
						{
							if (owningColumn != this.Columns[i] && this.Columns[i].SortMode != DataGridViewColumnSortMode.NotSortable && string.Compare(owningColumn.DataPropertyName, this.Columns[i].DataPropertyName, true, CultureInfo.InvariantCulture) == 0)
							{
								this.sortedColumn = this.Columns[i];
								break;
							}
						}
					}
				}
				this.sortOrder = ((this.sortedColumn != null) ? this.sortedColumn.HeaderCell.SortGlyphDirection : SortOrder.None);
			}
			this.InvalidateCellPrivate(dataGridViewColumnHeaderCell);
		}

		// Token: 0x06003015 RID: 12309 RVA: 0x0009848B File Offset: 0x0009748B
		private void OnTopLeftHeaderMouseDown()
		{
			if (this.MultiSelect)
			{
				this.SelectAll();
				if (-1 != this.ptCurrentCell.X)
				{
					this.SetCurrentCellAddressCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false, false, false);
				}
			}
		}

		// Token: 0x06003016 RID: 12310 RVA: 0x000984CC File Offset: 0x000974CC
		protected virtual void OnUserAddedRow(DataGridViewRowEventArgs e)
		{
			if (e.Row.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_RowDoesNotBelongToDataGridView"), "e.Row");
			}
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWUSERADDEDROW] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06003017 RID: 12311 RVA: 0x00098538 File Offset: 0x00097538
		protected virtual void OnUserDeletedRow(DataGridViewRowEventArgs e)
		{
			DataGridViewRowEventHandler dataGridViewRowEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWUSERDELETEDROW] as DataGridViewRowEventHandler;
			if (dataGridViewRowEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowEventHandler(this, e);
			}
		}

		// Token: 0x06003018 RID: 12312 RVA: 0x00098580 File Offset: 0x00097580
		protected virtual void OnUserDeletingRow(DataGridViewRowCancelEventArgs e)
		{
			DataGridViewRowCancelEventHandler dataGridViewRowCancelEventHandler = base.Events[DataGridView.EVENT_DATAGRIDVIEWUSERDELETINGROW] as DataGridViewRowCancelEventHandler;
			if (dataGridViewRowCancelEventHandler != null && !this.dataGridViewOper[1048576] && !base.IsDisposed)
			{
				dataGridViewRowCancelEventHandler(this, e);
			}
		}

		// Token: 0x06003019 RID: 12313 RVA: 0x000985C8 File Offset: 0x000975C8
		private void OnUserPreferenceChanged(object sender, UserPreferenceChangedEventArgs e)
		{
			if (e.Category == UserPreferenceCategory.Color || e.Category == UserPreferenceCategory.Locale || e.Category == UserPreferenceCategory.General || e.Category == UserPreferenceCategory.Window || e.Category == UserPreferenceCategory.VisualStyle)
			{
				this.OnGlobalAutoSize();
				if (e.Category == UserPreferenceCategory.Window)
				{
					this.cachedEditingControl = null;
					if (this.editingControl != null)
					{
						this.dataGridViewState2[536870912] = true;
					}
					this.PerformLayoutPrivate(false, false, false, true);
				}
			}
		}

		// Token: 0x0600301A RID: 12314 RVA: 0x00098640 File Offset: 0x00097640
		protected override void OnValidating(CancelEventArgs e)
		{
			if (!base.BecomingActiveControl && (this.editingControl == null || !this.editingControl.BecomingActiveControl))
			{
				if (!this.dataGridViewState1[64] && !this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.LeaveControl, DataGridView.DataGridViewValidateCellInternal.Always, false, false, false, false, false, false, false, false))
				{
					e.Cancel = true;
					return;
				}
				if (this.ptCurrentCell.X >= 0)
				{
					DataGridViewCell dataGridViewCell = null;
					if (this.OnRowValidating(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y))
					{
						e.Cancel = true;
						return;
					}
					if (this.ptCurrentCell.X == -1)
					{
						return;
					}
					this.OnRowValidated(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
					if (this.DataSource != null && this.ptCurrentCell.X >= 0 && this.AllowUserToAddRowsInternal && this.newRowIndex == this.ptCurrentCell.Y)
					{
						int previousRow = this.Rows.GetPreviousRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
						if (previousRow > -1)
						{
							this.SetAndSelectCurrentCellAddress(this.ptCurrentCell.X, previousRow, true, false, false, false, false);
						}
						else
						{
							this.SetCurrentCellAddressCore(-1, -1, true, false, false);
						}
					}
				}
			}
			base.OnValidating(e);
		}

		// Token: 0x0600301B RID: 12315 RVA: 0x00098780 File Offset: 0x00097780
		protected override void OnVisibleChanged(EventArgs e)
		{
			base.OnVisibleChanged(e);
			this.OnVisibleChangedPrivate();
		}

		// Token: 0x0600301C RID: 12316 RVA: 0x00098790 File Offset: 0x00097790
		private void OnVisibleChangedPrivate()
		{
			if (base.Visible)
			{
				int i = this.displayedBandsInfo.NumDisplayedFrozenRows;
				int num;
				if (i > 0)
				{
					num = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					while (i > 0)
					{
						if ((this.Rows.GetRowState(num) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
						{
							return;
						}
						this.Rows.SetRowState(num, DataGridViewElementStates.Displayed, true);
						num = this.Rows.GetNextRow(num, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
						i--;
					}
				}
				num = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				if (num > -1)
				{
					for (int j = this.displayedBandsInfo.NumDisplayedScrollingRows; j > 0; j--)
					{
						if ((this.Rows.GetRowState(num) & DataGridViewElementStates.Displayed) != DataGridViewElementStates.None)
						{
							return;
						}
						this.Rows.SetRowState(num, DataGridViewElementStates.Displayed, true);
						num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible);
					}
				}
			}
			else
			{
				this.UpdateRowsDisplayedState(false);
			}
			this.UpdateColumnsDisplayedState(base.Visible);
		}

		// Token: 0x0600301D RID: 12317 RVA: 0x00098868 File Offset: 0x00097868
		protected virtual void PaintBackground(Graphics graphics, Rectangle clipBounds, Rectangle gridBounds)
		{
			Rectangle rectangle = gridBounds;
			int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible);
			if (this.layout.ColumnHeadersVisible)
			{
				rectangle.Y += this.layout.ColumnHeaders.Height;
				rectangle.Height -= this.layout.ColumnHeaders.Height;
			}
			else if (this.SingleHorizontalBorderAdded && rowsHeight > 0)
			{
				rectangle.Y++;
				rectangle.Height--;
			}
			int num = rowsHeight - this.verticalOffset;
			rectangle.Y += num;
			rectangle.Height -= num;
			if (rectangle.Width > 0 && rectangle.Height > 0)
			{
				graphics.FillRectangle(this.backgroundBrush, rectangle);
			}
			int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Visible);
			Rectangle rectangle2 = gridBounds;
			if (this.Columns.Count > 0)
			{
				if (this.layout.RowHeadersVisible)
				{
					if (!this.RightToLeftInternal)
					{
						rectangle2.X += this.layout.RowHeaders.Width;
					}
					rectangle2.Width -= this.layout.RowHeaders.Width;
				}
				else if (this.SingleVerticalBorderAdded && columnsWidth > 0)
				{
					if (!this.RightToLeftInternal)
					{
						rectangle2.X++;
					}
					rectangle2.Width--;
				}
			}
			int num2 = columnsWidth - this.horizontalOffset;
			if (!this.RightToLeftInternal)
			{
				rectangle2.X += num2;
			}
			rectangle2.Width -= num2;
			rectangle2.Height = gridBounds.Height - rectangle.Height;
			if (rectangle2.Width > 0 && rectangle2.Height > 0)
			{
				graphics.FillRectangle(this.backgroundBrush, rectangle2);
			}
		}

		// Token: 0x0600301E RID: 12318 RVA: 0x00098A54 File Offset: 0x00097A54
		private void PaintBorder(Graphics g, Rectangle clipRect, Rectangle bounds)
		{
			if (this.BorderStyle == BorderStyle.None)
			{
				return;
			}
			int borderWidth = this.BorderWidth;
			Rectangle rectangle = new Rectangle(0, 0, bounds.Width, borderWidth);
			bool flag = clipRect.IntersectsWith(rectangle);
			if (!flag)
			{
				rectangle.Y = bounds.Height - borderWidth;
				flag = clipRect.IntersectsWith(rectangle);
				if (!flag)
				{
					rectangle.Y = 0;
					rectangle.Height = bounds.Height;
					rectangle.Width = borderWidth;
					flag = clipRect.IntersectsWith(rectangle);
					if (!flag)
					{
						rectangle.X = bounds.Width - borderWidth;
						flag = clipRect.IntersectsWith(rectangle);
					}
				}
			}
			if (flag)
			{
				if (this.BorderStyle == BorderStyle.Fixed3D)
				{
					if (Application.RenderWithVisualStyles)
					{
						Pen cachedPen = this.GetCachedPen(VisualStyleInformation.TextControlBorder);
						g.DrawRectangle(cachedPen, new Rectangle(0, 0, bounds.Width - 1, bounds.Height - 1));
						return;
					}
					ControlPaint.DrawBorder3D(g, bounds, Border3DStyle.Sunken);
					return;
				}
				else if (this.BorderStyle == BorderStyle.FixedSingle)
				{
					Pen cachedPen2 = this.GetCachedPen(SystemColors.ControlText);
					g.DrawRectangle(cachedPen2, new Rectangle(0, 0, bounds.Width - 1, bounds.Height - 1));
				}
			}
		}

		// Token: 0x0600301F RID: 12319 RVA: 0x00098B70 File Offset: 0x00097B70
		private void PaintColumnHeaders(Graphics g, Rectangle clipBounds, bool singleBorderAdded)
		{
			if (g.IsVisible(this.layout.ColumnHeaders))
			{
				Rectangle columnHeaders;
				Rectangle rectangle = (columnHeaders = this.layout.ColumnHeaders);
				columnHeaders.Height = (rectangle.Height = this.columnHeadersHeight);
				int num = 0;
				bool flag = true;
				bool flag2 = false;
				DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
				DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyle = new DataGridViewAdvancedBorderStyle();
				DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				while (dataGridViewColumn != null)
				{
					DataGridViewCell dataGridViewCell = dataGridViewColumn.HeaderCell;
					rectangle.Width = dataGridViewColumn.Thickness;
					if (singleBorderAdded && flag)
					{
						rectangle.Width++;
					}
					if (this.RightToLeftInternal)
					{
						rectangle.X = columnHeaders.Right - num - rectangle.Width;
					}
					else
					{
						rectangle.X = columnHeaders.X + num;
					}
					this.BuildInheritedColumnHeaderCellStyle(dataGridViewCellStyle, dataGridViewCell);
					DataGridViewColumn dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					if (dataGridViewColumn2 == null)
					{
						flag2 = this.displayedBandsInfo.FirstDisplayedScrollingCol < 0;
					}
					DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyle2 = this.AdjustColumnHeaderBorderStyle(this.AdvancedColumnHeadersBorderStyle, dataGridViewAdvancedBorderStyle, flag, flag2);
					dataGridViewCell.PaintWork(g, clipBounds, rectangle, -1, dataGridViewColumn.State, dataGridViewCellStyle, dataGridViewAdvancedBorderStyle2, DataGridViewPaintParts.Background | DataGridViewPaintParts.Border | DataGridViewPaintParts.ContentBackground | DataGridViewPaintParts.ContentForeground | DataGridViewPaintParts.ErrorIcon | DataGridViewPaintParts.SelectionBackground);
					num += rectangle.Width;
					if (num >= columnHeaders.Width)
					{
						break;
					}
					dataGridViewColumn = dataGridViewColumn2;
					flag = false;
				}
				Rectangle rectangle2 = columnHeaders;
				if (!this.RightToLeftInternal)
				{
					rectangle2.X -= this.negOffset;
				}
				rectangle2.Width += this.negOffset;
				if (this.displayedBandsInfo.FirstDisplayedScrollingCol >= 0 && num < rectangle2.Width)
				{
					Region region = null;
					if (this.negOffset > 0)
					{
						region = g.Clip;
						Rectangle rectangle3 = columnHeaders;
						if (!this.RightToLeftInternal)
						{
							rectangle3.X += num;
						}
						rectangle3.Width -= num;
						g.SetClip(rectangle3);
					}
					dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
					while (dataGridViewColumn != null)
					{
						DataGridViewCell dataGridViewCell = dataGridViewColumn.HeaderCell;
						rectangle.Width = dataGridViewColumn.Thickness;
						if (singleBorderAdded && flag)
						{
							rectangle.Width++;
						}
						if (this.RightToLeftInternal)
						{
							rectangle.X = rectangle2.Right - num - rectangle.Width;
						}
						else
						{
							rectangle.X = rectangle2.X + num;
						}
						this.BuildInheritedColumnHeaderCellStyle(dataGridViewCellStyle, dataGridViewCell);
						DataGridViewColumn dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						flag2 = dataGridViewColumn2 == null;
						DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyle2 = this.AdjustColumnHeaderBorderStyle(this.AdvancedColumnHeadersBorderStyle, dataGridViewAdvancedBorderStyle, flag, flag2);
						dataGridViewCell.PaintWork(g, clipBounds, rectangle, -1, dataGridViewColumn.State, dataGridViewCellStyle, dataGridViewAdvancedBorderStyle2, DataGridViewPaintParts.Background | DataGridViewPaintParts.Border | DataGridViewPaintParts.ContentBackground | DataGridViewPaintParts.ContentForeground | DataGridViewPaintParts.ErrorIcon | DataGridViewPaintParts.SelectionBackground);
						num += rectangle.Width;
						if (num >= rectangle2.Width)
						{
							break;
						}
						dataGridViewColumn = dataGridViewColumn2;
						flag = false;
					}
					if (this.negOffset > 0)
					{
						g.Clip = region;
						region.Dispose();
					}
				}
			}
		}

		// Token: 0x06003020 RID: 12320 RVA: 0x00098E58 File Offset: 0x00097E58
		private void PaintGrid(Graphics g, Rectangle gridBounds, Rectangle clipRect, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded)
		{
			Rectangle rectangle = gridBounds;
			if (this.layout.TopLeftHeader.Width > 0 && (clipRect.IntersectsWith(this.layout.TopLeftHeader) || this.lastHeaderShadow != -1) && (this.Columns.Count > 0 || this.Rows.Count > 0))
			{
				using (Region clip = g.Clip)
				{
					g.SetClip(this.layout.TopLeftHeader);
					this.PaintTopLeftHeaderCell(g);
					g.Clip = clip;
				}
			}
			if (this.layout.ColumnHeadersVisible)
			{
				Rectangle rectangle2 = default(Rectangle);
				rectangle2 = this.layout.ColumnHeaders;
				if (singleVerticalBorderAdded)
				{
					rectangle2.Width++;
				}
				if (clipRect.IntersectsWith(rectangle2) || this.lastHeaderShadow != -1)
				{
					using (Region clip2 = g.Clip)
					{
						g.SetClip(rectangle2);
						this.PaintColumnHeaders(g, rectangle2, singleVerticalBorderAdded);
						g.Clip = clip2;
					}
				}
				int height = this.layout.ColumnHeaders.Height;
				rectangle.Y += height;
				rectangle.Height -= height;
				if (this.lastHeaderShadow != -1)
				{
					this.DrawColHeaderShadow(g, this.lastHeaderShadow);
				}
			}
			if (rectangle.Height > 0)
			{
				this.PaintRows(g, rectangle, clipRect, singleHorizontalBorderAdded);
			}
			if (this.currentRowSplitBar != -1)
			{
				this.DrawRowSplitBar(this.currentRowSplitBar);
				return;
			}
			if (this.currentColSplitBar != -1)
			{
				this.DrawColSplitBar(this.currentColSplitBar);
			}
		}

		// Token: 0x06003021 RID: 12321 RVA: 0x00099000 File Offset: 0x00098000
		private void PaintRows(Graphics g, Rectangle boundingRect, Rectangle clipRect, bool singleHorizontalBorderAdded)
		{
			int num = 0;
			bool flag = true;
			int num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			while (num2 != -1)
			{
				Rectangle rectangle = boundingRect;
				rectangle.Height = this.Rows.SharedRow(num2).GetHeight(num2);
				if (flag && singleHorizontalBorderAdded)
				{
					rectangle.Height++;
				}
				rectangle.Y = boundingRect.Y + num;
				int num3 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (clipRect.IntersectsWith(rectangle))
				{
					DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num2);
					dataGridViewRow.Paint(g, clipRect, rectangle, num2, this.Rows.GetRowState(num2), flag, num3 == -1 && this.displayedBandsInfo.FirstDisplayedScrollingRow == -1);
				}
				num += rectangle.Height;
				if (num >= boundingRect.Height)
				{
					break;
				}
				num2 = num3;
				flag = false;
			}
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0 && num < boundingRect.Height)
			{
				num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				while (num2 != -1)
				{
					Rectangle rectangle = boundingRect;
					rectangle.Height = this.Rows.SharedRow(num2).GetHeight(num2);
					if (flag && singleHorizontalBorderAdded)
					{
						rectangle.Height++;
					}
					rectangle.Y = boundingRect.Y + num;
					int num3 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					if (clipRect.IntersectsWith(rectangle))
					{
						DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num2);
						dataGridViewRow.Paint(g, clipRect, rectangle, num2, this.Rows.GetRowState(num2), flag, num3 == -1);
					}
					num += rectangle.Height;
					if (num >= boundingRect.Height)
					{
						return;
					}
					num2 = num3;
					flag = false;
				}
			}
		}

		// Token: 0x06003022 RID: 12322 RVA: 0x000991C0 File Offset: 0x000981C0
		private void PaintTopLeftHeaderCell(Graphics g)
		{
			if (g.IsVisible(this.layout.TopLeftHeader))
			{
				DataGridViewCell dataGridViewCell = this.TopLeftHeaderCell;
				DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
				this.BuildInheritedColumnHeaderCellStyle(dataGridViewCellStyle, dataGridViewCell);
				Rectangle topLeftHeader = this.layout.TopLeftHeader;
				topLeftHeader.Width = this.rowHeadersWidth;
				topLeftHeader.Height = this.columnHeadersHeight;
				dataGridViewCell.PaintWork(g, this.layout.TopLeftHeader, topLeftHeader, -1, dataGridViewCell.State, dataGridViewCellStyle, this.AdjustedTopLeftHeaderBorderStyle, DataGridViewPaintParts.Background | DataGridViewPaintParts.Border | DataGridViewPaintParts.ContentBackground | DataGridViewPaintParts.ContentForeground | DataGridViewPaintParts.ErrorIcon | DataGridViewPaintParts.SelectionBackground);
			}
		}

		// Token: 0x06003023 RID: 12323 RVA: 0x00099240 File Offset: 0x00098240
		private void PerformLayoutPrivate(bool useRowShortcut, bool computeVisibleRows, bool invalidInAdjustFillingColumns, bool repositionEditingControl)
		{
			this.inPerformLayoutCount++;
			try
			{
				if (invalidInAdjustFillingColumns && this.InAdjustFillingColumns)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CannotAlterAutoFillColumnParameter"));
				}
				if (base.IsHandleCreated)
				{
					bool flag = false;
					if (useRowShortcut)
					{
						this.ComputeLayoutShortcut(computeVisibleRows);
					}
					else
					{
						flag = this.ComputeLayout();
					}
					this.FlushDisplayedChanged();
					if (flag && this.inPerformLayoutCount < 3)
					{
						if ((this.autoSizeRowsMode & (DataGridViewAutoSizeRowsMode)2) != DataGridViewAutoSizeRowsMode.None)
						{
							this.AdjustShrinkingRows(this.autoSizeRowsMode, true, true);
						}
						if (this.ColumnHeadersHeightSizeMode == DataGridViewColumnHeadersHeightSizeMode.AutoSize)
						{
							this.AutoResizeColumnHeadersHeight(true, true);
						}
					}
					if (repositionEditingControl && this.editingControl != null)
					{
						this.PositionEditingControl(true, false, false);
					}
				}
				else
				{
					this.displayedBandsInfo.FirstDisplayedFrozenCol = -1;
					this.displayedBandsInfo.FirstDisplayedFrozenRow = -1;
					this.displayedBandsInfo.FirstDisplayedScrollingRow = -1;
					this.displayedBandsInfo.FirstDisplayedScrollingCol = -1;
					this.displayedBandsInfo.NumDisplayedFrozenRows = 0;
					this.displayedBandsInfo.NumDisplayedFrozenCols = 0;
					this.displayedBandsInfo.NumDisplayedScrollingRows = 0;
					this.displayedBandsInfo.NumDisplayedScrollingCols = 0;
					this.displayedBandsInfo.NumTotallyDisplayedFrozenRows = 0;
					this.displayedBandsInfo.NumTotallyDisplayedScrollingRows = 0;
					this.displayedBandsInfo.LastDisplayedScrollingRow = -1;
					this.displayedBandsInfo.LastTotallyDisplayedScrollingCol = -1;
					if (this.layout != null)
					{
						this.layout.dirty = true;
					}
				}
			}
			finally
			{
				this.inPerformLayoutCount--;
			}
		}

		// Token: 0x06003024 RID: 12324 RVA: 0x000993C0 File Offset: 0x000983C0
		private void PopulateNewRowWithDefaultValues()
		{
			if (this.newRowIndex != -1)
			{
				DataGridViewRow dataGridViewRow = this.Rows.SharedRow(this.newRowIndex);
				DataGridViewCellCollection dataGridViewCellCollection = dataGridViewRow.Cells;
				foreach (object obj in dataGridViewCellCollection)
				{
					DataGridViewCell dataGridViewCell = (DataGridViewCell)obj;
					if (dataGridViewCell.DefaultNewRowValue != null)
					{
						dataGridViewRow = this.Rows[this.newRowIndex];
						dataGridViewCellCollection = dataGridViewRow.Cells;
						break;
					}
				}
				foreach (object obj2 in dataGridViewCellCollection)
				{
					DataGridViewCell dataGridViewCell2 = (DataGridViewCell)obj2;
					dataGridViewCell2.SetValueInternal(this.newRowIndex, dataGridViewCell2.DefaultNewRowValue);
				}
			}
		}

		// Token: 0x06003025 RID: 12325 RVA: 0x000994B4 File Offset: 0x000984B4
		private void PositionEditingControl(bool setLocation, bool setSize, bool setFocus)
		{
			if (!base.IsHandleCreated)
			{
				return;
			}
			Rectangle data = this.layout.Data;
			if (data.Width == 0 || data.Height == 0)
			{
				return;
			}
			this.dataGridViewState1[16384] = true;
			try
			{
				int num = this.GetColumnXFromIndex(this.ptCurrentCell.X);
				if (this.RightToLeftInternal)
				{
					num -= this.Columns[this.ptCurrentCell.X].Width - 1;
				}
				Rectangle rectangle = new Rectangle(num, this.GetRowYFromIndex(this.ptCurrentCell.Y), this.Columns[this.ptCurrentCell.X].Width, this.Rows.SharedRow(this.ptCurrentCell.Y).GetHeight(this.ptCurrentCell.Y));
				Rectangle rectangle2 = rectangle;
				if (!this.Columns[this.ptCurrentCell.X].Frozen)
				{
					int columnsWidth = this.Columns.GetColumnsWidth(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					if (!this.RightToLeftInternal)
					{
						data.X += columnsWidth;
					}
					data.Width = Math.Max(0, data.Width - columnsWidth);
				}
				if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
				{
					int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					data.Y += rowsHeight;
				}
				rectangle2.Intersect(data);
				if (rectangle2.Width == 0 || rectangle2.Height == 0)
				{
					this.editingPanel.Location = new Point(base.Width + 1, 0);
					this.dataGridViewState1[4096] = true;
				}
				else
				{
					bool singleVerticalBorderAdded = this.SingleVerticalBorderAdded;
					bool singleHorizontalBorderAdded = this.SingleHorizontalBorderAdded;
					bool flag = this.FirstDisplayedColumnIndex == this.ptCurrentCell.X;
					bool flag2 = this.FirstDisplayedRowIndex == this.ptCurrentCell.Y;
					if (singleVerticalBorderAdded && flag)
					{
						if (!this.RightToLeftInternal)
						{
							rectangle.X--;
							rectangle2.X--;
						}
						rectangle.Width++;
						rectangle2.Width++;
					}
					if (singleHorizontalBorderAdded && flag2)
					{
						rectangle.Y--;
						rectangle2.Y--;
						rectangle.Height++;
						rectangle2.Height++;
					}
					this.CurrentCellInternal.PositionEditingControl(setLocation || this.dataGridViewState1[4096], setSize || this.dataGridViewState1[4096], rectangle, rectangle2, this.InheritedEditingCellStyle, singleVerticalBorderAdded, singleHorizontalBorderAdded, flag, flag2);
					this.dataGridViewState1[4096] = false;
				}
				this.editingPanel.Visible = true;
				if (setFocus)
				{
					this.CorrectFocus(false);
				}
			}
			finally
			{
				this.dataGridViewState1[16384] = false;
			}
		}

		// Token: 0x06003026 RID: 12326 RVA: 0x000997D8 File Offset: 0x000987D8
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessAKey(Keys keyData)
		{
			if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Control && this.MultiSelect)
			{
				this.SelectAll();
				return true;
			}
			return false;
		}

		// Token: 0x06003027 RID: 12327 RVA: 0x000997FC File Offset: 0x000987FC
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessDeleteKey(Keys keyData)
		{
			if (this.AllowUserToDeleteRowsInternal)
			{
				if (this.editingControl != null)
				{
					return false;
				}
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
				{
					int num = 0;
					try
					{
						this.selectedBandSnapshotIndexes = new DataGridViewIntLinkedList(this.selectedBandIndexes);
						while (this.selectedBandSnapshotIndexes.Count > num)
						{
							int num2 = this.selectedBandSnapshotIndexes[num];
							if (num2 == this.newRowIndex || num2 >= this.Rows.Count)
							{
								num++;
							}
							else
							{
								DataGridViewRowCancelEventArgs dataGridViewRowCancelEventArgs = new DataGridViewRowCancelEventArgs(this.Rows[num2]);
								this.OnUserDeletingRow(dataGridViewRowCancelEventArgs);
								if (!dataGridViewRowCancelEventArgs.Cancel)
								{
									DataGridViewRow dataGridViewRow = this.Rows[num2];
									if (this.DataSource != null)
									{
										int count = this.dataConnection.CurrencyManager.List.Count;
										DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = null;
										try
										{
											this.DataConnection.DeleteRow(num2);
										}
										catch (Exception ex)
										{
											if (ClientUtils.IsCriticalException(ex))
											{
												throw;
											}
											dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, -1, num2, DataGridViewDataErrorContexts.RowDeletion);
											this.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
											if (dataGridViewDataErrorEventArgs.ThrowException)
											{
												throw dataGridViewDataErrorEventArgs.Exception;
											}
											num++;
										}
										catch
										{
											throw;
										}
										if (count != this.dataConnection.CurrencyManager.List.Count)
										{
											DataGridViewRowEventArgs dataGridViewRowEventArgs = new DataGridViewRowEventArgs(dataGridViewRow);
											this.OnUserDeletedRow(dataGridViewRowEventArgs);
										}
										else if (dataGridViewDataErrorEventArgs == null)
										{
											num++;
										}
									}
									else
									{
										this.Rows.RemoveAtInternal(num2, false);
										DataGridViewRowEventArgs dataGridViewRowEventArgs2 = new DataGridViewRowEventArgs(dataGridViewRow);
										this.OnUserDeletedRow(dataGridViewRowEventArgs2);
									}
								}
								else
								{
									num++;
								}
							}
						}
					}
					finally
					{
						this.selectedBandSnapshotIndexes = null;
					}
					return true;
				}
				}
			}
			return false;
		}

		// Token: 0x06003028 RID: 12328 RVA: 0x000999E8 File Offset: 0x000989E8
		[UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)]
		protected override bool ProcessDialogKey(Keys keyData)
		{
			Keys keys = keyData & Keys.KeyCode;
			if (keys == Keys.Return)
			{
				if (this.ProcessEnterKey(keyData))
				{
					return true;
				}
			}
			else
			{
				if (keys == Keys.Escape)
				{
					bool isEscapeKeyEffective = this.IsEscapeKeyEffective;
					bool flag = base.ProcessDialogKey(keyData);
					if (!isEscapeKeyEffective && this.Focused && this.ptCurrentCell.X > -1 && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
					{
						this.BeginEditInternal(true);
					}
					return flag;
				}
				if (keys == Keys.D0 || keys == Keys.NumPad0)
				{
					if (this.ProcessZeroKey(keyData))
					{
						return true;
					}
				}
				else if (keys == Keys.C || keys == Keys.Insert)
				{
					if (this.ProcessInsertKey(keyData))
					{
						return true;
					}
				}
				else if (keys == Keys.Tab)
				{
					IntSecurity.AllWindows.Demand();
					if (this.ProcessTabKey(keyData))
					{
						return true;
					}
					if (this.editingControl != null)
					{
						this.dataGridViewState1[64] = true;
						if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.LeaveControl, DataGridView.DataGridViewValidateCellInternal.Always, true, true, true, true, true, false, false, false))
						{
							return true;
						}
					}
					keyData &= ~Keys.Control;
					bool flag2 = false;
					IntSecurity.ModifyFocus.Assert();
					try
					{
						flag2 = base.ProcessDialogKey(keyData);
					}
					finally
					{
						CodeAccessPermission.RevertAssert();
					}
					if (this.dataGridViewState1[64] && this.Focused)
					{
						this.OnEnter(EventArgs.Empty);
					}
					return flag2;
				}
			}
			return base.ProcessDialogKey(keyData);
		}

		// Token: 0x06003029 RID: 12329 RVA: 0x00099B48 File Offset: 0x00098B48
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessDownKey(Keys keyData)
		{
			bool flag;
			return this.ProcessDownKeyInternal(keyData, out flag);
		}

		// Token: 0x0600302A RID: 12330 RVA: 0x00099B60 File Offset: 0x00098B60
		private bool ProcessDownKeyInternal(Keys keyData, out bool moved)
		{
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = ((firstColumn == null) ? (-1) : firstColumn.Index);
			int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
			if (num == -1 || lastRow == -1)
			{
				moved = false;
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.Y != -1)
			{
				num2 = this.Rows.GetNextRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
			}
			moved = true;
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num, lastRow, true);
								bool flag = this.ScrollIntoView(num, lastRow, false);
								if (this.IsInnerCellOutOfBounds(num, lastRow))
								{
									moved = false;
									return true;
								}
								if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
								{
									moved = false;
								}
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								if (this.ptCurrentCell.X == -1 || this.ptAnchorCell.X == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, lastRow);
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, false, false, false))
								{
									moved = false;
								}
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
								{
									moved = false;
								}
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
							{
								moved = false;
								return true;
							}
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
							{
								moved = false;
							}
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (num2 == -1)
							{
								moved = false;
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
							{
								moved = false;
								return true;
							}
							if (this.MultiSelect)
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									moved = false;
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, x2, this.ptAnchorCell.Y, ref y2, num2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
							}
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false))
							{
								moved = false;
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, lastRow, true);
						bool flag = this.ScrollIntoView(num, lastRow, false);
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							moved = false;
							return true;
						}
						if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
						{
							moved = false;
						}
					}
					else
					{
						if (num2 == -1)
						{
							moved = false;
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							moved = false;
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false))
						{
							moved = false;
						}
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedRowCore(lastRow, true);
								bool flag = this.ScrollIntoView(num, lastRow, false);
								if (this.IsInnerCellOutOfBounds(num, lastRow))
								{
									moved = false;
									return true;
								}
								if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
								{
									moved = false;
								}
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								if (this.ptAnchorCell.Y == -1 || this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								this.ClearSelection();
								this.SelectRowRange(this.ptAnchorCell.Y, lastRow, true);
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, false, false, false))
								{
									moved = false;
								}
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
								this.SetSelectedRowCore(lastRow, true);
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
								{
									moved = false;
								}
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
							{
								moved = false;
								return true;
							}
							this.ClearSelection();
							this.SetSelectedRowCore(lastRow, true);
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
							{
								moved = false;
							}
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (num2 == -1)
							{
								moved = false;
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
							{
								moved = false;
								return true;
							}
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									moved = false;
									return true;
								}
								if (num2 >= this.ptAnchorCell.Y)
								{
									this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
								}
								else
								{
									this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
								}
							}
							else
							{
								this.SetSelectedRowCore(num2, true);
							}
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false))
							{
								moved = false;
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(lastRow, true);
						bool flag = this.ScrollIntoView(num, lastRow, false);
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							moved = false;
							return true;
						}
						if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
						{
							moved = false;
						}
					}
					else
					{
						if (num2 == -1)
						{
							moved = false;
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							moved = false;
							return true;
						}
						this.ClearSelection();
						this.SetSelectedRowCore(num2, true);
						if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false))
						{
							moved = false;
						}
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
							{
								moved = false;
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(num, true);
						bool flag = this.ScrollIntoView(num, lastRow, false);
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							moved = false;
							return true;
						}
						if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
						{
							moved = false;
						}
					}
					else
					{
						if (num2 == -1)
						{
							moved = false;
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							moved = false;
							return true;
						}
						if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false))
						{
							moved = false;
						}
					}
					return true;
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num, lastRow, true);
								bool flag = this.ScrollIntoView(num, lastRow, false);
								if (this.IsInnerCellOutOfBounds(num, lastRow))
								{
									moved = false;
									return true;
								}
								if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
								{
									moved = false;
								}
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								if (this.ptAnchorCell.Y == -1 || this.ptCurrentCell.Y == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
								{
									this.ClearSelection();
									this.SelectRowRange(this.ptAnchorCell.Y, lastRow, true);
								}
								else
								{
									int x3 = this.ptCurrentCell.X;
									int y3 = this.ptCurrentCell.Y;
									this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x3, x3, this.ptAnchorCell.Y, ref y3, lastRow);
								}
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, false, false, false))
								{
									moved = false;
								}
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.Y == -1 || this.IsRowOutOfBounds(lastRow))
								{
									moved = false;
									return true;
								}
								if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
								{
									this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
									this.SetSelectedRowCore(lastRow, true);
								}
								else
								{
									this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
									this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
								}
								if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
								{
									moved = false;
								}
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, lastRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsRowOutOfBounds(lastRow))
							{
								moved = false;
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								this.SetSelectedRowCore(lastRow, true);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, lastRow, true);
							}
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, lastRow, true, false, false))
							{
								moved = false;
							}
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
							bool flag = this.ScrollIntoView(num, lastRow, false);
							if (this.IsInnerCellOutOfBounds(num, lastRow))
							{
								moved = false;
								return true;
							}
							if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
							{
								moved = false;
							}
						}
						else
						{
							if (num2 == -1)
							{
								moved = false;
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsRowOutOfBounds(num2))
							{
								moved = false;
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								if (this.MultiSelect)
								{
									if (this.ptAnchorCell.Y == -1)
									{
										moved = false;
										return true;
									}
									if (num2 >= this.ptAnchorCell.Y)
									{
										this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
									}
									else
									{
										this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
									}
								}
								else
								{
									this.SetSelectedRowCore(num2, true);
								}
							}
							else if (this.MultiSelect)
							{
								int x4 = this.ptCurrentCell.X;
								int y4 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									moved = false;
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x4, x4, this.ptAnchorCell.Y, ref y4, num2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
							}
							if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false))
							{
								moved = false;
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, lastRow, true);
						bool flag = this.ScrollIntoView(num, lastRow, false);
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							moved = false;
							return true;
						}
						if (!this.SetCurrentCellAddressCore(num, lastRow, true, false, false))
						{
							moved = false;
						}
					}
					else
					{
						if (num2 == -1)
						{
							moved = false;
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsRowOutOfBounds(num2))
						{
							moved = false;
							return true;
						}
						if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(num2, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						}
						if (!this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false))
						{
							moved = false;
						}
					}
					return true;
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
			return true;
		}

		// Token: 0x0600302B RID: 12331 RVA: 0x0009AD24 File Offset: 0x00099D24
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessEndKey(Keys keyData)
		{
			DataGridViewColumn lastColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			int num = ((lastColumn == null) ? (-1) : lastColumn.Index);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, lastRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, lastRow))
					{
						return true;
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptAnchorCell.X >= 0)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, num, this.ptAnchorCell.Y, ref y, lastRow);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
						}
						this.SetCurrentCellAddressCore(num, lastRow, !this.MultiSelect, false, false);
					}
					else
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, lastRow, true);
						this.SetCurrentCellAddressCore(num, lastRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, lastRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, lastRow))
					{
						return true;
					}
					this.ClearSelection();
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptCurrentCell.Y >= 0)
						{
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							this.SelectRowRange(this.ptAnchorCell.Y, lastRow, true);
						}
						else
						{
							this.SetSelectedRowCore(lastRow, true);
						}
						this.SetCurrentCellAddressCore(num, lastRow, !this.MultiSelect, false, false);
					}
					else
					{
						this.SetSelectedRowCore(lastRow, true);
						this.SetCurrentCellAddressCore(num, lastRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, lastRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, lastRow))
					{
						return true;
					}
					this.ClearSelection();
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptCurrentCell.X >= 0)
						{
							this.SelectColumnRange(this.ptAnchorCell.X, num, true);
						}
						else
						{
							this.SetSelectedColumnCore(num, true);
						}
						this.SetCurrentCellAddressCore(num, lastRow, !this.MultiSelect, false, false);
					}
					else
					{
						this.SetSelectedColumnCore(num, true);
						this.SetCurrentCellAddressCore(num, lastRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, lastRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, lastRow))
					{
						return true;
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptAnchorCell.X >= 0)
						{
							if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								this.SelectRowRange(this.ptCurrentCell.Y, lastRow, true);
							}
							else
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, num, this.ptAnchorCell.Y, ref y2, lastRow);
							}
						}
						else if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(lastRow, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
						}
						this.SetCurrentCellAddressCore(num, lastRow, !this.MultiSelect, false, false);
					}
					else
					{
						if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(lastRow, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
						}
						this.SetCurrentCellAddressCore(num, lastRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (!this.ScrollIntoView(num, lastRow, true))
						{
							return true;
						}
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							return true;
						}
						if (this.ptCurrentCell.X >= 0 && this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.SelectColumnRange(this.ptAnchorCell.X, num, true);
							}
							this.SetSelectedColumnCore(num, true);
						}
						else if (this.MultiSelect && this.ptCurrentCell.X >= 0)
						{
							int x3 = this.ptCurrentCell.X;
							int y3 = this.ptCurrentCell.Y;
							if (this.ptAnchorCell.X == -1)
							{
								return true;
							}
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x3, num, this.ptAnchorCell.Y, ref y3, lastRow);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
						}
						this.SetCurrentCellAddressCore(num, lastRow, !this.MultiSelect, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(num, lastRow, true))
						{
							return true;
						}
						if (this.IsInnerCellOutOfBounds(num, lastRow))
						{
							return true;
						}
						if (this.ptCurrentCell.X >= 0 && this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, lastRow, true);
						}
						this.SetCurrentCellAddressCore(num, lastRow, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
			return true;
		}

		// Token: 0x0600302C RID: 12332 RVA: 0x0009B3F8 File Offset: 0x0009A3F8
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessEnterKey(Keys keyData)
		{
			bool flag = false;
			bool flag2 = true;
			bool flag3 = true;
			if ((keyData & Keys.Control) == Keys.None)
			{
				flag3 = false;
				keyData &= ~Keys.Shift;
				flag2 = this.ProcessDownKeyInternal(keyData, out flag);
			}
			if (!flag)
			{
				DataGridViewCell dataGridViewCell = null;
				if (this.EditMode == DataGridViewEditMode.EditOnEnter)
				{
					if (this.ptCurrentCell.X != -1)
					{
						dataGridViewCell = this.CurrentCellInternal;
						DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = this.CommitEdit(ref dataGridViewCell, DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.WhenChanged, false, false, false, false, false);
						if (dataGridViewDataErrorEventArgs != null && dataGridViewDataErrorEventArgs.ThrowException)
						{
							throw dataGridViewDataErrorEventArgs.Exception;
						}
					}
				}
				else
				{
					this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit, DataGridView.DataGridViewValidateCellInternal.WhenChanged, false, false, false, false, false, true, true, true);
				}
				if (flag3 && this.IsCurrentRowDirty)
				{
					dataGridViewCell = null;
					int x = this.ptCurrentCell.X;
					int y = this.ptCurrentCell.Y;
					if (this.IsInnerCellOutOfBounds(x, y))
					{
						return flag2;
					}
					if (!this.OnRowValidating(ref dataGridViewCell, x, y))
					{
						if (this.IsInnerCellOutOfBounds(x, y))
						{
							return flag2;
						}
						this.OnRowValidated(ref dataGridViewCell, x, y);
					}
				}
			}
			return flag2;
		}

		// Token: 0x0600302D RID: 12333 RVA: 0x0009B4EC File Offset: 0x0009A4EC
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessEscapeKey(Keys keyData)
		{
			if (this.IsEscapeKeyEffective)
			{
				if (this.dataGridViewOper[1] || this.dataGridViewOper[2] || this.dataGridViewOper[128] || this.dataGridViewOper[256] || this.dataGridViewOper[32])
				{
					this.ResetTrackingState();
				}
				else
				{
					this.CancelEdit(true);
				}
				return true;
			}
			return false;
		}

		// Token: 0x0600302E RID: 12334 RVA: 0x0009B564 File Offset: 0x0009A564
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessF2Key(Keys keyData)
		{
			if (this.ptCurrentCell.X != -1 && !this.IsCurrentCellInEditMode && Control.ModifierKeys == Keys.None && this.ColumnEditable(this.ptCurrentCell.X) && !this.IsSharedCellReadOnly(this.CurrentCellInternal, this.ptCurrentCell.Y) && (this.EditMode == DataGridViewEditMode.EditOnKeystrokeOrF2 || this.EditMode == DataGridViewEditMode.EditOnF2))
			{
				this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
				this.BeginEditInternal(this.EditMode == DataGridViewEditMode.EditOnF2);
				return true;
			}
			return false;
		}

		// Token: 0x0600302F RID: 12335 RVA: 0x0009B600 File Offset: 0x0009A600
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessHomeKey(Keys keyData)
		{
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = ((firstColumn == null) ? (-1) : firstColumn.Index);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, firstRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, firstRow))
					{
						return true;
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptAnchorCell.X >= 0)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, num, this.ptAnchorCell.Y, ref y, firstRow);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
						}
						this.SetCurrentCellAddressCore(num, firstRow, !this.MultiSelect, false, false);
					}
					else
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, firstRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, firstRow))
					{
						return true;
					}
					this.ClearSelection();
					this.SetSelectedRowCore(firstRow, true);
					this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, firstRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, firstRow))
					{
						return true;
					}
					this.ClearSelection();
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptCurrentCell.X >= 0)
						{
							if (this.ptAnchorCell.X == -1)
							{
								return true;
							}
							this.SelectColumnRange(num, this.ptAnchorCell.X, true);
						}
						else
						{
							this.SetSelectedColumnCore(num, true);
						}
						this.SetCurrentCellAddressCore(num, firstRow, !this.MultiSelect, false, false);
					}
					else
					{
						this.SetSelectedColumnCore(num, true);
						this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (!this.ScrollIntoView(num, firstRow, true))
					{
						return true;
					}
					if (this.IsInnerCellOutOfBounds(num, firstRow))
					{
						return true;
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.MultiSelect && this.ptAnchorCell.X >= 0)
						{
							if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								this.SelectRowRange(firstRow, this.ptAnchorCell.Y, true);
							}
							else
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, num, this.ptAnchorCell.Y, ref y2, firstRow);
							}
						}
						else if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(firstRow, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
						}
						this.SetCurrentCellAddressCore(num, firstRow, !this.MultiSelect, false, false);
					}
					else
					{
						if (this.ptCurrentCell.Y > -1 && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(firstRow, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
						}
						this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.None)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (!this.ScrollIntoView(num, firstRow, true))
						{
							return true;
						}
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						if (this.ptCurrentCell.X >= 0 && this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.SelectColumnRange(num, this.ptAnchorCell.X, true);
							}
							this.SetSelectedColumnCore(num, true);
						}
						else if (this.MultiSelect && this.ptCurrentCell.X >= 0)
						{
							int x3 = this.ptCurrentCell.X;
							int y3 = this.ptCurrentCell.Y;
							if (this.ptAnchorCell.X == -1)
							{
								return true;
							}
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x3, num, this.ptAnchorCell.Y, ref y3, firstRow);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
						}
						this.SetCurrentCellAddressCore(num, firstRow, !this.MultiSelect, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(num, firstRow, true))
						{
							return true;
						}
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						if (this.ptCurrentCell.X >= 0 && this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
						}
						this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
			return true;
		}

		// Token: 0x06003030 RID: 12336 RVA: 0x0009BC64 File Offset: 0x0009AC64
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessInsertKey(Keys keyData)
		{
			if (((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Control || ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == (Keys.Shift | Keys.Control) && (keyData & Keys.KeyCode) == Keys.C)) && this.ClipboardCopyMode != DataGridViewClipboardCopyMode.Disable)
			{
				DataObject clipboardContent = this.GetClipboardContent();
				if (clipboardContent != null)
				{
					Clipboard.SetDataObject(clipboardContent);
					return true;
				}
			}
			return false;
		}

		// Token: 0x06003031 RID: 12337 RVA: 0x0009BCB4 File Offset: 0x0009ACB4
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected override bool ProcessKeyEventArgs(ref Message m)
		{
			if (m.Msg == 260 || m.Msg == 256)
			{
				if (this.ptCurrentCell.X != -1)
				{
					DataGridViewCell currentCellInternal = this.CurrentCellInternal;
					if (!this.IsCurrentCellInEditMode && this.ColumnEditable(this.ptCurrentCell.X) && !this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y) && (this.EditMode == DataGridViewEditMode.EditOnKeystroke || this.EditMode == DataGridViewEditMode.EditOnKeystrokeOrF2))
					{
						KeyEventArgs keyEventArgs = new KeyEventArgs((Keys)(long)m.WParam | Control.ModifierKeys);
						if (keyEventArgs.KeyCode != Keys.ProcessKey || (int)m.LParam != 1)
						{
							Type editType = currentCellInternal.EditType;
							Type type = null;
							if (editType == null)
							{
								type = currentCellInternal.GetType().GetInterface("System.Windows.Forms.IDataGridViewEditingCell");
							}
							if ((editType != null || type == null) && currentCellInternal.KeyEntersEditMode(keyEventArgs))
							{
								this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
								if (this.BeginEditInternal(keyEventArgs.KeyCode != Keys.F2 || Control.ModifierKeys != Keys.None || this.EditMode != DataGridViewEditMode.EditOnKeystrokeOrF2) && this.editingControl != null)
								{
									this.editingControl.SendMessage(m.Msg, m.WParam, m.LParam);
									this.dataGridViewState1[32] = true;
									return true;
								}
							}
						}
					}
				}
			}
			else if (this.dataGridViewState1[32] && (m.Msg == 262 || m.Msg == 258 || m.Msg == 646))
			{
				this.dataGridViewState1[32] = false;
				if (this.editingControl != null)
				{
					this.editingControl.SendMessage(m.Msg, m.WParam, m.LParam);
					return true;
				}
			}
			return base.ProcessKeyEventArgs(ref m);
		}

		// Token: 0x06003032 RID: 12338 RVA: 0x0009BEA0 File Offset: 0x0009AEA0
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected override bool ProcessKeyPreview(ref Message m)
		{
			KeyEventArgs keyEventArgs = new KeyEventArgs((Keys)((int)m.WParam | (int)Control.ModifierKeys));
			Keys keyCode = keyEventArgs.KeyCode;
			if (keyCode <= Keys.Return)
			{
				if (keyCode != Keys.Tab && keyCode != Keys.Return)
				{
					goto IL_0091;
				}
			}
			else
			{
				switch (keyCode)
				{
				case Keys.Escape:
				case Keys.Space:
				case Keys.Prior:
				case Keys.Next:
				case Keys.End:
				case Keys.Home:
				case Keys.Left:
				case Keys.Up:
				case Keys.Right:
				case Keys.Down:
				case Keys.Delete:
					break;
				case Keys.IMEConvert:
				case Keys.IMENonconvert:
				case Keys.IMEAccept:
				case Keys.IMEModeChange:
				case Keys.Select:
				case Keys.Print:
				case Keys.Execute:
				case Keys.Snapshot:
				case Keys.Insert:
					goto IL_0091;
				default:
					if (keyCode != Keys.F2)
					{
						goto IL_0091;
					}
					break;
				}
			}
			bool flag = true;
			goto IL_0093;
			IL_0091:
			flag = false;
			IL_0093:
			if (this.editingControl != null && (m.Msg == 256 || m.Msg == 260))
			{
				this.dataGridViewState2[8192] = ((IDataGridViewEditingControl)this.editingControl).EditingControlWantsInputKey(keyEventArgs.KeyData, flag);
			}
			if (this.dataGridViewState2[8192])
			{
				return base.ProcessKeyPreview(ref m);
			}
			if (flag)
			{
				if (m.Msg != 256 && m.Msg != 260)
				{
					return true;
				}
				if (this.ProcessDataGridViewKey(keyEventArgs))
				{
					return true;
				}
				this.dataGridViewState2[8192] = true;
			}
			return base.ProcessKeyPreview(ref m);
		}

		// Token: 0x06003033 RID: 12339 RVA: 0x0009BFE7 File Offset: 0x0009AFE7
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessLeftKey(Keys keyData)
		{
			if (this.RightToLeftInternal)
			{
				return this.ProcessRightKeyPrivate(keyData);
			}
			return this.ProcessLeftKeyPrivate(keyData);
		}

		// Token: 0x06003034 RID: 12340 RVA: 0x0009C000 File Offset: 0x0009B000
		private bool ProcessLeftKeyPrivate(Keys keyData)
		{
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = ((dataGridViewColumn == null) ? (-1) : dataGridViewColumn.Index);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.X != -1)
			{
				dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (dataGridViewColumn != null)
				{
					num2 = dataGridViewColumn.Index;
				}
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, num2, this.ptAnchorCell.Y, ref y, y);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
							}
							this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
						this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(firstRow, true);
						this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
							this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, num2))
								{
									this.SelectColumnRange(this.ptAnchorCell.X, num2, true);
								}
								else
								{
									this.SelectColumnRange(num2, this.ptAnchorCell.X, true);
								}
							}
							else
							{
								this.SetSelectedColumnCore(num2, true);
							}
							this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(num, true);
						this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(num2, true);
						this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessLeftMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							if (this.Columns[this.ptCurrentCell.X].Selected)
							{
								this.ClearSelection();
								if (this.MultiSelect)
								{
									if (this.ptAnchorCell.X == -1)
									{
										return true;
									}
									if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, num2))
									{
										this.SelectColumnRange(this.ptAnchorCell.X, num2, true);
									}
									else
									{
										this.SelectColumnRange(num2, this.ptAnchorCell.X, true);
									}
								}
								this.SetSelectedColumnCore(num2, true);
							}
							else if (this.MultiSelect)
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, num2, this.ptAnchorCell.Y, ref y2, y2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
							}
							this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						if (this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num2, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
						}
						this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
			return true;
		}

		// Token: 0x06003035 RID: 12341 RVA: 0x0009C8E0 File Offset: 0x0009B8E0
		private bool ProcessLeftMost(bool shift, int firstVisibleColumnIndex, int firstVisibleRowIndex)
		{
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
							this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else if (this.MultiSelect)
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
							{
								return true;
							}
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, firstVisibleColumnIndex, this.ptAnchorCell.Y, ref y, y);
							this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
							{
								return true;
							}
							this.ClearSelection();
							this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
							this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
						this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
						this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(firstVisibleRowIndex, true);
						this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
							this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else if (this.MultiSelect)
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
							{
								return true;
							}
							this.ClearSelection();
							this.SelectColumnRange(firstVisibleColumnIndex, this.ptAnchorCell.X, true);
							this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
							{
								return true;
							}
							this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
							this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
							this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
						this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
						this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
							this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else if (this.MultiSelect)
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
							{
								return true;
							}
							if (this.Columns[this.ptCurrentCell.X].Selected)
							{
								this.ClearSelection();
								this.SelectColumnRange(firstVisibleColumnIndex, this.ptAnchorCell.X, true);
							}
							else
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, firstVisibleColumnIndex, this.ptAnchorCell.Y, ref y2, y2);
							}
							this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							if (this.Columns[this.ptCurrentCell.X].Selected)
							{
								this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
								this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
							}
							else
							{
								this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
								this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
							}
							this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(firstVisibleColumnIndex, firstVisibleRowIndex, true);
						this.ScrollIntoView(firstVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(firstVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(firstVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(firstVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(firstVisibleColumnIndex))
						{
							return true;
						}
						if (this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(firstVisibleColumnIndex, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true);
						}
						this.SetCurrentCellAddressCore(firstVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
			return true;
		}

		// Token: 0x06003036 RID: 12342 RVA: 0x0009D0E0 File Offset: 0x0009C0E0
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessNextKey(Keys keyData)
		{
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = ((firstColumn == null) ? (-1) : firstColumn.Index);
			if (num == -1)
			{
				return false;
			}
			int num2 = 0;
			int num3;
			if (this.ptCurrentCell.Y == -1)
			{
				num3 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
				if (num3 == -1)
				{
					return false;
				}
			}
			else
			{
				num3 = this.ptCurrentCell.Y;
			}
			if ((this.Rows.GetRowState(num3) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				if (this.displayedBandsInfo.FirstDisplayedScrollingRow > 0)
				{
					int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					if (!this.ScrollIntoView((this.ptCurrentCell.X == -1) ? num : this.ptCurrentCell.X, firstRow, true))
					{
						return true;
					}
					num2 = this.Rows.GetRowCount(DataGridViewElementStates.Visible, this.ptCurrentCell.Y, firstRow) - 1;
				}
				else
				{
					num2 = this.displayedBandsInfo.NumTotallyDisplayedFrozenRows;
				}
			}
			num2 += this.displayedBandsInfo.NumTotallyDisplayedScrollingRows;
			int num4 = num3;
			if (num2 == 0)
			{
				num2 = 1;
			}
			while (num2 > 0 && num4 != -1)
			{
				num4 = this.Rows.GetNextRow(num3, DataGridViewElementStates.Visible);
				if (num4 != -1)
				{
					num3 = num4;
					num2--;
				}
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.ptCurrentCell.X == -1)
				{
					this.ClearSelection();
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.CellSelect:
					case DataGridViewSelectionMode.RowHeaderSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
						this.SetSelectedCellCore(num, num3, true);
						break;
					case DataGridViewSelectionMode.FullRowSelect:
						this.SetSelectedRowCore(num3, true);
						break;
					case DataGridViewSelectionMode.FullColumnSelect:
						this.SetSelectedColumnCore(num, true);
						break;
					}
					this.ScrollIntoView(num, num3, false);
					if (this.IsInnerCellOutOfBounds(num, num3))
					{
						return true;
					}
					this.SetCurrentCellAddressCore(num, num3, true, false, false);
					return true;
				}
				else
				{
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.CellSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num3, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num3))
						{
							return true;
						}
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, num3);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num3, true);
						}
						this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num3, false, false, false);
						return true;
					case DataGridViewSelectionMode.FullRowSelect:
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num3, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num3))
						{
							return true;
						}
						this.ClearSelection();
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							if (this.ptAnchorCell.Y < num3)
							{
								this.SelectRowRange(this.ptAnchorCell.Y, num3, true);
							}
							else
							{
								this.SelectRowRange(num3, this.ptAnchorCell.Y, true);
							}
						}
						else
						{
							this.SetSelectedRowCore(num3, true);
						}
						this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num3, false, false, false);
						return true;
					case DataGridViewSelectionMode.FullColumnSelect:
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num3, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num3))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num3, true, false, false);
						return true;
					case DataGridViewSelectionMode.RowHeaderSelect:
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num3, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num3))
						{
							return true;
						}
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								if (this.ptAnchorCell.Y < num3)
								{
									this.SelectRowRange(this.ptAnchorCell.Y, num3, true);
								}
								else
								{
									this.SelectRowRange(num3, this.ptAnchorCell.Y, true);
								}
							}
							else
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, x2, this.ptAnchorCell.Y, ref y2, num3);
							}
						}
						else if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(num3, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num3, true);
						}
						this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num3, !this.MultiSelect, false, false);
						return true;
					}
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
			return true;
		}

		// Token: 0x06003037 RID: 12343 RVA: 0x0009D660 File Offset: 0x0009C660
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessPriorKey(Keys keyData)
		{
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = ((firstColumn == null) ? (-1) : firstColumn.Index);
			if (num == -1)
			{
				return false;
			}
			int num2;
			if (this.ptCurrentCell.Y == -1)
			{
				num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
				if (num2 == -1)
				{
					return false;
				}
			}
			else
			{
				num2 = this.ptCurrentCell.Y;
			}
			int num3;
			if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				num3 = this.displayedBandsInfo.NumTotallyDisplayedFrozenRows;
			}
			else
			{
				num3 = this.displayedBandsInfo.NumTotallyDisplayedScrollingRows;
			}
			if (num3 == 0)
			{
				num3 = 1;
			}
			int num4 = num2;
			while (num3 > 0 && num4 != -1)
			{
				num4 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible);
				if (num4 != -1)
				{
					num2 = num4;
				}
				num3--;
			}
			if ((this.Rows.GetRowState(num2) & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				if (firstRow != -1 && !this.ScrollIntoView((this.ptCurrentCell.X == -1) ? num : this.ptCurrentCell.X, firstRow, true))
				{
					return true;
				}
				num2 = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.ptCurrentCell.X == -1)
				{
					this.ClearSelection();
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.CellSelect:
					case DataGridViewSelectionMode.RowHeaderSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
						this.SetSelectedCellCore(num, num2, true);
						break;
					case DataGridViewSelectionMode.FullRowSelect:
						this.SetSelectedRowCore(num2, true);
						break;
					case DataGridViewSelectionMode.FullColumnSelect:
						this.SetSelectedColumnCore(num, true);
						break;
					}
					this.ScrollIntoView(num, num2, false);
					if (this.IsInnerCellOutOfBounds(num, num2))
					{
						return true;
					}
					this.SetCurrentCellAddressCore(num, num2, true, false, false);
					return true;
				}
				else
				{
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.CellSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							int x = this.ptCurrentCell.X;
							int y = this.ptCurrentCell.Y;
							if (this.ptAnchorCell.X == -1)
							{
								return true;
							}
							this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, num2);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						}
						this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, false, false, false);
						return true;
					case DataGridViewSelectionMode.FullRowSelect:
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							if (this.ptAnchorCell.Y < num2)
							{
								this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
							}
							else
							{
								this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
							}
						}
						else
						{
							this.SetSelectedRowCore(num2, true);
						}
						this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, false, false, false);
						return true;
					case DataGridViewSelectionMode.FullColumnSelect:
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false);
						return true;
					case DataGridViewSelectionMode.RowHeaderSelect:
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						if ((keyData & Keys.Shift) == Keys.Shift && this.MultiSelect)
						{
							if (this.ptAnchorCell.Y == -1)
							{
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								if (this.ptAnchorCell.Y < num2)
								{
									this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
								}
								else
								{
									this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
								}
							}
							else
							{
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, x2, this.ptAnchorCell.Y, ref y2, num2);
							}
						}
						else if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(num2, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						}
						this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false);
						return true;
					}
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
			return true;
		}

		// Token: 0x06003038 RID: 12344 RVA: 0x0009DBD0 File Offset: 0x0009CBD0
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessRightKey(Keys keyData)
		{
			if (this.RightToLeftInternal)
			{
				return this.ProcessLeftKeyPrivate(keyData);
			}
			return this.ProcessRightKeyPrivate(keyData);
		}

		// Token: 0x06003039 RID: 12345 RVA: 0x0009DBEC File Offset: 0x0009CBEC
		private bool ProcessRightKeyPrivate(Keys keyData)
		{
			DataGridViewColumn dataGridViewColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			int num = ((dataGridViewColumn == null) ? (-1) : dataGridViewColumn.Index);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.X != -1)
			{
				dataGridViewColumn = this.Columns.GetNextColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (dataGridViewColumn != null)
				{
					num2 = dataGridViewColumn.Index;
				}
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, num2, this.ptAnchorCell.Y, ref y, y);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
							}
							this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
						this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(firstRow, true);
						this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
							this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, num2))
								{
									this.SelectColumnRange(this.ptAnchorCell.X, num2, true);
								}
								else
								{
									this.SelectColumnRange(num2, this.ptAnchorCell.X, true);
								}
							}
							else
							{
								this.SetSelectedColumnCore(num2, true);
							}
							this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(num, true);
						this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(num2, true);
						this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						return this.ProcessRightMost((keyData & Keys.Shift) == Keys.Shift, num, firstRow);
					}
					if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(num2))
							{
								return true;
							}
							if (this.Columns[this.ptCurrentCell.X].Selected)
							{
								this.ClearSelection();
								if (this.MultiSelect)
								{
									if (this.ptAnchorCell.X == -1)
									{
										return true;
									}
									if (this.Columns.DisplayInOrder(this.ptAnchorCell.X, num2))
									{
										this.SelectColumnRange(this.ptAnchorCell.X, num2, true);
									}
									else
									{
										this.SelectColumnRange(num2, this.ptAnchorCell.X, true);
									}
								}
								else
								{
									this.SetSelectedColumnCore(num2, true);
								}
							}
							else if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, num2, this.ptAnchorCell.Y, ref y2, y2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
							}
							this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(num2, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsColumnOutOfBounds(num2))
						{
							return true;
						}
						if (this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num2, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num2, this.ptCurrentCell.Y, true);
						}
						this.SetCurrentCellAddressCore(num2, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
			return true;
		}

		// Token: 0x0600303A RID: 12346 RVA: 0x0009E4D4 File Offset: 0x0009D4D4
		private bool ProcessRightMost(bool shift, int lastVisibleColumnIndex, int firstVisibleRowIndex)
		{
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
							this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, lastVisibleColumnIndex, this.ptAnchorCell.Y, ref y, y);
								this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
								this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
						this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
						this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(firstVisibleRowIndex, true);
						this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
							this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								this.ClearSelection();
								this.SelectColumnRange(this.ptAnchorCell.X, lastVisibleColumnIndex, true);
								this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
							}
							else
							{
								this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
								this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
								this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
						this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
						this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if (shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
							this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
							if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
							{
								return true;
							}
							if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.X == -1)
								{
									return true;
								}
								if (this.Columns[this.ptCurrentCell.X].Selected)
								{
									this.ClearSelection();
									this.SelectColumnRange(this.ptAnchorCell.X, lastVisibleColumnIndex, true);
								}
								else
								{
									int x2 = this.ptCurrentCell.X;
									int y2 = this.ptCurrentCell.Y;
									this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, lastVisibleColumnIndex, this.ptAnchorCell.Y, ref y2, y2);
								}
								this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, false, false, false);
							}
							else
							{
								if (this.Columns[this.ptCurrentCell.X].Selected)
								{
									this.SetSelectedColumnCore(this.ptCurrentCell.X, false);
									this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
								}
								else
								{
									this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
									this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
								}
								this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
							}
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(lastVisibleColumnIndex, firstVisibleRowIndex, true);
						this.ScrollIntoView(lastVisibleColumnIndex, firstVisibleRowIndex, false);
						if (this.IsInnerCellOutOfBounds(lastVisibleColumnIndex, firstVisibleRowIndex))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(lastVisibleColumnIndex, firstVisibleRowIndex, true, false, false);
					}
					else
					{
						if (!this.ScrollIntoView(lastVisibleColumnIndex, this.ptCurrentCell.Y, true))
						{
							return true;
						}
						if (this.ptCurrentCell.Y == -1 || this.IsColumnOutOfBounds(lastVisibleColumnIndex))
						{
							return true;
						}
						if (this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(lastVisibleColumnIndex, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true);
						}
						this.SetCurrentCellAddressCore(lastVisibleColumnIndex, this.ptCurrentCell.Y, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
			return true;
		}

		// Token: 0x0600303B RID: 12347 RVA: 0x0009EC34 File Offset: 0x0009DC34
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessSpaceKey(Keys keyData)
		{
			if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) == Keys.Shift && this.ptCurrentCell.X != -1)
			{
				this.noSelectionChangeCount++;
				bool flag = false;
				if (this.selectedBandIndexes.Count > 8)
				{
					this.inBulkPaintCount++;
					flag = true;
				}
				try
				{
					if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
					{
						int i = 0;
						while (i < this.selectedBandIndexes.Count)
						{
							if (this.selectedBandIndexes[i] != this.ptCurrentCell.X)
							{
								this.SetSelectedColumnCore(this.selectedBandIndexes[i], false);
							}
							else
							{
								i++;
							}
						}
						this.RemoveIndividuallySelectedCells();
						if (!this.Columns[this.ptCurrentCell.X].Selected)
						{
							this.SetSelectedColumnCore(this.ptCurrentCell.X, true);
						}
						return true;
					}
					if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
					{
						int j = 0;
						while (j < this.selectedBandIndexes.Count)
						{
							if (this.selectedBandIndexes[j] != this.ptCurrentCell.Y)
							{
								this.SetSelectedRowCore(this.selectedBandIndexes[j], false);
							}
							else
							{
								j++;
							}
						}
						this.RemoveIndividuallySelectedCells();
						if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(this.ptCurrentCell.Y, true);
						}
						return true;
					}
				}
				finally
				{
					this.NoSelectionChangeCount--;
					if (flag)
					{
						this.ExitBulkPaint(-1, -1);
					}
				}
				return false;
			}
			return false;
		}

		// Token: 0x0600303C RID: 12348 RVA: 0x0009EDDC File Offset: 0x0009DDDC
		[UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)]
		protected bool ProcessTabKey(Keys keyData)
		{
			if (this.StandardTab)
			{
				if ((keyData & Keys.Control) != Keys.Control)
				{
					return false;
				}
				if ((keyData & Keys.Shift) == Keys.Shift)
				{
					return this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell && this.TabToPreviousCell();
				}
				return this.VisibleCellExists && !this.CurrentCellIsLastVisibleCell && this.TabToNextCell();
			}
			else
			{
				if ((keyData & Keys.Control) == Keys.Control)
				{
					return false;
				}
				if ((keyData & Keys.Shift) == Keys.Shift)
				{
					return this.VisibleCellExists && !this.CurrentCellIsFirstVisibleCell && this.TabToPreviousCell();
				}
				return this.VisibleCellExists && !this.CurrentCellIsLastVisibleCell && this.TabToNextCell();
			}
		}

		// Token: 0x0600303D RID: 12349 RVA: 0x0009EE90 File Offset: 0x0009DE90
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected virtual bool ProcessDataGridViewKey(KeyEventArgs e)
		{
			Keys keyCode = e.KeyCode;
			if (keyCode <= Keys.D0)
			{
				if (keyCode == Keys.Tab)
				{
					return this.ProcessTabKey(e.KeyData);
				}
				if (keyCode == Keys.Return)
				{
					return this.ProcessEnterKey(e.KeyData);
				}
				switch (keyCode)
				{
				case Keys.Escape:
					return this.ProcessEscapeKey(e.KeyData);
				case Keys.IMEConvert:
				case Keys.IMENonconvert:
				case Keys.IMEAccept:
				case Keys.IMEModeChange:
				case Keys.Select:
				case Keys.Print:
				case Keys.Execute:
				case Keys.Snapshot:
				case Keys.Help:
					return false;
				case Keys.Space:
					return this.ProcessSpaceKey(e.KeyData);
				case Keys.Prior:
					return this.ProcessPriorKey(e.KeyData);
				case Keys.Next:
					return this.ProcessNextKey(e.KeyData);
				case Keys.End:
					return this.ProcessEndKey(e.KeyData);
				case Keys.Home:
					return this.ProcessHomeKey(e.KeyData);
				case Keys.Left:
					return this.ProcessLeftKey(e.KeyData);
				case Keys.Up:
					return this.ProcessUpKey(e.KeyData);
				case Keys.Right:
					return this.ProcessRightKey(e.KeyData);
				case Keys.Down:
					return this.ProcessDownKey(e.KeyData);
				case Keys.Insert:
					goto IL_0169;
				case Keys.Delete:
					return this.ProcessDeleteKey(e.KeyData);
				case Keys.D0:
					break;
				default:
					return false;
				}
			}
			else
			{
				switch (keyCode)
				{
				case Keys.A:
					return this.ProcessAKey(e.KeyData);
				case Keys.B:
					return false;
				case Keys.C:
					goto IL_0169;
				default:
					if (keyCode != Keys.NumPad0)
					{
						if (keyCode != Keys.F2)
						{
							return false;
						}
						return this.ProcessF2Key(e.KeyData);
					}
					break;
				}
			}
			return this.ProcessZeroKey(e.KeyData);
			IL_0169:
			return this.ProcessInsertKey(e.KeyData);
		}

		// Token: 0x0600303E RID: 12350 RVA: 0x0009F024 File Offset: 0x0009E024
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessUpKey(Keys keyData)
		{
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = ((firstColumn == null) ? (-1) : firstColumn.Index);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.Y != -1)
			{
				num2 = this.Rows.GetPreviousRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num, firstRow, true);
								this.ScrollIntoView(num, firstRow, false);
								if (this.IsInnerCellOutOfBounds(num, firstRow))
								{
									return true;
								}
								this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								int x = this.ptCurrentCell.X;
								int y = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x, x, this.ptAnchorCell.Y, ref y, firstRow);
								this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, false, false, false);
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
								this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
							{
								return true;
							}
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
							this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
							{
								return true;
							}
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.Y == -1)
								{
									return true;
								}
								int x2 = this.ptCurrentCell.X;
								int y2 = this.ptCurrentCell.Y;
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x2, x2, this.ptAnchorCell.Y, ref y2, num2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
							}
							this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullRowSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedRowCore(firstRow, true);
								this.ScrollIntoView(num, firstRow, false);
								if (this.IsInnerCellOutOfBounds(num, firstRow))
								{
									return true;
								}
								this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								this.ClearSelection();
								this.SelectRowRange(firstRow, this.ptAnchorCell.Y, true);
								this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, false, false, false);
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
								this.SetSelectedRowCore(firstRow, true);
								this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(firstRow, true);
							this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
							{
								return true;
							}
							this.ClearSelection();
							this.SetSelectedRowCore(firstRow, true);
							this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(firstRow, true);
							this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
							{
								return true;
							}
							this.ClearSelection();
							if (this.MultiSelect)
							{
								if (this.ptAnchorCell.Y == -1)
								{
									return true;
								}
								if (this.ptAnchorCell.Y >= num2)
								{
									this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
								}
								else
								{
									this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
								}
							}
							else
							{
								this.SetSelectedRowCore(num2, true);
							}
							this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedRowCore(firstRow, true);
						this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedRowCore(num2, true);
						this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.FullColumnSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedColumnCore(num, true);
							this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedColumnCore(num, true);
						this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false);
					}
					return true;
				case DataGridViewSelectionMode.RowHeaderSelect:
					if ((keyData & Keys.Control) == Keys.Control)
					{
						if ((keyData & Keys.Shift) == Keys.Shift)
						{
							if (this.ptCurrentCell.X == -1)
							{
								this.ClearSelection();
								this.SetSelectedCellCore(num, firstRow, true);
								this.ScrollIntoView(num, firstRow, false);
								if (this.IsInnerCellOutOfBounds(num, firstRow))
								{
									return true;
								}
								this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
							}
							else if (this.MultiSelect)
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptAnchorCell.X == -1 || this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
								{
									this.ClearSelection();
									this.SelectRowRange(firstRow, this.ptAnchorCell.Y, true);
								}
								else
								{
									int x3 = this.ptCurrentCell.X;
									int y3 = this.ptCurrentCell.Y;
									this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x3, x3, this.ptAnchorCell.Y, ref y3, firstRow);
								}
								this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, false, false, false);
							}
							else
							{
								if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
								{
									return true;
								}
								if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
								{
									return true;
								}
								if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
								{
									this.SetSelectedRowCore(this.ptCurrentCell.Y, false);
									this.SetSelectedRowCore(firstRow, true);
								}
								else
								{
									this.SetSelectedCellCore(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
									this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
								}
								this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
							}
						}
						else if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (!this.ScrollIntoView(this.ptCurrentCell.X, firstRow, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(firstRow))
							{
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								this.SetSelectedRowCore(firstRow, true);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, firstRow, true);
							}
							this.SetCurrentCellAddressCore(this.ptCurrentCell.X, firstRow, true, false, false);
						}
					}
					else if ((keyData & Keys.Shift) == Keys.Shift)
					{
						if (this.ptCurrentCell.X == -1)
						{
							this.ClearSelection();
							this.SetSelectedCellCore(num, firstRow, true);
							this.ScrollIntoView(num, firstRow, false);
							if (this.IsInnerCellOutOfBounds(num, firstRow))
							{
								return true;
							}
							this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
						}
						else
						{
							if (num2 == -1)
							{
								return true;
							}
							if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
							{
								return true;
							}
							if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
							{
								return true;
							}
							if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
							{
								this.ClearSelection();
								if (this.MultiSelect)
								{
									if (this.ptAnchorCell.Y == -1)
									{
										return true;
									}
									if (this.ptAnchorCell.Y >= num2)
									{
										this.SelectRowRange(num2, this.ptAnchorCell.Y, true);
									}
									else
									{
										this.SelectRowRange(this.ptAnchorCell.Y, num2, true);
									}
								}
								this.SetSelectedRowCore(num2, true);
							}
							else if (this.MultiSelect)
							{
								int x4 = this.ptCurrentCell.X;
								int y4 = this.ptCurrentCell.Y;
								if (this.ptAnchorCell.Y == -1)
								{
									return true;
								}
								this.UpdateSelectedCellsBlock(this.ptAnchorCell.X, ref x4, x4, this.ptAnchorCell.Y, ref y4, num2);
							}
							else
							{
								this.ClearSelection();
								this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
							}
							this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, !this.MultiSelect, false, false);
						}
					}
					else if (this.ptCurrentCell.X == -1)
					{
						this.ClearSelection();
						this.SetSelectedCellCore(num, firstRow, true);
						this.ScrollIntoView(num, firstRow, false);
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
					}
					else
					{
						if (num2 == -1)
						{
							return true;
						}
						if (!this.ScrollIntoView(this.ptCurrentCell.X, num2, true))
						{
							return true;
						}
						if (this.ptCurrentCell.X == -1 || this.IsRowOutOfBounds(num2))
						{
							return true;
						}
						if ((this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
						{
							this.ClearSelection();
							this.SetSelectedRowCore(num2, true);
						}
						else
						{
							this.ClearSelection();
							this.SetSelectedCellCore(this.ptCurrentCell.X, num2, true);
						}
						this.SetCurrentCellAddressCore(this.ptCurrentCell.X, num2, true, false, false);
					}
					return true;
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
			return true;
		}

		// Token: 0x0600303F RID: 12351 RVA: 0x000A001C File Offset: 0x0009F01C
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected bool ProcessZeroKey(Keys keyData)
		{
			if (this.ptCurrentCell.X != -1 && !this.IsCurrentCellInEditMode && this.ColumnEditable(this.ptCurrentCell.X))
			{
				DataGridViewCell currentCellInternal = this.CurrentCellInternal;
				if (!this.IsSharedCellReadOnly(currentCellInternal, this.ptCurrentCell.Y) && (this.EditMode == DataGridViewEditMode.EditOnKeystroke || this.EditMode == DataGridViewEditMode.EditOnKeystrokeOrF2) && currentCellInternal.EditType != null)
				{
					this.ScrollIntoView(this.ptCurrentCell.X, this.ptCurrentCell.Y, false);
					if (!this.BeginEditInternal(false))
					{
						return false;
					}
				}
			}
			if ((keyData & (Keys.Shift | Keys.Control | Keys.Alt)) != Keys.Control || !this.IsCurrentCellInEditMode)
			{
				return false;
			}
			DataGridViewCell currentCellInternal2 = this.CurrentCellInternal;
			object nullValue = currentCellInternal2.GetInheritedStyle(null, this.ptCurrentCell.Y, false).NullValue;
			if (nullValue == null || (currentCellInternal2.FormattedValueType != null && currentCellInternal2.FormattedValueType.IsAssignableFrom(nullValue.GetType())))
			{
				if (this.editingControl != null)
				{
					((IDataGridViewEditingControl)this.editingControl).EditingControlFormattedValue = nullValue;
					((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = true;
					((IDataGridViewEditingControl)this.editingControl).PrepareEditingControlForEdit(true);
				}
				else
				{
					IDataGridViewEditingCell dataGridViewEditingCell = currentCellInternal2 as IDataGridViewEditingCell;
					dataGridViewEditingCell.EditingCellFormattedValue = nullValue;
					dataGridViewEditingCell.EditingCellValueChanged = true;
					dataGridViewEditingCell.PrepareEditingCellForEdit(true);
					this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
				}
				this.NotifyCurrentCellDirty(true);
				return true;
			}
			return false;
		}

		// Token: 0x06003040 RID: 12352 RVA: 0x000A0190 File Offset: 0x0009F190
		private void PushAllowUserToAddRows()
		{
			if (this.AllowUserToAddRowsInternal)
			{
				if (this.Columns.Count > 0 && this.newRowIndex == -1)
				{
					this.AddNewRow(false);
					return;
				}
			}
			else if (this.newRowIndex != -1)
			{
				this.Rows.RemoveAtInternal(this.newRowIndex, false);
			}
		}

		// Token: 0x06003041 RID: 12353 RVA: 0x000A01E0 File Offset: 0x0009F1E0
		private bool PushFormattedValue(ref DataGridViewCell dataGridViewCurrentCell, object formattedValue, out Exception exception)
		{
			exception = null;
			DataGridViewCellStyle inheritedEditingCellStyle = this.InheritedEditingCellStyle;
			DataGridViewCellParsingEventArgs dataGridViewCellParsingEventArgs = this.OnCellParsing(this.ptCurrentCell.Y, this.ptCurrentCell.X, formattedValue, dataGridViewCurrentCell.ValueType, inheritedEditingCellStyle);
			if (dataGridViewCellParsingEventArgs.ParsingApplied && dataGridViewCellParsingEventArgs.Value != null && dataGridViewCurrentCell.ValueType != null && dataGridViewCurrentCell.ValueType.IsAssignableFrom(dataGridViewCellParsingEventArgs.Value.GetType()))
			{
				if (dataGridViewCurrentCell.RowIndex == -1)
				{
					dataGridViewCurrentCell = this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X];
				}
				return dataGridViewCurrentCell.SetValueInternal(this.ptCurrentCell.Y, dataGridViewCellParsingEventArgs.Value);
			}
			object obj;
			try
			{
				obj = dataGridViewCurrentCell.ParseFormattedValue(formattedValue, dataGridViewCellParsingEventArgs.InheritedCellStyle, null, null);
			}
			catch (Exception ex)
			{
				if (ClientUtils.IsCriticalException(ex))
				{
					throw;
				}
				exception = ex;
				return false;
			}
			if (dataGridViewCurrentCell.RowIndex == -1)
			{
				dataGridViewCurrentCell = this.Rows[this.ptCurrentCell.Y].Cells[this.ptCurrentCell.X];
			}
			return dataGridViewCurrentCell.SetValueInternal(this.ptCurrentCell.Y, obj);
		}

		// Token: 0x06003042 RID: 12354 RVA: 0x000A0324 File Offset: 0x0009F324
		private void RecordCellMouseClick(DataGridViewCellMouseEventArgs dgvcme)
		{
			this.lastMouseClickInfo.button = dgvcme.Button;
			this.lastMouseClickInfo.timeStamp = DateTime.Now.Ticks;
			this.lastMouseClickInfo.x = dgvcme.X;
			this.lastMouseClickInfo.y = dgvcme.Y;
			this.lastMouseClickInfo.col = dgvcme.ColumnIndex;
			this.lastMouseClickInfo.row = dgvcme.RowIndex;
		}

		// Token: 0x06003043 RID: 12355 RVA: 0x000A039E File Offset: 0x0009F39E
		private void RefreshColumnsAndRows()
		{
			this.Rows.ClearInternal(false);
			this.RefreshColumns();
			this.RefreshRows(true);
		}

		// Token: 0x06003044 RID: 12356 RVA: 0x000A03BC File Offset: 0x0009F3BC
		private void RefreshColumns()
		{
			bool visible = base.Visible;
			if (visible)
			{
				base.BeginUpdateInternal();
			}
			this.dataGridViewOper[1024] = true;
			try
			{
				DataGridViewColumnCollection columns = this.Columns;
				DataGridViewColumn[] array = null;
				if (this.dataConnection != null)
				{
					array = this.dataConnection.GetCollectionOfBoundDataGridViewColumns();
				}
				if (this.AutoGenerateColumns)
				{
					this.AutoGenerateDataBoundColumns(array);
				}
				else
				{
					for (int i = 0; i < columns.Count; i++)
					{
						columns[i].IsDataBoundInternal = false;
						columns[i].BoundColumnIndex = -1;
						columns[i].BoundColumnConverter = null;
						if (this.DataSource != null && columns[i].DataPropertyName.Length != 0)
						{
							this.MapDataGridViewColumnToDataBoundField(columns[i]);
						}
					}
				}
				if (this.DataSource != null)
				{
					this.dataConnection.ApplySortingInformationFromBackEnd();
				}
			}
			finally
			{
				this.dataGridViewOper[1024] = false;
				if (visible)
				{
					base.EndUpdateInternal(false);
					base.Invalidate(true);
				}
			}
		}

		// Token: 0x06003045 RID: 12357 RVA: 0x000A04C4 File Offset: 0x0009F4C4
		public bool RefreshEdit()
		{
			if (this.ptCurrentCell.X == -1 || !this.IsCurrentCellInEditMode)
			{
				return true;
			}
			DataGridViewCell currentCellInternal = this.CurrentCellInternal;
			DataGridViewCellStyle inheritedStyle = currentCellInternal.GetInheritedStyle(null, this.ptCurrentCell.Y, true);
			if (this.editingControl != null)
			{
				if (this.InitializeEditingControlValue(ref inheritedStyle, currentCellInternal))
				{
					if (((IDataGridViewEditingControl)this.editingControl).RepositionEditingControlOnValueChange)
					{
						this.PositionEditingControl(true, true, false);
					}
					((IDataGridViewEditingControl)this.editingControl).PrepareEditingControlForEdit(true);
					((IDataGridViewEditingControl)this.editingControl).EditingControlValueChanged = false;
					this.IsCurrentCellDirtyInternal = false;
					return true;
				}
				return false;
			}
			else
			{
				if (this.InitializeEditingCellValue(ref inheritedStyle, ref currentCellInternal))
				{
					IDataGridViewEditingCell dataGridViewEditingCell = currentCellInternal as IDataGridViewEditingCell;
					dataGridViewEditingCell.PrepareEditingCellForEdit(true);
					dataGridViewEditingCell.EditingCellValueChanged = false;
					this.IsCurrentCellDirtyInternal = false;
					return true;
				}
				return false;
			}
		}

		// Token: 0x06003046 RID: 12358 RVA: 0x000A0590 File Offset: 0x0009F590
		private void RefreshRows(bool scrollIntoView)
		{
			bool visible = base.Visible;
			if (visible)
			{
				base.BeginUpdateInternal();
			}
			try
			{
				if (this.dataGridViewOper[131072])
				{
					this.dataGridViewState2[4194304] = true;
				}
				this.Rows.ClearInternal(true);
				if (this.dataConnection != null && this.Columns.Count > 0)
				{
					IList list = this.dataConnection.List;
					if (list != null && list.Count > 0)
					{
						int count = list.Count;
						bool doNotChangePositionInTheCurrencyManager = this.dataConnection.DoNotChangePositionInTheCurrencyManager;
						bool flag = !this.layout.dirty && !this.InSortOperation;
						if (flag)
						{
							this.dataConnection.DoNotChangePositionInTheCurrencyManager = true;
						}
						try
						{
							this.Rows.AddInternal(this.RowTemplateClone);
							if (count > 1)
							{
								this.Rows.AddCopiesInternal(0, count - 1);
							}
						}
						finally
						{
							this.dataConnection.DoNotChangePositionInTheCurrencyManager = doNotChangePositionInTheCurrencyManager;
						}
						if (flag)
						{
							this.dataConnection.MatchCurrencyManagerPosition(scrollIntoView, true);
						}
					}
				}
			}
			finally
			{
				if (visible)
				{
					base.EndUpdateInternal(false);
					base.Invalidate(true);
				}
			}
		}

		// Token: 0x06003047 RID: 12359 RVA: 0x000A06CC File Offset: 0x0009F6CC
		private void RealeaseMouse()
		{
			Cursor.ClipInternal = Rectangle.Empty;
			base.CaptureInternal = false;
		}

		// Token: 0x06003048 RID: 12360 RVA: 0x000A06E0 File Offset: 0x0009F6E0
		private void RemoveIndividualReadOnlyCellsInColumn(int columnIndex)
		{
			int i = 0;
			while (i < this.individualReadOnlyCells.Count)
			{
				DataGridViewCell dataGridViewCell = this.individualReadOnlyCells[i];
				if (dataGridViewCell.ColumnIndex == columnIndex)
				{
					this.SetReadOnlyCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
				}
				else
				{
					i++;
				}
			}
		}

		// Token: 0x06003049 RID: 12361 RVA: 0x000A0730 File Offset: 0x0009F730
		private void RemoveIndividualReadOnlyCellsInRow(int rowIndex)
		{
			int i = 0;
			while (i < this.individualReadOnlyCells.Count)
			{
				DataGridViewCell dataGridViewCell = this.individualReadOnlyCells[i];
				if (dataGridViewCell.RowIndex == rowIndex)
				{
					this.SetReadOnlyCellCore(dataGridViewCell.ColumnIndex, rowIndex, false);
				}
				else
				{
					i++;
				}
			}
		}

		// Token: 0x0600304A RID: 12362 RVA: 0x000A077C File Offset: 0x0009F77C
		private void RemoveIndividuallySelectedCells()
		{
			bool flag = false;
			if (this.individualSelectedCells.Count > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				while (this.individualSelectedCells.Count > 0)
				{
					DataGridViewCell headCell = this.individualSelectedCells.HeadCell;
					this.SetSelectedCellCore(headCell.ColumnIndex, headCell.RowIndex, false);
				}
			}
			finally
			{
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x0600304B RID: 12363 RVA: 0x000A07F8 File Offset: 0x0009F7F8
		private void RemoveIndividuallySelectedCells(int columnIndexException, int rowIndexException)
		{
			bool flag = false;
			if (this.individualSelectedCells.Count > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				while (this.individualSelectedCells.Count > 0)
				{
					DataGridViewCell dataGridViewCell = this.individualSelectedCells.HeadCell;
					if (dataGridViewCell.ColumnIndex == columnIndexException && dataGridViewCell.RowIndex == rowIndexException)
					{
						while (this.individualSelectedCells.Count > 1)
						{
							dataGridViewCell = this.individualSelectedCells[1];
							this.SetSelectedCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
						}
						break;
					}
					this.SetSelectedCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
				}
			}
			finally
			{
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x0600304C RID: 12364 RVA: 0x000A08B8 File Offset: 0x0009F8B8
		private void RemoveIndividuallySelectedCellsInColumn(int columnIndex)
		{
			int i = 0;
			int num = 0;
			bool flag = false;
			while (i < this.individualSelectedCells.Count)
			{
				DataGridViewCell dataGridViewCell = this.individualSelectedCells[i];
				if (dataGridViewCell.ColumnIndex == columnIndex)
				{
					this.SetSelectedCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
					num++;
					if (num > 8)
					{
						flag = true;
						break;
					}
				}
				else
				{
					i++;
				}
			}
			if (flag)
			{
				this.inBulkPaintCount++;
				try
				{
					while (i < this.individualSelectedCells.Count)
					{
						DataGridViewCell dataGridViewCell = this.individualSelectedCells[i];
						if (dataGridViewCell.ColumnIndex == columnIndex)
						{
							this.SetSelectedCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
						}
						else
						{
							i++;
						}
					}
				}
				finally
				{
					this.ExitBulkPaint(columnIndex, -1);
				}
			}
		}

		// Token: 0x0600304D RID: 12365 RVA: 0x000A0980 File Offset: 0x0009F980
		private void RemoveIndividuallySelectedCellsInRow(int rowIndex)
		{
			int i = 0;
			while (i < this.individualSelectedCells.Count)
			{
				DataGridViewCell dataGridViewCell = this.individualSelectedCells[i];
				if (dataGridViewCell.RowIndex == rowIndex)
				{
					this.SetSelectedCellCore(dataGridViewCell.ColumnIndex, dataGridViewCell.RowIndex, false);
				}
				else
				{
					i++;
				}
			}
		}

		// Token: 0x0600304E RID: 12366 RVA: 0x000A09CE File Offset: 0x0009F9CE
		private void ResetBackgroundColor()
		{
			this.BackgroundColor = DataGridView.DefaultBackgroundBrush.Color;
		}

		// Token: 0x0600304F RID: 12367 RVA: 0x000A09E0 File Offset: 0x0009F9E0
		private void ResetGridColor()
		{
			this.GridColor = DataGridView.DefaultGridColor;
		}

		// Token: 0x06003050 RID: 12368 RVA: 0x000A09ED File Offset: 0x0009F9ED
		[EditorBrowsable(EditorBrowsableState.Never)]
		public override void ResetText()
		{
			base.ResetText();
		}

		// Token: 0x06003051 RID: 12369 RVA: 0x000A09F8 File Offset: 0x0009F9F8
		private void ResetTrackingState()
		{
			if (this.horizScrollTimer != null && this.horizScrollTimer.Enabled)
			{
				this.horizScrollTimer.Enabled = false;
			}
			if (this.vertScrollTimer != null && this.vertScrollTimer.Enabled)
			{
				this.vertScrollTimer.Enabled = false;
			}
			this.dataGridViewOper[1] = false;
			this.dataGridViewOper[2] = false;
			this.dataGridViewOper[32] = false;
			this.dataGridViewOper[128] = false;
			this.dataGridViewOper[256] = false;
			this.dataGridViewOper[4] = false;
			this.dataGridViewOper[8] = false;
			this.dataGridViewOper[16] = false;
			this.trackColumn = -1;
			this.trackRow = -1;
			this.ptMouseDownCell.X = -2;
			this.ptMouseDownCell.Y = -2;
			if (this.currentRowSplitBar != -1)
			{
				base.Invalidate(this.CalcRowResizeFeedbackRect(this.currentRowSplitBar), true);
				this.lastRowSplitBar = (this.currentRowSplitBar = -1);
			}
			if (this.currentColSplitBar != -1)
			{
				base.Invalidate(this.CalcColResizeFeedbackRect(this.currentColSplitBar), true);
				this.lastColSplitBar = (this.currentColSplitBar = -1);
			}
			if (this.lastHeaderShadow != -1)
			{
				this.dataGridViewState2[1024] = false;
				this.trackColumnEdge = -1;
				this.lastHeaderShadow = -1;
				base.Invalidate(Rectangle.Union(this.layout.TopLeftHeader, this.layout.ColumnHeaders));
			}
			this.RealeaseMouse();
		}

		// Token: 0x06003052 RID: 12370 RVA: 0x000A0B88 File Offset: 0x0009FB88
		internal void ResetUIState(bool useRowShortcut, bool computeVisibleRows)
		{
			this.PerformLayoutPrivate(useRowShortcut, computeVisibleRows, true, !useRowShortcut);
			if (!useRowShortcut)
			{
				base.Invalidate();
				this.InvalidateScrollBars();
			}
		}

		// Token: 0x06003053 RID: 12371 RVA: 0x000A0BA8 File Offset: 0x0009FBA8
		private void RestoreRowsCachedThickness()
		{
			this.inBulkPaintCount++;
			this.inBulkLayoutCount++;
			try
			{
				for (int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible); num != -1; num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible))
				{
					DataGridViewRow dataGridViewRow = this.Rows.SharedRow(num);
					int num2;
					int num3;
					dataGridViewRow.GetHeightInfo(num, out num2, out num3);
					if (num2 != dataGridViewRow.CachedThickness && !this.OnRowHeightInfoPushed(num, dataGridViewRow.CachedThickness, num3))
					{
						dataGridViewRow.ThicknessInternal = dataGridViewRow.CachedThickness;
					}
				}
			}
			finally
			{
				this.ExitBulkLayout(true);
				this.ExitBulkPaint(-1, -1);
			}
		}

		// Token: 0x06003054 RID: 12372 RVA: 0x000A0C54 File Offset: 0x0009FC54
		private bool RowIsResizable(int rowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.ResizableSet) == DataGridViewElementStates.ResizableSet)
			{
				return (rowState & DataGridViewElementStates.Resizable) == DataGridViewElementStates.Resizable;
			}
			return this.AllowUserToResizeRows;
		}

		// Token: 0x06003055 RID: 12373 RVA: 0x000A0C84 File Offset: 0x0009FC84
		private bool RowNeedsDisplayedState(int rowIndex, int lastDisplayedFrozenRowIndex, int lastDisplayedScrollingRowIndex)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
			{
				return false;
			}
			if ((rowState & DataGridViewElementStates.Frozen) != DataGridViewElementStates.None)
			{
				return rowIndex <= lastDisplayedFrozenRowIndex;
			}
			return this.displayedBandsInfo.FirstDisplayedScrollingRow != -1 && rowIndex >= this.displayedBandsInfo.FirstDisplayedScrollingRow && rowIndex <= lastDisplayedScrollingRowIndex;
		}

		// Token: 0x06003056 RID: 12374 RVA: 0x000A0CD6 File Offset: 0x0009FCD6
		private void ScrollBar_MouseEnter(object sender, EventArgs e)
		{
			if (this.dataGridViewState2[32])
			{
				this.OnMouseEnter(EventArgs.Empty);
			}
			this.UpdateMouseEnteredCell(null, null);
		}

		// Token: 0x06003057 RID: 12375 RVA: 0x000A0CFC File Offset: 0x0009FCFC
		private void ScrollBar_MouseLeave(object sender, EventArgs e)
		{
			this.UpdateMouseEnteredCell(null, null);
			Point point = base.PointToClient(Control.MousePosition);
			if (!base.ClientRectangle.Contains(point))
			{
				this.OnMouseLeave(EventArgs.Empty);
			}
		}

		// Token: 0x06003058 RID: 12376 RVA: 0x000A0D3C File Offset: 0x0009FD3C
		private bool ScrollColumnIntoView(int columnIndex, int rowIndex, bool committed, bool forCurrentCellChange)
		{
			if (this.displayedBandsInfo.FirstDisplayedScrollingCol != -1 && !this.Columns[columnIndex].Frozen && (columnIndex != this.displayedBandsInfo.FirstDisplayedScrollingCol || this.negOffset > 0))
			{
				if (this.Columns.DisplayInOrder(columnIndex, this.displayedBandsInfo.FirstDisplayedScrollingCol))
				{
					if (!committed && this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, forCurrentCellChange && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex), this.ptCurrentCell.Y != rowIndex))
					{
						return false;
					}
					int num = this.Columns.GetColumnCount(DataGridViewElementStates.Visible, columnIndex, this.displayedBandsInfo.FirstDisplayedScrollingCol);
					if (this.negOffset > 0)
					{
						num++;
					}
					this.ScrollColumns(-num);
				}
				else if (columnIndex == this.displayedBandsInfo.FirstDisplayedScrollingCol && this.negOffset > 0)
				{
					if (!committed && this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, forCurrentCellChange && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex), this.ptCurrentCell.Y != rowIndex))
					{
						return false;
					}
					this.ScrollColumns(-1);
				}
				else if (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol == -1 || (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol != columnIndex && this.Columns.DisplayInOrder(this.displayedBandsInfo.LastTotallyDisplayedScrollingCol, columnIndex)))
				{
					if (!committed && this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, forCurrentCellChange && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex), this.ptCurrentCell.Y != rowIndex))
					{
						return false;
					}
					int num = 0;
					int num2 = this.displayedBandsInfo.FirstDisplayedScrollingCol;
					if (this.RightToLeftInternal)
					{
						int i = this.GetColumnXFromIndex(columnIndex) - this.Columns[columnIndex].Width;
						while (i < this.layout.Data.X)
						{
							if (!this.Columns.DisplayInOrder(num2, columnIndex))
							{
								break;
							}
							i += this.Columns[num2].Width;
							if (num2 == this.displayedBandsInfo.FirstDisplayedScrollingCol)
							{
								i -= this.negOffset;
							}
							num++;
							if (i < this.layout.Data.X)
							{
								num2 = this.Columns.GetNextColumn(this.Columns[num2], DataGridViewElementStates.Visible, DataGridViewElementStates.None).Index;
							}
						}
					}
					else
					{
						int i = this.GetColumnXFromIndex(columnIndex) + this.Columns[columnIndex].Width;
						while (i > this.layout.Data.Right && this.Columns.DisplayInOrder(num2, columnIndex))
						{
							i -= this.Columns[num2].Width;
							if (num2 == this.displayedBandsInfo.FirstDisplayedScrollingCol)
							{
								i += this.negOffset;
							}
							num++;
							if (i > this.layout.Data.Right)
							{
								num2 = this.Columns.GetNextColumn(this.Columns[num2], DataGridViewElementStates.Visible, DataGridViewElementStates.None).Index;
							}
						}
					}
					if (num != 0)
					{
						this.ScrollColumns(num);
					}
				}
			}
			return true;
		}

		// Token: 0x06003059 RID: 12377 RVA: 0x000A10B8 File Offset: 0x000A00B8
		private void ScrollColumns(int columns)
		{
			DataGridViewColumn dataGridViewColumn = null;
			int num = 0;
			if (columns > 0)
			{
				DataGridViewColumn dataGridViewColumn2;
				if (this.displayedBandsInfo.LastTotallyDisplayedScrollingCol >= 0)
				{
					dataGridViewColumn2 = this.Columns[this.displayedBandsInfo.LastTotallyDisplayedScrollingCol];
					while (num < columns && dataGridViewColumn2 != null)
					{
						dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						num++;
					}
					if (dataGridViewColumn2 == null)
					{
						return;
					}
				}
				dataGridViewColumn2 = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				num = 0;
				while (num < columns && dataGridViewColumn2 != null)
				{
					dataGridViewColumn2 = this.Columns.GetNextColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					num++;
				}
				dataGridViewColumn = dataGridViewColumn2;
			}
			if (columns < 0)
			{
				DataGridViewColumn dataGridViewColumn2 = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				if (this.negOffset > 0)
				{
					num++;
				}
				while (num < -columns && dataGridViewColumn2 != null)
				{
					dataGridViewColumn2 = this.Columns.GetPreviousColumn(dataGridViewColumn2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					num++;
				}
				dataGridViewColumn = dataGridViewColumn2;
				if (dataGridViewColumn == null)
				{
					if (this.negOffset == 0)
					{
						this.FlushDisplayedChanged();
						return;
					}
					dataGridViewColumn = this.Columns[this.displayedBandsInfo.FirstDisplayedScrollingCol];
				}
			}
			int num2 = 0;
			for (DataGridViewColumn dataGridViewColumn3 = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen); dataGridViewColumn3 != dataGridViewColumn; dataGridViewColumn3 = this.Columns.GetNextColumn(dataGridViewColumn3, DataGridViewElementStates.Visible, DataGridViewElementStates.None))
			{
				num2 += dataGridViewColumn3.Thickness;
			}
			this.HorizontalOffset = num2;
		}

		// Token: 0x0600305A RID: 12378 RVA: 0x000A11F8 File Offset: 0x000A01F8
		private bool ScrollIntoView(int columnIndex, int rowIndex, bool forCurrentCellChange)
		{
			bool flag = false;
			if (this.ptCurrentCell.X >= 0 && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex))
			{
				if (!this.CommitEditForOperation(columnIndex, rowIndex, forCurrentCellChange))
				{
					return false;
				}
				flag = true;
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					return false;
				}
			}
			return this.ScrollColumnIntoView(columnIndex, rowIndex, flag, forCurrentCellChange) && !this.IsInnerCellOutOfBounds(columnIndex, rowIndex) && this.ScrollRowIntoView(columnIndex, rowIndex, flag, forCurrentCellChange);
		}

		// Token: 0x0600305B RID: 12379 RVA: 0x000A1270 File Offset: 0x000A0270
		private void ScrollRectangles(NativeMethods.RECT[] rects, int change)
		{
			if (rects != null)
			{
				if (Control.MouseButtons != MouseButtons.None)
				{
					this.dataGridViewState1[2048] = true;
				}
				foreach (NativeMethods.RECT rect in rects)
				{
					SafeNativeMethods.ScrollWindow(new HandleRef(this, base.Handle), change, 0, ref rect, ref rect);
				}
			}
		}

		// Token: 0x0600305C RID: 12380 RVA: 0x000A12CC File Offset: 0x000A02CC
		private bool ScrollRowIntoView(int columnIndex, int rowIndex, bool committed, bool forCurrentCellChange)
		{
			if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
			{
				if (rowIndex < this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					if (!committed && this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, forCurrentCellChange && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex), this.ptCurrentCell.Y != rowIndex))
					{
						return false;
					}
					int num = this.Rows.GetRowCount(DataGridViewElementStates.Visible, rowIndex, this.displayedBandsInfo.FirstDisplayedScrollingRow);
					this.ScrollRowsByCount(-num, (num > 1) ? ScrollEventType.LargeDecrement : ScrollEventType.SmallDecrement);
				}
				else if (this.displayedBandsInfo.FirstDisplayedScrollingRow >= 0 && rowIndex > this.displayedBandsInfo.FirstDisplayedScrollingRow)
				{
					int num = 0;
					int num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
					int num3 = this.GetRowYFromIndex(rowIndex) + this.Rows.SharedRow(rowIndex).GetHeight(rowIndex);
					while (num3 > this.layout.Data.Bottom && rowIndex > num2)
					{
						num3 -= this.Rows.SharedRow(num2).GetHeight(num2);
						num++;
						if (num3 > this.layout.Data.Bottom)
						{
							num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
						}
					}
					if (num != 0)
					{
						if (!committed && this.ptCurrentCell.X >= 0 && !this.CommitEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.Scroll, forCurrentCellChange && (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex), this.ptCurrentCell.Y != rowIndex))
						{
							return false;
						}
						this.ScrollRowsByCount(num, (num > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement);
					}
				}
			}
			return true;
		}

		// Token: 0x0600305D RID: 12381 RVA: 0x000A1494 File Offset: 0x000A0494
		private void ScrollRows(int rowCount, int deltaY, ScrollEventType scrollEventType)
		{
			bool flag = false;
			this.verticalOffset -= deltaY;
			if (this.vertScrollBar.Enabled)
			{
				this.vertScrollBar.Value = this.verticalOffset;
			}
			this.ClearRegionCache();
			int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			Rectangle rectangle = this.layout.Data;
			if (this.layout.RowHeadersVisible)
			{
				rectangle = Rectangle.Union(rectangle, this.layout.RowHeaders);
				if (this.SingleHorizontalBorderAdded)
				{
					rectangle.Y++;
					rectangle.Height--;
					flag = true;
				}
			}
			else if (this.SingleVerticalBorderAdded)
			{
				rectangle.X--;
				rectangle.Width++;
			}
			rectangle.Y += rowsHeight;
			rectangle.Height -= rowsHeight;
			if (this.editingControl != null && (this.Rows.GetRowState(this.ptCurrentCell.Y) & DataGridViewElementStates.Frozen) == DataGridViewElementStates.None)
			{
				this.PositionEditingControl(true, false, false);
			}
			if (Control.MouseButtons != MouseButtons.None)
			{
				this.dataGridViewState1[2048] = true;
			}
			this.UpdateMouseEnteredCell(null, null);
			NativeMethods.RECT rect = NativeMethods.RECT.FromXYWH(rectangle.X, rectangle.Y, rectangle.Width, rectangle.Height);
			SafeNativeMethods.ScrollWindow(new HandleRef(this, base.Handle), 0, deltaY, ref rect, ref rect);
			if (flag)
			{
				rectangle.X = this.layout.Inside.X;
				rectangle.Y = this.layout.Inside.Y;
				rectangle.Width = this.layout.RowHeaders.Width;
				rectangle.Height = 1;
				base.Invalidate(rectangle);
			}
			if (!this.dataGridViewState2[16384])
			{
				int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				int rowCount2 = this.Rows.GetRowCount(DataGridViewElementStates.Visible, firstRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
				this.OnScroll(scrollEventType, rowCount2 - rowCount, rowCount2, ScrollOrientation.VerticalScroll);
			}
		}

		// Token: 0x0600305E RID: 12382 RVA: 0x000A16A4 File Offset: 0x000A06A4
		private void ScrollRowsByCount(int rows, ScrollEventType scrollEventType)
		{
			int num = 0;
			int num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			if (rows > 0)
			{
				for (int i = rows; i > 0; i--)
				{
					num -= this.Rows.SharedRow(num2).GetHeight(num2);
					num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
				}
				if (num2 != -1)
				{
					int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
					this.displayedBandsInfo.FirstDisplayedScrollingRow = num2;
					this.ComputeVisibleRows();
					if (this.displayedBandsInfo.FirstDisplayedScrollingRow > firstDisplayedScrollingRow)
					{
						num = -this.Rows.GetRowsHeight(DataGridViewElementStates.Visible, firstDisplayedScrollingRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
						rows = this.Rows.GetRowCount(DataGridViewElementStates.Visible, firstDisplayedScrollingRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
					}
					else
					{
						rows = 0;
					}
				}
			}
			else
			{
				for (int j = rows; j < 0; j++)
				{
					num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					if (num2 != -1)
					{
						num += this.Rows.SharedRow(num2).GetHeight(num2);
					}
				}
				if (num2 != -1)
				{
					this.displayedBandsInfo.FirstDisplayedScrollingRow = num2;
					this.ComputeVisibleRows();
				}
			}
			if (num2 != -1 && rows != 0)
			{
				this.ScrollRows(rows, num, scrollEventType);
			}
			this.FlushDisplayedChanged();
		}

		// Token: 0x0600305F RID: 12383 RVA: 0x000A17CC File Offset: 0x000A07CC
		private void ScrollRowsByHeight(int height)
		{
			int num = 0;
			int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			int num2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			if (height > 0)
			{
				for (int i = this.Rows.SharedRow(num2).GetHeight(num2); i <= height; i += this.Rows.SharedRow(num2).GetHeight(num2))
				{
					num2 = this.Rows.GetNextRow(num2, DataGridViewElementStates.Visible);
					if (num2 == -1)
					{
						throw new InvalidOperationException();
					}
				}
			}
			else
			{
				num2 = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
				int i = -this.Rows.SharedRow(num2).GetHeight(num2);
				while (i >= height)
				{
					int previousRow = this.Rows.GetPreviousRow(num2, DataGridViewElementStates.Visible, DataGridViewElementStates.Frozen);
					if (previousRow == -1)
					{
						break;
					}
					i -= this.Rows.SharedRow(previousRow).GetHeight(previousRow);
					if (i >= height)
					{
						num2 = previousRow;
					}
				}
			}
			this.displayedBandsInfo.FirstDisplayedScrollingRow = num2;
			this.ComputeVisibleRows();
			ScrollEventType scrollEventType = ScrollEventType.EndScroll;
			int num3 = 0;
			if (this.displayedBandsInfo.FirstDisplayedScrollingRow > firstDisplayedScrollingRow)
			{
				num = this.Rows.GetRowsHeight(DataGridViewElementStates.Visible, firstDisplayedScrollingRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
				num3 = this.Rows.GetRowCount(DataGridViewElementStates.Visible, firstDisplayedScrollingRow, this.displayedBandsInfo.FirstDisplayedScrollingRow);
				scrollEventType = ((num3 > 1) ? ScrollEventType.LargeIncrement : ScrollEventType.SmallIncrement);
			}
			else if (this.displayedBandsInfo.FirstDisplayedScrollingRow < firstDisplayedScrollingRow)
			{
				num = -this.Rows.GetRowsHeight(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, firstDisplayedScrollingRow);
				num3 = -this.Rows.GetRowCount(DataGridViewElementStates.Visible, this.displayedBandsInfo.FirstDisplayedScrollingRow, firstDisplayedScrollingRow);
				scrollEventType = ((num3 < -1) ? ScrollEventType.LargeDecrement : ScrollEventType.SmallDecrement);
			}
			if (num != 0)
			{
				this.ScrollRows(num3, -num, scrollEventType);
			}
			this.FlushDisplayedChanged();
		}

		// Token: 0x06003060 RID: 12384 RVA: 0x000A196C File Offset: 0x000A096C
		public void SelectAll()
		{
			if (!this.MultiSelect)
			{
				return;
			}
			this.inBulkPaintCount++;
			this.noDimensionChangeCount++;
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				{
					int count = this.Columns.Count;
					int i = 0;
					int count2 = this.Rows.Count;
					while (i < count2)
					{
						DataGridViewRow dataGridViewRow = this.Rows[i];
						for (int j = 0; j < count; j++)
						{
							this.SetSelectedCellCore(j, i, true);
						}
						i++;
					}
					break;
				}
				case DataGridViewSelectionMode.FullRowSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
				{
					int k = 0;
					int count3 = this.Rows.Count;
					while (k < count3)
					{
						DataGridViewElementStates rowState = this.Rows.GetRowState(k);
						if ((rowState & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(k, true);
						}
						k++;
					}
					break;
				}
				case DataGridViewSelectionMode.FullColumnSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
				{
					int l = 0;
					int count4 = this.Columns.Count;
					while (l < count4)
					{
						if (!this.Columns[l].Selected)
						{
							this.SetSelectedColumnCore(l, true);
						}
						l++;
					}
					break;
				}
				}
			}
			finally
			{
				this.noDimensionChangeCount--;
				this.noSelectionChangeCount--;
				this.ExitBulkPaint(-1, -1);
			}
			DataGridViewColumn firstColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (firstColumn != null && firstRow != -1)
			{
				this.ptAnchorCell.X = firstColumn.Index;
				this.ptAnchorCell.Y = firstRow;
			}
			else
			{
				this.ptAnchorCell.X = -1;
				this.ptAnchorCell.Y = -1;
			}
			if (this.noSelectionChangeCount == 0)
			{
				this.FlushSelectionChanged();
			}
		}

		// Token: 0x06003061 RID: 12385 RVA: 0x000A1B3C File Offset: 0x000A0B3C
		private DataGridViewCell SelectedCell(int index)
		{
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
				if (index < this.individualSelectedCells.Count)
				{
					return this.individualSelectedCells[index];
				}
				break;
			case DataGridViewSelectionMode.FullRowSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
			{
				int num = 0;
				int count = this.selectedBandIndexes.Count;
				while (num < count && index >= 0)
				{
					if (index < this.Columns.Count)
					{
						int num2 = this.selectedBandIndexes[num];
						return this.Rows.SharedRow(num2).Cells[index];
					}
					index -= this.Columns.Count;
					num++;
				}
				if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect && index < this.individualSelectedCells.Count)
				{
					return this.individualSelectedCells[index];
				}
				break;
			}
			case DataGridViewSelectionMode.FullColumnSelect:
			case DataGridViewSelectionMode.ColumnHeaderSelect:
			{
				int num3 = 0;
				int count2 = this.selectedBandIndexes.Count;
				while (num3 < count2 && index >= 0)
				{
					if (index < this.Rows.Count)
					{
						int num4 = this.selectedBandIndexes[num3];
						return this.Rows.SharedRow(index).Cells[num4];
					}
					index -= this.Rows.Count;
					num3++;
				}
				if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect && index < this.individualSelectedCells.Count)
				{
					return this.individualSelectedCells[index];
				}
				break;
			}
			}
			return null;
		}

		// Token: 0x06003062 RID: 12386 RVA: 0x000A1CA4 File Offset: 0x000A0CA4
		private void SetColumnHeadersHeightInternal(int columnHeadersHeight, bool invalidInAdjustFillingColumns)
		{
			using (LayoutTransaction.CreateTransactionIf(this.AutoSize, this.ParentInternal, this, PropertyNames.ColumnHeadersHeight))
			{
				this.columnHeadersHeight = columnHeadersHeight;
				if (this.AutoSize)
				{
					this.InvalidateInside();
				}
				else if (this.layout.ColumnHeadersVisible)
				{
					this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, true);
					this.InvalidateInside();
				}
				this.OnColumnHeadersHeightChanged(EventArgs.Empty);
			}
		}

		// Token: 0x06003063 RID: 12387 RVA: 0x000A1D24 File Offset: 0x000A0D24
		protected virtual bool SetCurrentCellAddressCore(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick)
		{
			if (columnIndex < -1 || (columnIndex >= 0 && rowIndex == -1) || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (rowIndex < -1 || (columnIndex == -1 && rowIndex >= 0) || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if (columnIndex > -1 && rowIndex > -1 && !this.IsSharedCellVisible(this.Rows.SharedRow(rowIndex).Cells[columnIndex], rowIndex))
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CurrentCellCannotBeInvisible"));
			}
			if (this.dataGridViewOper[131072] && (this.dataConnection == null || !this.dataConnection.ProcessingListChangedEvent))
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_SetCurrentCellAddressCoreNotReentrant"));
			}
			this.dataGridViewOper[131072] = true;
			try
			{
				DataGridViewCell dataGridViewCell = null;
				if (columnIndex > -1)
				{
					if (this.ptCurrentCell.X != columnIndex || this.ptCurrentCell.Y != rowIndex)
					{
						if (this.dataGridViewState1[4194304])
						{
							this.dataGridViewState1[4194304] = false;
							this.ptCurrentCell.X = columnIndex;
							this.ptCurrentCell.Y = rowIndex;
							if (this.cachedEditingControl != null)
							{
								this.editingControl = this.cachedEditingControl;
								((IDataGridViewEditingControl)this.editingControl).EditingControlRowIndex = rowIndex;
								this.cachedEditingControl = null;
								this.PositionEditingControl(true, true, false);
							}
							this.OnCurrentCellChanged(EventArgs.Empty);
							return true;
						}
						int x = this.ptCurrentCell.X;
						int y = this.ptCurrentCell.Y;
						if (x >= 0)
						{
							DataGridViewCell dataGridViewCell2 = this.CurrentCellInternal;
							if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.CurrentCellChange, validateCurrentCell ? DataGridView.DataGridViewValidateCellInternal.Always : DataGridView.DataGridViewValidateCellInternal.Never, validateCurrentCell, false, validateCurrentCell && y != rowIndex, false, false, this.EditMode != DataGridViewEditMode.EditOnEnter, false, false))
							{
								return false;
							}
							if (!this.IsInnerCellOutOfBounds(x, y))
							{
								dataGridViewCell2 = this.Rows.SharedRow(y).Cells[x];
								if (dataGridViewCell2.LeaveUnsharesRowInternal(y, throughMouseClick))
								{
									dataGridViewCell2 = this.Rows[y].Cells[x];
								}
								dataGridViewCell2.OnLeaveInternal(y, throughMouseClick);
							}
							if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
							{
								return false;
							}
							if (y != rowIndex && validateCurrentCell)
							{
								if (this.OnRowValidating(ref dataGridViewCell, x, y))
								{
									if (!this.IsInnerCellOutOfBounds(x, y))
									{
										this.OnRowEnter(ref dataGridViewCell, x, y, true, true);
										if (!this.IsInnerCellOutOfBounds(x, y))
										{
											dataGridViewCell2.OnEnterInternal(y, throughMouseClick);
											this.OnCellEnter(ref dataGridViewCell, x, y);
										}
									}
									return false;
								}
								if (!this.IsInnerCellOutOfBounds(x, y))
								{
									this.OnRowValidated(ref dataGridViewCell, x, y);
								}
							}
						}
						this.dataGridViewState2[4194304] = false;
						try
						{
							if (y != rowIndex && !this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
							{
								this.OnRowEnter(ref dataGridViewCell, columnIndex, rowIndex, true, false);
							}
							if (this.dataGridViewState2[4194304] && rowIndex >= this.Rows.Count)
							{
								return false;
							}
							if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
							{
								return false;
							}
							this.ptCurrentCell.X = columnIndex;
							this.ptCurrentCell.Y = rowIndex;
							if (this.editingControl != null)
							{
								((IDataGridViewEditingControl)this.editingControl).EditingControlRowIndex = rowIndex;
							}
							this.OnCurrentCellChanged(EventArgs.Empty);
							if (setAnchorCellAddress)
							{
								this.ptAnchorCell.X = columnIndex;
								this.ptAnchorCell.Y = rowIndex;
							}
							DataGridViewCell dataGridViewCell2 = this.CurrentCellInternal;
							if (dataGridViewCell2.EnterUnsharesRowInternal(rowIndex, throughMouseClick))
							{
								dataGridViewCell2 = this.Rows[rowIndex].Cells[columnIndex];
							}
							dataGridViewCell2.OnEnterInternal(rowIndex, throughMouseClick);
							this.OnCellEnter(ref dataGridViewCell, this.ptCurrentCell.X, this.ptCurrentCell.Y);
							if (x >= 0)
							{
								if (x < this.Columns.Count && y < this.Rows.Count)
								{
									this.InvalidateCellPrivate(x, y);
								}
								if (y != this.ptCurrentCell.Y && this.RowHeadersVisible && y < this.Rows.Count)
								{
									this.InvalidateCellPrivate(-1, y);
								}
							}
							this.InvalidateCellPrivate(this.ptCurrentCell.X, this.ptCurrentCell.Y);
							if (this.RowHeadersVisible && y != this.ptCurrentCell.Y)
							{
								this.InvalidateCellPrivate(-1, this.ptCurrentCell.Y);
							}
							if (this.Focused && this.ptCurrentCell.X != -1 && !this.IsCurrentCellInEditMode && !this.dataGridViewState2[4194304] && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && dataGridViewCell2.EditType == null)))
							{
								this.BeginEditInternal(true);
							}
						}
						finally
						{
							this.dataGridViewState2[4194304] = false;
						}
						if (this.ptCurrentCell.X != -1)
						{
							this.AccessibilityNotifyCurrentCellChanged(new Point(this.ptCurrentCell.X, this.ptCurrentCell.Y));
						}
					}
					else
					{
						if (setAnchorCellAddress)
						{
							this.ptAnchorCell.X = columnIndex;
							this.ptAnchorCell.Y = rowIndex;
						}
						if (this.Focused && !this.IsCurrentCellInEditMode && (this.EditMode == DataGridViewEditMode.EditOnEnter || (this.EditMode != DataGridViewEditMode.EditProgrammatically && this.CurrentCellInternal.EditType == null)))
						{
							this.BeginEditInternal(true);
						}
						else
						{
							this.CorrectFocus(false);
						}
					}
				}
				else
				{
					int x2 = this.ptCurrentCell.X;
					int y2 = this.ptCurrentCell.Y;
					if (x2 >= 0 && !this.dataGridViewState1[4194304] && !this.dataGridViewOper[1048576])
					{
						DataGridViewCell dataGridViewCell3 = this.CurrentCellInternal;
						if (!this.EndEdit(DataGridViewDataErrorContexts.Parsing | DataGridViewDataErrorContexts.Commit | DataGridViewDataErrorContexts.CurrentCellChange, validateCurrentCell ? DataGridView.DataGridViewValidateCellInternal.Always : DataGridView.DataGridViewValidateCellInternal.Never, validateCurrentCell, false, validateCurrentCell, false, false, this.EditMode != DataGridViewEditMode.EditOnEnter, false, false))
						{
							return false;
						}
						if (!this.IsInnerCellOutOfBounds(x2, y2))
						{
							dataGridViewCell3 = this.Rows.SharedRow(y2).Cells[x2];
							if (dataGridViewCell3.LeaveUnsharesRowInternal(y2, throughMouseClick))
							{
								dataGridViewCell3 = this.Rows[y2].Cells[x2];
							}
							dataGridViewCell3.OnLeaveInternal(y2, throughMouseClick);
						}
						if (validateCurrentCell)
						{
							if (this.OnRowValidating(ref dataGridViewCell, x2, y2))
							{
								if (!this.IsInnerCellOutOfBounds(x2, y2))
								{
									this.OnRowEnter(ref dataGridViewCell, x2, y2, true, true);
									if (!this.IsInnerCellOutOfBounds(x2, y2))
									{
										dataGridViewCell3.OnEnterInternal(y2, throughMouseClick);
										this.OnCellEnter(ref dataGridViewCell, x2, y2);
									}
								}
								return false;
							}
							if (!this.IsInnerCellOutOfBounds(x2, y2))
							{
								this.OnRowValidated(ref dataGridViewCell, x2, y2);
							}
						}
					}
					if (this.ptCurrentCell.X != -1)
					{
						this.ptCurrentCell.X = -1;
						this.ptCurrentCell.Y = -1;
						this.OnCurrentCellChanged(EventArgs.Empty);
					}
					if (setAnchorCellAddress)
					{
						this.ptAnchorCell.X = -1;
						this.ptAnchorCell.Y = -1;
					}
					if (this.dataGridViewState1[4194304])
					{
						if (this.editingControl != null)
						{
							if (this.dataGridViewState2[536870912])
							{
								this.dataGridViewState2[536870912] = false;
							}
							else
							{
								this.cachedEditingControl = this.editingControl;
							}
							this.editingControl = null;
						}
					}
					else if (x2 >= 0 && !this.dataGridViewOper[1048576])
					{
						if (x2 < this.Columns.Count && y2 < this.Rows.Count)
						{
							this.InvalidateCellPrivate(x2, y2);
						}
						if (this.RowHeadersVisible && y2 < this.Rows.Count)
						{
							this.InvalidateCellPrivate(-1, y2);
						}
					}
				}
			}
			finally
			{
				this.dataGridViewOper[131072] = false;
			}
			return true;
		}

		// Token: 0x06003064 RID: 12388 RVA: 0x000A2510 File Offset: 0x000A1510
		internal void SetCurrentCellAddressCoreInternal(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick)
		{
			this.SetCurrentCellAddressCore(columnIndex, rowIndex, setAnchorCellAddress, validateCurrentCell, throughMouseClick);
		}

		// Token: 0x06003065 RID: 12389 RVA: 0x000A2520 File Offset: 0x000A1520
		private void SelectCellRange(int columnIndexFrom, int rowIndexFrom, int columnIndexTo, int rowIndexTo, bool select)
		{
			bool flag = false;
			if (rowIndexTo - rowIndexFrom > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				if (select)
				{
					int num = columnIndexFrom;
					do
					{
						for (int i = rowIndexFrom; i <= rowIndexTo; i++)
						{
							this.SetSelectedCellCore(num, i, true);
						}
						if (num != columnIndexTo)
						{
							DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[num], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							num = nextColumn.Index;
						}
					}
					while (num != columnIndexTo);
					if (columnIndexFrom != columnIndexTo)
					{
						for (int j = rowIndexFrom; j <= rowIndexTo; j++)
						{
							this.SetSelectedCellCore(num, j, true);
						}
					}
				}
				else
				{
					int num2 = columnIndexTo;
					do
					{
						for (int k = rowIndexTo; k >= rowIndexFrom; k--)
						{
							this.SetSelectedCellCore(num2, k, false);
						}
						if (num2 != columnIndexFrom)
						{
							DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[num2], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							num2 = previousColumn.Index;
						}
					}
					while (num2 != columnIndexFrom);
					if (columnIndexFrom != columnIndexTo)
					{
						for (int l = rowIndexTo; l >= rowIndexFrom; l--)
						{
							this.SetSelectedCellCore(num2, l, false);
						}
					}
				}
			}
			finally
			{
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x06003066 RID: 12390 RVA: 0x000A2640 File Offset: 0x000A1640
		private void SelectCellUnorderedRange(int columnIndexFrom, int rowIndexFrom, int columnIndexTo, int rowIndexTo, bool select)
		{
			int num;
			int num2;
			if (this.Columns.DisplayInOrder(columnIndexFrom, columnIndexTo))
			{
				num = columnIndexFrom;
				num2 = columnIndexTo;
			}
			else
			{
				num = columnIndexTo;
				num2 = columnIndexFrom;
			}
			int num3;
			int num4;
			if (rowIndexFrom < rowIndexTo)
			{
				num3 = rowIndexFrom;
				num4 = rowIndexTo;
			}
			else
			{
				num3 = rowIndexTo;
				num4 = rowIndexFrom;
			}
			this.SelectCellRange(num, num3, num2, num4, select);
		}

		// Token: 0x06003067 RID: 12391 RVA: 0x000A2684 File Offset: 0x000A1684
		private void SelectColumnRange(int columnIndexFrom, int columnIndexTo, bool select)
		{
			int num = columnIndexFrom;
			do
			{
				if (select)
				{
					if (!this.selectedBandIndexes.Contains(num))
					{
						this.SetSelectedColumnCore(num, true);
					}
				}
				else
				{
					this.SetSelectedColumnCore(num, false);
				}
				if (num != columnIndexTo)
				{
					DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[num], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					num = nextColumn.Index;
				}
			}
			while (num != columnIndexTo);
			if (columnIndexFrom != columnIndexTo)
			{
				if (select)
				{
					if (!this.selectedBandIndexes.Contains(columnIndexTo))
					{
						this.SetSelectedColumnCore(columnIndexTo, true);
						return;
					}
				}
				else
				{
					this.SetSelectedColumnCore(columnIndexTo, false);
				}
			}
		}

		// Token: 0x06003068 RID: 12392 RVA: 0x000A2708 File Offset: 0x000A1708
		private void SelectRowRange(int rowIndexFrom, int rowIndexTo, bool select)
		{
			bool flag = false;
			if (rowIndexTo - rowIndexFrom > 8)
			{
				this.inBulkPaintCount++;
				flag = true;
			}
			try
			{
				if (select)
				{
					for (int i = rowIndexFrom; i <= rowIndexTo; i++)
					{
						if ((this.Rows.GetRowState(i) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(i, true);
						}
					}
				}
				else
				{
					for (int j = rowIndexTo; j >= rowIndexFrom; j--)
					{
						this.SetSelectedRowCore(j, false);
					}
				}
			}
			finally
			{
				if (flag)
				{
					this.ExitBulkPaint(-1, -1);
				}
			}
		}

		// Token: 0x06003069 RID: 12393 RVA: 0x000A278C File Offset: 0x000A178C
		private bool SetAndSelectCurrentCellAddress(int columnIndex, int rowIndex, bool setAnchorCellAddress, bool validateCurrentCell, bool throughMouseClick, bool clearSelection, bool forceCurrentCellSelection)
		{
			if (!this.SetCurrentCellAddressCore(columnIndex, rowIndex, setAnchorCellAddress, validateCurrentCell, throughMouseClick))
			{
				return false;
			}
			if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
			{
				return false;
			}
			if (clearSelection)
			{
				this.ClearSelection(columnIndex, rowIndex, true);
			}
			else if (forceCurrentCellSelection)
			{
				this.SetSelectedElementCore(columnIndex, rowIndex, true);
			}
			else
			{
				if (this.MultiSelect && this.individualSelectedCells.Count + this.selectedBandIndexes.Count > 1)
				{
					return true;
				}
				if (this.individualSelectedCells.Count == 1)
				{
					DataGridViewCell headCell = this.individualSelectedCells.HeadCell;
					if (headCell.ColumnIndex != columnIndex || headCell.RowIndex != rowIndex)
					{
						return true;
					}
				}
				else if (this.selectedBandIndexes.Count == 1)
				{
					switch (this.SelectionMode)
					{
					case DataGridViewSelectionMode.FullRowSelect:
					case DataGridViewSelectionMode.RowHeaderSelect:
						if (this.selectedBandIndexes.HeadInt != rowIndex)
						{
							return true;
						}
						break;
					case DataGridViewSelectionMode.FullColumnSelect:
					case DataGridViewSelectionMode.ColumnHeaderSelect:
						if (this.selectedBandIndexes.HeadInt != columnIndex)
						{
							return true;
						}
						break;
					}
				}
				this.SetSelectedElementCore(columnIndex, rowIndex, true);
			}
			return true;
		}

		// Token: 0x0600306A RID: 12394 RVA: 0x000A2888 File Offset: 0x000A1888
		protected override void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
		{
			if ((specified & BoundsSpecified.Width) == BoundsSpecified.Width && width > 8388607)
			{
				throw new ArgumentOutOfRangeException("width", width, SR.GetString("DataGridView_SizeTooLarge", new object[] { 8388607.ToString(CultureInfo.CurrentCulture) }));
			}
			if ((specified & BoundsSpecified.Height) == BoundsSpecified.Height && height > 8388607)
			{
				throw new ArgumentOutOfRangeException("height", height, SR.GetString("DataGridView_SizeTooLarge", new object[] { 8388607.ToString(CultureInfo.CurrentCulture) }));
			}
			base.SetBoundsCore(x, y, width, height, specified);
		}

		// Token: 0x0600306B RID: 12395 RVA: 0x000A2934 File Offset: 0x000A1934
		internal void SetReadOnlyCellCore(int columnIndex, int rowIndex, bool readOnly)
		{
			DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if (this.IsSharedCellReadOnly(dataGridViewRow.Cells[columnIndex], rowIndex) != readOnly)
			{
				DataGridViewCell dataGridViewCell = this.Rows[rowIndex].Cells[columnIndex];
				if (readOnly)
				{
					if ((rowState & DataGridViewElementStates.ReadOnly) == DataGridViewElementStates.None && !this.Columns[columnIndex].ReadOnly)
					{
						this.individualReadOnlyCells.Add(dataGridViewCell);
						dataGridViewCell.ReadOnlyInternal = true;
						return;
					}
				}
				else
				{
					if (this.individualReadOnlyCells.Contains(dataGridViewCell))
					{
						this.individualReadOnlyCells.Remove(dataGridViewCell);
					}
					else
					{
						if (this.Columns[columnIndex].ReadOnly)
						{
							this.Columns[columnIndex].ReadOnlyInternal = false;
							for (int i = 0; i < rowIndex; i++)
							{
								DataGridViewCell dataGridViewCell2 = this.Rows[i].Cells[columnIndex];
								dataGridViewCell2.ReadOnlyInternal = true;
								this.individualReadOnlyCells.Add(dataGridViewCell2);
							}
							for (int j = rowIndex + 1; j < this.Rows.Count; j++)
							{
								DataGridViewCell dataGridViewCell2 = this.Rows[j].Cells[columnIndex];
								dataGridViewCell2.ReadOnlyInternal = true;
								this.individualReadOnlyCells.Add(dataGridViewCell2);
							}
						}
						if ((rowState & DataGridViewElementStates.ReadOnly) != DataGridViewElementStates.None)
						{
							this.Rows.SetRowState(rowIndex, DataGridViewElementStates.ReadOnly, false);
							for (int k = 0; k < columnIndex; k++)
							{
								DataGridViewCell dataGridViewCell2 = this.Rows[rowIndex].Cells[k];
								dataGridViewCell2.ReadOnlyInternal = true;
								this.individualReadOnlyCells.Add(dataGridViewCell2);
							}
							for (int l = columnIndex + 1; l < this.Columns.Count; l++)
							{
								DataGridViewCell dataGridViewCell2 = this.Rows[rowIndex].Cells[l];
								dataGridViewCell2.ReadOnlyInternal = true;
								this.individualReadOnlyCells.Add(dataGridViewCell2);
							}
						}
					}
					if (dataGridViewCell.ReadOnly)
					{
						dataGridViewCell.ReadOnlyInternal = false;
					}
				}
			}
		}

		// Token: 0x0600306C RID: 12396 RVA: 0x000A2B38 File Offset: 0x000A1B38
		internal void SetReadOnlyColumnCore(int columnIndex, bool readOnly)
		{
			if (this.Columns[columnIndex].ReadOnly == readOnly)
			{
				if (!readOnly)
				{
					this.RemoveIndividualReadOnlyCellsInColumn(columnIndex);
				}
				return;
			}
			if (readOnly)
			{
				try
				{
					this.dataGridViewOper[16384] = true;
					this.RemoveIndividualReadOnlyCellsInColumn(columnIndex);
				}
				finally
				{
					this.dataGridViewOper[16384] = false;
				}
				this.Columns[columnIndex].ReadOnlyInternal = true;
				return;
			}
			this.Columns[columnIndex].ReadOnlyInternal = false;
		}

		// Token: 0x0600306D RID: 12397 RVA: 0x000A2BC8 File Offset: 0x000A1BC8
		internal void SetReadOnlyRowCore(int rowIndex, bool readOnly)
		{
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if ((rowState & DataGridViewElementStates.ReadOnly) != DataGridViewElementStates.None == readOnly)
			{
				if (!readOnly)
				{
					this.RemoveIndividualReadOnlyCellsInRow(rowIndex);
				}
				return;
			}
			if (readOnly)
			{
				try
				{
					this.dataGridViewOper[16384] = true;
					this.RemoveIndividualReadOnlyCellsInRow(rowIndex);
				}
				finally
				{
					this.dataGridViewOper[16384] = false;
				}
				this.Rows.SetRowState(rowIndex, DataGridViewElementStates.ReadOnly, true);
				return;
			}
			this.Rows.SetRowState(rowIndex, DataGridViewElementStates.ReadOnly, false);
		}

		// Token: 0x0600306E RID: 12398 RVA: 0x000A2C58 File Offset: 0x000A1C58
		protected virtual void SetSelectedCellCore(int columnIndex, int rowIndex, bool selected)
		{
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			DataGridViewRow dataGridViewRow = this.Rows.SharedRow(rowIndex);
			DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
			if (this.IsSharedCellSelected(dataGridViewRow.Cells[columnIndex], rowIndex) != selected)
			{
				DataGridViewCell dataGridViewCell = this.Rows[rowIndex].Cells[columnIndex];
				if (selected)
				{
					if ((rowState & DataGridViewElementStates.Selected) == DataGridViewElementStates.None && !this.Columns[columnIndex].Selected)
					{
						this.individualSelectedCells.Add(dataGridViewCell);
						dataGridViewCell.SelectedInternal = true;
						return;
					}
				}
				else
				{
					if ((dataGridViewCell.State & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
					{
						this.individualSelectedCells.Remove(dataGridViewCell);
					}
					else
					{
						bool flag = false;
						if (this.SelectionMode == DataGridViewSelectionMode.ColumnHeaderSelect)
						{
							if (this.Rows.Count > 8)
							{
								this.inBulkPaintCount++;
								flag = true;
							}
							try
							{
								this.selectedBandIndexes.Remove(columnIndex);
								this.Columns[columnIndex].SelectedInternal = false;
								for (int i = 0; i < rowIndex; i++)
								{
									DataGridViewCell dataGridViewCell2 = this.Rows[i].Cells[columnIndex];
									dataGridViewCell2.SelectedInternal = true;
									this.individualSelectedCells.Add(dataGridViewCell2);
								}
								for (int j = rowIndex + 1; j < this.Rows.Count; j++)
								{
									DataGridViewCell dataGridViewCell2 = this.Rows[j].Cells[columnIndex];
									dataGridViewCell2.SelectedInternal = true;
									this.individualSelectedCells.Add(dataGridViewCell2);
								}
								goto IL_0295;
							}
							finally
							{
								if (flag)
								{
									this.ExitBulkPaint(columnIndex, -1);
								}
							}
						}
						if (this.SelectionMode == DataGridViewSelectionMode.RowHeaderSelect)
						{
							if (this.Columns.Count > 8)
							{
								this.inBulkPaintCount++;
								flag = true;
							}
							try
							{
								this.selectedBandIndexes.Remove(rowIndex);
								this.Rows.SetRowState(rowIndex, DataGridViewElementStates.Selected, false);
								for (int k = 0; k < columnIndex; k++)
								{
									DataGridViewCell dataGridViewCell2 = this.Rows[rowIndex].Cells[k];
									dataGridViewCell2.SelectedInternal = true;
									this.individualSelectedCells.Add(dataGridViewCell2);
								}
								for (int l = columnIndex + 1; l < this.Columns.Count; l++)
								{
									DataGridViewCell dataGridViewCell2 = this.Rows[rowIndex].Cells[l];
									dataGridViewCell2.SelectedInternal = true;
									this.individualSelectedCells.Add(dataGridViewCell2);
								}
							}
							finally
							{
								if (flag)
								{
									this.ExitBulkPaint(-1, rowIndex);
								}
							}
						}
					}
					IL_0295:
					if (dataGridViewCell.Selected)
					{
						dataGridViewCell.SelectedInternal = false;
					}
				}
			}
		}

		// Token: 0x0600306F RID: 12399 RVA: 0x000A2F28 File Offset: 0x000A1F28
		internal void SetSelectedCellCoreInternal(int columnIndex, int rowIndex, bool selected)
		{
			if (selected && !this.MultiSelect)
			{
				if (!this.Columns[columnIndex].Visible || (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
				{
					throw new InvalidOperationException(SR.GetString("DataGridView_CurrentCellCannotBeInvisible"));
				}
				if (!this.ScrollIntoView(columnIndex, rowIndex, true))
				{
					return;
				}
				if (this.IsInnerCellOutOfBounds(columnIndex, rowIndex))
				{
					return;
				}
			}
			this.noSelectionChangeCount++;
			try
			{
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
					if (selected && !this.MultiSelect)
					{
						this.RemoveIndividuallySelectedCells();
					}
					this.SetSelectedCellCore(columnIndex, rowIndex, selected);
					break;
				case DataGridViewSelectionMode.FullRowSelect:
					if (selected)
					{
						if (!this.MultiSelect)
						{
							int i = 0;
							while (i < this.selectedBandIndexes.Count)
							{
								if (this.selectedBandIndexes[i] != rowIndex)
								{
									this.SetSelectedRowCore(this.selectedBandIndexes[i], false);
								}
								else
								{
									i++;
								}
							}
						}
						if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Selected) == DataGridViewElementStates.None)
						{
							this.SetSelectedRowCore(rowIndex, true);
						}
					}
					else if ((this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Selected) != DataGridViewElementStates.None)
					{
						this.SetSelectedRowCore(rowIndex, false);
					}
					break;
				case DataGridViewSelectionMode.FullColumnSelect:
					if (selected)
					{
						if (!this.MultiSelect)
						{
							int j = 0;
							while (j < this.selectedBandIndexes.Count)
							{
								if (this.selectedBandIndexes[j] != columnIndex)
								{
									this.SetSelectedColumnCore(this.selectedBandIndexes[j], false);
								}
								else
								{
									j++;
								}
							}
						}
						if (!this.selectedBandIndexes.Contains(columnIndex))
						{
							this.SetSelectedColumnCore(columnIndex, true);
						}
					}
					else if (this.selectedBandIndexes.Contains(columnIndex))
					{
						this.SetSelectedColumnCore(columnIndex, false);
					}
					break;
				case DataGridViewSelectionMode.RowHeaderSelect:
					if (selected)
					{
						if (!this.MultiSelect)
						{
							if (this.selectedBandIndexes.Count > 0)
							{
								this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
							}
							else
							{
								this.RemoveIndividuallySelectedCells();
							}
						}
						this.SetSelectedCellCore(columnIndex, rowIndex, true);
					}
					else if (!this.MultiSelect)
					{
						if (this.selectedBandIndexes.Count > 0)
						{
							this.SetSelectedRowCore(this.selectedBandIndexes.HeadInt, false);
						}
						else
						{
							this.SetSelectedCellCore(columnIndex, rowIndex, false);
						}
					}
					else
					{
						this.SetSelectedCellCore(columnIndex, rowIndex, false);
					}
					break;
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if (selected)
					{
						if (!this.MultiSelect)
						{
							if (this.selectedBandIndexes.Count > 0)
							{
								this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
							}
							else
							{
								this.RemoveIndividuallySelectedCells();
							}
						}
						this.SetSelectedCellCore(columnIndex, rowIndex, true);
					}
					else if (!this.MultiSelect)
					{
						if (this.selectedBandIndexes.Count > 0)
						{
							this.SetSelectedColumnCore(this.selectedBandIndexes.HeadInt, false);
						}
						else
						{
							this.SetSelectedCellCore(columnIndex, rowIndex, false);
						}
					}
					else
					{
						this.SetSelectedCellCore(columnIndex, rowIndex, false);
					}
					break;
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
			if (selected && !this.MultiSelect)
			{
				this.SetCurrentCellAddressCore(columnIndex, rowIndex, true, false, true);
			}
		}

		// Token: 0x06003070 RID: 12400 RVA: 0x000A3230 File Offset: 0x000A2230
		protected virtual void SetSelectedColumnCore(int columnIndex, bool selected)
		{
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			this.noSelectionChangeCount++;
			try
			{
				if (this.Columns[columnIndex].Selected != selected)
				{
					if (selected)
					{
						this.RemoveIndividuallySelectedCellsInColumn(columnIndex);
						this.Columns[columnIndex].SelectedInternal = true;
						this.selectedBandIndexes.Add(columnIndex);
					}
					else
					{
						this.Columns[columnIndex].SelectedInternal = false;
						this.selectedBandIndexes.Remove(columnIndex);
					}
				}
				else if (!selected)
				{
					this.RemoveIndividuallySelectedCellsInColumn(columnIndex);
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
		}

		// Token: 0x06003071 RID: 12401 RVA: 0x000A32F4 File Offset: 0x000A22F4
		internal void SetSelectedColumnCoreInternal(int columnIndex, bool selected)
		{
			this.noSelectionChangeCount++;
			try
			{
				if (!this.MultiSelect && this.selectedBandIndexes.Count > 0)
				{
					int headInt = this.selectedBandIndexes.HeadInt;
					if (headInt != columnIndex)
					{
						this.SetSelectedColumnCore(headInt, false);
					}
				}
				this.SetSelectedColumnCore(columnIndex, selected);
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
		}

		// Token: 0x06003072 RID: 12402 RVA: 0x000A3368 File Offset: 0x000A2368
		private void SetSelectedElementCore(int columnIndex, int rowIndex, bool selected)
		{
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.CellSelect:
				this.SetSelectedCellCore(columnIndex, rowIndex, selected);
				return;
			case DataGridViewSelectionMode.FullRowSelect:
				this.SetSelectedRowCore(rowIndex, selected);
				return;
			case DataGridViewSelectionMode.FullColumnSelect:
				this.SetSelectedColumnCore(columnIndex, selected);
				return;
			case DataGridViewSelectionMode.RowHeaderSelect:
				if (columnIndex == -1)
				{
					this.SetSelectedRowCore(rowIndex, selected);
					return;
				}
				this.SetSelectedCellCore(columnIndex, rowIndex, selected);
				return;
			case DataGridViewSelectionMode.ColumnHeaderSelect:
				if (rowIndex == -1)
				{
					this.SetSelectedColumnCore(columnIndex, selected);
					return;
				}
				this.SetSelectedCellCore(columnIndex, rowIndex, selected);
				return;
			default:
				return;
			}
		}

		// Token: 0x06003073 RID: 12403 RVA: 0x000A33E0 File Offset: 0x000A23E0
		protected virtual void SetSelectedRowCore(int rowIndex, bool selected)
		{
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			this.noSelectionChangeCount++;
			try
			{
				DataGridViewElementStates rowState = this.Rows.GetRowState(rowIndex);
				if ((rowState & DataGridViewElementStates.Selected) != DataGridViewElementStates.None != selected)
				{
					if (selected)
					{
						this.RemoveIndividuallySelectedCellsInRow(rowIndex);
						this.selectedBandIndexes.Add(rowIndex);
						this.Rows.SetRowState(rowIndex, DataGridViewElementStates.Selected, true);
					}
					else
					{
						this.selectedBandIndexes.Remove(rowIndex);
						this.Rows.SetRowState(rowIndex, DataGridViewElementStates.Selected, false);
					}
				}
				else if (!selected)
				{
					this.RemoveIndividuallySelectedCellsInRow(rowIndex);
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
		}

		// Token: 0x06003074 RID: 12404 RVA: 0x000A34A4 File Offset: 0x000A24A4
		internal void SetSelectedRowCoreInternal(int rowIndex, bool selected)
		{
			this.noSelectionChangeCount++;
			try
			{
				if (!this.MultiSelect && this.selectedBandIndexes.Count > 0)
				{
					int headInt = this.selectedBandIndexes.HeadInt;
					if (headInt != rowIndex)
					{
						this.SetSelectedRowCore(headInt, false);
					}
				}
				this.SetSelectedRowCore(rowIndex, selected);
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
		}

		// Token: 0x06003075 RID: 12405 RVA: 0x000A3518 File Offset: 0x000A2518
		private bool ShouldSerializeAlternatingRowsDefaultCellStyle()
		{
			DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
			return !this.AlternatingRowsDefaultCellStyle.Equals(dataGridViewCellStyle);
		}

		// Token: 0x06003076 RID: 12406 RVA: 0x000A353A File Offset: 0x000A253A
		private bool ShouldSerializeColumnHeadersDefaultCellStyle()
		{
			return !this.ColumnHeadersDefaultCellStyle.Equals(this.DefaultColumnHeadersDefaultCellStyle);
		}

		// Token: 0x06003077 RID: 12407 RVA: 0x000A3550 File Offset: 0x000A2550
		private bool ShouldSerializeDefaultCellStyle()
		{
			return !this.DefaultCellStyle.Equals(this.DefaultDefaultCellStyle);
		}

		// Token: 0x06003078 RID: 12408 RVA: 0x000A3566 File Offset: 0x000A2566
		private bool ShouldSerializeRowHeadersDefaultCellStyle()
		{
			return !this.RowHeadersDefaultCellStyle.Equals(this.DefaultRowHeadersDefaultCellStyle);
		}

		// Token: 0x06003079 RID: 12409 RVA: 0x000A357C File Offset: 0x000A257C
		private bool ShouldSerializeRowsDefaultCellStyle()
		{
			DataGridViewCellStyle dataGridViewCellStyle = new DataGridViewCellStyle();
			return !this.RowsDefaultCellStyle.Equals(dataGridViewCellStyle);
		}

		// Token: 0x0600307A RID: 12410 RVA: 0x000A35A0 File Offset: 0x000A25A0
		public virtual void Sort(DataGridViewColumn dataGridViewColumn, ListSortDirection direction)
		{
			if (dataGridViewColumn == null)
			{
				throw new ArgumentNullException("dataGridViewColumn");
			}
			if (direction != ListSortDirection.Ascending && direction != ListSortDirection.Descending)
			{
				throw new InvalidEnumArgumentException("direction", (int)direction, typeof(ListSortDirection));
			}
			if (dataGridViewColumn.DataGridView != this)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnDoesNotBelongToDataGridView"));
			}
			if (this.VirtualMode && !dataGridViewColumn.IsDataBound)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_OperationDisabledInVirtualMode"));
			}
			this.SortInternal(null, dataGridViewColumn, direction);
		}

		// Token: 0x0600307B RID: 12411 RVA: 0x000A361C File Offset: 0x000A261C
		public virtual void Sort(IComparer comparer)
		{
			if (comparer == null)
			{
				throw new ArgumentNullException("comparer");
			}
			if (this.VirtualMode)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_OperationDisabledInVirtualMode"));
			}
			if (this.DataSource != null)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotUseAComparerToSortDataGridViewWhenDataBound"));
			}
			this.SortInternal(comparer, null, ListSortDirection.Ascending);
		}

		// Token: 0x0600307C RID: 12412 RVA: 0x000A3670 File Offset: 0x000A2670
		private void SortDataBoundDataGridView_PerformCheck(DataGridViewColumn dataGridViewColumn)
		{
			IBindingList bindingList = this.dataConnection.List as IBindingList;
			if (bindingList == null)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_CannotSortDataBoundDataGridViewBoundToNonIBindingList"));
			}
			if (!bindingList.SupportsSorting)
			{
				throw new InvalidOperationException(SR.GetString("DataGridView_IBindingListNeedsToSupportSorting"));
			}
			if (!dataGridViewColumn.IsDataBound)
			{
				throw new ArgumentException(SR.GetString("DataGridView_ColumnNeedsToBeDataBoundWhenSortingDataBoundDataGridView"), "dataGridViewColumn");
			}
		}

		// Token: 0x0600307D RID: 12413 RVA: 0x000A36D8 File Offset: 0x000A26D8
		private void SortInternal(IComparer comparer, DataGridViewColumn dataGridViewColumn, ListSortDirection direction)
		{
			this.ptCurrentCellCache.X = this.ptCurrentCell.X;
			this.ptCurrentCellCache.Y = this.ptCurrentCell.Y;
			this.dataGridViewOper[64] = true;
			try
			{
				if (!this.SetCurrentCellAddressCore(-1, -1, true, true, false))
				{
					return;
				}
				int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
				int i = this.Rows.GetRowCount(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				if (i > 0 && this.DataSource == null)
				{
					int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					this.Rows.SetRowState(firstRow, DataGridViewElementStates.Frozen, false);
				}
				if (this.sortedColumn != null && this.sortedColumn.SortMode == DataGridViewColumnSortMode.Automatic && this.sortedColumn.HasHeaderCell)
				{
					this.sortedColumn.HeaderCell.SortGlyphDirection = SortOrder.None;
				}
				if (comparer == null)
				{
					this.sortedColumn = dataGridViewColumn;
					this.sortOrder = ((direction == ListSortDirection.Ascending) ? SortOrder.Ascending : SortOrder.Descending);
					if (dataGridViewColumn.SortMode == DataGridViewColumnSortMode.Automatic && dataGridViewColumn.HasHeaderCell)
					{
						dataGridViewColumn.HeaderCell.SortGlyphDirection = this.sortOrder;
					}
				}
				else
				{
					this.sortedColumn = null;
					this.sortOrder = SortOrder.None;
				}
				if (this.DataSource == null)
				{
					this.UpdateRowsDisplayedState(false);
					this.Rows.Sort(comparer, direction == ListSortDirection.Ascending);
				}
				else
				{
					this.SortDataBoundDataGridView_PerformCheck(dataGridViewColumn);
					this.dataConnection.Sort(dataGridViewColumn, direction);
				}
				if (this.ptCurrentCellCache.X != -1 && !this.IsInnerCellOutOfBounds(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y))
				{
					this.SetAndSelectCurrentCellAddress(this.ptCurrentCellCache.X, this.ptCurrentCellCache.Y, true, false, false, false, false);
				}
				if (i > 0)
				{
					int num = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
					while (i > 1)
					{
						num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible);
						i--;
					}
					this.Rows.SetRowState(num, DataGridViewElementStates.Frozen, true);
				}
				this.displayedBandsInfo.FirstDisplayedScrollingRow = firstDisplayedScrollingRow;
			}
			finally
			{
				this.dataGridViewOper[64] = false;
			}
			this.OnGlobalAutoSize();
			if (this.DataSource == null)
			{
				this.displayedBandsInfo.EnsureDirtyState();
			}
			this.ResetUIState(false, false);
			this.OnSorted(EventArgs.Empty);
		}

		// Token: 0x0600307E RID: 12414 RVA: 0x000A3914 File Offset: 0x000A2914
		internal void SwapSortedRows(int rowIndex1, int rowIndex2)
		{
			if (rowIndex1 == rowIndex2)
			{
				return;
			}
			if (rowIndex1 == this.ptCurrentCellCache.Y)
			{
				this.ptCurrentCellCache.Y = rowIndex2;
			}
			else if (rowIndex2 == this.ptCurrentCellCache.Y)
			{
				this.ptCurrentCellCache.Y = rowIndex1;
			}
			switch (this.SelectionMode)
			{
			case DataGridViewSelectionMode.FullRowSelect:
			case DataGridViewSelectionMode.RowHeaderSelect:
			{
				int num = this.selectedBandIndexes.IndexOf(rowIndex1);
				int num2 = this.selectedBandIndexes.IndexOf(rowIndex2);
				if (num != -1 && num2 == -1)
				{
					this.selectedBandIndexes[num] = rowIndex2;
				}
				else if (num == -1 && num2 != -1)
				{
					this.selectedBandIndexes[num2] = rowIndex1;
				}
				if (this.selectedBandSnapshotIndexes != null)
				{
					num = this.selectedBandSnapshotIndexes.IndexOf(rowIndex1);
					num2 = this.selectedBandSnapshotIndexes.IndexOf(rowIndex2);
					if (num != -1 && num2 == -1)
					{
						this.selectedBandSnapshotIndexes[num] = rowIndex2;
						return;
					}
					if (num == -1 && num2 != -1)
					{
						this.selectedBandSnapshotIndexes[num2] = rowIndex1;
					}
				}
				break;
			}
			case DataGridViewSelectionMode.FullColumnSelect:
				break;
			default:
				return;
			}
		}

		// Token: 0x0600307F RID: 12415 RVA: 0x000A3A0C File Offset: 0x000A2A0C
		private void DataGridViewHScrolled(object sender, ScrollEventArgs se)
		{
			if (!base.Enabled)
			{
				return;
			}
			if (se.Type == ScrollEventType.SmallIncrement || se.Type == ScrollEventType.SmallDecrement)
			{
				int num = ((se.Type == ScrollEventType.SmallIncrement) ? 1 : (-1));
				this.ScrollColumns(num);
				se.NewValue = this.HorizontalOffset;
				return;
			}
			if (se.Type != ScrollEventType.EndScroll)
			{
				this.HorizontalOffset = se.NewValue;
			}
		}

		// Token: 0x06003080 RID: 12416 RVA: 0x000A3A6C File Offset: 0x000A2A6C
		private void DataGridViewVScrolled(object sender, ScrollEventArgs se)
		{
			if (!base.Enabled)
			{
				return;
			}
			int rowsHeight = this.Rows.GetRowsHeight(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
			switch (se.Type)
			{
			case ScrollEventType.SmallDecrement:
				if (this.vertScrollBar.Value != this.vertScrollBar.Minimum)
				{
					this.ScrollRowsByCount(-1, ScrollEventType.SmallDecrement);
				}
				se.NewValue = this.VerticalOffset;
				return;
			case ScrollEventType.SmallIncrement:
				if (this.vertScrollBar.Value + this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow) <= this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight))
				{
					this.ScrollRowsByCount(1, ScrollEventType.SmallIncrement);
				}
				se.NewValue = this.VerticalOffset;
				return;
			case ScrollEventType.LargeDecrement:
				this.VerticalOffset -= this.vertScrollBar.LargeChange;
				se.NewValue = this.VerticalOffset;
				return;
			case ScrollEventType.LargeIncrement:
			{
				int height = this.Rows.SharedRow(this.displayedBandsInfo.FirstDisplayedScrollingRow).GetHeight(this.displayedBandsInfo.FirstDisplayedScrollingRow);
				this.VerticalOffset += Math.Max(height, this.vertScrollBar.LargeChange);
				se.NewValue = this.VerticalOffset;
				return;
			}
			case ScrollEventType.ThumbPosition:
				break;
			case ScrollEventType.ThumbTrack:
			case ScrollEventType.First:
			case ScrollEventType.Last:
				if (se.NewValue >= this.vertScrollBar.Maximum - this.vertScrollBar.LargeChange)
				{
					this.VerticalOffset = this.vertScrollBar.Maximum - this.ComputeHeightOfFittingTrailingScrollingRows(rowsHeight);
					return;
				}
				this.VerticalOffset = se.NewValue;
				break;
			default:
				return;
			}
		}

		// Token: 0x06003081 RID: 12417 RVA: 0x000A3C04 File Offset: 0x000A2C04
		private bool TabToNextCell()
		{
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = ((dataGridViewColumn == null) ? (-1) : dataGridViewColumn.Index);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.X != -1)
			{
				dataGridViewColumn = this.Columns.GetNextColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (dataGridViewColumn != null)
				{
					num2 = dataGridViewColumn.Index;
				}
			}
			int num3 = -1;
			if (this.ptCurrentCell.Y != -1)
			{
				num3 = this.Rows.GetNextRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
			}
			int num4 = -1;
			int num5 = -1;
			this.noSelectionChangeCount++;
			try
			{
				if (this.ptCurrentCell.X == -1)
				{
					this.ClearSelection();
				}
				else
				{
					if (num2 == -1)
					{
						num4 = ((num3 == -1) ? firstRow : num3);
						num5 = num;
					}
					else
					{
						num4 = this.ptCurrentCell.Y;
						num5 = num2;
					}
					if (!this.ScrollIntoView(num5, num4, true))
					{
						return true;
					}
				}
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetSelectedCellCore(num, firstRow, true);
					}
					else
					{
						if (this.IsInnerCellOutOfBounds(num5, num4))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(num5, num4, true);
					}
					break;
				case DataGridViewSelectionMode.FullRowSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsRowOutOfBounds(firstRow))
						{
							return true;
						}
						this.SetSelectedRowCore(firstRow, true);
					}
					else if (num4 != this.ptCurrentCell.Y || this.MultiSelect)
					{
						if (this.IsRowOutOfBounds(num4))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedRowCore(num4, true);
					}
					break;
				case DataGridViewSelectionMode.FullColumnSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsColumnOutOfBounds(num))
						{
							return true;
						}
						this.SetSelectedColumnCore(num, true);
					}
					else
					{
						if (this.IsColumnOutOfBounds(num5))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(num5, true);
					}
					break;
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
			if (this.ptCurrentCell.X == -1)
			{
				this.ScrollIntoView(num, firstRow, false);
				if (this.IsInnerCellOutOfBounds(num, firstRow))
				{
					return true;
				}
				this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
			}
			else
			{
				if (this.IsInnerCellOutOfBounds(num5, num4))
				{
					return true;
				}
				this.SetCurrentCellAddressCore(num5, num4, true, false, false);
			}
			return true;
		}

		// Token: 0x06003082 RID: 12418 RVA: 0x000A3EC0 File Offset: 0x000A2EC0
		private bool TabToPreviousCell()
		{
			DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Visible);
			int num = ((dataGridViewColumn == null) ? (-1) : dataGridViewColumn.Index);
			int firstRow = this.Rows.GetFirstRow(DataGridViewElementStates.Visible);
			if (num == -1 || firstRow == -1)
			{
				return false;
			}
			int num2 = -1;
			if (this.ptCurrentCell.X != -1)
			{
				dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[this.ptCurrentCell.X], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (dataGridViewColumn != null)
				{
					num2 = dataGridViewColumn.Index;
				}
			}
			int num3 = -1;
			if (this.ptCurrentCell.Y != -1)
			{
				num3 = this.Rows.GetPreviousRow(this.ptCurrentCell.Y, DataGridViewElementStates.Visible);
			}
			dataGridViewColumn = this.Columns.GetLastColumn(DataGridViewElementStates.Visible, DataGridViewElementStates.None);
			int index = dataGridViewColumn.Index;
			int lastRow = this.Rows.GetLastRow(DataGridViewElementStates.Visible);
			int num4 = -1;
			int num5 = -1;
			this.noSelectionChangeCount++;
			try
			{
				if (this.ptCurrentCell.X == -1)
				{
					this.ClearSelection();
				}
				else
				{
					if (num2 == -1)
					{
						num4 = ((num3 == -1) ? lastRow : num3);
						num5 = index;
					}
					else
					{
						num4 = this.ptCurrentCell.Y;
						num5 = num2;
					}
					if (!this.ScrollIntoView(num5, num4, true))
					{
						return true;
					}
				}
				switch (this.SelectionMode)
				{
				case DataGridViewSelectionMode.CellSelect:
				case DataGridViewSelectionMode.RowHeaderSelect:
				case DataGridViewSelectionMode.ColumnHeaderSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsInnerCellOutOfBounds(num, firstRow))
						{
							return true;
						}
						this.SetSelectedCellCore(num, firstRow, true);
					}
					else
					{
						if (this.IsInnerCellOutOfBounds(num5, num4))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedCellCore(num5, num4, true);
					}
					break;
				case DataGridViewSelectionMode.FullRowSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsRowOutOfBounds(firstRow))
						{
							return true;
						}
						this.SetSelectedRowCore(firstRow, true);
					}
					else if (num4 != this.ptCurrentCell.Y || this.MultiSelect)
					{
						if (this.IsRowOutOfBounds(num4))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedRowCore(num4, true);
					}
					break;
				case DataGridViewSelectionMode.FullColumnSelect:
					if (this.ptCurrentCell.X == -1)
					{
						if (this.IsColumnOutOfBounds(num))
						{
							return true;
						}
						this.SetSelectedColumnCore(num, true);
					}
					else
					{
						if (this.IsColumnOutOfBounds(num5))
						{
							return true;
						}
						this.ClearSelection();
						this.SetSelectedColumnCore(num5, true);
					}
					break;
				}
			}
			finally
			{
				this.NoSelectionChangeCount--;
			}
			if (this.ptCurrentCell.X == -1)
			{
				this.ScrollIntoView(num, firstRow, false);
				if (this.IsInnerCellOutOfBounds(num, firstRow))
				{
					return true;
				}
				this.SetCurrentCellAddressCore(num, firstRow, true, false, false);
			}
			else
			{
				if (this.IsInnerCellOutOfBounds(num5, num4))
				{
					return true;
				}
				this.SetCurrentCellAddressCore(num5, num4, true, false, false);
			}
			return true;
		}

		// Token: 0x06003083 RID: 12419 RVA: 0x000A41A4 File Offset: 0x000A31A4
		private void UnwireEditingControlEvents()
		{
			this.editingPanel.Click -= this.EditingControls_Click;
			this.editingPanel.DoubleClick -= this.EditingControls_DoubleClick;
			this.editingPanel.MouseClick -= this.EditingControls_MouseClick;
			this.editingPanel.MouseDoubleClick -= this.EditingControls_MouseDoubleClick;
			this.editingPanel.MouseDown -= this.EditingControls_MouseDown;
			this.editingPanel.MouseEnter -= this.EditingControls_MouseEnter;
			this.editingPanel.MouseLeave -= this.EditingControls_MouseLeave;
			this.editingPanel.MouseMove -= this.EditingControls_MouseMove;
			this.editingPanel.MouseUp -= this.EditingControls_MouseUp;
			this.editingControl.Click -= this.EditingControls_Click;
			this.editingControl.DoubleClick -= this.EditingControls_DoubleClick;
			this.editingControl.MouseClick -= this.EditingControls_MouseClick;
			this.editingControl.MouseDoubleClick -= this.EditingControls_MouseDoubleClick;
			this.editingControl.MouseDown -= this.EditingControls_MouseDown;
			this.editingControl.MouseEnter -= this.EditingControls_MouseEnter;
			this.editingControl.MouseLeave -= this.EditingControls_MouseLeave;
			this.editingControl.MouseMove -= this.EditingControls_MouseMove;
			this.editingControl.MouseUp -= this.EditingControls_MouseUp;
		}

		// Token: 0x06003084 RID: 12420 RVA: 0x000A4350 File Offset: 0x000A3350
		private void UnwireScrollBarsEvents()
		{
			if (this.horizScrollBar != null)
			{
				this.horizScrollBar.MouseEnter -= this.ScrollBar_MouseEnter;
				this.horizScrollBar.MouseLeave -= this.ScrollBar_MouseLeave;
			}
			if (this.vertScrollBar != null)
			{
				this.vertScrollBar.MouseEnter -= this.ScrollBar_MouseEnter;
				this.vertScrollBar.MouseLeave -= this.ScrollBar_MouseLeave;
			}
		}

		// Token: 0x06003085 RID: 12421 RVA: 0x000A43CC File Offset: 0x000A33CC
		public void UpdateCellErrorText(int columnIndex, int rowIndex)
		{
			if (columnIndex < -1 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (rowIndex < -1 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if (base.IsHandleCreated)
			{
				this.InvalidateCellPrivate(columnIndex, rowIndex);
			}
		}

		// Token: 0x06003086 RID: 12422 RVA: 0x000A4424 File Offset: 0x000A3424
		public void UpdateCellValue(int columnIndex, int rowIndex)
		{
			if (columnIndex < 0 || columnIndex >= this.Columns.Count)
			{
				throw new ArgumentOutOfRangeException("columnIndex");
			}
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if (base.IsHandleCreated)
			{
				this.OnCellCommonChange(columnIndex, rowIndex);
			}
		}

		// Token: 0x06003087 RID: 12423 RVA: 0x000A447C File Offset: 0x000A347C
		private void UpdateColumnsDisplayedState(bool displayed)
		{
			int i = this.displayedBandsInfo.NumDisplayedFrozenCols;
			if (i > 0)
			{
				DataGridViewColumn dataGridViewColumn = this.Columns.GetFirstColumn(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				while (i > 0)
				{
					if (dataGridViewColumn.Displayed != displayed)
					{
						dataGridViewColumn.DisplayedInternal = displayed;
					}
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					i--;
				}
			}
			int firstDisplayedScrollingCol = this.displayedBandsInfo.FirstDisplayedScrollingCol;
			if (firstDisplayedScrollingCol != -1)
			{
				int j = this.displayedBandsInfo.NumDisplayedScrollingCols;
				DataGridViewColumn dataGridViewColumn = this.Columns[firstDisplayedScrollingCol];
				while (j > 0)
				{
					if (dataGridViewColumn.Displayed != displayed)
					{
						dataGridViewColumn.DisplayedInternal = displayed;
					}
					dataGridViewColumn = this.Columns.GetNextColumn(dataGridViewColumn, DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					j--;
				}
			}
		}

		// Token: 0x06003088 RID: 12424 RVA: 0x000A4524 File Offset: 0x000A3524
		public void UpdateRowErrorText(int rowIndex)
		{
			if (rowIndex < 0 || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			if (base.IsHandleCreated && this.layout.RowHeadersVisible)
			{
				this.InvalidateCellPrivate(-1, rowIndex);
			}
		}

		// Token: 0x06003089 RID: 12425 RVA: 0x000A4560 File Offset: 0x000A3560
		public void UpdateRowErrorText(int rowIndexStart, int rowIndexEnd)
		{
			if (rowIndexStart < 0 || rowIndexStart >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndexStart");
			}
			if (rowIndexEnd < 0 || rowIndexEnd >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndexEnd");
			}
			if (rowIndexEnd < rowIndexStart)
			{
				throw new ArgumentOutOfRangeException("rowIndexEnd");
			}
			if (base.IsHandleCreated && this.layout.RowHeadersVisible)
			{
				Rectangle cellAdjustedDisplayRectangle = this.GetCellAdjustedDisplayRectangle(-1, rowIndexStart, true);
				Rectangle cellAdjustedDisplayRectangle2 = this.GetCellAdjustedDisplayRectangle(-1, rowIndexEnd, true);
				if (cellAdjustedDisplayRectangle.IsEmpty || cellAdjustedDisplayRectangle2.IsEmpty)
				{
					if (!cellAdjustedDisplayRectangle.IsEmpty || !cellAdjustedDisplayRectangle2.IsEmpty)
					{
						base.Invalidate(this.layout.RowHeaders);
						return;
					}
				}
				else
				{
					base.Invalidate(Rectangle.Union(cellAdjustedDisplayRectangle, cellAdjustedDisplayRectangle2));
				}
			}
		}

		// Token: 0x0600308A RID: 12426 RVA: 0x000A4622 File Offset: 0x000A3622
		public void UpdateRowHeightInfo(int rowIndex, bool updateToEnd)
		{
			this.UpdateRowHeightInfoPrivate(rowIndex, updateToEnd, true);
		}

		// Token: 0x0600308B RID: 12427 RVA: 0x000A4630 File Offset: 0x000A3630
		private void UpdateRowHeightInfoPrivate(int rowIndex, bool updateToEnd, bool invalidInAdjustFillingColumns)
		{
			if ((updateToEnd && rowIndex < 0) || (!updateToEnd && rowIndex < -1) || rowIndex >= this.Rows.Count)
			{
				throw new ArgumentOutOfRangeException("rowIndex");
			}
			this.Rows.InvalidateCachedRowsHeights();
			bool flag = rowIndex >= 0 && (this.Rows.GetRowState(rowIndex) & DataGridViewElementStates.Visible) != DataGridViewElementStates.None;
			if (base.IsHandleCreated && (rowIndex == -1 || flag))
			{
				if (updateToEnd)
				{
					int firstDisplayedScrollingRow = this.displayedBandsInfo.FirstDisplayedScrollingRow;
					if (this.AutoSize)
					{
						LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
					}
					else
					{
						this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
					}
					Rectangle rectangle = this.layout.Data;
					if (this.layout.RowHeadersVisible)
					{
						rectangle = Rectangle.Union(rectangle, this.layout.RowHeaders);
					}
					else if (this.SingleVerticalBorderAdded)
					{
						if (!this.RightToLeftInternal)
						{
							rectangle.X--;
						}
						rectangle.Width++;
					}
					if (!flag)
					{
						rowIndex = this.Rows.GetNextRow(rowIndex, DataGridViewElementStates.Visible);
					}
					if (rowIndex != -1)
					{
						int rowYFromIndex = this.GetRowYFromIndex((firstDisplayedScrollingRow == this.displayedBandsInfo.FirstDisplayedScrollingRow) ? rowIndex : this.displayedBandsInfo.FirstDisplayedScrollingRow);
						rectangle.Height -= rectangle.Y - rowYFromIndex;
						rectangle.Y = rowYFromIndex;
						base.Invalidate(rectangle);
					}
					if (this.editingControl != null)
					{
						this.PositionEditingControl(true, true, false);
					}
				}
				else
				{
					if (rowIndex == -1)
					{
						if (this.AutoSize)
						{
							LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
						}
						else
						{
							this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
						}
						base.Invalidate();
					}
					else
					{
						int firstDisplayedScrollingRow2 = this.displayedBandsInfo.FirstDisplayedScrollingRow;
						if (this.inBulkLayoutCount == 0)
						{
							if (this.AutoSize)
							{
								LayoutTransaction.DoLayout(this.ParentInternal, this, PropertyNames.Rows);
							}
							else
							{
								this.PerformLayoutPrivate(false, false, invalidInAdjustFillingColumns, false);
							}
						}
						if (this.inBulkPaintCount == 0)
						{
							Rectangle rectangle2 = this.layout.Data;
							if (this.layout.RowHeadersVisible)
							{
								rectangle2 = Rectangle.Union(rectangle2, this.layout.RowHeaders);
							}
							else if (this.SingleVerticalBorderAdded)
							{
								if (!this.RightToLeftInternal)
								{
									rectangle2.X--;
								}
								rectangle2.Width++;
							}
							int rowYFromIndex2 = this.GetRowYFromIndex((firstDisplayedScrollingRow2 == this.displayedBandsInfo.FirstDisplayedScrollingRow) ? rowIndex : this.displayedBandsInfo.FirstDisplayedScrollingRow);
							rectangle2.Height -= rectangle2.Y - rowYFromIndex2;
							rectangle2.Y = rowYFromIndex2;
							base.Invalidate(rectangle2);
						}
					}
					if (this.editingControl != null)
					{
						this.PositionEditingControl(rowIndex == -1 || this.ptCurrentCell.Y != rowIndex, true, false);
					}
				}
				this.UpdateMouseEnteredCell(null, null);
			}
		}

		// Token: 0x0600308C RID: 12428 RVA: 0x000A4904 File Offset: 0x000A3904
		private void UpdateRowsDisplayedState(bool displayed)
		{
			int i = this.displayedBandsInfo.NumDisplayedFrozenRows;
			int num;
			if (i > 0)
			{
				num = this.Rows.GetFirstRow(DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
				while (i > 0)
				{
					if ((this.Rows.GetRowState(num) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None == displayed)
					{
						this.Rows.SetRowState(num, DataGridViewElementStates.Displayed, displayed);
					}
					num = this.Rows.GetNextRow(num, DataGridViewElementStates.Frozen | DataGridViewElementStates.Visible);
					i--;
				}
			}
			num = this.displayedBandsInfo.FirstDisplayedScrollingRow;
			if (num > -1)
			{
				for (int j = this.displayedBandsInfo.NumDisplayedScrollingRows; j > 0; j--)
				{
					if ((this.Rows.GetRowState(num) & DataGridViewElementStates.Displayed) == DataGridViewElementStates.None == displayed)
					{
						this.Rows.SetRowState(num, DataGridViewElementStates.Displayed, displayed);
					}
					num = this.Rows.GetNextRow(num, DataGridViewElementStates.Visible);
				}
			}
		}

		// Token: 0x0600308D RID: 12429 RVA: 0x000A49C4 File Offset: 0x000A39C4
		private void UpdateMouseEnteredCell(DataGridView.HitTestInfo hti, MouseEventArgs e)
		{
			Point point = base.PointToClient(Control.MousePosition);
			DataGridView.HitTestInfo hitTestInfo;
			if (hti != null)
			{
				hitTestInfo = hti;
			}
			else
			{
				hitTestInfo = this.HitTest(point.X, point.Y);
			}
			if (hitTestInfo.Type != DataGridViewHitTestType.None && hitTestInfo.Type != DataGridViewHitTestType.HorizontalScrollBar && hitTestInfo.Type != DataGridViewHitTestType.VerticalScrollBar)
			{
				if (this.ptMouseEnteredCell.X != hitTestInfo.col || this.ptMouseEnteredCell.Y != hitTestInfo.row)
				{
					DataGridViewCellEventArgs dataGridViewCellEventArgs;
					if (this.ptMouseEnteredCell.X >= -1 && this.ptMouseEnteredCell.X < this.Columns.Count && this.ptMouseEnteredCell.Y >= -1 && this.ptMouseEnteredCell.Y < this.Rows.Count)
					{
						dataGridViewCellEventArgs = new DataGridViewCellEventArgs(this.ptMouseEnteredCell.X, this.ptMouseEnteredCell.Y);
						this.OnCellMouseLeave(dataGridViewCellEventArgs);
					}
					dataGridViewCellEventArgs = new DataGridViewCellEventArgs(hitTestInfo.col, hitTestInfo.row);
					this.OnCellMouseEnter(dataGridViewCellEventArgs);
				}
				if (e != null)
				{
					int num = e.X - hitTestInfo.ColumnX;
					if (this.RightToLeftInternal)
					{
						num += ((hitTestInfo.col == -1) ? this.RowHeadersWidth : this.Columns[hitTestInfo.col].Thickness);
					}
					DataGridViewCellMouseEventArgs dataGridViewCellMouseEventArgs = new DataGridViewCellMouseEventArgs(hitTestInfo.col, hitTestInfo.row, num, e.Y - hitTestInfo.RowY, e);
					this.OnCellMouseMove(dataGridViewCellMouseEventArgs);
					return;
				}
			}
			else if (this.ptMouseEnteredCell.X != -2)
			{
				if (this.ptMouseEnteredCell.X >= -1 && this.ptMouseEnteredCell.X < this.Columns.Count && this.ptMouseEnteredCell.Y >= -1 && this.ptMouseEnteredCell.Y < this.Rows.Count)
				{
					DataGridViewCellEventArgs dataGridViewCellEventArgs2 = new DataGridViewCellEventArgs(this.ptMouseEnteredCell.X, this.ptMouseEnteredCell.Y);
					this.OnCellMouseLeave(dataGridViewCellEventArgs2);
					return;
				}
				this.ptMouseEnteredCell.X = (this.ptMouseEnteredCell.Y = -2);
			}
		}

		// Token: 0x0600308E RID: 12430 RVA: 0x000A4BE0 File Offset: 0x000A3BE0
		private void UpdateSelectedCellsBlock(int anchorColumnIndex, ref int oldEdgeColumnIndex, int newEdgeColumnIndex, int anchorRowIndex, ref int oldEdgeRowIndex, int newEdgeRowIndex)
		{
			if ((this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) && this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex)) || (this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex)) || (anchorRowIndex < oldEdgeRowIndex && newEdgeRowIndex < anchorRowIndex) || (oldEdgeRowIndex < anchorRowIndex && anchorRowIndex < newEdgeRowIndex))
			{
				this.SelectCellUnorderedRange(anchorColumnIndex, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
				this.SelectCellUnorderedRange(anchorColumnIndex, anchorRowIndex, newEdgeColumnIndex, newEdgeRowIndex, true);
				oldEdgeColumnIndex = newEdgeColumnIndex;
				oldEdgeRowIndex = newEdgeRowIndex;
				return;
			}
			if (this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex) && (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) || anchorColumnIndex == oldEdgeColumnIndex) && oldEdgeRowIndex == newEdgeRowIndex)
			{
				DataGridViewColumn nextColumn = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (anchorRowIndex <= newEdgeRowIndex)
				{
					this.SelectCellRange(nextColumn.Index, anchorRowIndex, newEdgeColumnIndex, newEdgeRowIndex, true);
				}
				else
				{
					this.SelectCellRange(nextColumn.Index, newEdgeRowIndex, newEdgeColumnIndex, anchorRowIndex, true);
				}
			}
			else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && (this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) || oldEdgeColumnIndex == anchorColumnIndex) && oldEdgeRowIndex == newEdgeRowIndex)
			{
				DataGridViewColumn previousColumn = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (anchorRowIndex <= newEdgeRowIndex)
				{
					this.SelectCellRange(newEdgeColumnIndex, anchorRowIndex, previousColumn.Index, newEdgeRowIndex, true);
				}
				else
				{
					this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, previousColumn.Index, anchorRowIndex, true);
				}
			}
			else if (newEdgeRowIndex > oldEdgeRowIndex && anchorRowIndex <= oldEdgeRowIndex && newEdgeColumnIndex == oldEdgeColumnIndex)
			{
				if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || anchorColumnIndex == newEdgeColumnIndex)
				{
					this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), newEdgeColumnIndex, newEdgeRowIndex, true);
				}
				else
				{
					this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, newEdgeRowIndex, true);
				}
			}
			else if (newEdgeRowIndex < oldEdgeRowIndex && oldEdgeRowIndex <= anchorRowIndex && newEdgeColumnIndex == oldEdgeColumnIndex)
			{
				if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || anchorColumnIndex == newEdgeColumnIndex)
				{
					this.SelectCellRange(anchorColumnIndex, newEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
				}
				else
				{
					this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
				}
			}
			else if (this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex) && !this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && newEdgeRowIndex > oldEdgeRowIndex && anchorRowIndex <= oldEdgeRowIndex)
			{
				DataGridViewColumn nextColumn2 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				this.SelectCellRange(nextColumn2.Index, anchorRowIndex, newEdgeColumnIndex, oldEdgeRowIndex, true);
				this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), newEdgeColumnIndex, newEdgeRowIndex, true);
			}
			else if (this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex) && newEdgeRowIndex < oldEdgeRowIndex && oldEdgeRowIndex <= anchorRowIndex)
			{
				if (!this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex))
				{
					DataGridViewColumn nextColumn3 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectCellRange(nextColumn3.Index, oldEdgeRowIndex, newEdgeColumnIndex, anchorRowIndex, true);
					this.SelectCellRange(anchorColumnIndex, newEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
				}
				else if (!this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex))
				{
					if (anchorRowIndex == oldEdgeRowIndex)
					{
						this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, anchorColumnIndex, oldEdgeRowIndex, false);
						this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, anchorRowIndex, true);
					}
					else
					{
						DataGridViewColumn previousColumn2 = this.Columns.GetPreviousColumn(this.Columns[newEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
						this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, previousColumn2.Index, anchorRowIndex, false);
						this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
					}
				}
			}
			else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && newEdgeRowIndex < oldEdgeRowIndex && anchorRowIndex >= oldEdgeRowIndex)
			{
				if (!this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
				{
					DataGridViewColumn previousColumn3 = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectCellRange(newEdgeColumnIndex, oldEdgeRowIndex, previousColumn3.Index, anchorRowIndex, true);
					this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
				}
				else if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex))
				{
					DataGridViewColumn nextColumn4 = this.Columns.GetNextColumn(this.Columns[newEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
					this.SelectCellRange(nextColumn4.Index, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
					this.SelectCellRange(anchorColumnIndex, newEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), true);
				}
				else
				{
					this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
					this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, anchorColumnIndex, anchorRowIndex, true);
				}
			}
			else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && !this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) && newEdgeRowIndex > oldEdgeRowIndex && anchorRowIndex <= oldEdgeRowIndex)
			{
				DataGridViewColumn previousColumn4 = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				this.SelectCellRange(newEdgeColumnIndex, anchorRowIndex, previousColumn4.Index, oldEdgeRowIndex, true);
				this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, newEdgeRowIndex, true);
			}
			else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex))
			{
				DataGridViewColumn dataGridViewColumn = this.Columns.GetNextColumn(this.Columns[newEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (newEdgeRowIndex == oldEdgeRowIndex)
				{
					if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || anchorColumnIndex == newEdgeColumnIndex)
					{
						if (oldEdgeRowIndex > anchorRowIndex)
						{
							this.SelectCellRange(dataGridViewColumn.Index, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
						}
						else
						{
							this.SelectCellRange(dataGridViewColumn.Index, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
						}
					}
				}
				else if (newEdgeRowIndex < oldEdgeRowIndex)
				{
					if (oldEdgeRowIndex > anchorRowIndex && this.Columns.DisplayInOrder(newEdgeColumnIndex, oldEdgeColumnIndex) && anchorRowIndex <= newEdgeRowIndex)
					{
						if (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
						{
							if (!this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex))
							{
								this.SelectCellRange(dataGridViewColumn.Index, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
								this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), newEdgeColumnIndex, oldEdgeRowIndex, false);
							}
						}
						else
						{
							dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							this.SelectCellRange(oldEdgeColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, oldEdgeRowIndex, false);
							this.SelectCellRange(newEdgeColumnIndex, anchorRowIndex, dataGridViewColumn.Index, newEdgeRowIndex, true);
						}
					}
				}
				else if (newEdgeRowIndex > oldEdgeRowIndex)
				{
					if (oldEdgeRowIndex < anchorRowIndex)
					{
						if ((this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || anchorColumnIndex == newEdgeColumnIndex) && newEdgeRowIndex <= anchorRowIndex)
						{
							this.SelectCellRange(dataGridViewColumn.Index, oldEdgeRowIndex, oldEdgeColumnIndex, anchorRowIndex, false);
							this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, newEdgeColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
						}
						else if (!this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex) && newEdgeRowIndex <= anchorRowIndex)
						{
							dataGridViewColumn = this.Columns.GetPreviousColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
							this.SelectCellRange(newEdgeColumnIndex, newEdgeRowIndex, dataGridViewColumn.Index, anchorRowIndex, true);
						}
					}
					else if (this.Columns.DisplayInOrder(anchorColumnIndex, newEdgeColumnIndex) || anchorColumnIndex == newEdgeColumnIndex)
					{
						this.SelectCellRange(dataGridViewColumn.Index, anchorRowIndex, oldEdgeColumnIndex, oldEdgeRowIndex, false);
						this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(anchorRowIndex, DataGridViewElementStates.Visible), newEdgeColumnIndex, newEdgeRowIndex, true);
					}
				}
			}
			else if (this.Columns.DisplayInOrder(oldEdgeColumnIndex, newEdgeColumnIndex))
			{
				DataGridViewColumn dataGridViewColumn2 = this.Columns.GetPreviousColumn(this.Columns[newEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
				if (newEdgeRowIndex == oldEdgeRowIndex)
				{
					if (this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || newEdgeColumnIndex == anchorColumnIndex)
					{
						if (oldEdgeRowIndex > anchorRowIndex)
						{
							this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, dataGridViewColumn2.Index, oldEdgeRowIndex, false);
						}
						else
						{
							this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, dataGridViewColumn2.Index, anchorRowIndex, false);
						}
					}
				}
				else if (newEdgeRowIndex < oldEdgeRowIndex)
				{
					if (oldEdgeRowIndex > anchorRowIndex)
					{
						if ((this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || newEdgeColumnIndex == anchorColumnIndex) && newEdgeRowIndex >= anchorRowIndex)
						{
							this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, dataGridViewColumn2.Index, oldEdgeRowIndex, false);
							this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, oldEdgeRowIndex, false);
						}
						else if (!this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && newEdgeRowIndex >= anchorRowIndex)
						{
							dataGridViewColumn2 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), oldEdgeColumnIndex, oldEdgeRowIndex, false);
							this.SelectCellRange(dataGridViewColumn2.Index, anchorRowIndex, newEdgeColumnIndex, newEdgeRowIndex, true);
						}
					}
				}
				else if (newEdgeRowIndex > oldEdgeRowIndex)
				{
					if (oldEdgeRowIndex < anchorRowIndex)
					{
						if ((this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || anchorColumnIndex == newEdgeColumnIndex) && newEdgeRowIndex <= anchorRowIndex)
						{
							this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, dataGridViewColumn2.Index, anchorRowIndex, false);
							this.SelectCellRange(newEdgeColumnIndex, oldEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
						}
						else if (!this.Columns.DisplayInOrder(oldEdgeColumnIndex, anchorColumnIndex) && newEdgeRowIndex <= anchorRowIndex)
						{
							dataGridViewColumn2 = this.Columns.GetNextColumn(this.Columns[oldEdgeColumnIndex], DataGridViewElementStates.Visible, DataGridViewElementStates.None);
							this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, oldEdgeColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
							this.SelectCellRange(dataGridViewColumn2.Index, newEdgeRowIndex, newEdgeColumnIndex, anchorRowIndex, true);
						}
					}
					else if (this.Columns.DisplayInOrder(newEdgeColumnIndex, anchorColumnIndex) || anchorColumnIndex == newEdgeColumnIndex)
					{
						this.SelectCellRange(oldEdgeColumnIndex, anchorRowIndex, dataGridViewColumn2.Index, oldEdgeRowIndex, false);
						this.SelectCellRange(newEdgeColumnIndex, this.Rows.GetNextRow(oldEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, newEdgeRowIndex, true);
					}
				}
			}
			else if (newEdgeRowIndex > oldEdgeRowIndex)
			{
				if (newEdgeColumnIndex == oldEdgeColumnIndex && newEdgeRowIndex <= anchorRowIndex)
				{
					if (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
					{
						this.SelectCellRange(anchorColumnIndex, oldEdgeRowIndex, oldEdgeColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
					}
					else
					{
						this.SelectCellRange(oldEdgeColumnIndex, oldEdgeRowIndex, anchorColumnIndex, this.Rows.GetPreviousRow(newEdgeRowIndex, DataGridViewElementStates.Visible), false);
					}
				}
			}
			else if (newEdgeRowIndex < oldEdgeRowIndex && newEdgeColumnIndex == oldEdgeColumnIndex && newEdgeRowIndex >= anchorRowIndex)
			{
				if (this.Columns.DisplayInOrder(anchorColumnIndex, oldEdgeColumnIndex))
				{
					this.SelectCellRange(anchorColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), oldEdgeColumnIndex, oldEdgeRowIndex, false);
				}
				else
				{
					this.SelectCellRange(oldEdgeColumnIndex, this.Rows.GetNextRow(newEdgeRowIndex, DataGridViewElementStates.Visible), anchorColumnIndex, oldEdgeRowIndex, false);
				}
			}
			oldEdgeColumnIndex = newEdgeColumnIndex;
			oldEdgeRowIndex = newEdgeRowIndex;
		}

		// Token: 0x0600308F RID: 12431 RVA: 0x000A56F4 File Offset: 0x000A46F4
		private void VertScrollTimer_Tick(object sender, EventArgs e)
		{
			base.BeginInvoke(new MethodInvoker(this.VertScrollTimerHandler));
		}

		// Token: 0x06003090 RID: 12432 RVA: 0x000A570C File Offset: 0x000A470C
		private void VertScrollTimerHandler()
		{
			Point point = base.PointToClient(Control.MousePosition);
			DataGridView.HitTestInfo hitTestInfo = this.HitTest(point.X, point.Y);
			int x = point.X;
			int y = point.Y;
			int num;
			int num2;
			if (this.GetOutOfBoundCorrectedHitTestInfo(ref hitTestInfo, ref x, ref y, out num, out num2))
			{
				if (num2 != 0)
				{
					int num3 = Math.Abs(num2);
					int num4 = num2 / num3;
					this.ScrollRowsByCount(num4, (num4 < 0) ? ScrollEventType.SmallDecrement : ScrollEventType.SmallIncrement);
					this.vertScrollTimer.Interval = DataGridView.GetRowScrollRate(num3);
					if (this.dataGridViewOper[8])
					{
						hitTestInfo = this.HitTest(x, point.Y - num2 - num4);
						if (hitTestInfo.row >= 0)
						{
							this.OnRowSelectMouseMove(hitTestInfo);
							return;
						}
					}
					else if (this.dataGridViewOper[16])
					{
						if (num != 0)
						{
							hitTestInfo = this.HitTest(point.X - num - num / Math.Abs(num), point.Y - num2 - num4);
						}
						else
						{
							hitTestInfo = this.HitTest(x, point.Y - num2 - num4);
						}
						if (hitTestInfo.col >= 0 && hitTestInfo.row >= 0)
						{
							this.OnCellSelectMouseMove(hitTestInfo);
							return;
						}
					}
				}
				else
				{
					if (this.dataGridViewOper[8] && hitTestInfo.row >= 0)
					{
						this.OnRowSelectMouseMove(hitTestInfo);
					}
					else if (this.dataGridViewOper[16] && hitTestInfo.col >= 0 && hitTestInfo.row >= 0)
					{
						this.OnCellSelectMouseMove(hitTestInfo);
					}
					this.VertScrollTimer.Enabled = false;
				}
			}
		}

		// Token: 0x06003091 RID: 12433 RVA: 0x000A5890 File Offset: 0x000A4890
		private void WireEditingControlEvents()
		{
			this.editingPanel.Click += this.EditingControls_Click;
			this.editingPanel.DoubleClick += this.EditingControls_DoubleClick;
			this.editingPanel.MouseClick += this.EditingControls_MouseClick;
			this.editingPanel.MouseDoubleClick += this.EditingControls_MouseDoubleClick;
			this.editingPanel.MouseDown += this.EditingControls_MouseDown;
			this.editingPanel.MouseEnter += this.EditingControls_MouseEnter;
			this.editingPanel.MouseLeave += this.EditingControls_MouseLeave;
			this.editingPanel.MouseMove += this.EditingControls_MouseMove;
			this.editingPanel.MouseUp += this.EditingControls_MouseUp;
			this.editingControl.Click += this.EditingControls_Click;
			this.editingControl.DoubleClick += this.EditingControls_DoubleClick;
			this.editingControl.MouseClick += this.EditingControls_MouseClick;
			this.editingControl.MouseDoubleClick += this.EditingControls_MouseDoubleClick;
			this.editingControl.MouseDown += this.EditingControls_MouseDown;
			this.editingControl.MouseEnter += this.EditingControls_MouseEnter;
			this.editingControl.MouseLeave += this.EditingControls_MouseLeave;
			this.editingControl.MouseMove += this.EditingControls_MouseMove;
			this.editingControl.MouseUp += this.EditingControls_MouseUp;
		}

		// Token: 0x06003092 RID: 12434 RVA: 0x000A5A3C File Offset: 0x000A4A3C
		private void WireScrollBarsEvents()
		{
			if (this.horizScrollBar != null)
			{
				this.horizScrollBar.MouseEnter += this.ScrollBar_MouseEnter;
				this.horizScrollBar.MouseLeave += this.ScrollBar_MouseLeave;
			}
			if (this.vertScrollBar != null)
			{
				this.vertScrollBar.MouseEnter += this.ScrollBar_MouseEnter;
				this.vertScrollBar.MouseLeave += this.ScrollBar_MouseLeave;
			}
		}

		// Token: 0x06003093 RID: 12435 RVA: 0x000A5AB8 File Offset: 0x000A4AB8
		internal override void WmContextMenu(ref Message m)
		{
			int num = (int)((short)(int)m.LParam);
			int num2 = (int)m.LParam >> 16;
			bool flag = false;
			Point point;
			ContextMenuStrip contextMenuStrip;
			if ((int)m.LParam == -1)
			{
				flag = true;
				point = new Point(base.Width / 2, base.Height / 2);
				contextMenuStrip = this.ContextMenuStrip;
			}
			else
			{
				point = base.PointToClientInternal(new Point(num, num2));
				DataGridView.HitTestInfo hitTestInfo = this.HitTest(point.X, point.Y);
				DataGridViewCell dataGridViewCell = null;
				switch (hitTestInfo.Type)
				{
				case DataGridViewHitTestType.Cell:
					dataGridViewCell = this.Rows.SharedRow(hitTestInfo.row).Cells[hitTestInfo.col];
					break;
				case DataGridViewHitTestType.ColumnHeader:
					dataGridViewCell = this.Columns[hitTestInfo.col].HeaderCell;
					break;
				case DataGridViewHitTestType.RowHeader:
					dataGridViewCell = this.Rows.SharedRow(hitTestInfo.row).HeaderCell;
					break;
				case DataGridViewHitTestType.TopLeftHeader:
					dataGridViewCell = this.TopLeftHeaderCell;
					break;
				}
				if (dataGridViewCell != null)
				{
					contextMenuStrip = dataGridViewCell.GetInheritedContextMenuStrip(hitTestInfo.row);
				}
				else
				{
					contextMenuStrip = this.ContextMenuStrip;
				}
			}
			if (contextMenuStrip != null && base.ClientRectangle.Contains(point))
			{
				contextMenuStrip.ShowInternal(this, point, flag);
				return;
			}
			this.DefWndProc(ref m);
		}

		// Token: 0x06003094 RID: 12436 RVA: 0x000A5C0C File Offset: 0x000A4C0C
		private void WmGetDlgCode(ref Message m)
		{
			m.Result = (IntPtr)((long)m.Result | 1L | 128L);
			Keys modifierKeys = Control.ModifierKeys;
			if (this.GetTabKeyEffective((modifierKeys & Keys.Shift) == Keys.Shift, (modifierKeys & Keys.Control) == Keys.Control))
			{
				m.Result = (IntPtr)((long)m.Result | 2L);
			}
		}

		// Token: 0x06003095 RID: 12437 RVA: 0x000A5C7C File Offset: 0x000A4C7C
		private unsafe bool WmNotify(ref Message m)
		{
			if (m.LParam == IntPtr.Zero)
			{
				return false;
			}
			NativeMethods.NMHDR* ptr = (NativeMethods.NMHDR*)(void*)m.LParam;
			if (ptr->code == NativeMethods.TTN_GETDISPINFO && !base.DesignMode)
			{
				string toolTipPrivate = this.ToolTipPrivate;
				if (!string.IsNullOrEmpty(toolTipPrivate))
				{
					UnsafeNativeMethods.SendMessage(new HandleRef(this, ptr->hwndFrom), 1048, 0, SystemInformation.MaxWindowTrackSize.Width);
					NativeMethods.TOOLTIPTEXT tooltiptext = (NativeMethods.TOOLTIPTEXT)m.GetLParam(typeof(NativeMethods.TOOLTIPTEXT));
					tooltiptext.lpszText = toolTipPrivate;
					if (this.RightToLeft == RightToLeft.Yes)
					{
						tooltiptext.uFlags |= 4;
					}
					Marshal.StructureToPtr(tooltiptext, m.LParam, false);
					return true;
				}
			}
			return false;
		}

		// Token: 0x06003096 RID: 12438 RVA: 0x000A5D38 File Offset: 0x000A4D38
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected override void WndProc(ref Message m)
		{
			int msg = m.Msg;
			if (msg <= 135)
			{
				if (msg != 78)
				{
					if (msg == 135)
					{
						this.WmGetDlgCode(ref m);
						return;
					}
				}
				else if (this.WmNotify(ref m))
				{
					return;
				}
			}
			else
			{
				switch (msg)
				{
				case 269:
				case 271:
					if (this.editingControl != null)
					{
						this.editingControl.SendMessage(m.Msg, m.WParam, m.LParam);
					}
					break;
				case 270:
					break;
				default:
					switch (msg)
					{
					case 513:
					case 515:
						this.dataGridViewOper[8192] = true;
						try
						{
							base.WndProc(ref m);
						}
						finally
						{
							this.dataGridViewOper[8192] = false;
						}
						return;
					}
					break;
				}
			}
			base.WndProc(ref m);
		}

		// Token: 0x0400183F RID: 6207
		private const int DATAGRIDVIEWSTATE1_allowUserToAddRows = 1;

		// Token: 0x04001840 RID: 6208
		private const int DATAGRIDVIEWSTATE1_allowUserToDeleteRows = 2;

		// Token: 0x04001841 RID: 6209
		private const int DATAGRIDVIEWSTATE1_allowUserToOrderColumns = 4;

		// Token: 0x04001842 RID: 6210
		private const int DATAGRIDVIEWSTATE1_columnHeadersVisible = 8;

		// Token: 0x04001843 RID: 6211
		private const int DATAGRIDVIEWSTATE1_rowHeadersVisible = 16;

		// Token: 0x04001844 RID: 6212
		private const int DATAGRIDVIEWSTATE1_forwardCharMessage = 32;

		// Token: 0x04001845 RID: 6213
		private const int DATAGRIDVIEWSTATE1_leavingWithTabKey = 64;

		// Token: 0x04001846 RID: 6214
		private const int DATAGRIDVIEWSTATE1_multiSelect = 128;

		// Token: 0x04001847 RID: 6215
		private const int DATAGRIDVIEWSTATE1_ignoringEditingChanges = 512;

		// Token: 0x04001848 RID: 6216
		private const int DATAGRIDVIEWSTATE1_ambientForeColor = 1024;

		// Token: 0x04001849 RID: 6217
		private const int DATAGRIDVIEWSTATE1_scrolledSinceMouseDown = 2048;

		// Token: 0x0400184A RID: 6218
		private const int DATAGRIDVIEWSTATE1_editingControlHidden = 4096;

		// Token: 0x0400184B RID: 6219
		private const int DATAGRIDVIEWSTATE1_standardTab = 8192;

		// Token: 0x0400184C RID: 6220
		private const int DATAGRIDVIEWSTATE1_editingControlChanging = 16384;

		// Token: 0x0400184D RID: 6221
		private const int DATAGRIDVIEWSTATE1_currentCellInEditMode = 32768;

		// Token: 0x0400184E RID: 6222
		private const int DATAGRIDVIEWSTATE1_virtualMode = 65536;

		// Token: 0x0400184F RID: 6223
		private const int DATAGRIDVIEWSTATE1_editedCellChanged = 131072;

		// Token: 0x04001850 RID: 6224
		private const int DATAGRIDVIEWSTATE1_editedRowChanged = 262144;

		// Token: 0x04001851 RID: 6225
		private const int DATAGRIDVIEWSTATE1_newRowEdited = 524288;

		// Token: 0x04001852 RID: 6226
		private const int DATAGRIDVIEWSTATE1_readOnly = 1048576;

		// Token: 0x04001853 RID: 6227
		private const int DATAGRIDVIEWSTATE1_newRowCreatedByEditing = 2097152;

		// Token: 0x04001854 RID: 6228
		private const int DATAGRIDVIEWSTATE1_temporarilyResetCurrentCell = 4194304;

		// Token: 0x04001855 RID: 6229
		private const int DATAGRIDVIEWSTATE1_autoGenerateColumns = 8388608;

		// Token: 0x04001856 RID: 6230
		private const int DATAGRIDVIEWSTATE1_customCursorSet = 16777216;

		// Token: 0x04001857 RID: 6231
		private const int DATAGRIDVIEWSTATE1_ambientFont = 33554432;

		// Token: 0x04001858 RID: 6232
		private const int DATAGRIDVIEWSTATE1_ambientColumnHeadersFont = 67108864;

		// Token: 0x04001859 RID: 6233
		private const int DATAGRIDVIEWSTATE1_ambientRowHeadersFont = 134217728;

		// Token: 0x0400185A RID: 6234
		private const int DATAGRIDVIEWSTATE1_isRestrictedChecked = 268435456;

		// Token: 0x0400185B RID: 6235
		private const int DATAGRIDVIEWSTATE1_isRestricted = 536870912;

		// Token: 0x0400185C RID: 6236
		private const int DATAGRIDVIEWSTATE1_isAutoSized = 1073741824;

		// Token: 0x0400185D RID: 6237
		private const int DATAGRIDVIEWSTATE2_showEditingIcon = 1;

		// Token: 0x0400185E RID: 6238
		private const int DATAGRIDVIEWSTATE2_allowUserToResizeColumns = 2;

		// Token: 0x0400185F RID: 6239
		private const int DATAGRIDVIEWSTATE2_allowUserToResizeRows = 4;

		// Token: 0x04001860 RID: 6240
		private const int DATAGRIDVIEWSTATE2_mouseOverRemovedEditingCtrl = 8;

		// Token: 0x04001861 RID: 6241
		private const int DATAGRIDVIEWSTATE2_mouseOverRemovedEditingPanel = 16;

		// Token: 0x04001862 RID: 6242
		private const int DATAGRIDVIEWSTATE2_mouseEnterExpected = 32;

		// Token: 0x04001863 RID: 6243
		private const int DATAGRIDVIEWSTATE2_enableHeadersVisualStyles = 64;

		// Token: 0x04001864 RID: 6244
		private const int DATAGRIDVIEWSTATE2_showCellErrors = 128;

		// Token: 0x04001865 RID: 6245
		private const int DATAGRIDVIEWSTATE2_showCellToolTips = 256;

		// Token: 0x04001866 RID: 6246
		private const int DATAGRIDVIEWSTATE2_showRowErrors = 512;

		// Token: 0x04001867 RID: 6247
		private const int DATAGRIDVIEWSTATE2_showColumnRelocationInsertion = 1024;

		// Token: 0x04001868 RID: 6248
		private const int DATAGRIDVIEWSTATE2_rightToLeftMode = 2048;

		// Token: 0x04001869 RID: 6249
		private const int DATAGRIDVIEWSTATE2_rightToLeftValid = 4096;

		// Token: 0x0400186A RID: 6250
		private const int DATAGRIDVIEWSTATE2_currentCellWantsInputKey = 8192;

		// Token: 0x0400186B RID: 6251
		private const int DATAGRIDVIEWSTATE2_stopRaisingVerticalScroll = 16384;

		// Token: 0x0400186C RID: 6252
		private const int DATAGRIDVIEWSTATE2_stopRaisingHorizontalScroll = 32768;

		// Token: 0x0400186D RID: 6253
		private const int DATAGRIDVIEWSTATE2_replacedCellSelected = 65536;

		// Token: 0x0400186E RID: 6254
		private const int DATAGRIDVIEWSTATE2_replacedCellReadOnly = 131072;

		// Token: 0x0400186F RID: 6255
		private const int DATAGRIDVIEWSTATE2_raiseSelectionChanged = 262144;

		// Token: 0x04001870 RID: 6256
		private const int DATAGRIDVIEWSTATE2_initializing = 524288;

		// Token: 0x04001871 RID: 6257
		private const int DATAGRIDVIEWSTATE2_autoSizedWithoutHandle = 1048576;

		// Token: 0x04001872 RID: 6258
		private const int DATAGRIDVIEWSTATE2_ignoreCursorChange = 2097152;

		// Token: 0x04001873 RID: 6259
		private const int DATAGRIDVIEWSTATE2_rowsCollectionClearedInSetCell = 4194304;

		// Token: 0x04001874 RID: 6260
		private const int DATAGRIDVIEWSTATE2_nextMouseUpIsDouble = 8388608;

		// Token: 0x04001875 RID: 6261
		private const int DATAGRIDVIEWSTATE2_inBindingContextChanged = 16777216;

		// Token: 0x04001876 RID: 6262
		private const int DATAGRIDVIEWSTATE2_allowHorizontalScrollbar = 33554432;

		// Token: 0x04001877 RID: 6263
		private const int DATAGRIDVIEWSTATE2_usedFillWeightsDirty = 67108864;

		// Token: 0x04001878 RID: 6264
		private const int DATAGRIDVIEWSTATE2_messageFromEditingCtrls = 134217728;

		// Token: 0x04001879 RID: 6265
		private const int DATAGRIDVIEWSTATE2_cellMouseDownInContentBounds = 268435456;

		// Token: 0x0400187A RID: 6266
		private const int DATAGRIDVIEWSTATE2_discardEditingControl = 536870912;

		// Token: 0x0400187B RID: 6267
		private const int DATAGRIDVIEWOPER_trackColResize = 1;

		// Token: 0x0400187C RID: 6268
		private const int DATAGRIDVIEWOPER_trackRowResize = 2;

		// Token: 0x0400187D RID: 6269
		private const int DATAGRIDVIEWOPER_trackColSelect = 4;

		// Token: 0x0400187E RID: 6270
		private const int DATAGRIDVIEWOPER_trackRowSelect = 8;

		// Token: 0x0400187F RID: 6271
		private const int DATAGRIDVIEWOPER_trackCellSelect = 16;

		// Token: 0x04001880 RID: 6272
		private const int DATAGRIDVIEWOPER_trackColRelocation = 32;

		// Token: 0x04001881 RID: 6273
		private const int DATAGRIDVIEWOPER_inSort = 64;

		// Token: 0x04001882 RID: 6274
		private const int DATAGRIDVIEWOPER_trackColHeadersResize = 128;

		// Token: 0x04001883 RID: 6275
		private const int DATAGRIDVIEWOPER_trackRowHeadersResize = 256;

		// Token: 0x04001884 RID: 6276
		private const int DATAGRIDVIEWOPER_trackMouseMoves = 512;

		// Token: 0x04001885 RID: 6277
		private const int DATAGRIDVIEWOPER_inRefreshColumns = 1024;

		// Token: 0x04001886 RID: 6278
		private const int DATAGRIDVIEWOPER_inDisplayIndexAdjustments = 2048;

		// Token: 0x04001887 RID: 6279
		private const int DATAGRIDVIEWOPER_lastEditCtrlClickDoubled = 4096;

		// Token: 0x04001888 RID: 6280
		private const int DATAGRIDVIEWOPER_inMouseDown = 8192;

		// Token: 0x04001889 RID: 6281
		private const int DATAGRIDVIEWOPER_inReadOnlyChange = 16384;

		// Token: 0x0400188A RID: 6282
		private const int DATAGRIDVIEWOPER_inCellValidating = 32768;

		// Token: 0x0400188B RID: 6283
		private const int DATAGRIDVIEWOPER_inBorderStyleChange = 65536;

		// Token: 0x0400188C RID: 6284
		private const int DATAGRIDVIEWOPER_inCurrentCellChange = 131072;

		// Token: 0x0400188D RID: 6285
		private const int DATAGRIDVIEWOPER_inAdjustFillingColumns = 262144;

		// Token: 0x0400188E RID: 6286
		private const int DATAGRIDVIEWOPER_inAdjustFillingColumn = 524288;

		// Token: 0x0400188F RID: 6287
		private const int DATAGRIDVIEWOPER_inDispose = 1048576;

		// Token: 0x04001890 RID: 6288
		private const int DATAGRIDVIEWOPER_inBeginEdit = 2097152;

		// Token: 0x04001891 RID: 6289
		private const int DATAGRIDVIEWOPER_inEndEdit = 4194304;

		// Token: 0x04001892 RID: 6290
		private const int DATAGRIDVIEWOPER_resizingOperationAboutToStart = 8388608;

		// Token: 0x04001893 RID: 6291
		private const byte DATAGRIDVIEW_columnSizingHotZone = 6;

		// Token: 0x04001894 RID: 6292
		private const byte DATAGRIDVIEW_rowSizingHotZone = 5;

		// Token: 0x04001895 RID: 6293
		private const byte DATAGRIDVIEW_insertionBarWidth = 3;

		// Token: 0x04001896 RID: 6294
		private const byte DATAGRIDVIEW_bulkPaintThreshold = 8;

		// Token: 0x04001897 RID: 6295
		private const string DATAGRIDVIEW_htmlPrefix = "Version:1.0\r\nStartHTML:00000097\r\nEndHTML:{0}\r\nStartFragment:00000133\r\nEndFragment:{1}\r\n";

		// Token: 0x04001898 RID: 6296
		private const string DATAGRIDVIEW_htmlStartFragment = "<HTML>\r\n<BODY>\r\n<!--StartFragment-->";

		// Token: 0x04001899 RID: 6297
		private const string DATAGRIDVIEW_htmlEndFragment = "\r\n<!--EndFragment-->\r\n</BODY>\r\n</HTML>";

		// Token: 0x0400189A RID: 6298
		private const BorderStyle defaultBorderStyle = BorderStyle.FixedSingle;

		// Token: 0x0400189B RID: 6299
		private const DataGridViewAdvancedCellBorderStyle defaultAdvancedCellBorderStyle = DataGridViewAdvancedCellBorderStyle.Single;

		// Token: 0x0400189C RID: 6300
		private const DataGridViewAdvancedCellBorderStyle defaultAdvancedRowHeadersBorderStyle = DataGridViewAdvancedCellBorderStyle.OutsetPartial;

		// Token: 0x0400189D RID: 6301
		private const DataGridViewAdvancedCellBorderStyle defaultAdvancedColumnHeadersBorderStyle = DataGridViewAdvancedCellBorderStyle.OutsetPartial;

		// Token: 0x0400189E RID: 6302
		private const DataGridViewSelectionMode defaultSelectionMode = DataGridViewSelectionMode.RowHeaderSelect;

		// Token: 0x0400189F RID: 6303
		private const DataGridViewEditMode defaultEditMode = DataGridViewEditMode.EditOnKeystrokeOrF2;

		// Token: 0x040018A0 RID: 6304
		private const DataGridViewAutoSizeRowCriteriaInternal invalidDataGridViewAutoSizeRowCriteriaInternalMask = ~(DataGridViewAutoSizeRowCriteriaInternal.Header | DataGridViewAutoSizeRowCriteriaInternal.AllColumns);

		// Token: 0x040018A1 RID: 6305
		private const int minimumRowHeadersWidth = 4;

		// Token: 0x040018A2 RID: 6306
		private const int minimumColumnHeadersHeight = 4;

		// Token: 0x040018A3 RID: 6307
		private const int defaultRowHeadersWidth = 41;

		// Token: 0x040018A4 RID: 6308
		private const int maxHeadersThickness = 32768;

		// Token: 0x040018A5 RID: 6309
		private const int upperSize = 8388607;

		// Token: 0x040018A6 RID: 6310
		private const int defaultColumnHeadersHeight = 23;

		// Token: 0x040018A7 RID: 6311
		private const int maxTTDISPINFOBufferLength = 80;

		// Token: 0x040018A8 RID: 6312
		private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTOADDROWSCHANGED = new object();

		// Token: 0x040018A9 RID: 6313
		private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTODELETEROWSCHANGED = new object();

		// Token: 0x040018AA RID: 6314
		private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTOORDERCOLUMNSCHANGED = new object();

		// Token: 0x040018AB RID: 6315
		private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTORESIZECOLUMNSCHANGED = new object();

		// Token: 0x040018AC RID: 6316
		private static readonly object EVENT_DATAGRIDVIEWALLOWUSERTORESIZEROWSCHANGED = new object();

		// Token: 0x040018AD RID: 6317
		private static readonly object EVENT_DATAGRIDVIEWALTERNATINGROWSDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x040018AE RID: 6318
		private static readonly object EVENT_DATAGRIDVIEWAUTOGENERATECOLUMNSCHANGED = new object();

		// Token: 0x040018AF RID: 6319
		private static readonly object EVENT_DATAGRIDVIEWAUTOSIZECOLUMNMODECHANGED = new object();

		// Token: 0x040018B0 RID: 6320
		private static readonly object EVENT_DATAGRIDVIEWAUTOSIZECOLUMNSMODECHANGED = new object();

		// Token: 0x040018B1 RID: 6321
		private static readonly object EVENT_DATAGRIDVIEWAUTOSIZEROWSMODECHANGED = new object();

		// Token: 0x040018B2 RID: 6322
		private static readonly object EVENT_DATAGRIDVIEWBACKGROUNDCOLORCHANGED = new object();

		// Token: 0x040018B3 RID: 6323
		private static readonly object EVENT_DATAGRIDVIEWBORDERSTYLECHANGED = new object();

		// Token: 0x040018B4 RID: 6324
		private static readonly object EVENT_DATAGRIDVIEWCANCELROWEDIT = new object();

		// Token: 0x040018B5 RID: 6325
		private static readonly object EVENT_DATAGRIDVIEWCELLBEGINEDIT = new object();

		// Token: 0x040018B6 RID: 6326
		private static readonly object EVENT_DATAGRIDVIEWCELLBORDERSTYLECHANGED = new object();

		// Token: 0x040018B7 RID: 6327
		private static readonly object EVENT_DATAGRIDVIEWCELLCLICK = new object();

		// Token: 0x040018B8 RID: 6328
		private static readonly object EVENT_DATAGRIDVIEWCELLCONTENTCLICK = new object();

		// Token: 0x040018B9 RID: 6329
		private static readonly object EVENT_DATAGRIDVIEWCELLCONTENTDOUBLECLICK = new object();

		// Token: 0x040018BA RID: 6330
		private static readonly object EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPCHANGED = new object();

		// Token: 0x040018BB RID: 6331
		private static readonly object EVENT_DATAGRIDVIEWCELLCONTEXTMENUSTRIPNEEDED = new object();

		// Token: 0x040018BC RID: 6332
		private static readonly object EVENT_DATAGRIDVIEWCELLDOUBLECLICK = new object();

		// Token: 0x040018BD RID: 6333
		private static readonly object EVENT_DATAGRIDVIEWCELLENDEDIT = new object();

		// Token: 0x040018BE RID: 6334
		private static readonly object EVENT_DATAGRIDVIEWCELLENTER = new object();

		// Token: 0x040018BF RID: 6335
		private static readonly object EVENT_DATAGRIDVIEWCELLERRORTEXTCHANGED = new object();

		// Token: 0x040018C0 RID: 6336
		private static readonly object EVENT_DATAGRIDVIEWCELLERRORTEXTNEEDED = new object();

		// Token: 0x040018C1 RID: 6337
		private static readonly object EVENT_DATAGRIDVIEWCELLFORMATTING = new object();

		// Token: 0x040018C2 RID: 6338
		private static readonly object EVENT_DATAGRIDVIEWCELLLEAVE = new object();

		// Token: 0x040018C3 RID: 6339
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSECLICK = new object();

		// Token: 0x040018C4 RID: 6340
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEDOUBLECLICK = new object();

		// Token: 0x040018C5 RID: 6341
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEDOWN = new object();

		// Token: 0x040018C6 RID: 6342
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEENTER = new object();

		// Token: 0x040018C7 RID: 6343
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSELEAVE = new object();

		// Token: 0x040018C8 RID: 6344
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEMOVE = new object();

		// Token: 0x040018C9 RID: 6345
		private static readonly object EVENT_DATAGRIDVIEWCELLMOUSEUP = new object();

		// Token: 0x040018CA RID: 6346
		private static readonly object EVENT_DATAGRIDVIEWCELLPAINTING = new object();

		// Token: 0x040018CB RID: 6347
		private static readonly object EVENT_DATAGRIDVIEWCELLPARSING = new object();

		// Token: 0x040018CC RID: 6348
		private static readonly object EVENT_DATAGRIDVIEWCELLSTATECHANGED = new object();

		// Token: 0x040018CD RID: 6349
		private static readonly object EVENT_DATAGRIDVIEWCELLSTYLECHANGED = new object();

		// Token: 0x040018CE RID: 6350
		private static readonly object EVENT_DATAGRIDVIEWCELLSTYLECONTENTCHANGED = new object();

		// Token: 0x040018CF RID: 6351
		private static readonly object EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTCHANGED = new object();

		// Token: 0x040018D0 RID: 6352
		private static readonly object EVENT_DATAGRIDVIEWCELLTOOLTIPTEXTNEEDED = new object();

		// Token: 0x040018D1 RID: 6353
		private static readonly object EVENT_DATAGRIDVIEWCELLVALIDATING = new object();

		// Token: 0x040018D2 RID: 6354
		private static readonly object EVENT_DATAGRIDVIEWCELLVALIDATED = new object();

		// Token: 0x040018D3 RID: 6355
		private static readonly object EVENT_DATAGRIDVIEWCELLVALUECHANGED = new object();

		// Token: 0x040018D4 RID: 6356
		private static readonly object EVENT_DATAGRIDVIEWCELLVALUENEEDED = new object();

		// Token: 0x040018D5 RID: 6357
		private static readonly object EVENT_DATAGRIDVIEWCELLVALUEPUSHED = new object();

		// Token: 0x040018D6 RID: 6358
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNADDED = new object();

		// Token: 0x040018D7 RID: 6359
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNCONTEXTMENUSTRIPCHANGED = new object();

		// Token: 0x040018D8 RID: 6360
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNDATAPROPERTYNAMECHANGED = new object();

		// Token: 0x040018D9 RID: 6361
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x040018DA RID: 6362
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNDISPLAYINDEXCHANGED = new object();

		// Token: 0x040018DB RID: 6363
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNDIVIDERWIDTHCHANGED = new object();

		// Token: 0x040018DC RID: 6364
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERCELLCHANGED = new object();

		// Token: 0x040018DD RID: 6365
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNDIVIDERDOUBLECLICK = new object();

		// Token: 0x040018DE RID: 6366
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSECLICK = new object();

		// Token: 0x040018DF RID: 6367
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERMOUSEDOUBLECLICK = new object();

		// Token: 0x040018E0 RID: 6368
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERSBORDERSTYLECHANGED = new object();

		// Token: 0x040018E1 RID: 6369
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERSDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x040018E2 RID: 6370
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTCHANGED = new object();

		// Token: 0x040018E3 RID: 6371
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNHEADERSHEIGHTSIZEMODECHANGED = new object();

		// Token: 0x040018E4 RID: 6372
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNMINIMUMWIDTHCHANGED = new object();

		// Token: 0x040018E5 RID: 6373
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNNAMECHANGED = new object();

		// Token: 0x040018E6 RID: 6374
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNREMOVED = new object();

		// Token: 0x040018E7 RID: 6375
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNSORTMODECHANGED = new object();

		// Token: 0x040018E8 RID: 6376
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNSTATECHANGED = new object();

		// Token: 0x040018E9 RID: 6377
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNTOOLTIPTEXTCHANGED = new object();

		// Token: 0x040018EA RID: 6378
		private static readonly object EVENT_DATAGRIDVIEWCOLUMNWIDTHCHANGED = new object();

		// Token: 0x040018EB RID: 6379
		private static readonly object EVENT_DATAGRIDVIEWCURRENTCELLCHANGED = new object();

		// Token: 0x040018EC RID: 6380
		private static readonly object EVENT_DATAGRIDVIEWCURRENTCELLDIRTYSTATECHANGED = new object();

		// Token: 0x040018ED RID: 6381
		private static readonly object EVENT_DATAGRIDVIEWDATABINDINGCOMPLETE = new object();

		// Token: 0x040018EE RID: 6382
		private static readonly object EVENT_DATAGRIDVIEWDATAERROR = new object();

		// Token: 0x040018EF RID: 6383
		private static readonly object EVENT_DATAGRIDVIEWDATAMEMBERCHANGED = new object();

		// Token: 0x040018F0 RID: 6384
		private static readonly object EVENT_DATAGRIDVIEWDATASOURCECHANGED = new object();

		// Token: 0x040018F1 RID: 6385
		private static readonly object EVENT_DATAGRIDVIEWDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x040018F2 RID: 6386
		private static readonly object EVENT_DATAGRIDVIEWDEFAULTVALUESNEEDED = new object();

		// Token: 0x040018F3 RID: 6387
		private static readonly object EVENT_DATAGRIDVIEWEDITINGCONTROLSHOWING = new object();

		// Token: 0x040018F4 RID: 6388
		private static readonly object EVENT_DATAGRIDVIEWEDITMODECHANGED = new object();

		// Token: 0x040018F5 RID: 6389
		private static readonly object EVENT_DATAGRIDVIEWGRIDCOLORCHANGED = new object();

		// Token: 0x040018F6 RID: 6390
		private static readonly object EVENT_DATAGRIDVIEWMULTISELECTCHANGED = new object();

		// Token: 0x040018F7 RID: 6391
		private static readonly object EVENT_DATAGRIDVIEWNEWROWNEEDED = new object();

		// Token: 0x040018F8 RID: 6392
		private static readonly object EVENT_DATAGRIDVIEWREADONLYCHANGED = new object();

		// Token: 0x040018F9 RID: 6393
		private static readonly object EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPCHANGED = new object();

		// Token: 0x040018FA RID: 6394
		private static readonly object EVENT_DATAGRIDVIEWROWCONTEXTMENUSTRIPNEEDED = new object();

		// Token: 0x040018FB RID: 6395
		private static readonly object EVENT_DATAGRIDVIEWROWDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x040018FC RID: 6396
		private static readonly object EVENT_DATAGRIDVIEWROWDIRTYSTATENEEDED = new object();

		// Token: 0x040018FD RID: 6397
		private static readonly object EVENT_DATAGRIDVIEWROWDIVIDERHEIGHTCHANGED = new object();

		// Token: 0x040018FE RID: 6398
		private static readonly object EVENT_DATAGRIDVIEWROWENTER = new object();

		// Token: 0x040018FF RID: 6399
		private static readonly object EVENT_DATAGRIDVIEWROWERRORTEXTCHANGED = new object();

		// Token: 0x04001900 RID: 6400
		private static readonly object EVENT_DATAGRIDVIEWROWERRORTEXTNEEDED = new object();

		// Token: 0x04001901 RID: 6401
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERCELLCHANGED = new object();

		// Token: 0x04001902 RID: 6402
		private static readonly object EVENT_DATAGRIDVIEWROWDIVIDERDOUBLECLICK = new object();

		// Token: 0x04001903 RID: 6403
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERMOUSECLICK = new object();

		// Token: 0x04001904 RID: 6404
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERMOUSEDOUBLECLICK = new object();

		// Token: 0x04001905 RID: 6405
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERSBORDERSTYLECHANGED = new object();

		// Token: 0x04001906 RID: 6406
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERSDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x04001907 RID: 6407
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERSWIDTHCHANGED = new object();

		// Token: 0x04001908 RID: 6408
		private static readonly object EVENT_DATAGRIDVIEWROWHEADERSWIDTHSIZEMODECHANGED = new object();

		// Token: 0x04001909 RID: 6409
		private static readonly object EVENT_DATAGRIDVIEWROWHEIGHTCHANGED = new object();

		// Token: 0x0400190A RID: 6410
		private static readonly object EVENT_DATAGRIDVIEWROWHEIGHTINFONEEDED = new object();

		// Token: 0x0400190B RID: 6411
		private static readonly object EVENT_DATAGRIDVIEWROWHEIGHTINFOPUSHED = new object();

		// Token: 0x0400190C RID: 6412
		private static readonly object EVENT_DATAGRIDVIEWROWLEAVE = new object();

		// Token: 0x0400190D RID: 6413
		private static readonly object EVENT_DATAGRIDVIEWROWMINIMUMHEIGHTCHANGED = new object();

		// Token: 0x0400190E RID: 6414
		private static readonly object EVENT_DATAGRIDVIEWROWPOSTPAINT = new object();

		// Token: 0x0400190F RID: 6415
		private static readonly object EVENT_DATAGRIDVIEWROWPREPAINT = new object();

		// Token: 0x04001910 RID: 6416
		private static readonly object EVENT_DATAGRIDVIEWROWSADDED = new object();

		// Token: 0x04001911 RID: 6417
		private static readonly object EVENT_DATAGRIDVIEWROWSDEFAULTCELLSTYLECHANGED = new object();

		// Token: 0x04001912 RID: 6418
		private static readonly object EVENT_DATAGRIDVIEWROWSREMOVED = new object();

		// Token: 0x04001913 RID: 6419
		private static readonly object EVENT_DATAGRIDVIEWROWSTATECHANGED = new object();

		// Token: 0x04001914 RID: 6420
		private static readonly object EVENT_DATAGRIDVIEWROWUNSHARED = new object();

		// Token: 0x04001915 RID: 6421
		private static readonly object EVENT_DATAGRIDVIEWROWVALIDATED = new object();

		// Token: 0x04001916 RID: 6422
		private static readonly object EVENT_DATAGRIDVIEWROWVALIDATING = new object();

		// Token: 0x04001917 RID: 6423
		private static readonly object EVENT_DATAGRIDVIEWSCROLL = new object();

		// Token: 0x04001918 RID: 6424
		private static readonly object EVENT_DATAGRIDVIEWSELECTIONCHANGED = new object();

		// Token: 0x04001919 RID: 6425
		private static readonly object EVENT_DATAGRIDVIEWSORTCOMPARE = new object();

		// Token: 0x0400191A RID: 6426
		private static readonly object EVENT_DATAGRIDVIEWSORTED = new object();

		// Token: 0x0400191B RID: 6427
		private static readonly object EVENT_DATAGRIDVIEWUSERADDEDROW = new object();

		// Token: 0x0400191C RID: 6428
		private static readonly object EVENT_DATAGRIDVIEWUSERDELETEDROW = new object();

		// Token: 0x0400191D RID: 6429
		private static readonly object EVENT_DATAGRIDVIEWUSERDELETINGROW = new object();

		// Token: 0x0400191E RID: 6430
		private static Size DragSize = SystemInformation.DragSize;

		// Token: 0x0400191F RID: 6431
		private BitVector32 dataGridViewState1;

		// Token: 0x04001920 RID: 6432
		private BitVector32 dataGridViewState2;

		// Token: 0x04001921 RID: 6433
		private BitVector32 dataGridViewOper;

		// Token: 0x04001922 RID: 6434
		private SolidBrush backgroundBrush = DataGridView.DefaultBackgroundBrush;

		// Token: 0x04001923 RID: 6435
		private Pen gridPen;

		// Token: 0x04001924 RID: 6436
		private Cursor oldCursor;

		// Token: 0x04001925 RID: 6437
		private HScrollBar horizScrollBar = new HScrollBar();

		// Token: 0x04001926 RID: 6438
		private VScrollBar vertScrollBar = new VScrollBar();

		// Token: 0x04001927 RID: 6439
		private DataGridViewHeaderCell topLeftHeaderCell;

		// Token: 0x04001928 RID: 6440
		private DataGridViewRow rowTemplate;

		// Token: 0x04001929 RID: 6441
		private DataGridViewRowCollection dataGridViewRows;

		// Token: 0x0400192A RID: 6442
		private DataGridViewColumnCollection dataGridViewColumns;

		// Token: 0x0400192B RID: 6443
		private DataGridViewCellStyle placeholderCellStyle;

		// Token: 0x0400192C RID: 6444
		private StringFormat placeholderStringFormat;

		// Token: 0x0400192D RID: 6445
		private DataGridViewColumn sortedColumn;

		// Token: 0x0400192E RID: 6446
		private SortOrder sortOrder;

		// Token: 0x0400192F RID: 6447
		private object uneditedFormattedValue;

		// Token: 0x04001930 RID: 6448
		private Control editingControl;

		// Token: 0x04001931 RID: 6449
		private Control latestEditingControl;

		// Token: 0x04001932 RID: 6450
		private Control cachedEditingControl;

		// Token: 0x04001933 RID: 6451
		private Panel editingPanel;

		// Token: 0x04001934 RID: 6452
		private Point ptCurrentCell;

		// Token: 0x04001935 RID: 6453
		private Point ptCurrentCellCache = Point.Empty;

		// Token: 0x04001936 RID: 6454
		private Point ptAnchorCell;

		// Token: 0x04001937 RID: 6455
		private Point ptMouseDownCell;

		// Token: 0x04001938 RID: 6456
		private Point ptMouseEnteredCell;

		// Token: 0x04001939 RID: 6457
		private Point ptToolTipCell;

		// Token: 0x0400193A RID: 6458
		private Point ptMouseDownGridCoord;

		// Token: 0x0400193B RID: 6459
		private DataGridViewSelectionMode selectionMode;

		// Token: 0x0400193C RID: 6460
		private DataGridViewEditMode editMode;

		// Token: 0x0400193D RID: 6461
		private DataGridViewCellLinkedList individualSelectedCells;

		// Token: 0x0400193E RID: 6462
		private DataGridViewCellLinkedList individualReadOnlyCells;

		// Token: 0x0400193F RID: 6463
		private DataGridViewIntLinkedList selectedBandIndexes;

		// Token: 0x04001940 RID: 6464
		private DataGridViewIntLinkedList selectedBandSnapshotIndexes;

		// Token: 0x04001941 RID: 6465
		private DataGridViewCellStyle defaultCellStyle;

		// Token: 0x04001942 RID: 6466
		private DataGridViewCellStyle columnHeadersDefaultCellStyle;

		// Token: 0x04001943 RID: 6467
		private DataGridViewCellStyle rowHeadersDefaultCellStyle;

		// Token: 0x04001944 RID: 6468
		private DataGridViewCellStyle rowsDefaultCellStyle;

		// Token: 0x04001945 RID: 6469
		private DataGridViewCellStyle alternatingRowsDefaultCellStyle;

		// Token: 0x04001946 RID: 6470
		private ScrollBars scrollBars;

		// Token: 0x04001947 RID: 6471
		private DataGridView.LayoutData layout;

		// Token: 0x04001948 RID: 6472
		private DataGridView.DisplayedBandsData displayedBandsInfo;

		// Token: 0x04001949 RID: 6473
		private Rectangle normalClientRectangle;

		// Token: 0x0400194A RID: 6474
		private ArrayList lstRows;

		// Token: 0x0400194B RID: 6475
		private int availableWidthForFillColumns;

		// Token: 0x0400194C RID: 6476
		private BorderStyle borderStyle;

		// Token: 0x0400194D RID: 6477
		private DataGridViewAdvancedBorderStyle advancedCellBorderStyle;

		// Token: 0x0400194E RID: 6478
		private DataGridViewAdvancedBorderStyle advancedRowHeadersBorderStyle;

		// Token: 0x0400194F RID: 6479
		private DataGridViewAdvancedBorderStyle advancedColumnHeadersBorderStyle;

		// Token: 0x04001950 RID: 6480
		private DataGridViewClipboardCopyMode clipboardCopyMode;

		// Token: 0x04001951 RID: 6481
		private int rowHeadersWidth = 41;

		// Token: 0x04001952 RID: 6482
		private int cachedRowHeadersWidth;

		// Token: 0x04001953 RID: 6483
		private int columnHeadersHeight = 23;

		// Token: 0x04001954 RID: 6484
		private int cachedColumnHeadersHeight;

		// Token: 0x04001955 RID: 6485
		private DataGridViewAutoSizeRowsMode autoSizeRowsMode;

		// Token: 0x04001956 RID: 6486
		private DataGridViewAutoSizeColumnsMode autoSizeColumnsMode;

		// Token: 0x04001957 RID: 6487
		private DataGridViewColumnHeadersHeightSizeMode columnHeadersHeightSizeMode;

		// Token: 0x04001958 RID: 6488
		private DataGridViewRowHeadersWidthSizeMode rowHeadersWidthSizeMode;

		// Token: 0x04001959 RID: 6489
		private DataGridViewCellStyleChangedEventArgs dgvcsce;

		// Token: 0x0400195A RID: 6490
		private DataGridViewCellPaintingEventArgs dgvcpe;

		// Token: 0x0400195B RID: 6491
		private DataGridViewCellValueEventArgs dgvcve;

		// Token: 0x0400195C RID: 6492
		private DataGridViewRowHeightInfoNeededEventArgs dgvrhine;

		// Token: 0x0400195D RID: 6493
		private DataGridViewRowPostPaintEventArgs dgvrpope;

		// Token: 0x0400195E RID: 6494
		private DataGridViewRowPrePaintEventArgs dgvrprpe;

		// Token: 0x0400195F RID: 6495
		private int horizontalOffset;

		// Token: 0x04001960 RID: 6496
		private int verticalOffset;

		// Token: 0x04001961 RID: 6497
		private int negOffset;

		// Token: 0x04001962 RID: 6498
		private int newRowIndex = -1;

		// Token: 0x04001963 RID: 6499
		private int cumulativeVerticalWheelDelta;

		// Token: 0x04001964 RID: 6500
		private int cumulativeHorizontalWheelDelta;

		// Token: 0x04001965 RID: 6501
		private int trackColAnchor;

		// Token: 0x04001966 RID: 6502
		private int trackColumn = -1;

		// Token: 0x04001967 RID: 6503
		private int trackColumnEdge = -1;

		// Token: 0x04001968 RID: 6504
		private int trackRowAnchor;

		// Token: 0x04001969 RID: 6505
		private int trackRow = -1;

		// Token: 0x0400196A RID: 6506
		private int trackRowEdge = -1;

		// Token: 0x0400196B RID: 6507
		private int lastHeaderShadow = -1;

		// Token: 0x0400196C RID: 6508
		private int currentColSplitBar = -1;

		// Token: 0x0400196D RID: 6509
		private int lastColSplitBar = -1;

		// Token: 0x0400196E RID: 6510
		private int currentRowSplitBar = -1;

		// Token: 0x0400196F RID: 6511
		private int lastRowSplitBar = -1;

		// Token: 0x04001970 RID: 6512
		private int mouseBarOffset;

		// Token: 0x04001971 RID: 6513
		private int noDimensionChangeCount;

		// Token: 0x04001972 RID: 6514
		private int noSelectionChangeCount;

		// Token: 0x04001973 RID: 6515
		private int noAutoSizeCount;

		// Token: 0x04001974 RID: 6516
		private int inBulkPaintCount;

		// Token: 0x04001975 RID: 6517
		private int inBulkLayoutCount;

		// Token: 0x04001976 RID: 6518
		private int inPerformLayoutCount;

		// Token: 0x04001977 RID: 6519
		private Timer vertScrollTimer;

		// Token: 0x04001978 RID: 6520
		private Timer horizScrollTimer;

		// Token: 0x04001979 RID: 6521
		private Hashtable converters;

		// Token: 0x0400197A RID: 6522
		private Hashtable pens;

		// Token: 0x0400197B RID: 6523
		private Hashtable brushes;

		// Token: 0x0400197C RID: 6524
		private NativeMethods.RECT[] cachedScrollableRegion;

		// Token: 0x0400197D RID: 6525
		private DataGridView.DataGridViewDataConnection dataConnection;

		// Token: 0x0400197E RID: 6526
		private DataGridView.DataGridViewToolTip toolTipControl;

		// Token: 0x0400197F RID: 6527
		private string toolTipCaption = string.Empty;

		// Token: 0x04001980 RID: 6528
		private DataGridView.MouseClickInfo lastMouseClickInfo;

		// Token: 0x020002EA RID: 746
		internal enum DataGridViewHitTestTypeInternal
		{
			// Token: 0x04001982 RID: 6530
			None,
			// Token: 0x04001983 RID: 6531
			Cell,
			// Token: 0x04001984 RID: 6532
			ColumnHeader,
			// Token: 0x04001985 RID: 6533
			RowHeader,
			// Token: 0x04001986 RID: 6534
			ColumnResizeLeft,
			// Token: 0x04001987 RID: 6535
			ColumnResizeRight,
			// Token: 0x04001988 RID: 6536
			RowResizeTop,
			// Token: 0x04001989 RID: 6537
			RowResizeBottom,
			// Token: 0x0400198A RID: 6538
			FirstColumnHeaderLeft,
			// Token: 0x0400198B RID: 6539
			TopLeftHeader,
			// Token: 0x0400198C RID: 6540
			TopLeftHeaderResizeLeft,
			// Token: 0x0400198D RID: 6541
			TopLeftHeaderResizeRight,
			// Token: 0x0400198E RID: 6542
			TopLeftHeaderResizeTop,
			// Token: 0x0400198F RID: 6543
			TopLeftHeaderResizeBottom,
			// Token: 0x04001990 RID: 6544
			ColumnHeadersResizeBottom,
			// Token: 0x04001991 RID: 6545
			ColumnHeadersResizeTop,
			// Token: 0x04001992 RID: 6546
			RowHeadersResizeRight,
			// Token: 0x04001993 RID: 6547
			RowHeadersResizeLeft,
			// Token: 0x04001994 RID: 6548
			ColumnHeaderLeft,
			// Token: 0x04001995 RID: 6549
			ColumnHeaderRight
		}

		// Token: 0x020002EB RID: 747
		internal enum DataGridViewValidateCellInternal
		{
			// Token: 0x04001997 RID: 6551
			Never,
			// Token: 0x04001998 RID: 6552
			Always,
			// Token: 0x04001999 RID: 6553
			WhenChanged
		}

		// Token: 0x020002EC RID: 748
		private enum DataGridViewMouseEvent
		{
			// Token: 0x0400199B RID: 6555
			Click,
			// Token: 0x0400199C RID: 6556
			DoubleClick,
			// Token: 0x0400199D RID: 6557
			MouseClick,
			// Token: 0x0400199E RID: 6558
			MouseDoubleClick,
			// Token: 0x0400199F RID: 6559
			MouseDown,
			// Token: 0x040019A0 RID: 6560
			MouseUp,
			// Token: 0x040019A1 RID: 6561
			MouseMove
		}

		// Token: 0x020002ED RID: 749
		private struct MouseClickInfo
		{
			// Token: 0x040019A2 RID: 6562
			public MouseButtons button;

			// Token: 0x040019A3 RID: 6563
			public long timeStamp;

			// Token: 0x040019A4 RID: 6564
			public int x;

			// Token: 0x040019A5 RID: 6565
			public int y;

			// Token: 0x040019A6 RID: 6566
			public int col;

			// Token: 0x040019A7 RID: 6567
			public int row;
		}

		// Token: 0x020002EE RID: 750
		[ComVisible(true)]
		protected class DataGridViewAccessibleObject : Control.ControlAccessibleObject
		{
			// Token: 0x06003098 RID: 12440 RVA: 0x000A62C7 File Offset: 0x000A52C7
			public DataGridViewAccessibleObject(DataGridView owner)
				: base(owner)
			{
				this.owner = owner;
			}

			// Token: 0x17000822 RID: 2082
			// (get) Token: 0x06003099 RID: 12441 RVA: 0x000A62D8 File Offset: 0x000A52D8
			public override string Name
			{
				get
				{
					string accessibleName = base.Owner.AccessibleName;
					if (!string.IsNullOrEmpty(accessibleName))
					{
						return accessibleName;
					}
					return "DataGridView";
				}
			}

			// Token: 0x17000823 RID: 2083
			// (get) Token: 0x0600309A RID: 12442 RVA: 0x000A6300 File Offset: 0x000A5300
			public override AccessibleRole Role
			{
				get
				{
					AccessibleRole accessibleRole = this.owner.AccessibleRole;
					if (accessibleRole != AccessibleRole.Default)
					{
						return accessibleRole;
					}
					return AccessibleRole.Table;
				}
			}

			// Token: 0x17000824 RID: 2084
			// (get) Token: 0x0600309B RID: 12443 RVA: 0x000A6321 File Offset: 0x000A5321
			private AccessibleObject TopRowAccessibilityObject
			{
				get
				{
					if (this.topRowAccessibilityObject == null)
					{
						this.topRowAccessibilityObject = new DataGridView.DataGridViewTopRowAccessibleObject(this.owner);
					}
					return this.topRowAccessibilityObject;
				}
			}

			// Token: 0x17000825 RID: 2085
			// (get) Token: 0x0600309C RID: 12444 RVA: 0x000A6342 File Offset: 0x000A5342
			private AccessibleObject SelectedCellsAccessibilityObject
			{
				get
				{
					if (this.selectedCellsAccessibilityObject == null)
					{
						this.selectedCellsAccessibilityObject = new DataGridView.DataGridViewSelectedCellsAccessibleObject(this.owner);
					}
					return this.selectedCellsAccessibilityObject;
				}
			}

			// Token: 0x0600309D RID: 12445 RVA: 0x000A6364 File Offset: 0x000A5364
			public override AccessibleObject GetChild(int index)
			{
				if (this.owner.Columns.Count == 0)
				{
					return null;
				}
				if (index < 1 && this.owner.ColumnHeadersVisible)
				{
					return this.TopRowAccessibilityObject;
				}
				if (this.owner.ColumnHeadersVisible)
				{
					index--;
				}
				if (index < this.owner.Rows.GetRowCount(DataGridViewElementStates.Visible))
				{
					int num = this.owner.Rows.DisplayIndexToRowIndex(index);
					return this.owner.Rows[num].AccessibilityObject;
				}
				index -= this.owner.Rows.GetRowCount(DataGridViewElementStates.Visible);
				if (this.owner.horizScrollBar.Visible)
				{
					if (index == 0)
					{
						return this.owner.horizScrollBar.AccessibilityObject;
					}
					index--;
				}
				if (this.owner.vertScrollBar.Visible && index == 0)
				{
					return this.owner.vertScrollBar.AccessibilityObject;
				}
				return null;
			}

			// Token: 0x0600309E RID: 12446 RVA: 0x000A6458 File Offset: 0x000A5458
			public override int GetChildCount()
			{
				if (this.owner.Columns.Count == 0)
				{
					return 0;
				}
				int num = this.owner.Rows.GetRowCount(DataGridViewElementStates.Visible);
				if (this.owner.ColumnHeadersVisible)
				{
					num++;
				}
				if (this.owner.horizScrollBar.Visible)
				{
					num++;
				}
				if (this.owner.vertScrollBar.Visible)
				{
					num++;
				}
				return num;
			}

			// Token: 0x0600309F RID: 12447 RVA: 0x000A64CA File Offset: 0x000A54CA
			public override AccessibleObject GetFocused()
			{
				if (this.owner.Focused && this.owner.CurrentCell != null)
				{
					return this.owner.CurrentCell.AccessibilityObject;
				}
				return null;
			}

			// Token: 0x060030A0 RID: 12448 RVA: 0x000A64F8 File Offset: 0x000A54F8
			public override AccessibleObject GetSelected()
			{
				return this.SelectedCellsAccessibilityObject;
			}

			// Token: 0x060030A1 RID: 12449 RVA: 0x000A6500 File Offset: 0x000A5500
			public override AccessibleObject HitTest(int x, int y)
			{
				Point point = this.owner.PointToClient(new Point(x, y));
				DataGridView.HitTestInfo hitTestInfo = this.owner.HitTest(point.X, point.Y);
				switch (hitTestInfo.Type)
				{
				case DataGridViewHitTestType.Cell:
					return this.owner.Rows[hitTestInfo.RowIndex].Cells[hitTestInfo.ColumnIndex].AccessibilityObject;
				case DataGridViewHitTestType.ColumnHeader:
				{
					int num = this.owner.Columns.ColumnIndexToActualDisplayIndex(hitTestInfo.ColumnIndex, DataGridViewElementStates.Visible);
					if (this.owner.RowHeadersVisible)
					{
						return this.TopRowAccessibilityObject.GetChild(num + 1);
					}
					return this.TopRowAccessibilityObject.GetChild(num);
				}
				case DataGridViewHitTestType.RowHeader:
					return this.owner.Rows[hitTestInfo.RowIndex].AccessibilityObject;
				case DataGridViewHitTestType.TopLeftHeader:
					return this.owner.TopLeftHeaderCell.AccessibilityObject;
				case DataGridViewHitTestType.HorizontalScrollBar:
					return this.owner.HorizontalScrollBar.AccessibilityObject;
				case DataGridViewHitTestType.VerticalScrollBar:
					return this.owner.VerticalScrollBar.AccessibilityObject;
				default:
					return null;
				}
			}

			// Token: 0x060030A2 RID: 12450 RVA: 0x000A6624 File Offset: 0x000A5624
			[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			public override AccessibleObject Navigate(AccessibleNavigation navigationDirection)
			{
				switch (navigationDirection)
				{
				case AccessibleNavigation.FirstChild:
					return this.GetChild(0);
				case AccessibleNavigation.LastChild:
					return this.GetChild(this.GetChildCount() - 1);
				default:
					return null;
				}
			}

			// Token: 0x040019A8 RID: 6568
			private DataGridView owner;

			// Token: 0x040019A9 RID: 6569
			private DataGridView.DataGridViewTopRowAccessibleObject topRowAccessibilityObject;

			// Token: 0x040019AA RID: 6570
			private DataGridView.DataGridViewSelectedCellsAccessibleObject selectedCellsAccessibilityObject;
		}

		// Token: 0x020002EF RID: 751
		[ComVisible(false)]
		public class DataGridViewControlCollection : Control.ControlCollection
		{
			// Token: 0x060030A3 RID: 12451 RVA: 0x000A665D File Offset: 0x000A565D
			public DataGridViewControlCollection(DataGridView owner)
				: base(owner)
			{
				this.owner = owner;
			}

			// Token: 0x060030A4 RID: 12452 RVA: 0x000A666D File Offset: 0x000A566D
			public void CopyTo(Control[] array, int index)
			{
				base.CopyTo(array, index);
			}

			// Token: 0x060030A5 RID: 12453 RVA: 0x000A6677 File Offset: 0x000A5677
			public void Insert(int index, Control value)
			{
				((IList)this).Insert(index, value);
			}

			// Token: 0x060030A6 RID: 12454 RVA: 0x000A6681 File Offset: 0x000A5681
			public override void Remove(Control value)
			{
				if (value != this.owner.horizScrollBar && value != this.owner.vertScrollBar && value != this.owner.editingPanel)
				{
					base.Remove(value);
				}
			}

			// Token: 0x060030A7 RID: 12455 RVA: 0x000A66B4 File Offset: 0x000A56B4
			internal void RemoveInternal(Control value)
			{
				base.Remove(value);
			}

			// Token: 0x060030A8 RID: 12456 RVA: 0x000A66C0 File Offset: 0x000A56C0
			public override void Clear()
			{
				for (int i = 0; i < this.Count; i++)
				{
					if (this[i] != this.owner.horizScrollBar && this[i] != this.owner.vertScrollBar && this[i] != this.owner.editingPanel)
					{
						this.Remove(this[i]);
					}
				}
			}

			// Token: 0x040019AB RID: 6571
			private DataGridView owner;
		}

		// Token: 0x020002F0 RID: 752
		internal class DataGridViewDataConnection
		{
			// Token: 0x060030A9 RID: 12457 RVA: 0x000A6727 File Offset: 0x000A5727
			public DataGridViewDataConnection(DataGridView owner)
			{
				this.owner = owner;
				this.dataConnectionState = new BitVector32(4);
			}

			// Token: 0x17000826 RID: 2086
			// (get) Token: 0x060030AA RID: 12458 RVA: 0x000A6754 File Offset: 0x000A5754
			public bool AllowAdd
			{
				get
				{
					return this.currencyManager != null && (this.currencyManager.List is IBindingList && this.currencyManager.AllowAdd) && ((IBindingList)this.currencyManager.List).SupportsChangeNotification;
				}
			}

			// Token: 0x17000827 RID: 2087
			// (get) Token: 0x060030AB RID: 12459 RVA: 0x000A67A1 File Offset: 0x000A57A1
			public bool AllowEdit
			{
				get
				{
					return this.currencyManager != null && this.currencyManager.AllowEdit;
				}
			}

			// Token: 0x17000828 RID: 2088
			// (get) Token: 0x060030AC RID: 12460 RVA: 0x000A67B8 File Offset: 0x000A57B8
			public bool AllowRemove
			{
				get
				{
					return this.currencyManager != null && (this.currencyManager.List is IBindingList && this.currencyManager.AllowRemove) && ((IBindingList)this.currencyManager.List).SupportsChangeNotification;
				}
			}

			// Token: 0x17000829 RID: 2089
			// (get) Token: 0x060030AD RID: 12461 RVA: 0x000A6805 File Offset: 0x000A5805
			public bool CancellingRowEdit
			{
				get
				{
					return this.dataConnectionState[64];
				}
			}

			// Token: 0x1700082A RID: 2090
			// (get) Token: 0x060030AE RID: 12462 RVA: 0x000A6814 File Offset: 0x000A5814
			public CurrencyManager CurrencyManager
			{
				get
				{
					return this.currencyManager;
				}
			}

			// Token: 0x1700082B RID: 2091
			// (get) Token: 0x060030AF RID: 12463 RVA: 0x000A681C File Offset: 0x000A581C
			public string DataMember
			{
				get
				{
					return this.dataMember;
				}
			}

			// Token: 0x1700082C RID: 2092
			// (get) Token: 0x060030B0 RID: 12464 RVA: 0x000A6824 File Offset: 0x000A5824
			public object DataSource
			{
				get
				{
					return this.dataSource;
				}
			}

			// Token: 0x1700082D RID: 2093
			// (get) Token: 0x060030B1 RID: 12465 RVA: 0x000A682C File Offset: 0x000A582C
			// (set) Token: 0x060030B2 RID: 12466 RVA: 0x000A683B File Offset: 0x000A583B
			public bool DoNotChangePositionInTheCurrencyManager
			{
				get
				{
					return this.dataConnectionState[16];
				}
				set
				{
					this.dataConnectionState[16] = value;
				}
			}

			// Token: 0x1700082E RID: 2094
			// (get) Token: 0x060030B3 RID: 12467 RVA: 0x000A684B File Offset: 0x000A584B
			public bool InterestedInRowEvents
			{
				get
				{
					return this.dataConnectionState[32];
				}
			}

			// Token: 0x1700082F RID: 2095
			// (get) Token: 0x060030B4 RID: 12468 RVA: 0x000A685A File Offset: 0x000A585A
			public IList List
			{
				get
				{
					if (this.currencyManager != null)
					{
						return this.currencyManager.List;
					}
					return null;
				}
			}

			// Token: 0x17000830 RID: 2096
			// (get) Token: 0x060030B5 RID: 12469 RVA: 0x000A6871 File Offset: 0x000A5871
			public bool ListWasReset
			{
				get
				{
					return this.dataConnectionState[1024];
				}
			}

			// Token: 0x17000831 RID: 2097
			// (get) Token: 0x060030B6 RID: 12470 RVA: 0x000A6883 File Offset: 0x000A5883
			public bool PositionChangingOutsideDataGridView
			{
				get
				{
					return !this.dataConnectionState[8] && this.dataConnectionState[2048];
				}
			}

			// Token: 0x17000832 RID: 2098
			// (get) Token: 0x060030B7 RID: 12471 RVA: 0x000A68A5 File Offset: 0x000A58A5
			public bool ProcessingListChangedEvent
			{
				get
				{
					return this.dataConnectionState[131072];
				}
			}

			// Token: 0x17000833 RID: 2099
			// (get) Token: 0x060030B8 RID: 12472 RVA: 0x000A68B7 File Offset: 0x000A58B7
			public bool ProcessingMetaDataChanges
			{
				get
				{
					return this.dataConnectionState[2];
				}
			}

			// Token: 0x17000834 RID: 2100
			// (get) Token: 0x060030B9 RID: 12473 RVA: 0x000A68C5 File Offset: 0x000A58C5
			public bool RestoreRow
			{
				get
				{
					return this.dataConnectionState[128];
				}
			}

			// Token: 0x060030BA RID: 12474 RVA: 0x000A68D8 File Offset: 0x000A58D8
			public void AddNew()
			{
				if (this.currencyManager != null)
				{
					if (!this.currencyManager.ShouldBind)
					{
						return;
					}
					this.dataConnectionState[4] = false;
					this.dataConnectionState[32768] = true;
					try
					{
						this.currencyManager.EndCurrentEdit();
					}
					finally
					{
						this.dataConnectionState[32768] = false;
					}
					this.dataConnectionState[512] = true;
					try
					{
						this.currencyManager.AddNew();
					}
					finally
					{
						this.dataConnectionState[512] = false;
					}
				}
			}

			// Token: 0x060030BB RID: 12475 RVA: 0x000A6984 File Offset: 0x000A5984
			public void ApplySortingInformationFromBackEnd()
			{
				if (this.currencyManager == null)
				{
					return;
				}
				PropertyDescriptor propertyDescriptor = null;
				SortOrder sortOrder;
				this.GetSortingInformationFromBackend(out propertyDescriptor, out sortOrder);
				if (propertyDescriptor == null)
				{
					for (int i = 0; i < this.owner.Columns.Count; i++)
					{
						if (this.owner.Columns[i].IsDataBound)
						{
							this.owner.Columns[i].HeaderCell.SortGlyphDirection = SortOrder.None;
						}
					}
					this.owner.sortedColumn = null;
					this.owner.sortOrder = SortOrder.None;
					return;
				}
				bool flag = false;
				for (int j = 0; j < this.owner.Columns.Count; j++)
				{
					DataGridViewColumn dataGridViewColumn = this.owner.Columns[j];
					if (dataGridViewColumn.IsDataBound && dataGridViewColumn.SortMode != DataGridViewColumnSortMode.NotSortable)
					{
						if (string.Equals(dataGridViewColumn.DataPropertyName, propertyDescriptor.Name, StringComparison.OrdinalIgnoreCase))
						{
							if (!flag && !this.owner.InSortOperation)
							{
								this.owner.sortedColumn = dataGridViewColumn;
								this.owner.sortOrder = sortOrder;
								flag = true;
							}
							dataGridViewColumn.HeaderCell.SortGlyphDirection = sortOrder;
						}
						else
						{
							dataGridViewColumn.HeaderCell.SortGlyphDirection = SortOrder.None;
						}
					}
				}
			}

			// Token: 0x060030BC RID: 12476 RVA: 0x000A6ABA File Offset: 0x000A5ABA
			public TypeConverter BoundColumnConverter(int boundColumnIndex)
			{
				return this.props[boundColumnIndex].Converter;
			}

			// Token: 0x060030BD RID: 12477 RVA: 0x000A6AD0 File Offset: 0x000A5AD0
			public int BoundColumnIndex(string dataPropertyName)
			{
				if (this.props == null)
				{
					return -1;
				}
				int num = -1;
				for (int i = 0; i < this.props.Count; i++)
				{
					if (string.Compare(this.props[i].Name, dataPropertyName, true, CultureInfo.InvariantCulture) == 0)
					{
						num = i;
						break;
					}
				}
				return num;
			}

			// Token: 0x060030BE RID: 12478 RVA: 0x000A6B24 File Offset: 0x000A5B24
			public SortOrder BoundColumnSortOrder(int boundColumnIndex)
			{
				IBindingList bindingList = ((this.currencyManager != null) ? (this.currencyManager.List as IBindingList) : null);
				if (bindingList == null || !bindingList.SupportsSorting || !bindingList.IsSorted)
				{
					return SortOrder.None;
				}
				PropertyDescriptor propertyDescriptor;
				SortOrder sortOrder;
				this.GetSortingInformationFromBackend(out propertyDescriptor, out sortOrder);
				if (sortOrder == SortOrder.None)
				{
					return SortOrder.None;
				}
				if (string.Compare(this.props[boundColumnIndex].Name, propertyDescriptor.Name, true, CultureInfo.InvariantCulture) == 0)
				{
					return sortOrder;
				}
				return SortOrder.None;
			}

			// Token: 0x060030BF RID: 12479 RVA: 0x000A6B98 File Offset: 0x000A5B98
			public Type BoundColumnValueType(int boundColumnIndex)
			{
				return this.props[boundColumnIndex].PropertyType;
			}

			// Token: 0x060030C0 RID: 12480 RVA: 0x000A6BAC File Offset: 0x000A5BAC
			private void currencyManager_ListChanged(object sender, ListChangedEventArgs e)
			{
				this.dataConnectionState[131072] = true;
				try
				{
					this.ProcessListChanged(e);
				}
				finally
				{
					this.dataConnectionState[131072] = false;
				}
				this.owner.OnDataBindingComplete(e.ListChangedType);
				this.lastListCount = this.currencyManager.Count;
			}

			// Token: 0x060030C1 RID: 12481 RVA: 0x000A6C18 File Offset: 0x000A5C18
			private void ProcessListChanged(ListChangedEventArgs e)
			{
				if (e.ListChangedType == ListChangedType.PropertyDescriptorAdded || e.ListChangedType == ListChangedType.PropertyDescriptorDeleted || e.ListChangedType == ListChangedType.PropertyDescriptorChanged)
				{
					this.dataConnectionState[2] = true;
					try
					{
						this.DataSourceMetaDataChanged();
					}
					finally
					{
						this.dataConnectionState[2] = false;
					}
					return;
				}
				if (this.dataConnectionState[65536] != this.owner.AllowUserToAddRowsInternal)
				{
					this.dataConnectionState[1024] = true;
					try
					{
						this.owner.RefreshRows(!this.owner.InSortOperation);
						this.owner.PushAllowUserToAddRows();
					}
					finally
					{
						this.ResetDataConnectionState();
					}
					return;
				}
				if (!this.dataConnectionState[4] && this.owner.newRowIndex == e.NewIndex)
				{
					if (e.ListChangedType != ListChangedType.ItemAdded)
					{
						if (e.ListChangedType == ListChangedType.ItemDeleted)
						{
							if (this.dataConnectionState[64])
							{
								this.owner.PopulateNewRowWithDefaultValues();
								return;
							}
							if (this.dataConnectionState[32768] || this.dataConnectionState[512])
							{
								this.dataConnectionState[1024] = true;
								try
								{
									this.owner.RefreshRows(!this.owner.InSortOperation);
									this.owner.PushAllowUserToAddRows();
									return;
								}
								finally
								{
									this.dataConnectionState[1024] = false;
								}
							}
							if (this.dataConnectionState[4096] && this.currencyManager.List.Count == 0)
							{
								this.AddNew();
							}
						}
						return;
					}
					if (this.dataConnectionState[512])
					{
						return;
					}
					if (this.dataConnectionState[256])
					{
						return;
					}
					if (this.owner.Columns.Count > 0)
					{
						do
						{
							this.owner.newRowIndex = -1;
							this.owner.AddNewRow(false);
						}
						while (this.DataBoundRowsCount() < this.currencyManager.Count);
					}
					this.dataConnectionState[4] = true;
					this.MatchCurrencyManagerPosition(true, true);
					return;
				}
				else
				{
					if (e.ListChangedType == ListChangedType.ItemAdded && this.currencyManager.List.Count == (this.owner.AllowUserToAddRowsInternal ? (this.owner.Rows.Count - 1) : this.owner.Rows.Count))
					{
						if (this.dataConnectionState[4096] && this.dataConnectionState[8192])
						{
							this.dataConnectionState[16384] = true;
						}
						return;
					}
					if (e.ListChangedType == ListChangedType.ItemDeleted)
					{
						if (this.dataConnectionState[4096] && this.dataConnectionState[16384] && this.dataConnectionState[8192])
						{
							this.dataConnectionState[16384] = false;
						}
						else
						{
							if (!this.dataConnectionState[4] && this.dataConnectionState[32768])
							{
								this.dataConnectionState[1024] = true;
								try
								{
									this.owner.RefreshRows(!this.owner.InSortOperation);
									this.owner.PushAllowUserToAddRows();
								}
								finally
								{
									this.dataConnectionState[1024] = false;
								}
								return;
							}
							if (this.currencyManager.List.Count == this.DataBoundRowsCount())
							{
								return;
							}
						}
					}
					this.dataConnectionState[16] = true;
					try
					{
						switch (e.ListChangedType)
						{
						case ListChangedType.Reset:
						{
							this.dataConnectionState[1024] = true;
							bool visible = this.owner.Visible;
							if (visible)
							{
								this.owner.BeginUpdateInternal();
							}
							try
							{
								this.owner.RefreshRows(!this.owner.InSortOperation);
								this.owner.PushAllowUserToAddRows();
								this.ApplySortingInformationFromBackEnd();
								goto IL_05A2;
							}
							finally
							{
								this.ResetDataConnectionState();
								if (visible)
								{
									this.owner.EndUpdateInternal(false);
									this.owner.Invalidate(true);
								}
							}
							break;
						}
						case ListChangedType.ItemAdded:
							break;
						case ListChangedType.ItemDeleted:
							this.owner.Rows.RemoveAtInternal(e.NewIndex, true);
							this.dataConnectionState[8192] = false;
							goto IL_05A2;
						case ListChangedType.ItemMoved:
						{
							int num = Math.Min(e.OldIndex, e.NewIndex);
							int num2 = Math.Max(e.OldIndex, e.NewIndex);
							this.owner.InvalidateRows(num, num2);
							goto IL_05A2;
						}
						case ListChangedType.ItemChanged:
						{
							string text = null;
							if (e.PropertyDescriptor != null)
							{
								text = e.PropertyDescriptor.Name;
							}
							for (int i = 0; i < this.owner.Columns.Count; i++)
							{
								DataGridViewColumn dataGridViewColumn = this.owner.Columns[i];
								if (dataGridViewColumn.Visible && dataGridViewColumn.IsDataBound)
								{
									if (!string.IsNullOrEmpty(text))
									{
										if (string.Compare(dataGridViewColumn.DataPropertyName, text, true, CultureInfo.InvariantCulture) == 0)
										{
											this.owner.OnCellCommonChange(i, e.NewIndex);
										}
									}
									else
									{
										this.owner.OnCellCommonChange(i, e.NewIndex);
									}
								}
							}
							if (this.owner.CurrentCellAddress.Y == e.NewIndex && this.owner.IsCurrentCellInEditMode)
							{
								this.owner.RefreshEdit();
								goto IL_05A2;
							}
							goto IL_05A2;
						}
						default:
							goto IL_05A2;
						}
						if (this.owner.NewRowIndex != -1 && e.NewIndex == this.owner.Rows.Count)
						{
							throw new InvalidOperationException();
						}
						this.owner.Rows.InsertInternal(e.NewIndex, this.owner.RowTemplateClone, true);
						IL_05A2:
						if (this.owner.Rows.Count > 0 && !this.dataConnectionState[8] && !this.owner.InSortOperation)
						{
							this.MatchCurrencyManagerPosition(false, e.ListChangedType == ListChangedType.Reset);
						}
					}
					finally
					{
						this.dataConnectionState[16] = false;
					}
					return;
				}
			}

			// Token: 0x060030C2 RID: 12482 RVA: 0x000A72AC File Offset: 0x000A62AC
			private void currencyManager_PositionChanged(object sender, EventArgs e)
			{
				if (this.owner.Columns.Count == 0)
				{
					return;
				}
				if (this.owner.Rows.Count == (this.owner.AllowUserToAddRowsInternal ? 1 : 0))
				{
					return;
				}
				if (this.dataConnectionState[8])
				{
					return;
				}
				if (this.owner.AllowUserToAddRowsInternal && this.dataConnectionState[4] && !this.dataConnectionState[512] && this.currencyManager.Position > -1 && this.currencyManager.Position == this.owner.NewRowIndex && this.owner.CurrentCellAddress.Y != this.owner.NewRowIndex && this.currencyManager.Count == this.DataBoundRowsCount() + 1)
				{
					return;
				}
				this.dataConnectionState[2048] = true;
				try
				{
					if (!this.owner.InSortOperation)
					{
						bool flag = true;
						if (this.dataConnectionState[256])
						{
							IBindingList bindingList = this.currencyManager.List as IBindingList;
							if (bindingList != null && bindingList.SupportsSorting && bindingList.IsSorted)
							{
								flag = false;
							}
						}
						bool flag2 = this.dataConnectionState[64] && !this.dataConnectionState[4];
						flag2 |= this.lastListCount == -1 || this.lastListCount == this.currencyManager.Count;
						this.MatchCurrencyManagerPosition(flag, flag2);
					}
				}
				finally
				{
					this.dataConnectionState[2048] = false;
				}
			}

			// Token: 0x060030C3 RID: 12483 RVA: 0x000A7454 File Offset: 0x000A6454
			private int DataBoundRowsCount()
			{
				int num = this.owner.Rows.Count;
				if (this.owner.AllowUserToAddRowsInternal && this.owner.Rows.Count > 0 && (this.owner.CurrentCellAddress.Y != this.owner.NewRowIndex || this.owner.IsCurrentRowDirty))
				{
					num--;
				}
				return num;
			}

			// Token: 0x060030C4 RID: 12484 RVA: 0x000A74C4 File Offset: 0x000A64C4
			private void DataSource_Initialized(object sender, EventArgs e)
			{
				ISupportInitializeNotification supportInitializeNotification = this.dataSource as ISupportInitializeNotification;
				if (supportInitializeNotification != null)
				{
					supportInitializeNotification.Initialized -= this.DataSource_Initialized;
				}
				this.dataConnectionState[262144] = false;
				this.SetDataConnection(this.dataSource, this.dataMember);
				this.owner.RefreshColumnsAndRows();
				this.owner.OnDataBindingComplete(ListChangedType.Reset);
			}

			// Token: 0x060030C5 RID: 12485 RVA: 0x000A752C File Offset: 0x000A652C
			private void DataSourceMetaDataChanged()
			{
				this.props = this.currencyManager.GetItemProperties();
				this.owner.RefreshColumnsAndRows();
			}

			// Token: 0x060030C6 RID: 12486 RVA: 0x000A754C File Offset: 0x000A654C
			public void DeleteRow(int rowIndex)
			{
				this.dataConnectionState[8] = true;
				try
				{
					if (!this.dataConnectionState[4])
					{
						bool flag;
						if (this.owner.newRowIndex == this.currencyManager.List.Count)
						{
							flag = rowIndex == this.owner.newRowIndex - 1;
						}
						else
						{
							flag = rowIndex == this.owner.newRowIndex;
						}
						if (flag)
						{
							this.CancelRowEdit(false, true);
							goto IL_0115;
						}
						this.dataConnectionState[4096] = true;
						this.dataConnectionState[8192] = true;
						try
						{
							this.currencyManager.RemoveAt(rowIndex);
							goto IL_0115;
						}
						finally
						{
							this.dataConnectionState[4096] = false;
							this.dataConnectionState[8192] = false;
						}
					}
					this.dataConnectionState[4096] = true;
					this.dataConnectionState[8192] = true;
					try
					{
						this.currencyManager.RemoveAt(rowIndex);
					}
					finally
					{
						this.dataConnectionState[4096] = false;
						this.dataConnectionState[8192] = false;
					}
					IL_0115:;
				}
				finally
				{
					this.dataConnectionState[8] = false;
				}
			}

			// Token: 0x060030C7 RID: 12487 RVA: 0x000A76CC File Offset: 0x000A66CC
			public bool DataFieldIsReadOnly(int boundColumnIndex)
			{
				return this.props != null && this.props[boundColumnIndex].IsReadOnly;
			}

			// Token: 0x060030C8 RID: 12488 RVA: 0x000A76E9 File Offset: 0x000A66E9
			public void Dispose()
			{
				this.UnWireEvents();
				this.currencyManager = null;
			}

			// Token: 0x060030C9 RID: 12489 RVA: 0x000A76F8 File Offset: 0x000A66F8
			private static DataGridViewColumn GetDataGridViewColumnFromType(Type type)
			{
				TypeConverter converter = TypeDescriptor.GetConverter(typeof(Image));
				DataGridViewColumn dataGridViewColumn;
				if (type.Equals(typeof(bool)) || type.Equals(typeof(CheckState)))
				{
					dataGridViewColumn = new DataGridViewCheckBoxColumn(type.Equals(typeof(CheckState)));
				}
				else if (typeof(Image).IsAssignableFrom(type) || converter.CanConvertFrom(type))
				{
					dataGridViewColumn = new DataGridViewImageColumn();
				}
				else
				{
					dataGridViewColumn = new DataGridViewTextBoxColumn();
				}
				return dataGridViewColumn;
			}

			// Token: 0x060030CA RID: 12490 RVA: 0x000A777C File Offset: 0x000A677C
			public DataGridViewColumn[] GetCollectionOfBoundDataGridViewColumns()
			{
				if (this.props == null)
				{
					return null;
				}
				ArrayList arrayList = new ArrayList();
				int i = 0;
				while (i < this.props.Count)
				{
					if (!typeof(IList).IsAssignableFrom(this.props[i].PropertyType))
					{
						goto IL_0065;
					}
					TypeConverter converter = TypeDescriptor.GetConverter(typeof(Image));
					if (converter.CanConvertFrom(this.props[i].PropertyType))
					{
						goto IL_0065;
					}
					IL_015E:
					i++;
					continue;
					IL_0065:
					DataGridViewColumn dataGridViewColumnFromType = DataGridView.DataGridViewDataConnection.GetDataGridViewColumnFromType(this.props[i].PropertyType);
					dataGridViewColumnFromType.IsDataBoundInternal = true;
					dataGridViewColumnFromType.BoundColumnIndex = i;
					dataGridViewColumnFromType.DataPropertyName = this.props[i].Name;
					dataGridViewColumnFromType.Name = this.props[i].Name;
					dataGridViewColumnFromType.BoundColumnConverter = this.props[i].Converter;
					dataGridViewColumnFromType.HeaderText = ((!string.IsNullOrEmpty(this.props[i].DisplayName)) ? this.props[i].DisplayName : this.props[i].Name);
					dataGridViewColumnFromType.ValueType = this.props[i].PropertyType;
					dataGridViewColumnFromType.IsBrowsableInternal = this.props[i].IsBrowsable;
					dataGridViewColumnFromType.ReadOnly = this.props[i].IsReadOnly;
					arrayList.Add(dataGridViewColumnFromType);
					goto IL_015E;
				}
				DataGridViewColumn[] array = new DataGridViewColumn[arrayList.Count];
				arrayList.CopyTo(array);
				return array;
			}

			// Token: 0x060030CB RID: 12491 RVA: 0x000A7914 File Offset: 0x000A6914
			private void GetSortingInformationFromBackend(out PropertyDescriptor sortProperty, out SortOrder sortOrder)
			{
				IBindingList bindingList = ((this.currencyManager != null) ? (this.currencyManager.List as IBindingList) : null);
				IBindingListView bindingListView = ((bindingList != null) ? (bindingList as IBindingListView) : null);
				if (bindingList == null || !bindingList.SupportsSorting || !bindingList.IsSorted)
				{
					sortOrder = SortOrder.None;
					sortProperty = null;
					return;
				}
				if (bindingList.SortProperty != null)
				{
					sortProperty = bindingList.SortProperty;
					sortOrder = ((bindingList.SortDirection == ListSortDirection.Ascending) ? SortOrder.Ascending : SortOrder.Descending);
					return;
				}
				if (bindingListView == null)
				{
					sortProperty = null;
					sortOrder = SortOrder.None;
					return;
				}
				ListSortDescriptionCollection sortDescriptions = bindingListView.SortDescriptions;
				if (sortDescriptions != null && sortDescriptions.Count > 0 && sortDescriptions[0].PropertyDescriptor != null)
				{
					sortProperty = sortDescriptions[0].PropertyDescriptor;
					sortOrder = ((sortDescriptions[0].SortDirection == ListSortDirection.Ascending) ? SortOrder.Ascending : SortOrder.Descending);
					return;
				}
				sortProperty = null;
				sortOrder = SortOrder.None;
			}

			// Token: 0x060030CC RID: 12492 RVA: 0x000A79D7 File Offset: 0x000A69D7
			public void ResetCachedAllowUserToAddRowsInternal()
			{
				this.dataConnectionState[65536] = this.owner.AllowUserToAddRowsInternal;
			}

			// Token: 0x060030CD RID: 12493 RVA: 0x000A79F4 File Offset: 0x000A69F4
			private void ResetDataConnectionState()
			{
				this.dataConnectionState = new BitVector32(4);
				if (this.currencyManager != null)
				{
					this.dataConnectionState[32] = true;
				}
				this.ResetCachedAllowUserToAddRowsInternal();
			}

			// Token: 0x060030CE RID: 12494 RVA: 0x000A7A20 File Offset: 0x000A6A20
			public void SetDataConnection(object dataSource, string dataMember)
			{
				if (this.dataConnectionState[1])
				{
					return;
				}
				this.ResetDataConnectionState();
				if (dataMember == null)
				{
					dataMember = string.Empty;
				}
				ISupportInitializeNotification supportInitializeNotification = this.dataSource as ISupportInitializeNotification;
				if (supportInitializeNotification != null && this.dataConnectionState[262144])
				{
					supportInitializeNotification.Initialized -= this.DataSource_Initialized;
					this.dataConnectionState[262144] = false;
				}
				this.dataSource = dataSource;
				this.dataMember = dataMember;
				if (this.owner.BindingContext == null)
				{
					return;
				}
				this.dataConnectionState[1] = true;
				try
				{
					this.UnWireEvents();
					if (this.dataSource != null && this.owner.BindingContext != null && this.dataSource != Convert.DBNull)
					{
						supportInitializeNotification = this.dataSource as ISupportInitializeNotification;
						if (supportInitializeNotification != null && !supportInitializeNotification.IsInitialized)
						{
							if (!this.dataConnectionState[262144])
							{
								supportInitializeNotification.Initialized += this.DataSource_Initialized;
								this.dataConnectionState[262144] = true;
							}
							this.currencyManager = null;
						}
						else
						{
							this.currencyManager = this.owner.BindingContext[this.dataSource, this.dataMember] as CurrencyManager;
						}
					}
					else
					{
						this.currencyManager = null;
					}
					this.WireEvents();
					if (this.currencyManager != null)
					{
						this.props = this.currencyManager.GetItemProperties();
					}
					else
					{
						this.props = null;
					}
				}
				finally
				{
					this.dataConnectionState[1] = false;
				}
				this.ResetCachedAllowUserToAddRowsInternal();
				if (this.currencyManager != null)
				{
					this.lastListCount = this.currencyManager.Count;
					return;
				}
				this.lastListCount = -1;
			}

			// Token: 0x060030CF RID: 12495 RVA: 0x000A7BDC File Offset: 0x000A6BDC
			public string GetError(int rowIndex)
			{
				IDataErrorInfo dataErrorInfo = null;
				try
				{
					dataErrorInfo = this.currencyManager[rowIndex] as IDataErrorInfo;
				}
				catch (Exception ex)
				{
					if (ClientUtils.IsCriticalException(ex) && !(ex is IndexOutOfRangeException))
					{
						throw;
					}
					DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, -1, rowIndex, DataGridViewDataErrorContexts.Display);
					this.owner.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
				}
				if (dataErrorInfo != null)
				{
					return dataErrorInfo.Error;
				}
				return string.Empty;
			}

			// Token: 0x060030D0 RID: 12496 RVA: 0x000A7C58 File Offset: 0x000A6C58
			public string GetError(int boundColumnIndex, int columnIndex, int rowIndex)
			{
				IDataErrorInfo dataErrorInfo = null;
				try
				{
					dataErrorInfo = this.currencyManager[rowIndex] as IDataErrorInfo;
				}
				catch (Exception ex)
				{
					if (ClientUtils.IsCriticalException(ex) && !(ex is IndexOutOfRangeException))
					{
						throw;
					}
					DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, columnIndex, rowIndex, DataGridViewDataErrorContexts.Display);
					this.owner.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
				}
				if (dataErrorInfo != null)
				{
					return dataErrorInfo[this.props[boundColumnIndex].Name];
				}
				return string.Empty;
			}

			// Token: 0x060030D1 RID: 12497 RVA: 0x000A7CE8 File Offset: 0x000A6CE8
			public object GetValue(int boundColumnIndex, int columnIndex, int rowIndex)
			{
				object obj = null;
				try
				{
					obj = this.props[boundColumnIndex].GetValue(this.currencyManager[rowIndex]);
				}
				catch (Exception ex)
				{
					if (ClientUtils.IsCriticalException(ex) && !(ex is IndexOutOfRangeException))
					{
						throw;
					}
					DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(ex, columnIndex, rowIndex, DataGridViewDataErrorContexts.Display);
					this.owner.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
					if (dataGridViewDataErrorEventArgs.ThrowException)
					{
						throw dataGridViewDataErrorEventArgs.Exception;
					}
				}
				return obj;
			}

			// Token: 0x060030D2 RID: 12498 RVA: 0x000A7D64 File Offset: 0x000A6D64
			public void MatchCurrencyManagerPosition(bool scrollIntoView, bool clearSelection)
			{
				if (this.owner.Columns.Count == 0)
				{
					return;
				}
				int num = ((this.owner.CurrentCellAddress.X == -1) ? this.owner.FirstDisplayedColumnIndex : this.owner.CurrentCellAddress.X);
				if (num == -1)
				{
					DataGridViewColumn firstColumn = this.owner.Columns.GetFirstColumn(DataGridViewElementStates.None);
					firstColumn.Visible = true;
					num = firstColumn.Index;
				}
				int position = this.currencyManager.Position;
				if (position == -1)
				{
					if (!this.owner.SetCurrentCellAddressCore(-1, -1, false, false, false))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
					}
				}
				else if (position < this.owner.Rows.Count)
				{
					if ((this.owner.Rows.GetRowState(position) & DataGridViewElementStates.Visible) == DataGridViewElementStates.None)
					{
						this.owner.Rows[position].Visible = true;
					}
					if (position == this.owner.CurrentCellAddress.Y && num == this.owner.CurrentCellAddress.X)
					{
						return;
					}
					if ((scrollIntoView && !this.owner.ScrollIntoView(num, position, true)) || (num < this.owner.Columns.Count && position < this.owner.Rows.Count && !this.owner.SetAndSelectCurrentCellAddress(num, position, true, false, false, clearSelection, false)))
					{
						throw new InvalidOperationException(SR.GetString("DataGridView_CellChangeCannotBeCommittedOrAborted"));
					}
				}
			}

			// Token: 0x060030D3 RID: 12499 RVA: 0x000A7EE4 File Offset: 0x000A6EE4
			public void CancelRowEdit(bool restoreRow, bool addNewFinished)
			{
				this.dataConnectionState[64] = true;
				this.dataConnectionState[128] = restoreRow;
				try
				{
					object obj = null;
					if (this.currencyManager.Position >= 0 && this.currencyManager.Position < this.currencyManager.List.Count)
					{
						obj = this.currencyManager.Current;
					}
					this.currencyManager.CancelCurrentEdit();
					IEditableObject editableObject = null;
					if (this.currencyManager.Position >= 0 && this.currencyManager.Position < this.currencyManager.List.Count)
					{
						editableObject = this.currencyManager.Current as IEditableObject;
					}
					if (editableObject != null && obj == editableObject)
					{
						editableObject.BeginEdit();
					}
				}
				finally
				{
					this.dataConnectionState[64] = false;
				}
				if (addNewFinished)
				{
					this.dataConnectionState[4] = true;
				}
			}

			// Token: 0x060030D4 RID: 12500 RVA: 0x000A7FD0 File Offset: 0x000A6FD0
			internal void OnNewRowNeeded()
			{
				this.dataConnectionState[8] = true;
				try
				{
					this.AddNew();
				}
				finally
				{
					this.dataConnectionState[8] = false;
				}
			}

			// Token: 0x060030D5 RID: 12501 RVA: 0x000A8010 File Offset: 0x000A7010
			internal void OnRowEnter(DataGridViewCellEventArgs e)
			{
				if (this.dataConnectionState[2])
				{
					return;
				}
				if (!this.currencyManager.ShouldBind)
				{
					return;
				}
				this.dataConnectionState[8] = true;
				try
				{
					if (e.RowIndex != this.owner.NewRowIndex && !this.dataConnectionState[16] && this.currencyManager.Position != e.RowIndex)
					{
						try
						{
							this.currencyManager.Position = e.RowIndex;
						}
						catch (Exception ex)
						{
							if (ClientUtils.IsCriticalException(ex))
							{
								throw;
							}
							DataGridViewCellCancelEventArgs dataGridViewCellCancelEventArgs = new DataGridViewCellCancelEventArgs(e.ColumnIndex, e.RowIndex);
							this.ProcessException(ex, dataGridViewCellCancelEventArgs, false);
						}
						IEditableObject editableObject = this.currencyManager.Current as IEditableObject;
						if (editableObject != null)
						{
							editableObject.BeginEdit();
						}
					}
				}
				finally
				{
					this.dataConnectionState[8] = false;
				}
			}

			// Token: 0x060030D6 RID: 12502 RVA: 0x000A8100 File Offset: 0x000A7100
			internal void OnRowValidating(DataGridViewCellCancelEventArgs e)
			{
				if (!this.currencyManager.ShouldBind)
				{
					return;
				}
				if (!this.dataConnectionState[4] && !this.owner.IsCurrentRowDirty)
				{
					if (this.dataConnectionState[64])
					{
						goto IL_00B2;
					}
					this.dataConnectionState[8] = true;
					try
					{
						this.CancelRowEdit(false, false);
						goto IL_00B2;
					}
					finally
					{
						this.dataConnectionState[8] = false;
					}
				}
				if (this.owner.IsCurrentRowDirty)
				{
					this.dataConnectionState[256] = true;
					try
					{
						this.currencyManager.EndCurrentEdit();
					}
					catch (Exception ex)
					{
						if (ClientUtils.IsCriticalException(ex))
						{
							throw;
						}
						this.ProcessException(ex, e, true);
					}
					finally
					{
						this.dataConnectionState[256] = false;
					}
				}
				IL_00B2:
				this.dataConnectionState[4] = true;
			}

			// Token: 0x060030D7 RID: 12503 RVA: 0x000A81F4 File Offset: 0x000A71F4
			public void ProcessException(Exception exception, DataGridViewCellCancelEventArgs e, bool beginEdit)
			{
				DataGridViewDataErrorEventArgs dataGridViewDataErrorEventArgs = new DataGridViewDataErrorEventArgs(exception, e.ColumnIndex, e.RowIndex, DataGridViewDataErrorContexts.Commit);
				this.owner.OnDataErrorInternal(dataGridViewDataErrorEventArgs);
				if (dataGridViewDataErrorEventArgs.ThrowException)
				{
					throw dataGridViewDataErrorEventArgs.Exception;
				}
				if (dataGridViewDataErrorEventArgs.Cancel)
				{
					e.Cancel = true;
					if (beginEdit)
					{
						IEditableObject editableObject = this.currencyManager.Current as IEditableObject;
						if (editableObject != null)
						{
							editableObject.BeginEdit();
							return;
						}
					}
				}
				else
				{
					this.CancelRowEdit(false, false);
				}
			}

			// Token: 0x060030D8 RID: 12504 RVA: 0x000A826C File Offset: 0x000A726C
			public bool PushValue(int boundColumnIndex, int columnIndex, int rowIndex, object value)
			{
				try
				{
					if (value != null)
					{
						Type type = value.GetType();
						Type valueType = this.owner.Columns[columnIndex].ValueType;
						if (!valueType.IsAssignableFrom(type))
						{
							TypeConverter typeConverter = this.BoundColumnConverter(boundColumnIndex);
							if (typeConverter != null && typeConverter.CanConvertFrom(type))
							{
								value = typeConverter.ConvertFrom(value);
							}
							else
							{
								TypeConverter cachedTypeConverter = this.owner.GetCachedTypeConverter(type);
								if (cachedTypeConverter != null && cachedTypeConverter.CanConvertTo(valueType))
								{
									value = cachedTypeConverter.ConvertTo(value, valueType);
								}
							}
						}
					}
					this.props[boundColumnIndex].SetValue(this.currencyManager[rowIndex], value);
				}
				catch (Exception ex)
				{
					if (ClientUtils.IsCriticalException(ex))
					{
						throw;
					}
					DataGridViewCellCancelEventArgs dataGridViewCellCancelEventArgs = new DataGridViewCellCancelEventArgs(columnIndex, rowIndex);
					this.ProcessException(ex, dataGridViewCellCancelEventArgs, false);
					return !dataGridViewCellCancelEventArgs.Cancel;
				}
				return true;
			}

			// Token: 0x060030D9 RID: 12505 RVA: 0x000A8350 File Offset: 0x000A7350
			public bool ShouldChangeDataMember(object newDataSource)
			{
				if (!this.owner.Created)
				{
					return false;
				}
				if (this.owner.BindingContext == null)
				{
					return false;
				}
				if (newDataSource == null)
				{
					return true;
				}
				CurrencyManager currencyManager = this.owner.BindingContext[newDataSource] as CurrencyManager;
				if (currencyManager == null)
				{
					return false;
				}
				PropertyDescriptorCollection itemProperties = currencyManager.GetItemProperties();
				return this.dataMember.Length == 0 || itemProperties[this.dataMember] == null;
			}

			// Token: 0x060030DA RID: 12506 RVA: 0x000A83C1 File Offset: 0x000A73C1
			public void Sort(DataGridViewColumn dataGridViewColumn, ListSortDirection direction)
			{
				((IBindingList)this.List).ApplySort(this.props[dataGridViewColumn.BoundColumnIndex], direction);
			}

			// Token: 0x060030DB RID: 12507 RVA: 0x000A83E8 File Offset: 0x000A73E8
			private void UnWireEvents()
			{
				if (this.currencyManager != null)
				{
					this.currencyManager.PositionChanged -= this.currencyManager_PositionChanged;
					this.currencyManager.ListChanged -= this.currencyManager_ListChanged;
					this.dataConnectionState[32] = false;
				}
			}

			// Token: 0x060030DC RID: 12508 RVA: 0x000A843C File Offset: 0x000A743C
			private void WireEvents()
			{
				if (this.currencyManager != null)
				{
					this.currencyManager.PositionChanged += this.currencyManager_PositionChanged;
					this.currencyManager.ListChanged += this.currencyManager_ListChanged;
					this.dataConnectionState[32] = true;
				}
			}

			// Token: 0x040019AC RID: 6572
			private const int DATACONNECTIONSTATE_dataConnection_inSetDataConnection = 1;

			// Token: 0x040019AD RID: 6573
			private const int DATACONNECTIONSTATE_processingMetaDataChanges = 2;

			// Token: 0x040019AE RID: 6574
			private const int DATACONNECTIONSTATE_finishedAddNew = 4;

			// Token: 0x040019AF RID: 6575
			private const int DATACONNECTIONSTATE_doNotChangePositionInTheDataGridViewControl = 8;

			// Token: 0x040019B0 RID: 6576
			private const int DATACONNECTIONSTATE_doNotChangePositionInTheCurrencyManager = 16;

			// Token: 0x040019B1 RID: 6577
			private const int DATACONNECTIONSTATE_interestedInRowEvents = 32;

			// Token: 0x040019B2 RID: 6578
			private const int DATACONNECTIONSTATE_cancellingRowEdit = 64;

			// Token: 0x040019B3 RID: 6579
			private const int DATACONNECTIONSTATE_restoreRow = 128;

			// Token: 0x040019B4 RID: 6580
			private const int DATACONNECTIONSTATE_rowValidatingInAddNew = 256;

			// Token: 0x040019B5 RID: 6581
			private const int DATACONNECTIONSTATE_inAddNew = 512;

			// Token: 0x040019B6 RID: 6582
			private const int DATACONNECTIONSTATE_listWasReset = 1024;

			// Token: 0x040019B7 RID: 6583
			private const int DATACONNECTIONSTATE_positionChangingInCurrencyManager = 2048;

			// Token: 0x040019B8 RID: 6584
			private const int DATACONNECTIONSTATE_inDeleteOperation = 4096;

			// Token: 0x040019B9 RID: 6585
			private const int DATACONNECTIONSTATE_didNotDeleteRowFromDataGridView = 8192;

			// Token: 0x040019BA RID: 6586
			private const int DATACONNECTIONSTATE_itemAddedInDeleteOperation = 16384;

			// Token: 0x040019BB RID: 6587
			private const int DATACONNECTIONSTATE_inEndCurrentEdit = 32768;

			// Token: 0x040019BC RID: 6588
			private const int DATACONNECTIONSTATE_cachedAllowUserToAddRowsInternal = 65536;

			// Token: 0x040019BD RID: 6589
			private const int DATACONNECTIONSTATE_processingListChangedEvent = 131072;

			// Token: 0x040019BE RID: 6590
			private const int DATACONNECTIONSTATE_dataSourceInitializedHookedUp = 262144;

			// Token: 0x040019BF RID: 6591
			private DataGridView owner;

			// Token: 0x040019C0 RID: 6592
			private CurrencyManager currencyManager;

			// Token: 0x040019C1 RID: 6593
			private object dataSource;

			// Token: 0x040019C2 RID: 6594
			private string dataMember = string.Empty;

			// Token: 0x040019C3 RID: 6595
			private PropertyDescriptorCollection props;

			// Token: 0x040019C4 RID: 6596
			private int lastListCount = -1;

			// Token: 0x040019C5 RID: 6597
			private BitVector32 dataConnectionState;
		}

		// Token: 0x020002F1 RID: 753
		internal class DisplayedBandsData
		{
			// Token: 0x060030DD RID: 12509 RVA: 0x000A8490 File Offset: 0x000A7490
			public DisplayedBandsData()
			{
				this.firstDisplayedFrozenRow = -1;
				this.firstDisplayedFrozenCol = -1;
				this.firstDisplayedScrollingRow = -1;
				this.firstDisplayedScrollingCol = -1;
				this.lastTotallyDisplayedScrollingCol = -1;
				this.lastDisplayedScrollingRow = -1;
				this.lastDisplayedFrozenCol = -1;
				this.lastDisplayedFrozenRow = -1;
				this.oldFirstDisplayedScrollingRow = -1;
				this.oldFirstDisplayedScrollingCol = -1;
			}

			// Token: 0x17000835 RID: 2101
			// (get) Token: 0x060030DE RID: 12510 RVA: 0x000A84E9 File Offset: 0x000A74E9
			public bool ColumnInsertionOccurred
			{
				get
				{
					return this.columnInsertionOccurred;
				}
			}

			// Token: 0x17000836 RID: 2102
			// (get) Token: 0x060030DF RID: 12511 RVA: 0x000A84F1 File Offset: 0x000A74F1
			// (set) Token: 0x060030E0 RID: 12512 RVA: 0x000A84F9 File Offset: 0x000A74F9
			public bool Dirty
			{
				get
				{
					return this.dirty;
				}
				set
				{
					this.dirty = value;
				}
			}

			// Token: 0x17000837 RID: 2103
			// (set) Token: 0x060030E1 RID: 12513 RVA: 0x000A8502 File Offset: 0x000A7502
			public int FirstDisplayedFrozenCol
			{
				set
				{
					if (value != this.firstDisplayedFrozenCol)
					{
						this.EnsureDirtyState();
						this.firstDisplayedFrozenCol = value;
					}
				}
			}

			// Token: 0x17000838 RID: 2104
			// (set) Token: 0x060030E2 RID: 12514 RVA: 0x000A851A File Offset: 0x000A751A
			public int FirstDisplayedFrozenRow
			{
				set
				{
					if (value != this.firstDisplayedFrozenRow)
					{
						this.EnsureDirtyState();
						this.firstDisplayedFrozenRow = value;
					}
				}
			}

			// Token: 0x17000839 RID: 2105
			// (get) Token: 0x060030E3 RID: 12515 RVA: 0x000A8532 File Offset: 0x000A7532
			// (set) Token: 0x060030E4 RID: 12516 RVA: 0x000A853A File Offset: 0x000A753A
			public int FirstDisplayedScrollingCol
			{
				get
				{
					return this.firstDisplayedScrollingCol;
				}
				set
				{
					if (value != this.firstDisplayedScrollingCol)
					{
						this.EnsureDirtyState();
						this.firstDisplayedScrollingCol = value;
					}
				}
			}

			// Token: 0x1700083A RID: 2106
			// (get) Token: 0x060030E5 RID: 12517 RVA: 0x000A8552 File Offset: 0x000A7552
			// (set) Token: 0x060030E6 RID: 12518 RVA: 0x000A855A File Offset: 0x000A755A
			public int FirstDisplayedScrollingRow
			{
				get
				{
					return this.firstDisplayedScrollingRow;
				}
				set
				{
					if (value != this.firstDisplayedScrollingRow)
					{
						this.EnsureDirtyState();
						this.firstDisplayedScrollingRow = value;
					}
				}
			}

			// Token: 0x1700083B RID: 2107
			// (set) Token: 0x060030E7 RID: 12519 RVA: 0x000A8572 File Offset: 0x000A7572
			public int LastDisplayedFrozenCol
			{
				set
				{
					if (value != this.lastDisplayedFrozenCol)
					{
						this.EnsureDirtyState();
						this.lastDisplayedFrozenCol = value;
					}
				}
			}

			// Token: 0x1700083C RID: 2108
			// (set) Token: 0x060030E8 RID: 12520 RVA: 0x000A858A File Offset: 0x000A758A
			public int LastDisplayedFrozenRow
			{
				set
				{
					if (value != this.lastDisplayedFrozenRow)
					{
						this.EnsureDirtyState();
						this.lastDisplayedFrozenRow = value;
					}
				}
			}

			// Token: 0x1700083D RID: 2109
			// (set) Token: 0x060030E9 RID: 12521 RVA: 0x000A85A2 File Offset: 0x000A75A2
			public int LastDisplayedScrollingRow
			{
				set
				{
					if (value != this.lastDisplayedScrollingRow)
					{
						this.EnsureDirtyState();
						this.lastDisplayedScrollingRow = value;
					}
				}
			}

			// Token: 0x1700083E RID: 2110
			// (get) Token: 0x060030EA RID: 12522 RVA: 0x000A85BA File Offset: 0x000A75BA
			// (set) Token: 0x060030EB RID: 12523 RVA: 0x000A85C2 File Offset: 0x000A75C2
			public int LastTotallyDisplayedScrollingCol
			{
				get
				{
					return this.lastTotallyDisplayedScrollingCol;
				}
				set
				{
					if (value != this.lastTotallyDisplayedScrollingCol)
					{
						this.EnsureDirtyState();
						this.lastTotallyDisplayedScrollingCol = value;
					}
				}
			}

			// Token: 0x1700083F RID: 2111
			// (get) Token: 0x060030EC RID: 12524 RVA: 0x000A85DA File Offset: 0x000A75DA
			// (set) Token: 0x060030ED RID: 12525 RVA: 0x000A85E2 File Offset: 0x000A75E2
			public int NumDisplayedFrozenCols
			{
				get
				{
					return this.numDisplayedFrozenCols;
				}
				set
				{
					if (value != this.numDisplayedFrozenCols)
					{
						this.EnsureDirtyState();
						this.numDisplayedFrozenCols = value;
					}
				}
			}

			// Token: 0x17000840 RID: 2112
			// (get) Token: 0x060030EE RID: 12526 RVA: 0x000A85FA File Offset: 0x000A75FA
			// (set) Token: 0x060030EF RID: 12527 RVA: 0x000A8602 File Offset: 0x000A7602
			public int NumDisplayedFrozenRows
			{
				get
				{
					return this.numDisplayedFrozenRows;
				}
				set
				{
					if (value != this.numDisplayedFrozenRows)
					{
						this.EnsureDirtyState();
						this.numDisplayedFrozenRows = value;
					}
				}
			}

			// Token: 0x17000841 RID: 2113
			// (get) Token: 0x060030F0 RID: 12528 RVA: 0x000A861A File Offset: 0x000A761A
			// (set) Token: 0x060030F1 RID: 12529 RVA: 0x000A8622 File Offset: 0x000A7622
			public int NumDisplayedScrollingRows
			{
				get
				{
					return this.numDisplayedScrollingRows;
				}
				set
				{
					if (value != this.numDisplayedScrollingRows)
					{
						this.EnsureDirtyState();
						this.numDisplayedScrollingRows = value;
					}
				}
			}

			// Token: 0x17000842 RID: 2114
			// (get) Token: 0x060030F2 RID: 12530 RVA: 0x000A863A File Offset: 0x000A763A
			// (set) Token: 0x060030F3 RID: 12531 RVA: 0x000A8642 File Offset: 0x000A7642
			public int NumDisplayedScrollingCols
			{
				get
				{
					return this.numDisplayedScrollingCols;
				}
				set
				{
					if (value != this.numDisplayedScrollingCols)
					{
						this.EnsureDirtyState();
						this.numDisplayedScrollingCols = value;
					}
				}
			}

			// Token: 0x17000843 RID: 2115
			// (get) Token: 0x060030F4 RID: 12532 RVA: 0x000A865A File Offset: 0x000A765A
			// (set) Token: 0x060030F5 RID: 12533 RVA: 0x000A8662 File Offset: 0x000A7662
			public int NumTotallyDisplayedFrozenRows
			{
				get
				{
					return this.numTotallyDisplayedFrozenRows;
				}
				set
				{
					if (value != this.numTotallyDisplayedFrozenRows)
					{
						this.EnsureDirtyState();
						this.numTotallyDisplayedFrozenRows = value;
					}
				}
			}

			// Token: 0x17000844 RID: 2116
			// (get) Token: 0x060030F6 RID: 12534 RVA: 0x000A867A File Offset: 0x000A767A
			// (set) Token: 0x060030F7 RID: 12535 RVA: 0x000A8682 File Offset: 0x000A7682
			public int NumTotallyDisplayedScrollingRows
			{
				get
				{
					return this.numTotallyDisplayedScrollingRows;
				}
				set
				{
					if (value != this.numTotallyDisplayedScrollingRows)
					{
						this.EnsureDirtyState();
						this.numTotallyDisplayedScrollingRows = value;
					}
				}
			}

			// Token: 0x17000845 RID: 2117
			// (get) Token: 0x060030F8 RID: 12536 RVA: 0x000A869A File Offset: 0x000A769A
			public int OldFirstDisplayedScrollingCol
			{
				get
				{
					return this.oldFirstDisplayedScrollingCol;
				}
			}

			// Token: 0x17000846 RID: 2118
			// (get) Token: 0x060030F9 RID: 12537 RVA: 0x000A86A2 File Offset: 0x000A76A2
			public int OldFirstDisplayedScrollingRow
			{
				get
				{
					return this.oldFirstDisplayedScrollingRow;
				}
			}

			// Token: 0x17000847 RID: 2119
			// (get) Token: 0x060030FA RID: 12538 RVA: 0x000A86AA File Offset: 0x000A76AA
			public int OldNumDisplayedFrozenRows
			{
				get
				{
					return this.oldNumDisplayedFrozenRows;
				}
			}

			// Token: 0x17000848 RID: 2120
			// (get) Token: 0x060030FB RID: 12539 RVA: 0x000A86B2 File Offset: 0x000A76B2
			public int OldNumDisplayedScrollingRows
			{
				get
				{
					return this.oldNumDisplayedScrollingRows;
				}
			}

			// Token: 0x17000849 RID: 2121
			// (get) Token: 0x060030FC RID: 12540 RVA: 0x000A86BA File Offset: 0x000A76BA
			public bool RowInsertionOccurred
			{
				get
				{
					return this.rowInsertionOccurred;
				}
			}

			// Token: 0x060030FD RID: 12541 RVA: 0x000A86C2 File Offset: 0x000A76C2
			public void EnsureDirtyState()
			{
				if (!this.dirty)
				{
					this.dirty = true;
					this.rowInsertionOccurred = false;
					this.columnInsertionOccurred = false;
					this.SetOldValues();
				}
			}

			// Token: 0x060030FE RID: 12542 RVA: 0x000A86E7 File Offset: 0x000A76E7
			public void CorrectColumnIndexAfterInsertion(int columnIndex, int insertionCount)
			{
				this.EnsureDirtyState();
				if (this.oldFirstDisplayedScrollingCol != -1 && columnIndex <= this.oldFirstDisplayedScrollingCol)
				{
					this.oldFirstDisplayedScrollingCol += insertionCount;
				}
				this.columnInsertionOccurred = true;
			}

			// Token: 0x060030FF RID: 12543 RVA: 0x000A8716 File Offset: 0x000A7716
			public void CorrectRowIndexAfterDeletion(int rowIndex)
			{
				this.EnsureDirtyState();
				if (this.oldFirstDisplayedScrollingRow != -1 && rowIndex <= this.oldFirstDisplayedScrollingRow)
				{
					this.oldFirstDisplayedScrollingRow--;
				}
			}

			// Token: 0x06003100 RID: 12544 RVA: 0x000A8740 File Offset: 0x000A7740
			public void CorrectRowIndexAfterInsertion(int rowIndex, int insertionCount)
			{
				this.EnsureDirtyState();
				if (this.oldFirstDisplayedScrollingRow != -1 && rowIndex <= this.oldFirstDisplayedScrollingRow)
				{
					this.oldFirstDisplayedScrollingRow += insertionCount;
				}
				this.rowInsertionOccurred = true;
				this.oldNumDisplayedScrollingRows += insertionCount;
				this.oldNumDisplayedFrozenRows += insertionCount;
			}

			// Token: 0x06003101 RID: 12545 RVA: 0x000A8796 File Offset: 0x000A7796
			private void SetOldValues()
			{
				this.oldFirstDisplayedScrollingRow = this.firstDisplayedScrollingRow;
				this.oldFirstDisplayedScrollingCol = this.firstDisplayedScrollingCol;
				this.oldNumDisplayedFrozenRows = this.numDisplayedFrozenRows;
				this.oldNumDisplayedScrollingRows = this.numDisplayedScrollingRows;
			}

			// Token: 0x040019C6 RID: 6598
			private bool dirty;

			// Token: 0x040019C7 RID: 6599
			private int firstDisplayedFrozenRow;

			// Token: 0x040019C8 RID: 6600
			private int firstDisplayedFrozenCol;

			// Token: 0x040019C9 RID: 6601
			private int numDisplayedFrozenRows;

			// Token: 0x040019CA RID: 6602
			private int numDisplayedFrozenCols;

			// Token: 0x040019CB RID: 6603
			private int numTotallyDisplayedFrozenRows;

			// Token: 0x040019CC RID: 6604
			private int firstDisplayedScrollingRow;

			// Token: 0x040019CD RID: 6605
			private int numDisplayedScrollingRows;

			// Token: 0x040019CE RID: 6606
			private int numTotallyDisplayedScrollingRows;

			// Token: 0x040019CF RID: 6607
			private int firstDisplayedScrollingCol;

			// Token: 0x040019D0 RID: 6608
			private int numDisplayedScrollingCols;

			// Token: 0x040019D1 RID: 6609
			private int lastTotallyDisplayedScrollingCol;

			// Token: 0x040019D2 RID: 6610
			private int lastDisplayedScrollingRow;

			// Token: 0x040019D3 RID: 6611
			private int lastDisplayedFrozenCol;

			// Token: 0x040019D4 RID: 6612
			private int lastDisplayedFrozenRow;

			// Token: 0x040019D5 RID: 6613
			private int oldFirstDisplayedScrollingRow;

			// Token: 0x040019D6 RID: 6614
			private int oldFirstDisplayedScrollingCol;

			// Token: 0x040019D7 RID: 6615
			private int oldNumDisplayedFrozenRows;

			// Token: 0x040019D8 RID: 6616
			private int oldNumDisplayedScrollingRows;

			// Token: 0x040019D9 RID: 6617
			private bool rowInsertionOccurred;

			// Token: 0x040019DA RID: 6618
			private bool columnInsertionOccurred;
		}

		// Token: 0x020002F2 RID: 754
		public sealed class HitTestInfo
		{
			// Token: 0x06003102 RID: 12546 RVA: 0x000A87C8 File Offset: 0x000A77C8
			internal HitTestInfo()
			{
				this.type = DataGridViewHitTestType.None;
				this.typeInternal = DataGridView.DataGridViewHitTestTypeInternal.None;
				this.row = (this.col = -1);
				this.rowStart = (this.colStart = -1);
				this.adjacentRow = (this.adjacentCol = -1);
			}

			// Token: 0x1700084A RID: 2122
			// (get) Token: 0x06003103 RID: 12547 RVA: 0x000A8819 File Offset: 0x000A7819
			public int ColumnIndex
			{
				get
				{
					return this.col;
				}
			}

			// Token: 0x1700084B RID: 2123
			// (get) Token: 0x06003104 RID: 12548 RVA: 0x000A8821 File Offset: 0x000A7821
			public int RowIndex
			{
				get
				{
					return this.row;
				}
			}

			// Token: 0x1700084C RID: 2124
			// (get) Token: 0x06003105 RID: 12549 RVA: 0x000A8829 File Offset: 0x000A7829
			public int ColumnX
			{
				get
				{
					return this.colStart;
				}
			}

			// Token: 0x1700084D RID: 2125
			// (get) Token: 0x06003106 RID: 12550 RVA: 0x000A8831 File Offset: 0x000A7831
			public int RowY
			{
				get
				{
					return this.rowStart;
				}
			}

			// Token: 0x1700084E RID: 2126
			// (get) Token: 0x06003107 RID: 12551 RVA: 0x000A8839 File Offset: 0x000A7839
			public DataGridViewHitTestType Type
			{
				get
				{
					return this.type;
				}
			}

			// Token: 0x06003108 RID: 12552 RVA: 0x000A8844 File Offset: 0x000A7844
			public override bool Equals(object value)
			{
				DataGridView.HitTestInfo hitTestInfo = value as DataGridView.HitTestInfo;
				return hitTestInfo != null && (this.type == hitTestInfo.type && this.row == hitTestInfo.row) && this.col == hitTestInfo.col;
			}

			// Token: 0x06003109 RID: 12553 RVA: 0x000A888C File Offset: 0x000A788C
			public override int GetHashCode()
			{
				return WindowsFormsUtils.GetCombinedHashCodes(new int[]
				{
					(int)this.type,
					this.row,
					this.col
				});
			}

			// Token: 0x0600310A RID: 12554 RVA: 0x000A88C4 File Offset: 0x000A78C4
			public override string ToString()
			{
				return string.Concat(new string[]
				{
					"{ Type:",
					this.type.ToString(),
					", Column:",
					this.col.ToString(CultureInfo.CurrentCulture),
					", Row:",
					this.row.ToString(CultureInfo.CurrentCulture),
					" }"
				});
			}

			// Token: 0x040019DB RID: 6619
			internal DataGridViewHitTestType type;

			// Token: 0x040019DC RID: 6620
			internal DataGridView.DataGridViewHitTestTypeInternal typeInternal;

			// Token: 0x040019DD RID: 6621
			internal int row;

			// Token: 0x040019DE RID: 6622
			internal int col;

			// Token: 0x040019DF RID: 6623
			internal int adjacentRow;

			// Token: 0x040019E0 RID: 6624
			internal int adjacentCol;

			// Token: 0x040019E1 RID: 6625
			internal int mouseBarOffset;

			// Token: 0x040019E2 RID: 6626
			internal int rowStart;

			// Token: 0x040019E3 RID: 6627
			internal int colStart;

			// Token: 0x040019E4 RID: 6628
			public static readonly DataGridView.HitTestInfo Nowhere = new DataGridView.HitTestInfo();
		}

		// Token: 0x020002F3 RID: 755
		internal class LayoutData
		{
			// Token: 0x0600310C RID: 12556 RVA: 0x000A8944 File Offset: 0x000A7944
			public LayoutData()
			{
			}

			// Token: 0x0600310D RID: 12557 RVA: 0x000A89AC File Offset: 0x000A79AC
			public LayoutData(DataGridView.LayoutData src)
			{
				this.ClientRectangle = src.ClientRectangle;
				this.TopLeftHeader = src.TopLeftHeader;
				this.ColumnHeaders = src.ColumnHeaders;
				this.RowHeaders = src.RowHeaders;
				this.Inside = src.Inside;
				this.Data = src.Data;
				this.ResizeBoxRect = src.ResizeBoxRect;
				this.ColumnHeadersVisible = src.ColumnHeadersVisible;
				this.RowHeadersVisible = src.RowHeadersVisible;
			}

			// Token: 0x0600310E RID: 12558 RVA: 0x000A8A80 File Offset: 0x000A7A80
			public override string ToString()
			{
				StringBuilder stringBuilder = new StringBuilder(100);
				stringBuilder.Append(base.ToString());
				stringBuilder.Append(" { \n");
				stringBuilder.Append("ClientRectangle = ");
				stringBuilder.Append(this.ClientRectangle.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("Inside = ");
				stringBuilder.Append(this.Inside.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("TopLeftHeader = ");
				stringBuilder.Append(this.TopLeftHeader.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("ColumnHeaders = ");
				stringBuilder.Append(this.ColumnHeaders.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("RowHeaders = ");
				stringBuilder.Append(this.RowHeaders.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("Data = ");
				stringBuilder.Append(this.Data.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("ResizeBoxRect = ");
				stringBuilder.Append(this.ResizeBoxRect.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("ColumnHeadersVisible = ");
				stringBuilder.Append(this.ColumnHeadersVisible.ToString());
				stringBuilder.Append('\n');
				stringBuilder.Append("RowHeadersVisible = ");
				stringBuilder.Append(this.RowHeadersVisible.ToString());
				stringBuilder.Append(" }");
				return stringBuilder.ToString();
			}

			// Token: 0x040019E5 RID: 6629
			internal bool dirty = true;

			// Token: 0x040019E6 RID: 6630
			public Rectangle ClientRectangle = Rectangle.Empty;

			// Token: 0x040019E7 RID: 6631
			public Rectangle Inside = Rectangle.Empty;

			// Token: 0x040019E8 RID: 6632
			public Rectangle RowHeaders = Rectangle.Empty;

			// Token: 0x040019E9 RID: 6633
			public Rectangle ColumnHeaders = Rectangle.Empty;

			// Token: 0x040019EA RID: 6634
			public Rectangle TopLeftHeader = Rectangle.Empty;

			// Token: 0x040019EB RID: 6635
			public Rectangle Data = Rectangle.Empty;

			// Token: 0x040019EC RID: 6636
			public Rectangle ResizeBoxRect = Rectangle.Empty;

			// Token: 0x040019ED RID: 6637
			public bool ColumnHeadersVisible;

			// Token: 0x040019EE RID: 6638
			public bool RowHeadersVisible;
		}

		// Token: 0x020002F4 RID: 756
		private class DataGridViewSelectedCellsAccessibleObject : AccessibleObject
		{
			// Token: 0x0600310F RID: 12559 RVA: 0x000A8C40 File Offset: 0x000A7C40
			public DataGridViewSelectedCellsAccessibleObject(DataGridView owner)
			{
				this.owner = owner;
			}

			// Token: 0x1700084F RID: 2127
			// (get) Token: 0x06003110 RID: 12560 RVA: 0x000A8C4F File Offset: 0x000A7C4F
			public override string Name
			{
				get
				{
					return SR.GetString("DataGridView_AccSelectedCellsName");
				}
			}

			// Token: 0x17000850 RID: 2128
			// (get) Token: 0x06003111 RID: 12561 RVA: 0x000A8C5B File Offset: 0x000A7C5B
			public override AccessibleObject Parent
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					return this.owner.AccessibilityObject;
				}
			}

			// Token: 0x17000851 RID: 2129
			// (get) Token: 0x06003112 RID: 12562 RVA: 0x000A8C68 File Offset: 0x000A7C68
			public override AccessibleRole Role
			{
				get
				{
					return AccessibleRole.Grouping;
				}
			}

			// Token: 0x17000852 RID: 2130
			// (get) Token: 0x06003113 RID: 12563 RVA: 0x000A8C6C File Offset: 0x000A7C6C
			public override AccessibleStates State
			{
				get
				{
					return AccessibleStates.Selected | AccessibleStates.Selectable;
				}
			}

			// Token: 0x17000853 RID: 2131
			// (get) Token: 0x06003114 RID: 12564 RVA: 0x000A8C73 File Offset: 0x000A7C73
			public override string Value
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					return this.Name;
				}
			}

			// Token: 0x06003115 RID: 12565 RVA: 0x000A8C7B File Offset: 0x000A7C7B
			public override AccessibleObject GetChild(int index)
			{
				if (index >= 0 && index < this.owner.GetCellCount(DataGridViewElementStates.Selected))
				{
					return this.owner.SelectedCell(index).AccessibilityObject;
				}
				return null;
			}

			// Token: 0x06003116 RID: 12566 RVA: 0x000A8CA4 File Offset: 0x000A7CA4
			public override int GetChildCount()
			{
				return this.owner.GetCellCount(DataGridViewElementStates.Selected);
			}

			// Token: 0x06003117 RID: 12567 RVA: 0x000A8CB3 File Offset: 0x000A7CB3
			public override AccessibleObject GetSelected()
			{
				return this;
			}

			// Token: 0x06003118 RID: 12568 RVA: 0x000A8CB6 File Offset: 0x000A7CB6
			public override AccessibleObject GetFocused()
			{
				if (this.owner.CurrentCell != null && this.owner.CurrentCell.Selected)
				{
					return this.owner.CurrentCell.AccessibilityObject;
				}
				return null;
			}

			// Token: 0x06003119 RID: 12569 RVA: 0x000A8CEC File Offset: 0x000A7CEC
			[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			public override AccessibleObject Navigate(AccessibleNavigation navigationDirection)
			{
				switch (navigationDirection)
				{
				case AccessibleNavigation.FirstChild:
					if (this.owner.GetCellCount(DataGridViewElementStates.Selected) > 0)
					{
						return this.owner.SelectedCell(0).AccessibilityObject;
					}
					return null;
				case AccessibleNavigation.LastChild:
					if (this.owner.GetCellCount(DataGridViewElementStates.Selected) > 0)
					{
						return this.owner.SelectedCell(this.owner.GetCellCount(DataGridViewElementStates.Selected) - 1).AccessibilityObject;
					}
					return null;
				default:
					return null;
				}
			}

			// Token: 0x040019EF RID: 6639
			private DataGridView owner;
		}

		// Token: 0x020002F5 RID: 757
		private class DataGridViewToolTip
		{
			// Token: 0x0600311A RID: 12570 RVA: 0x000A8D64 File Offset: 0x000A7D64
			public DataGridViewToolTip(DataGridView dataGridView)
			{
				this.dataGridView = dataGridView;
			}

			// Token: 0x17000854 RID: 2132
			// (get) Token: 0x0600311B RID: 12571 RVA: 0x000A8D73 File Offset: 0x000A7D73
			public bool Activated
			{
				get
				{
					return this.toolTipActivated;
				}
			}

			// Token: 0x17000855 RID: 2133
			// (get) Token: 0x0600311C RID: 12572 RVA: 0x000A8D7B File Offset: 0x000A7D7B
			public ToolTip ToolTip
			{
				get
				{
					return this.toolTip;
				}
			}

			// Token: 0x0600311D RID: 12573 RVA: 0x000A8D84 File Offset: 0x000A7D84
			public void Activate(bool activate)
			{
				if (this.dataGridView.DesignMode)
				{
					return;
				}
				if (activate && this.toolTip == null)
				{
					this.toolTip = new ToolTip();
					this.toolTip.ShowAlways = true;
					this.toolTip.InitialDelay = 0;
					this.toolTip.UseFading = false;
					this.toolTip.UseAnimation = false;
					this.toolTip.AutoPopDelay = 0;
				}
				if (this.dataGridView.IsRestricted)
				{
					IntSecurity.AllWindows.Assert();
				}
				try
				{
					if (activate)
					{
						this.toolTip.Active = true;
						this.toolTip.Show(this.dataGridView.ToolTipPrivate, this.dataGridView);
					}
					else if (this.toolTip != null)
					{
						this.toolTip.Hide(this.dataGridView);
						this.toolTip.Active = false;
					}
				}
				finally
				{
					if (this.dataGridView.IsRestricted)
					{
						CodeAccessPermission.RevertAssert();
					}
				}
				this.toolTipActivated = activate;
			}

			// Token: 0x0600311E RID: 12574 RVA: 0x000A8E88 File Offset: 0x000A7E88
			public void Dispose()
			{
				if (this.toolTip != null)
				{
					this.toolTip.Dispose();
					this.toolTip = null;
				}
			}

			// Token: 0x040019F0 RID: 6640
			private DataGridView dataGridView;

			// Token: 0x040019F1 RID: 6641
			private ToolTip toolTip;

			// Token: 0x040019F2 RID: 6642
			private bool toolTipActivated;
		}

		// Token: 0x020002F6 RID: 758
		[ComVisible(true)]
		protected class DataGridViewTopRowAccessibleObject : AccessibleObject
		{
			// Token: 0x0600311F RID: 12575 RVA: 0x000A8EA4 File Offset: 0x000A7EA4
			public DataGridViewTopRowAccessibleObject()
			{
			}

			// Token: 0x06003120 RID: 12576 RVA: 0x000A8EAC File Offset: 0x000A7EAC
			public DataGridViewTopRowAccessibleObject(DataGridView owner)
			{
				this.owner = owner;
			}

			// Token: 0x17000856 RID: 2134
			// (get) Token: 0x06003121 RID: 12577 RVA: 0x000A8EBC File Offset: 0x000A7EBC
			public override Rectangle Bounds
			{
				get
				{
					if (this.owner == null)
					{
						throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
					}
					if (this.owner.ColumnHeadersVisible)
					{
						Rectangle rectangle = Rectangle.Union(this.owner.layout.ColumnHeaders, this.owner.layout.TopLeftHeader);
						return this.owner.RectangleToScreen(rectangle);
					}
					return Rectangle.Empty;
				}
			}

			// Token: 0x17000857 RID: 2135
			// (get) Token: 0x06003122 RID: 12578 RVA: 0x000A8F26 File Offset: 0x000A7F26
			public override string Name
			{
				get
				{
					return SR.GetString("DataGridView_AccTopRow");
				}
			}

			// Token: 0x17000858 RID: 2136
			// (get) Token: 0x06003123 RID: 12579 RVA: 0x000A8F32 File Offset: 0x000A7F32
			// (set) Token: 0x06003124 RID: 12580 RVA: 0x000A8F3A File Offset: 0x000A7F3A
			public DataGridView Owner
			{
				get
				{
					return this.owner;
				}
				set
				{
					if (this.owner != null)
					{
						throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerAlreadySet"));
					}
					this.owner = value;
				}
			}

			// Token: 0x17000859 RID: 2137
			// (get) Token: 0x06003125 RID: 12581 RVA: 0x000A8F5B File Offset: 0x000A7F5B
			public override AccessibleObject Parent
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					if (this.owner == null)
					{
						throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
					}
					return this.owner.AccessibilityObject;
				}
			}

			// Token: 0x1700085A RID: 2138
			// (get) Token: 0x06003126 RID: 12582 RVA: 0x000A8F80 File Offset: 0x000A7F80
			public override AccessibleRole Role
			{
				get
				{
					return AccessibleRole.Row;
				}
			}

			// Token: 0x1700085B RID: 2139
			// (get) Token: 0x06003127 RID: 12583 RVA: 0x000A8F84 File Offset: 0x000A7F84
			public override string Value
			{
				[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
				get
				{
					return this.Name;
				}
			}

			// Token: 0x06003128 RID: 12584 RVA: 0x000A8F8C File Offset: 0x000A7F8C
			public override AccessibleObject GetChild(int index)
			{
				if (this.owner == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
				}
				if (index < 0)
				{
					throw new ArgumentOutOfRangeException("index");
				}
				if (index == 0 && this.owner.RowHeadersVisible)
				{
					return this.owner.TopLeftHeaderCell.AccessibilityObject;
				}
				if (this.owner.RowHeadersVisible)
				{
					index--;
				}
				if (index < this.owner.Columns.GetColumnCount(DataGridViewElementStates.Visible))
				{
					int num = this.owner.Columns.ActualDisplayIndexToColumnIndex(index, DataGridViewElementStates.Visible);
					return this.owner.Columns[num].HeaderCell.AccessibilityObject;
				}
				return null;
			}

			// Token: 0x06003129 RID: 12585 RVA: 0x000A903C File Offset: 0x000A803C
			public override int GetChildCount()
			{
				if (this.owner == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
				}
				int num = this.owner.Columns.GetColumnCount(DataGridViewElementStates.Visible);
				if (this.owner.RowHeadersVisible)
				{
					num++;
				}
				return num;
			}

			// Token: 0x0600312A RID: 12586 RVA: 0x000A9088 File Offset: 0x000A8088
			[SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			public override AccessibleObject Navigate(AccessibleNavigation navigationDirection)
			{
				if (this.owner == null)
				{
					throw new InvalidOperationException(SR.GetString("DataGridViewTopRowAccessibleObject_OwnerNotSet"));
				}
				switch (navigationDirection)
				{
				case AccessibleNavigation.Down:
				case AccessibleNavigation.Next:
					if (this.owner.AccessibilityObject.GetChildCount() > 1)
					{
						return this.owner.AccessibilityObject.GetChild(1);
					}
					return null;
				case AccessibleNavigation.FirstChild:
					return this.GetChild(0);
				case AccessibleNavigation.LastChild:
					return this.GetChild(this.GetChildCount() - 1);
				}
				return null;
			}

			// Token: 0x040019F3 RID: 6643
			private DataGridView owner;
		}
	}
}
