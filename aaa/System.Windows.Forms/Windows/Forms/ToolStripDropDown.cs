using System;
using System.Collections;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Security.Permissions;
using System.Windows.Forms.Layout;

namespace System.Windows.Forms
{
	// Token: 0x020002A2 RID: 674
	[ComVisible(true)]
	[Designer("System.Windows.Forms.Design.ToolStripDropDownDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
	[ClassInterface(ClassInterfaceType.AutoDispatch)]
	public class ToolStripDropDown : ToolStrip
	{
		// Token: 0x0600247A RID: 9338 RVA: 0x000543F8 File Offset: 0x000533F8
		public ToolStripDropDown()
		{
			bool isRestrictedWindow = this.IsRestrictedWindow;
			base.SuspendLayout();
			this.Initialize();
			base.ResumeLayout(false);
		}

		// Token: 0x0600247B RID: 9339 RVA: 0x00054465 File Offset: 0x00053465
		internal ToolStripDropDown(ToolStripItem ownerItem)
			: this()
		{
			this.ownerItem = ownerItem;
		}

		// Token: 0x0600247C RID: 9340 RVA: 0x00054474 File Offset: 0x00053474
		internal ToolStripDropDown(ToolStripItem ownerItem, bool isAutoGenerated)
			: this(ownerItem)
		{
			this.isAutoGenerated = isAutoGenerated;
		}

		// Token: 0x17000595 RID: 1429
		// (get) Token: 0x0600247D RID: 9341 RVA: 0x00054484 File Offset: 0x00053484
		// (set) Token: 0x0600247E RID: 9342 RVA: 0x0005448C File Offset: 0x0005348C
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Browsable(false)]
		public new bool AllowItemReorder
		{
			get
			{
				return base.AllowItemReorder;
			}
			set
			{
				base.AllowItemReorder = value;
			}
		}

		// Token: 0x17000596 RID: 1430
		// (get) Token: 0x0600247F RID: 9343 RVA: 0x00054495 File Offset: 0x00053495
		// (set) Token: 0x06002480 RID: 9344 RVA: 0x000544A8 File Offset: 0x000534A8
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[SRDescription("ControlAllowTransparencyDescr")]
		public bool AllowTransparency
		{
			get
			{
				return this.state[ToolStripDropDown.stateAllowTransparency];
			}
			set
			{
				if (value != this.state[ToolStripDropDown.stateAllowTransparency] && OSFeature.Feature.IsPresent(OSFeature.LayeredWindows))
				{
					this.state[ToolStripDropDown.stateAllowTransparency] = value;
					this.state[ToolStripDropDown.stateLayered] = this.state[ToolStripDropDown.stateAllowTransparency];
					base.UpdateStyles();
					if (!value)
					{
						if (base.Properties.ContainsObject(ToolStripDropDown.PropOpacity))
						{
							base.Properties.SetObject(ToolStripDropDown.PropOpacity, 1f);
						}
						this.UpdateLayered();
					}
				}
			}
		}

		// Token: 0x17000597 RID: 1431
		// (get) Token: 0x06002481 RID: 9345 RVA: 0x00054545 File Offset: 0x00053545
		// (set) Token: 0x06002482 RID: 9346 RVA: 0x0005454D File Offset: 0x0005354D
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Browsable(false)]
		public override AnchorStyles Anchor
		{
			get
			{
				return base.Anchor;
			}
			set
			{
				base.Anchor = value;
			}
		}

		// Token: 0x17000598 RID: 1432
		// (get) Token: 0x06002483 RID: 9347 RVA: 0x00054556 File Offset: 0x00053556
		// (set) Token: 0x06002484 RID: 9348 RVA: 0x0005455E File Offset: 0x0005355E
		[DefaultValue(true)]
		public override bool AutoSize
		{
			get
			{
				return this.autoSize;
			}
			set
			{
				if (this.autoSize != value)
				{
					this.autoSize = value;
					LayoutTransaction.DoLayout(this, this, PropertyNames.AutoSize);
					this.OnAutoSizeChanged(EventArgs.Empty);
				}
			}
		}

		// Token: 0x17000599 RID: 1433
		// (get) Token: 0x06002485 RID: 9349 RVA: 0x00054587 File Offset: 0x00053587
		// (set) Token: 0x06002486 RID: 9350 RVA: 0x0005458F File Offset: 0x0005358F
		[DefaultValue(true)]
		[SRDescription("ToolStripDropDownAutoCloseDescr")]
		[SRCategory("CatBehavior")]
		public bool AutoClose
		{
			get
			{
				return this.autoClose;
			}
			set
			{
				if (this.autoClose != value)
				{
					this.autoClose = value;
					this.ApplyTopMost(!this.autoClose);
				}
			}
		}

		// Token: 0x140000ED RID: 237
		// (add) Token: 0x06002487 RID: 9351 RVA: 0x000545B0 File Offset: 0x000535B0
		// (remove) Token: 0x06002488 RID: 9352 RVA: 0x000545B9 File Offset: 0x000535B9
		[Browsable(false)]
		public new event EventHandler BackgroundImageChanged
		{
			add
			{
				base.BackgroundImageChanged += value;
			}
			remove
			{
				base.BackgroundImageChanged -= value;
			}
		}

		// Token: 0x140000EE RID: 238
		// (add) Token: 0x06002489 RID: 9353 RVA: 0x000545C2 File Offset: 0x000535C2
		// (remove) Token: 0x0600248A RID: 9354 RVA: 0x000545CB File Offset: 0x000535CB
		[Browsable(false)]
		public new event EventHandler BackgroundImageLayoutChanged
		{
			add
			{
				base.BackgroundImageLayoutChanged += value;
			}
			remove
			{
				base.BackgroundImageLayoutChanged -= value;
			}
		}

		// Token: 0x140000EF RID: 239
		// (add) Token: 0x0600248B RID: 9355 RVA: 0x000545D4 File Offset: 0x000535D4
		// (remove) Token: 0x0600248C RID: 9356 RVA: 0x000545DD File Offset: 0x000535DD
		[Browsable(false)]
		public new event EventHandler BindingContextChanged
		{
			add
			{
				base.BindingContextChanged += value;
			}
			remove
			{
				base.BindingContextChanged -= value;
			}
		}

		// Token: 0x1700059A RID: 1434
		// (get) Token: 0x0600248D RID: 9357 RVA: 0x000545E6 File Offset: 0x000535E6
		// (set) Token: 0x0600248E RID: 9358 RVA: 0x000545EE File Offset: 0x000535EE
		[EditorBrowsable(EditorBrowsableState.Never)]
		[DefaultValue(false)]
		[Browsable(false)]
		public new bool CanOverflow
		{
			get
			{
				return base.CanOverflow;
			}
			set
			{
				base.CanOverflow = value;
			}
		}

		// Token: 0x140000F0 RID: 240
		// (add) Token: 0x0600248F RID: 9359 RVA: 0x000545F7 File Offset: 0x000535F7
		// (remove) Token: 0x06002490 RID: 9360 RVA: 0x00054600 File Offset: 0x00053600
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event UICuesEventHandler ChangeUICues
		{
			add
			{
				base.ChangeUICues += value;
			}
			remove
			{
				base.ChangeUICues -= value;
			}
		}

		// Token: 0x1700059B RID: 1435
		// (get) Token: 0x06002491 RID: 9361 RVA: 0x00054609 File Offset: 0x00053609
		// (set) Token: 0x06002492 RID: 9362 RVA: 0x00054611 File Offset: 0x00053611
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new ContextMenu ContextMenu
		{
			get
			{
				return base.ContextMenu;
			}
			set
			{
				base.ContextMenu = value;
			}
		}

		// Token: 0x140000F1 RID: 241
		// (add) Token: 0x06002493 RID: 9363 RVA: 0x0005461A File Offset: 0x0005361A
		// (remove) Token: 0x06002494 RID: 9364 RVA: 0x00054623 File Offset: 0x00053623
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler ContextMenuChanged
		{
			add
			{
				base.ContextMenuChanged += value;
			}
			remove
			{
				base.ContextMenuChanged -= value;
			}
		}

		// Token: 0x1700059C RID: 1436
		// (get) Token: 0x06002495 RID: 9365 RVA: 0x0005462C File Offset: 0x0005362C
		// (set) Token: 0x06002496 RID: 9366 RVA: 0x00054634 File Offset: 0x00053634
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Browsable(false)]
		public new ContextMenuStrip ContextMenuStrip
		{
			get
			{
				return base.ContextMenuStrip;
			}
			set
			{
				base.ContextMenuStrip = value;
			}
		}

		// Token: 0x140000F2 RID: 242
		// (add) Token: 0x06002497 RID: 9367 RVA: 0x0005463D File Offset: 0x0005363D
		// (remove) Token: 0x06002498 RID: 9368 RVA: 0x00054646 File Offset: 0x00053646
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler ContextMenuStripChanged
		{
			add
			{
				base.ContextMenuStripChanged += value;
			}
			remove
			{
				base.ContextMenuStripChanged -= value;
			}
		}

		// Token: 0x1700059D RID: 1437
		// (get) Token: 0x06002499 RID: 9369 RVA: 0x00054650 File Offset: 0x00053650
		protected override CreateParams CreateParams
		{
			[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
			get
			{
				CreateParams createParams = base.CreateParams;
				if (this.DropShadowEnabled)
				{
					createParams.ClassStyle |= 131072;
				}
				createParams.Style &= -79691777;
				createParams.ExStyle &= -262145;
				createParams.Style |= (this.TopLevel ? int.MinValue : 1073741824);
				createParams.ExStyle |= 65536;
				bool topLevel = this.TopLevel;
				if (topLevel && this.state[ToolStripDropDown.stateLayered])
				{
					createParams.ExStyle |= 524288;
				}
				else if (topLevel)
				{
					createParams.ClassStyle |= 2048;
				}
				else if (!topLevel)
				{
					createParams.Style |= 67108864;
				}
				return createParams;
			}
		}

		// Token: 0x1700059E RID: 1438
		// (get) Token: 0x0600249A RID: 9370 RVA: 0x00054732 File Offset: 0x00053732
		protected override Padding DefaultPadding
		{
			get
			{
				return new Padding(1, 2, 1, 2);
			}
		}

		// Token: 0x1700059F RID: 1439
		// (get) Token: 0x0600249B RID: 9371 RVA: 0x0005473D File Offset: 0x0005373D
		protected override bool DefaultShowItemToolTips
		{
			get
			{
				return true;
			}
		}

		// Token: 0x170005A0 RID: 1440
		// (get) Token: 0x0600249C RID: 9372 RVA: 0x00054740 File Offset: 0x00053740
		protected override DockStyle DefaultDock
		{
			get
			{
				return DockStyle.None;
			}
		}

		// Token: 0x170005A1 RID: 1441
		// (get) Token: 0x0600249D RID: 9373 RVA: 0x00054743 File Offset: 0x00053743
		// (set) Token: 0x0600249E RID: 9374 RVA: 0x00054761 File Offset: 0x00053761
		public override ToolStripDropDownDirection DefaultDropDownDirection
		{
			get
			{
				if (this.childDropDownDirection != ToolStripDropDownDirection.Default)
				{
					return this.childDropDownDirection;
				}
				if (this.RightToLeft != RightToLeft.Yes)
				{
					return ToolStripDropDownDirection.Right;
				}
				return ToolStripDropDownDirection.Left;
			}
			set
			{
				this.childDropDownDirection = value;
				base.DefaultDropDownDirection = value;
			}
		}

		// Token: 0x170005A2 RID: 1442
		// (get) Token: 0x0600249F RID: 9375 RVA: 0x00054771 File Offset: 0x00053771
		// (set) Token: 0x060024A0 RID: 9376 RVA: 0x00054779 File Offset: 0x00053779
		[DefaultValue(DockStyle.None)]
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public override DockStyle Dock
		{
			get
			{
				return base.Dock;
			}
			set
			{
				base.Dock = value;
			}
		}

		// Token: 0x140000F3 RID: 243
		// (add) Token: 0x060024A1 RID: 9377 RVA: 0x00054782 File Offset: 0x00053782
		// (remove) Token: 0x060024A2 RID: 9378 RVA: 0x0005478B File Offset: 0x0005378B
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler DockChanged
		{
			add
			{
				base.DockChanged += value;
			}
			remove
			{
				base.DockChanged -= value;
			}
		}

		// Token: 0x170005A3 RID: 1443
		// (get) Token: 0x060024A3 RID: 9379 RVA: 0x00054794 File Offset: 0x00053794
		internal override NativeWindow DropDownOwnerWindow
		{
			get
			{
				if (this.ownerItem != null && this.ownerItem.Owner != null)
				{
					return this.ownerItem.Owner.DropDownOwnerWindow;
				}
				return base.DropDownOwnerWindow;
			}
		}

		// Token: 0x170005A4 RID: 1444
		// (get) Token: 0x060024A4 RID: 9380 RVA: 0x000547C2 File Offset: 0x000537C2
		// (set) Token: 0x060024A5 RID: 9381 RVA: 0x000547DB File Offset: 0x000537DB
		public bool DropShadowEnabled
		{
			get
			{
				return this.dropShadowEnabled && this.TopMost && DisplayInformation.IsDropShadowEnabled;
			}
			set
			{
				if (this.dropShadowEnabled != value)
				{
					this.dropShadowEnabled = value;
					if (base.IsHandleCreated && !base.DesignMode)
					{
						base.RecreateHandle();
					}
				}
			}
		}

		// Token: 0x140000F4 RID: 244
		// (add) Token: 0x060024A6 RID: 9382 RVA: 0x00054803 File Offset: 0x00053803
		// (remove) Token: 0x060024A7 RID: 9383 RVA: 0x00054816 File Offset: 0x00053816
		[SRCategory("CatAction")]
		[SRDescription("ToolStripDropDownClosedDecr")]
		public event ToolStripDropDownClosedEventHandler Closed
		{
			add
			{
				base.Events.AddHandler(ToolStripDropDown.EventClosed, value);
			}
			remove
			{
				base.Events.RemoveHandler(ToolStripDropDown.EventClosed, value);
			}
		}

		// Token: 0x140000F5 RID: 245
		// (add) Token: 0x060024A8 RID: 9384 RVA: 0x00054829 File Offset: 0x00053829
		// (remove) Token: 0x060024A9 RID: 9385 RVA: 0x0005483C File Offset: 0x0005383C
		[SRCategory("CatAction")]
		[SRDescription("ToolStripDropDownClosingDecr")]
		public event ToolStripDropDownClosingEventHandler Closing
		{
			add
			{
				base.Events.AddHandler(ToolStripDropDown.EventClosing, value);
			}
			remove
			{
				base.Events.RemoveHandler(ToolStripDropDown.EventClosing, value);
			}
		}

		// Token: 0x140000F6 RID: 246
		// (add) Token: 0x060024AA RID: 9386 RVA: 0x0005484F File Offset: 0x0005384F
		// (remove) Token: 0x060024AB RID: 9387 RVA: 0x00054858 File Offset: 0x00053858
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler Enter
		{
			add
			{
				base.Enter += value;
			}
			remove
			{
				base.Enter -= value;
			}
		}

		// Token: 0x170005A5 RID: 1445
		// (get) Token: 0x060024AC RID: 9388 RVA: 0x00054861 File Offset: 0x00053861
		// (set) Token: 0x060024AD RID: 9389 RVA: 0x00054894 File Offset: 0x00053894
		public override Font Font
		{
			get
			{
				if (base.IsFontSet())
				{
					return base.Font;
				}
				if (this.IsAutoGenerated && this.OwnerItem != null)
				{
					return this.OwnerItem.Font;
				}
				return base.Font;
			}
			set
			{
				base.Font = value;
			}
		}

		// Token: 0x140000F7 RID: 247
		// (add) Token: 0x060024AE RID: 9390 RVA: 0x0005489D File Offset: 0x0005389D
		// (remove) Token: 0x060024AF RID: 9391 RVA: 0x000548A6 File Offset: 0x000538A6
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler FontChanged
		{
			add
			{
				base.FontChanged += value;
			}
			remove
			{
				base.FontChanged -= value;
			}
		}

		// Token: 0x140000F8 RID: 248
		// (add) Token: 0x060024B0 RID: 9392 RVA: 0x000548AF File Offset: 0x000538AF
		// (remove) Token: 0x060024B1 RID: 9393 RVA: 0x000548B8 File Offset: 0x000538B8
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Browsable(false)]
		public new event EventHandler ForeColorChanged
		{
			add
			{
				base.ForeColorChanged += value;
			}
			remove
			{
				base.ForeColorChanged -= value;
			}
		}

		// Token: 0x140000F9 RID: 249
		// (add) Token: 0x060024B2 RID: 9394 RVA: 0x000548C1 File Offset: 0x000538C1
		// (remove) Token: 0x060024B3 RID: 9395 RVA: 0x000548CA File Offset: 0x000538CA
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event GiveFeedbackEventHandler GiveFeedback
		{
			add
			{
				base.GiveFeedback += value;
			}
			remove
			{
				base.GiveFeedback -= value;
			}
		}

		// Token: 0x170005A6 RID: 1446
		// (get) Token: 0x060024B4 RID: 9396 RVA: 0x000548D3 File Offset: 0x000538D3
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Browsable(false)]
		public new ToolStripGripDisplayStyle GripDisplayStyle
		{
			get
			{
				return base.GripDisplayStyle;
			}
		}

		// Token: 0x170005A7 RID: 1447
		// (get) Token: 0x060024B5 RID: 9397 RVA: 0x000548DB File Offset: 0x000538DB
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Browsable(false)]
		public new Rectangle GripRectangle
		{
			get
			{
				return base.GripRectangle;
			}
		}

		// Token: 0x170005A8 RID: 1448
		// (get) Token: 0x060024B6 RID: 9398 RVA: 0x000548E3 File Offset: 0x000538E3
		// (set) Token: 0x060024B7 RID: 9399 RVA: 0x000548EB File Offset: 0x000538EB
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new Padding GripMargin
		{
			get
			{
				return base.GripMargin;
			}
			set
			{
				base.GripMargin = value;
			}
		}

		// Token: 0x170005A9 RID: 1449
		// (get) Token: 0x060024B8 RID: 9400 RVA: 0x000548F4 File Offset: 0x000538F4
		// (set) Token: 0x060024B9 RID: 9401 RVA: 0x000548FC File Offset: 0x000538FC
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		[DefaultValue(ToolStripGripStyle.Hidden)]
		public new ToolStripGripStyle GripStyle
		{
			get
			{
				return base.GripStyle;
			}
			set
			{
				base.GripStyle = value;
			}
		}

		// Token: 0x140000FA RID: 250
		// (add) Token: 0x060024BA RID: 9402 RVA: 0x00054905 File Offset: 0x00053905
		// (remove) Token: 0x060024BB RID: 9403 RVA: 0x0005490E File Offset: 0x0005390E
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event HelpEventHandler HelpRequested
		{
			add
			{
				base.HelpRequested += value;
			}
			remove
			{
				base.HelpRequested -= value;
			}
		}

		// Token: 0x140000FB RID: 251
		// (add) Token: 0x060024BC RID: 9404 RVA: 0x00054917 File Offset: 0x00053917
		// (remove) Token: 0x060024BD RID: 9405 RVA: 0x00054920 File Offset: 0x00053920
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler ImeModeChanged
		{
			add
			{
				base.ImeModeChanged += value;
			}
			remove
			{
				base.ImeModeChanged -= value;
			}
		}

		// Token: 0x170005AA RID: 1450
		// (get) Token: 0x060024BE RID: 9406 RVA: 0x00054929 File Offset: 0x00053929
		[Browsable(false)]
		public bool IsAutoGenerated
		{
			get
			{
				return this.isAutoGenerated;
			}
		}

		// Token: 0x170005AB RID: 1451
		// (get) Token: 0x060024BF RID: 9407 RVA: 0x00054931 File Offset: 0x00053931
		internal bool IsAssignedToDropDownItem
		{
			get
			{
				return this.IsAutoGenerated || this.countDropDownItemsAssignedTo > 0;
			}
		}

		// Token: 0x170005AC RID: 1452
		// (get) Token: 0x060024C0 RID: 9408 RVA: 0x00054948 File Offset: 0x00053948
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		internal bool IsRestrictedWindow
		{
			get
			{
				if (!this.state[ToolStripDropDown.stateIsRestrictedWindowChecked])
				{
					this.state[ToolStripDropDown.stateIsRestrictedWindowChecked] = true;
					this.state[ToolStripDropDown.stateIsRestrictedWindow] = false;
					try
					{
						IntSecurity.WindowAdornmentModification.Demand();
					}
					catch
					{
						this.state[ToolStripDropDown.stateIsRestrictedWindow] = true;
					}
				}
				return this.state[ToolStripDropDown.stateIsRestrictedWindow];
			}
		}

		// Token: 0x170005AD RID: 1453
		// (get) Token: 0x060024C1 RID: 9409 RVA: 0x000549CC File Offset: 0x000539CC
		// (set) Token: 0x060024C2 RID: 9410 RVA: 0x000549F0 File Offset: 0x000539F0
		internal override Size ImageScalingSizeInternal
		{
			get
			{
				if (this.IsAutoGenerated && this.OwnerToolStrip != null)
				{
					return this.OwnerToolStrip.ImageScalingSizeInternal;
				}
				return base.ImageScalingSizeInternal;
			}
			set
			{
				base.ImageScalingSizeInternal = value;
			}
		}

		// Token: 0x170005AE RID: 1454
		// (get) Token: 0x060024C3 RID: 9411 RVA: 0x000549FC File Offset: 0x000539FC
		// (set) Token: 0x060024C4 RID: 9412 RVA: 0x00054A20 File Offset: 0x00053A20
		internal override bool KeyboardActive
		{
			get
			{
				ToolStrip ownerToolStrip = this.OwnerToolStrip;
				if (ownerToolStrip != null)
				{
					return ownerToolStrip.KeyboardActive;
				}
				return base.KeyboardActive;
			}
			set
			{
				base.KeyboardActive = value;
				ToolStrip ownerToolStrip = this.OwnerToolStrip;
				if (ownerToolStrip != null)
				{
					ownerToolStrip.KeyboardActive = value;
				}
			}
		}

		// Token: 0x140000FC RID: 252
		// (add) Token: 0x060024C5 RID: 9413 RVA: 0x00054A45 File Offset: 0x00053A45
		// (remove) Token: 0x060024C6 RID: 9414 RVA: 0x00054A4E File Offset: 0x00053A4E
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event KeyEventHandler KeyDown
		{
			add
			{
				base.KeyDown += value;
			}
			remove
			{
				base.KeyDown -= value;
			}
		}

		// Token: 0x140000FD RID: 253
		// (add) Token: 0x060024C7 RID: 9415 RVA: 0x00054A57 File Offset: 0x00053A57
		// (remove) Token: 0x060024C8 RID: 9416 RVA: 0x00054A60 File Offset: 0x00053A60
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event KeyPressEventHandler KeyPress
		{
			add
			{
				base.KeyPress += value;
			}
			remove
			{
				base.KeyPress -= value;
			}
		}

		// Token: 0x140000FE RID: 254
		// (add) Token: 0x060024C9 RID: 9417 RVA: 0x00054A69 File Offset: 0x00053A69
		// (remove) Token: 0x060024CA RID: 9418 RVA: 0x00054A72 File Offset: 0x00053A72
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event KeyEventHandler KeyUp
		{
			add
			{
				base.KeyUp += value;
			}
			remove
			{
				base.KeyUp -= value;
			}
		}

		// Token: 0x140000FF RID: 255
		// (add) Token: 0x060024CB RID: 9419 RVA: 0x00054A7B File Offset: 0x00053A7B
		// (remove) Token: 0x060024CC RID: 9420 RVA: 0x00054A84 File Offset: 0x00053A84
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler Leave
		{
			add
			{
				base.Leave += value;
			}
			remove
			{
				base.Leave -= value;
			}
		}

		// Token: 0x170005AF RID: 1455
		// (get) Token: 0x060024CD RID: 9421 RVA: 0x00054A8D File Offset: 0x00053A8D
		// (set) Token: 0x060024CE RID: 9422 RVA: 0x00054A95 File Offset: 0x00053A95
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new Point Location
		{
			get
			{
				return base.Location;
			}
			set
			{
				base.Location = value;
			}
		}

		// Token: 0x14000100 RID: 256
		// (add) Token: 0x060024CF RID: 9423 RVA: 0x00054A9E File Offset: 0x00053A9E
		// (remove) Token: 0x060024D0 RID: 9424 RVA: 0x00054AB1 File Offset: 0x00053AB1
		[SRCategory("CatAction")]
		[SRDescription("ToolStripDropDownOpeningDescr")]
		public event CancelEventHandler Opening
		{
			add
			{
				base.Events.AddHandler(ToolStripDropDown.EventOpening, value);
			}
			remove
			{
				base.Events.RemoveHandler(ToolStripDropDown.EventOpening, value);
			}
		}

		// Token: 0x14000101 RID: 257
		// (add) Token: 0x060024D1 RID: 9425 RVA: 0x00054AC4 File Offset: 0x00053AC4
		// (remove) Token: 0x060024D2 RID: 9426 RVA: 0x00054AD7 File Offset: 0x00053AD7
		[SRDescription("ToolStripDropDownOpenedDescr")]
		[SRCategory("CatAction")]
		public event EventHandler Opened
		{
			add
			{
				base.Events.AddHandler(ToolStripDropDown.EventOpened, value);
			}
			remove
			{
				base.Events.RemoveHandler(ToolStripDropDown.EventOpened, value);
			}
		}

		// Token: 0x170005B0 RID: 1456
		// (get) Token: 0x060024D3 RID: 9427 RVA: 0x00054AEC File Offset: 0x00053AEC
		protected internal override Size MaxItemSize
		{
			get
			{
				return Screen.GetWorkingArea(base.Bounds).Size - base.Padding.Size;
			}
		}

		// Token: 0x170005B1 RID: 1457
		// (get) Token: 0x060024D4 RID: 9428 RVA: 0x00054B20 File Offset: 0x00053B20
		// (set) Token: 0x060024D5 RID: 9429 RVA: 0x00054B58 File Offset: 0x00053B58
		[TypeConverter(typeof(OpacityConverter))]
		[SRDescription("FormOpacityDescr")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[Browsable(false)]
		[DefaultValue(1.0)]
		[SRCategory("CatWindowStyle")]
		public double Opacity
		{
			get
			{
				object @object = base.Properties.GetObject(ToolStripDropDown.PropOpacity);
				if (@object != null)
				{
					return Convert.ToDouble(@object, CultureInfo.InvariantCulture);
				}
				return 1.0;
			}
			set
			{
				if (this.IsRestrictedWindow)
				{
					value = Math.Max(value, 0.5);
				}
				if (value > 1.0)
				{
					value = 1.0;
				}
				else if (value < 0.0)
				{
					value = 0.0;
				}
				base.Properties.SetObject(ToolStripDropDown.PropOpacity, value);
				bool flag = this.state[ToolStripDropDown.stateLayered];
				if (this.OpacityAsByte < 255 && OSFeature.Feature.IsPresent(OSFeature.LayeredWindows))
				{
					this.AllowTransparency = true;
					this.state[ToolStripDropDown.stateLayered] = true;
				}
				else
				{
					this.state[ToolStripDropDown.stateLayered] = false;
				}
				if (flag != this.state[ToolStripDropDown.stateLayered])
				{
					base.UpdateStyles();
				}
				this.UpdateLayered();
			}
		}

		// Token: 0x170005B2 RID: 1458
		// (get) Token: 0x060024D6 RID: 9430 RVA: 0x00054C3D File Offset: 0x00053C3D
		private byte OpacityAsByte
		{
			get
			{
				return (byte)(this.Opacity * 255.0);
			}
		}

		// Token: 0x170005B3 RID: 1459
		// (get) Token: 0x060024D7 RID: 9431 RVA: 0x00054C50 File Offset: 0x00053C50
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new ToolStripOverflowButton OverflowButton
		{
			get
			{
				return base.OverflowButton;
			}
		}

		// Token: 0x170005B4 RID: 1460
		// (get) Token: 0x060024D8 RID: 9432 RVA: 0x00054C58 File Offset: 0x00053C58
		// (set) Token: 0x060024D9 RID: 9433 RVA: 0x00054C60 File Offset: 0x00053C60
		[DefaultValue(null)]
		[Browsable(false)]
		public ToolStripItem OwnerItem
		{
			get
			{
				return this.ownerItem;
			}
			set
			{
				if (this.ownerItem != value)
				{
					Font font = this.Font;
					RightToLeft rightToLeft = this.RightToLeft;
					this.ownerItem = value;
					if (!font.Equals(this.Font))
					{
						this.OnOwnerItemFontChanged(EventArgs.Empty);
					}
					if (this.ownerItem != null && this.RightToLeftInherited && rightToLeft != this.RightToLeft)
					{
						using (new LayoutTransaction(this, this, PropertyNames.RightToLeft))
						{
							this.OnRightToLeftChanged(EventArgs.Empty);
						}
					}
				}
			}
		}

		// Token: 0x170005B5 RID: 1461
		// (get) Token: 0x060024DA RID: 9434 RVA: 0x00054CF4 File Offset: 0x00053CF4
		internal ToolStripDropDownItem OwnerDropDownItem
		{
			get
			{
				return this.OwnerItem as ToolStripDropDownItem;
			}
		}

		// Token: 0x170005B6 RID: 1462
		// (get) Token: 0x060024DB RID: 9435 RVA: 0x00054D04 File Offset: 0x00053D04
		internal ToolStrip OwnerToolStrip
		{
			get
			{
				if (this.ownerItem != null)
				{
					ToolStrip parentInternal = this.ownerItem.ParentInternal;
					if (parentInternal != null)
					{
						return parentInternal;
					}
					if (this.ownerItem.Placement == ToolStripItemPlacement.Overflow && this.ownerItem.Owner != null)
					{
						return this.ownerItem.Owner.OverflowButton.DropDown;
					}
					if (parentInternal == null)
					{
						return this.ownerItem.Owner;
					}
				}
				return null;
			}
		}

		// Token: 0x170005B7 RID: 1463
		// (get) Token: 0x060024DC RID: 9436 RVA: 0x00054D6B File Offset: 0x00053D6B
		// (set) Token: 0x060024DD RID: 9437 RVA: 0x00054D73 File Offset: 0x00053D73
		[EditorBrowsable(EditorBrowsableState.Always)]
		[Browsable(false)]
		public new Region Region
		{
			get
			{
				return base.Region;
			}
			set
			{
				base.Region = value;
			}
		}

		// Token: 0x14000102 RID: 258
		// (add) Token: 0x060024DE RID: 9438 RVA: 0x00054D7C File Offset: 0x00053D7C
		// (remove) Token: 0x060024DF RID: 9439 RVA: 0x00054D85 File Offset: 0x00053D85
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Always)]
		public new event EventHandler RegionChanged
		{
			add
			{
				base.RegionChanged += value;
			}
			remove
			{
				base.RegionChanged -= value;
			}
		}

		// Token: 0x170005B8 RID: 1464
		// (get) Token: 0x060024E0 RID: 9440 RVA: 0x00054D8E File Offset: 0x00053D8E
		// (set) Token: 0x060024E1 RID: 9441 RVA: 0x00054D91 File Offset: 0x00053D91
		internal virtual bool RequiresScrollButtons
		{
			get
			{
				return false;
			}
			set
			{
			}
		}

		// Token: 0x170005B9 RID: 1465
		// (get) Token: 0x060024E2 RID: 9442 RVA: 0x00054D93 File Offset: 0x00053D93
		// (set) Token: 0x060024E3 RID: 9443 RVA: 0x00054DCB File Offset: 0x00053DCB
		[SRCategory("CatAppearance")]
		[Localizable(true)]
		[AmbientValue(RightToLeft.Inherit)]
		[SRDescription("ControlRightToLeftDescr")]
		public override RightToLeft RightToLeft
		{
			get
			{
				if (this.RightToLeftInherited)
				{
					if (this.SourceControlInternal != null)
					{
						return this.SourceControlInternal.RightToLeft;
					}
					if (this.OwnerItem != null)
					{
						return this.OwnerItem.RightToLeft;
					}
				}
				return base.RightToLeft;
			}
			set
			{
				base.RightToLeft = value;
			}
		}

		// Token: 0x170005BA RID: 1466
		// (get) Token: 0x060024E4 RID: 9444 RVA: 0x00054DD4 File Offset: 0x00053DD4
		private bool RightToLeftInherited
		{
			get
			{
				return !this.ShouldSerializeRightToLeft();
			}
		}

		// Token: 0x14000103 RID: 259
		// (add) Token: 0x060024E5 RID: 9445 RVA: 0x00054DDF File Offset: 0x00053DDF
		// (remove) Token: 0x060024E6 RID: 9446 RVA: 0x00054DE8 File Offset: 0x00053DE8
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Browsable(false)]
		public new event ScrollEventHandler Scroll
		{
			add
			{
				base.Scroll += value;
			}
			remove
			{
				base.Scroll -= value;
			}
		}

		// Token: 0x170005BB RID: 1467
		// (get) Token: 0x060024E7 RID: 9447 RVA: 0x00054DF1 File Offset: 0x00053DF1
		// (set) Token: 0x060024E8 RID: 9448 RVA: 0x00054DF9 File Offset: 0x00053DF9
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new bool Stretch
		{
			get
			{
				return base.Stretch;
			}
			set
			{
				base.Stretch = value;
			}
		}

		// Token: 0x14000104 RID: 260
		// (add) Token: 0x060024E9 RID: 9449 RVA: 0x00054E02 File Offset: 0x00053E02
		// (remove) Token: 0x060024EA RID: 9450 RVA: 0x00054E0B File Offset: 0x00053E0B
		[EditorBrowsable(EditorBrowsableState.Always)]
		[Browsable(false)]
		public new event EventHandler StyleChanged
		{
			add
			{
				base.StyleChanged += value;
			}
			remove
			{
				base.StyleChanged -= value;
			}
		}

		// Token: 0x170005BC RID: 1468
		// (get) Token: 0x060024EB RID: 9451 RVA: 0x00054E14 File Offset: 0x00053E14
		// (set) Token: 0x060024EC RID: 9452 RVA: 0x00054E2B File Offset: 0x00053E2B
		internal Control SourceControlInternal
		{
			get
			{
				return base.Properties.GetObject(ToolStripDropDown.PropSourceControl) as Control;
			}
			set
			{
				base.Properties.SetObject(ToolStripDropDown.PropSourceControl, value);
			}
		}

		// Token: 0x170005BD RID: 1469
		// (get) Token: 0x060024ED RID: 9453 RVA: 0x00054E3E File Offset: 0x00053E3E
		internal override int ShowParams
		{
			get
			{
				return 4;
			}
		}

		// Token: 0x14000105 RID: 261
		// (add) Token: 0x060024EE RID: 9454 RVA: 0x00054E41 File Offset: 0x00053E41
		// (remove) Token: 0x060024EF RID: 9455 RVA: 0x00054E4A File Offset: 0x00053E4A
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler TabStopChanged
		{
			add
			{
				base.TabStopChanged += value;
			}
			remove
			{
				base.TabStopChanged -= value;
			}
		}

		// Token: 0x14000106 RID: 262
		// (add) Token: 0x060024F0 RID: 9456 RVA: 0x00054E53 File Offset: 0x00053E53
		// (remove) Token: 0x060024F1 RID: 9457 RVA: 0x00054E5C File Offset: 0x00053E5C
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public new event EventHandler TextChanged
		{
			add
			{
				base.TextChanged += value;
			}
			remove
			{
				base.TextChanged -= value;
			}
		}

		// Token: 0x170005BE RID: 1470
		// (get) Token: 0x060024F2 RID: 9458 RVA: 0x00054E65 File Offset: 0x00053E65
		// (set) Token: 0x060024F3 RID: 9459 RVA: 0x00054E6D File Offset: 0x00053E6D
		[DefaultValue(ToolStripTextDirection.Horizontal)]
		[Browsable(false)]
		[SRDescription("ToolStripTextDirectionDescr")]
		[SRCategory("CatAppearance")]
		public override ToolStripTextDirection TextDirection
		{
			get
			{
				return base.TextDirection;
			}
			set
			{
				base.TextDirection = value;
			}
		}

		// Token: 0x170005BF RID: 1471
		// (get) Token: 0x060024F4 RID: 9460 RVA: 0x00054E76 File Offset: 0x00053E76
		protected virtual bool TopMost
		{
			get
			{
				return true;
			}
		}

		// Token: 0x170005C0 RID: 1472
		// (get) Token: 0x060024F5 RID: 9461 RVA: 0x00054E79 File Offset: 0x00053E79
		// (set) Token: 0x060024F6 RID: 9462 RVA: 0x00054E81 File Offset: 0x00053E81
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[Browsable(false)]
		public bool TopLevel
		{
			get
			{
				return base.GetTopLevel();
			}
			set
			{
				if (value != base.GetTopLevel())
				{
					base.SetTopLevelInternal(value);
					this.SetTopLevelStyle(value);
				}
			}
		}

		// Token: 0x170005C1 RID: 1473
		// (get) Token: 0x060024F7 RID: 9463 RVA: 0x00054E9A File Offset: 0x00053E9A
		// (set) Token: 0x060024F8 RID: 9464 RVA: 0x00054EA2 File Offset: 0x00053EA2
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		public new int TabIndex
		{
			get
			{
				return base.TabIndex;
			}
			set
			{
				base.TabIndex = value;
			}
		}

		// Token: 0x14000107 RID: 263
		// (add) Token: 0x060024F9 RID: 9465 RVA: 0x00054EAB File Offset: 0x00053EAB
		// (remove) Token: 0x060024FA RID: 9466 RVA: 0x00054EB4 File Offset: 0x00053EB4
		[Browsable(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		[SRCategory("CatPropertyChanged")]
		[SRDescription("ControlOnTabIndexChangedDescr")]
		public new event EventHandler TabIndexChanged
		{
			add
			{
				base.TabIndexChanged += value;
			}
			remove
			{
				base.TabIndexChanged -= value;
			}
		}

		// Token: 0x14000108 RID: 264
		// (add) Token: 0x060024FB RID: 9467 RVA: 0x00054EBD File Offset: 0x00053EBD
		// (remove) Token: 0x060024FC RID: 9468 RVA: 0x00054EC6 File Offset: 0x00053EC6
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Browsable(false)]
		public new event EventHandler Validated
		{
			add
			{
				base.Validated += value;
			}
			remove
			{
				base.Validated -= value;
			}
		}

		// Token: 0x14000109 RID: 265
		// (add) Token: 0x060024FD RID: 9469 RVA: 0x00054ECF File Offset: 0x00053ECF
		// (remove) Token: 0x060024FE RID: 9470 RVA: 0x00054ED8 File Offset: 0x00053ED8
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Browsable(false)]
		public new event CancelEventHandler Validating
		{
			add
			{
				base.Validating += value;
			}
			remove
			{
				base.Validating -= value;
			}
		}

		// Token: 0x170005C2 RID: 1474
		// (get) Token: 0x060024FF RID: 9471 RVA: 0x00054EE1 File Offset: 0x00053EE1
		// (set) Token: 0x06002500 RID: 9472 RVA: 0x00054EE9 File Offset: 0x00053EE9
		[Localizable(true)]
		[SRDescription("ControlVisibleDescr")]
		[DefaultValue(false)]
		[Browsable(false)]
		[DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
		[SRCategory("CatBehavior")]
		public new bool Visible
		{
			get
			{
				return base.Visible;
			}
			set
			{
				base.Visible = value;
			}
		}

		// Token: 0x170005C3 RID: 1475
		// (get) Token: 0x06002501 RID: 9473 RVA: 0x00054EF2 File Offset: 0x00053EF2
		// (set) Token: 0x06002502 RID: 9474 RVA: 0x00054F10 File Offset: 0x00053F10
		internal bool WorkingAreaConstrained
		{
			get
			{
				return !this.state[ToolStripDropDown.stateNotWorkingAreaConstrained] || this.IsRestrictedWindow;
			}
			set
			{
				bool flag = !value;
				this.state[ToolStripDropDown.stateNotWorkingAreaConstrained] = flag;
			}
		}

		// Token: 0x06002503 RID: 9475 RVA: 0x00054F33 File Offset: 0x00053F33
		internal void AssignToDropDownItem()
		{
			this.countDropDownItemsAssignedTo++;
		}

		// Token: 0x06002504 RID: 9476 RVA: 0x00054F44 File Offset: 0x00053F44
		internal void AdjustSize()
		{
			Size suggestedSize = this.GetSuggestedSize();
			if (suggestedSize != base.Size)
			{
				base.Size = suggestedSize;
			}
		}

		// Token: 0x06002505 RID: 9477 RVA: 0x00054F70 File Offset: 0x00053F70
		private void ApplyTopMost(bool topMost)
		{
			if (this.TopMost)
			{
				HandleRef handleRef = (topMost ? NativeMethods.HWND_TOPMOST : NativeMethods.HWND_NOTOPMOST);
				SafeNativeMethods.SetWindowPos(new HandleRef(this, base.Handle), handleRef, 0, 0, 0, 0, 19);
			}
		}

		// Token: 0x06002506 RID: 9478 RVA: 0x00054FAE File Offset: 0x00053FAE
		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				this.SourceControlInternal = null;
			}
			base.Dispose(disposing);
		}

		// Token: 0x06002507 RID: 9479 RVA: 0x00054FC4 File Offset: 0x00053FC4
		private void CancelAutoExpand()
		{
			ToolStrip toplevelOwnerToolStrip = this.GetToplevelOwnerToolStrip();
			if (toplevelOwnerToolStrip != null)
			{
				toplevelOwnerToolStrip.MenuAutoExpand = false;
			}
		}

		// Token: 0x06002508 RID: 9480 RVA: 0x00054FE2 File Offset: 0x00053FE2
		internal override bool CanProcessMnemonic()
		{
			return (!this.IsRestrictedWindow || Application.MessageLoop) && base.CanProcessMnemonic();
		}

		// Token: 0x06002509 RID: 9481 RVA: 0x00054FFB File Offset: 0x00053FFB
		protected override AccessibleObject CreateAccessibilityInstance()
		{
			return new ToolStripDropDown.ToolStripDropDownAccessibleObject(this);
		}

		// Token: 0x0600250A RID: 9482 RVA: 0x00055004 File Offset: 0x00054004
		protected override LayoutSettings CreateLayoutSettings(ToolStripLayoutStyle style)
		{
			LayoutSettings layoutSettings = base.CreateLayoutSettings(style);
			if (style == ToolStripLayoutStyle.Flow)
			{
				FlowLayoutSettings flowLayoutSettings = layoutSettings as FlowLayoutSettings;
				flowLayoutSettings.FlowDirection = FlowDirection.TopDown;
				flowLayoutSettings.WrapContents = false;
				return flowLayoutSettings;
			}
			return layoutSettings;
		}

		// Token: 0x0600250B RID: 9483 RVA: 0x00055038 File Offset: 0x00054038
		protected override void CreateHandle()
		{
			base.CreateHandle();
			if (this.TopLevel)
			{
				this.ReparentToDropDownOwnerWindow();
				if (!this.AutoClose || !this.WorkingAreaConstrained)
				{
					this.ApplyTopMost(true);
				}
			}
			if (base.DesignMode)
			{
				base.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.OptimizedDoubleBuffer, false);
			}
		}

		// Token: 0x0600250C RID: 9484 RVA: 0x00055084 File Offset: 0x00054084
		public void Close()
		{
			this.SetCloseReason(ToolStripDropDownCloseReason.CloseCalled);
			this.Visible = false;
			if (ToolStripManager.ModalMenuFilter.GetActiveToolStrip() == null)
			{
				ToolStripManager.ModalMenuFilter.ExitMenuMode();
			}
		}

		// Token: 0x0600250D RID: 9485 RVA: 0x000550A0 File Offset: 0x000540A0
		private void ResetCloseReason()
		{
			this.closeReason = ToolStripDropDownCloseReason.AppFocusChange;
		}

		// Token: 0x0600250E RID: 9486 RVA: 0x000550A9 File Offset: 0x000540A9
		internal void SetCloseReason(ToolStripDropDownCloseReason reason)
		{
			this.closeReason = reason;
		}

		// Token: 0x0600250F RID: 9487 RVA: 0x000550B2 File Offset: 0x000540B2
		public void Close(ToolStripDropDownCloseReason reason)
		{
			this.SetCloseReason(reason);
			this.Visible = false;
		}

		// Token: 0x06002510 RID: 9488 RVA: 0x000550C4 File Offset: 0x000540C4
		internal override Rectangle ApplyBoundsConstraints(int suggestedX, int suggestedY, int proposedWidth, int proposedHeight)
		{
			Rectangle rectangle = base.ApplyBoundsConstraints(suggestedX, suggestedY, proposedWidth, proposedHeight);
			if (this.IsRestrictedWindow && this.TopMost)
			{
				rectangle = WindowsFormsUtils.ConstrainToScreenWorkingAreaBounds(rectangle);
			}
			return rectangle;
		}

		// Token: 0x06002511 RID: 9489 RVA: 0x000550F8 File Offset: 0x000540F8
		internal Rectangle GetDropDownBounds(Rectangle suggestedBounds)
		{
			Rectangle rectangle2;
			if (this.TopLevel)
			{
				Point point = Point.Empty;
				if (this.ownerItem != null && this.ownerItem is ToolStripDropDownItem)
				{
					point = ((ToolStripDropDownItem)this.ownerItem).DropDownLocation;
				}
				else
				{
					point = suggestedBounds.Location;
				}
				Rectangle rectangle = new Rectangle(point, suggestedBounds.Size);
				if (this.WorkingAreaConstrained)
				{
					rectangle2 = WindowsFormsUtils.ConstrainToScreenWorkingAreaBounds(rectangle);
				}
				else
				{
					rectangle2 = WindowsFormsUtils.ConstrainToScreenBounds(rectangle);
				}
			}
			else
			{
				Point point2 = Point.Empty;
				if (this.ownerItem != null && this.ownerItem is ToolStripDropDownItem && this.ParentInternal != null)
				{
					point2 = this.ParentInternal.PointToClient(((ToolStripDropDownItem)this.ownerItem).DropDownLocation);
				}
				else
				{
					point2 = suggestedBounds.Location;
				}
				rectangle2 = new Rectangle(point2, suggestedBounds.Size);
			}
			return rectangle2;
		}

		// Token: 0x06002512 RID: 9490 RVA: 0x000551C8 File Offset: 0x000541C8
		internal Rectangle CalculateDropDownLocation(Point start, ToolStripDropDownDirection dropDownDirection)
		{
			Point empty = Point.Empty;
			if (!base.IsHandleCreated)
			{
				LayoutTransaction.DoLayout(this, this, PropertyNames.PreferredSize);
			}
			Rectangle rectangle = new Rectangle(Point.Empty, this.GetSuggestedSize());
			switch (dropDownDirection)
			{
			case ToolStripDropDownDirection.AboveLeft:
				empty.X = -rectangle.Width;
				empty.Y = -rectangle.Height;
				break;
			case ToolStripDropDownDirection.AboveRight:
				empty.Y = -rectangle.Height;
				break;
			case ToolStripDropDownDirection.BelowLeft:
			case ToolStripDropDownDirection.Left:
				empty.X = -rectangle.Width;
				break;
			}
			rectangle.Location = new Point(start.X + empty.X, start.Y + empty.Y);
			if (this.WorkingAreaConstrained)
			{
				rectangle = WindowsFormsUtils.ConstrainToScreenWorkingAreaBounds(rectangle);
			}
			return rectangle;
		}

		// Token: 0x06002513 RID: 9491 RVA: 0x0005529D File Offset: 0x0005429D
		internal Size GetSuggestedSize()
		{
			if (this.AutoSize)
			{
				return this.GetPreferredSize(Size.Empty);
			}
			return base.Size;
		}

		// Token: 0x06002514 RID: 9492 RVA: 0x000552BC File Offset: 0x000542BC
		internal override ToolStrip GetToplevelOwnerToolStrip()
		{
			ToolStripDropDown firstDropDown = this.GetFirstDropDown();
			if (firstDropDown.OwnerItem != null)
			{
				return firstDropDown.OwnerToolStrip;
			}
			return null;
		}

		// Token: 0x06002515 RID: 9493 RVA: 0x000552E0 File Offset: 0x000542E0
		internal ToolStripItem GetToplevelOwnerItem()
		{
			ToolStripDropDown firstDropDown = this.GetFirstDropDown();
			return firstDropDown.OwnerItem;
		}

		// Token: 0x06002516 RID: 9494 RVA: 0x000552FA File Offset: 0x000542FA
		internal override void HandleItemClicked(ToolStripItem dismissingItem)
		{
			this.SourceControlInternal = null;
			base.HandleItemClicked(dismissingItem);
		}

		// Token: 0x06002517 RID: 9495 RVA: 0x0005530C File Offset: 0x0005430C
		internal virtual void Initialize()
		{
			base.SetState(2, false);
			base.SetTopLevelInternal(true);
			base.SetState(32, true);
			base.SetStyle(ControlStyles.ResizeRedraw, true);
			base.UpdateStyles();
			this.GripStyle = ToolStripGripStyle.Hidden;
			this.CanOverflow = false;
			base.LayoutStyle = ToolStripLayoutStyle.Flow;
			base.MenuAutoExpand = true;
			this.AutoSize = true;
		}

		// Token: 0x06002518 RID: 9496 RVA: 0x00055364 File Offset: 0x00054364
		protected virtual void OnClosed(ToolStripDropDownClosedEventArgs e)
		{
			if (base.IsHandleCreated && (this.ownerItem == null || !this.ownerItem.IsInDesignMode))
			{
				base.AccessibilityNotifyClients(AccessibleEvents.SystemMenuPopupEnd, -1);
			}
			ToolStripDropDownClosedEventHandler toolStripDropDownClosedEventHandler = (ToolStripDropDownClosedEventHandler)base.Events[ToolStripDropDown.EventClosed];
			if (toolStripDropDownClosedEventHandler != null)
			{
				toolStripDropDownClosedEventHandler(this, e);
			}
		}

		// Token: 0x06002519 RID: 9497 RVA: 0x000553B8 File Offset: 0x000543B8
		protected virtual void OnClosing(ToolStripDropDownClosingEventArgs e)
		{
			ToolStripDropDownClosingEventHandler toolStripDropDownClosingEventHandler = (ToolStripDropDownClosingEventHandler)base.Events[ToolStripDropDown.EventClosing];
			if (toolStripDropDownClosingEventHandler != null)
			{
				toolStripDropDownClosingEventHandler(this, e);
			}
		}

		// Token: 0x0600251A RID: 9498 RVA: 0x000553E6 File Offset: 0x000543E6
		protected override void OnHandleCreated(EventArgs e)
		{
			base.UpdateStyles();
			base.OnHandleCreated(e);
			this.UpdateLayered();
		}

		// Token: 0x0600251B RID: 9499 RVA: 0x000553FC File Offset: 0x000543FC
		protected override void OnItemClicked(ToolStripItemClickedEventArgs e)
		{
			try
			{
				base.OnItemClicked(e);
			}
			finally
			{
				ToolStripDropDownItem toolStripDropDownItem = e.ClickedItem as ToolStripDropDownItem;
				if (this.AutoClose && (toolStripDropDownItem == null || (toolStripDropDownItem is ToolStripSplitButton && !toolStripDropDownItem.DropDown.Visible) || !toolStripDropDownItem.HasDropDownItems))
				{
					this.Close(ToolStripDropDownCloseReason.ItemClicked);
				}
			}
		}

		// Token: 0x0600251C RID: 9500 RVA: 0x00055460 File Offset: 0x00054460
		protected override void OnLayout(LayoutEventArgs e)
		{
			this.AdjustSize();
			base.OnLayout(e);
		}

		// Token: 0x0600251D RID: 9501 RVA: 0x00055470 File Offset: 0x00054470
		protected virtual void OnOpening(CancelEventArgs e)
		{
			CancelEventHandler cancelEventHandler = (CancelEventHandler)base.Events[ToolStripDropDown.EventOpening];
			if (cancelEventHandler != null)
			{
				cancelEventHandler(this, e);
			}
		}

		// Token: 0x0600251E RID: 9502 RVA: 0x000554A0 File Offset: 0x000544A0
		protected virtual void OnOpened(EventArgs e)
		{
			if (base.IsHandleCreated && (this.ownerItem == null || !this.ownerItem.IsInDesignMode))
			{
				base.AccessibilityNotifyClients(AccessibleEvents.SystemMenuPopupStart, -1);
			}
			EventHandler eventHandler = (EventHandler)base.Events[ToolStripDropDown.EventOpened];
			if (eventHandler != null)
			{
				eventHandler(this, e);
			}
		}

		// Token: 0x0600251F RID: 9503 RVA: 0x000554F4 File Offset: 0x000544F4
		protected override void OnVisibleChanged(EventArgs e)
		{
			if (this.Location != this.displayLocation)
			{
				this.Location = this.displayLocation;
				this.displayLocation = this.Location;
			}
			if (this.AutoScroll || base.LayoutRequired)
			{
				base.OnVisibleChanged(e);
				return;
			}
			base.SuspendLayout();
			try
			{
				base.OnVisibleChanged(e);
			}
			finally
			{
				base.ResumeLayout(false);
			}
		}

		// Token: 0x06002520 RID: 9504 RVA: 0x0005556C File Offset: 0x0005456C
		protected override void OnParentChanged(EventArgs e)
		{
			base.OnParentChanged(e);
			Rectangle bounds = base.Bounds;
			this.SetBoundsCore(bounds.X, bounds.Y, bounds.Width, bounds.Height, BoundsSpecified.Location);
		}

		// Token: 0x06002521 RID: 9505 RVA: 0x000555AC File Offset: 0x000545AC
		protected override void OnMouseUp(MouseEventArgs mea)
		{
			base.OnMouseUp(mea);
			if (!base.ClientRectangle.Contains(mea.Location))
			{
				bool flag = true;
				if (this.OwnerToolStrip != null && this.OwnerItem != null && this.OwnerItem.Bounds.Contains(WindowsFormsUtils.TranslatePoint(mea.Location, this, this.OwnerToolStrip)))
				{
					flag = false;
				}
				if (flag)
				{
					this.DismissAll();
					this.CancelAutoExpand();
				}
			}
		}

		// Token: 0x06002522 RID: 9506 RVA: 0x00055620 File Offset: 0x00054620
		internal void OnOwnerItemFontChanged(EventArgs e)
		{
			if (this.IsAutoGenerated)
			{
				using (new LayoutTransaction(this, this.OwnerItem, PropertyNames.Font))
				{
					this.OnFontChanged(e);
				}
			}
		}

		// Token: 0x06002523 RID: 9507 RVA: 0x0005566C File Offset: 0x0005466C
		internal void SelectPreviousToolStrip()
		{
			ToolStripItem toolStripItem = this.OwnerItem;
			base.Hide();
			if (toolStripItem != null)
			{
				toolStripItem.Select();
				if (this.OwnerToolStrip != null && !this.OwnerToolStrip.IsDropDown)
				{
					if (ToolStripManager.ModalMenuFilter.GetActiveToolStrip() != this.OwnerToolStrip)
					{
						ToolStripManager.ModalMenuFilter.SetActiveToolStrip(this.OwnerToolStrip);
					}
					this.OwnerToolStrip.MenuAutoExpand = false;
					return;
				}
			}
			else
			{
				ToolStripManager.ModalMenuFilter.ExitMenuMode();
			}
		}

		// Token: 0x06002524 RID: 9508 RVA: 0x000556D0 File Offset: 0x000546D0
		internal override bool ProcessArrowKey(Keys keyCode)
		{
			ToolStripMenuItem.MenuTimer.Cancel();
			if (keyCode == Keys.Left || keyCode == Keys.Right)
			{
				bool rightAlignedMenus = SystemInformation.RightAlignedMenus;
				bool flag = (keyCode == Keys.Left && rightAlignedMenus) || (keyCode == Keys.Right && !rightAlignedMenus);
				if (!this.IsFirstDropDown && !flag)
				{
					this.Visible = false;
					return true;
				}
				bool flag2 = false;
				if (base.LayoutStyle == ToolStripLayoutStyle.Flow)
				{
					flag2 = FlowLayout.GetFlowDirection(this) == FlowDirection.TopDown && !FlowLayout.GetWrapContents(this);
				}
				if (flag2)
				{
					ToolStrip toplevelOwnerToolStrip = this.GetToplevelOwnerToolStrip();
					ToolStripItem toplevelOwnerItem = this.GetToplevelOwnerItem();
					bool flag3 = this.OwnerItem != null && this.OwnerItem.IsOnOverflow;
					if (flag || !flag3)
					{
						this.DismissAll();
					}
					else if (flag3)
					{
						this.Visible = false;
					}
					if (toplevelOwnerToolStrip != null && toplevelOwnerItem != null)
					{
						if (ToolStripManager.ModalMenuFilter.GetActiveToolStrip() != toplevelOwnerToolStrip)
						{
							ToolStripManager.ModalMenuFilter.SetActiveToolStrip(toplevelOwnerToolStrip);
						}
						toplevelOwnerToolStrip.SelectNextToolStripItem(toplevelOwnerItem, flag);
					}
					return true;
				}
			}
			return base.ProcessArrowKey(keyCode);
		}

		// Token: 0x06002525 RID: 9509 RVA: 0x000557B4 File Offset: 0x000547B4
		[UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)]
		protected override bool ProcessDialogKey(Keys keyData)
		{
			if (this.OwnerItem != null && this.OwnerItem.IsInDesignMode)
			{
				return false;
			}
			if (this.AutoClose && this.Visible)
			{
				if (ToolStripManager.IsMenuKey(keyData))
				{
					this.SetCloseReason(ToolStripDropDownCloseReason.Keyboard);
					this.DismissAll();
					ToolStrip toplevelOwnerToolStrip = this.GetToplevelOwnerToolStrip();
					if (toplevelOwnerToolStrip != null)
					{
						toplevelOwnerToolStrip.RestoreFocusInternal();
						ToolStripManager.ModalMenuFilter.MenuKeyToggle = true;
					}
					ToolStripManager.ModalMenuFilter.ExitMenuMode();
					return true;
				}
				if ((keyData & Keys.KeyCode) == Keys.Escape)
				{
					this.SetCloseReason(ToolStripDropDownCloseReason.Keyboard);
					this.SelectPreviousToolStrip();
					return true;
				}
			}
			return base.ProcessDialogKey(keyData);
		}

		// Token: 0x06002526 RID: 9510 RVA: 0x0005583B File Offset: 0x0005483B
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)]
		protected override bool ProcessDialogChar(char charCode)
		{
			return ((this.OwnerItem == null || this.OwnerItem.Pressed) && charCode != ' ' && this.ProcessMnemonic(charCode)) || base.ProcessDialogChar(charCode);
		}

		// Token: 0x06002527 RID: 9511 RVA: 0x00055869 File Offset: 0x00054869
		[UIPermission(SecurityAction.LinkDemand, Window = UIPermissionWindow.AllWindows)]
		protected internal override bool ProcessMnemonic(char charCode)
		{
			return this.CanProcessMnemonic() && base.ProcessMnemonic(charCode);
		}

		// Token: 0x06002528 RID: 9512 RVA: 0x0005587C File Offset: 0x0005487C
		internal override void ProcessDuplicateMnemonic(ToolStripItem item, char charCode)
		{
			if (!this.CanProcessMnemonic())
			{
				return;
			}
			if (item != null)
			{
				if (this.IsRestrictedWindow)
				{
					item.ProcessMnemonic(charCode);
					return;
				}
				base.ProcessDuplicateMnemonic(item, charCode);
			}
		}

		// Token: 0x06002529 RID: 9513 RVA: 0x000558A3 File Offset: 0x000548A3
		internal override void RecreateHandleCore()
		{
			if (this.Visible)
			{
				this.ReparentToDropDownOwnerWindow();
			}
			base.RecreateHandleCore();
			if (this.Visible)
			{
				this.ReparentToActiveToolStripWindow();
			}
		}

		// Token: 0x0600252A RID: 9514 RVA: 0x000558C7 File Offset: 0x000548C7
		private void ResetDropShadowEnabled()
		{
			this.DropShadowEnabled = true;
		}

		// Token: 0x0600252B RID: 9515 RVA: 0x000558D0 File Offset: 0x000548D0
		private void ReparentToActiveToolStripWindow()
		{
			ToolStripManager.ModalMenuFilter.SetActiveToolStrip(this);
			UnsafeNativeMethods.SetWindowLong(new HandleRef(this, base.Handle), -8, ToolStripManager.ModalMenuFilter.ActiveHwnd);
		}

		// Token: 0x0600252C RID: 9516 RVA: 0x000558F4 File Offset: 0x000548F4
		private void ReparentToDropDownOwnerWindow()
		{
			NativeWindow dropDownOwnerWindow = this.DropDownOwnerWindow;
			HandleRef handleRef = new HandleRef(dropDownOwnerWindow, dropDownOwnerWindow.Handle);
			UnsafeNativeMethods.SetWindowLong(new HandleRef(this, base.Handle), -8, handleRef);
		}

		// Token: 0x0600252D RID: 9517 RVA: 0x0005592C File Offset: 0x0005492C
		[EditorBrowsable(EditorBrowsableState.Never)]
		protected override void ScaleCore(float dx, float dy)
		{
			base.SuspendLayout();
			try
			{
				Size clientSize = base.ClientSize;
				Size minimumSize = this.MinimumSize;
				Size maximumSize = this.MaximumSize;
				base.ClientSize = base.ScaleSize(clientSize, dx, dy);
				if (!this.MinimumSize.IsEmpty)
				{
					this.MinimumSize = base.ScaleSize(minimumSize, dx, dy);
				}
				if (!this.MaximumSize.IsEmpty)
				{
					this.MaximumSize = base.ScaleSize(maximumSize, dx, dy);
				}
				base.ScaleDockPadding(dx, dy);
				foreach (object obj in base.Controls)
				{
					Control control = (Control)obj;
					if (control != null)
					{
						control.Scale(dx, dy);
					}
				}
			}
			finally
			{
				base.ResumeLayout();
			}
		}

		// Token: 0x0600252E RID: 9518 RVA: 0x00055A18 File Offset: 0x00054A18
		protected override void ScaleControl(SizeF factor, BoundsSpecified specified)
		{
			base.ScaleControl(factor, specified);
			Size minimumSize = this.MinimumSize;
			Size maximumSize = this.MaximumSize;
			if (!this.MinimumSize.IsEmpty)
			{
				this.MinimumSize = base.ScaleSize(minimumSize, factor.Width, factor.Height);
			}
			if (!this.MaximumSize.IsEmpty)
			{
				this.MaximumSize = base.ScaleSize(maximumSize, factor.Width, factor.Height);
			}
		}

		// Token: 0x0600252F RID: 9519 RVA: 0x00055A91 File Offset: 0x00054A91
		internal void SetAutoGeneratedInternal(bool autoGenerated)
		{
			this.isAutoGenerated = autoGenerated;
		}

		// Token: 0x06002530 RID: 9520 RVA: 0x00055A9C File Offset: 0x00054A9C
		protected override void SetBoundsCore(int x, int y, int width, int height, BoundsSpecified specified)
		{
			Rectangle dropDownBounds = new Rectangle(x, y, width, height);
			dropDownBounds = this.GetDropDownBounds(dropDownBounds);
			base.SetBoundsCore(dropDownBounds.X, dropDownBounds.Y, dropDownBounds.Width, dropDownBounds.Height, specified);
		}

		// Token: 0x06002531 RID: 9521 RVA: 0x00055AE4 File Offset: 0x00054AE4
		private void SetTopLevelStyle(bool value)
		{
			if (base.IsHandleCreated)
			{
				int num = base.WindowStyle;
				if (value)
				{
					num &= -1073741825;
					num |= int.MinValue;
				}
				else
				{
					num &= int.MaxValue;
					num |= 1073741824;
				}
				base.WindowStyle = num;
			}
		}

		// Token: 0x06002532 RID: 9522 RVA: 0x00055B2C File Offset: 0x00054B2C
		protected override void SetVisibleCore(bool visible)
		{
			if (this.state[ToolStripDropDown.stateInSetVisibleCore])
			{
				return;
			}
			this.state[ToolStripDropDown.stateInSetVisibleCore] = true;
			try
			{
				if (visible)
				{
					if (base.LayoutRequired)
					{
						LayoutTransaction.DoLayout(this, this, PropertyNames.Visible);
					}
					bool flag = true;
					try
					{
						UnsafeNativeMethods.GetForegroundWindow();
						CancelEventArgs cancelEventArgs = new CancelEventArgs(this.DisplayedItems.Count == 0);
						this.OnOpening(cancelEventArgs);
						flag = cancelEventArgs.Cancel;
						if (!flag)
						{
							if (this.TopLevel)
							{
								this.ReparentToActiveToolStripWindow();
							}
							if (this.OwnerToolStrip != null)
							{
								this.OwnerToolStrip.ActiveDropDowns.Add(this);
								this.OwnerToolStrip.SnapMouseLocation();
								if (this.OwnerToolStrip.CaptureInternal)
								{
									base.CaptureInternal = true;
								}
							}
							base.SetVisibleCore(visible);
							if (this.TopLevel)
							{
								this.ApplyTopMost(true);
							}
							else if (base.IsHandleCreated && SafeNativeMethods.IsWindowEnabled(new HandleRef(this, base.Handle)))
							{
								SafeNativeMethods.SetWindowPos(new HandleRef(this, base.Handle), NativeMethods.HWND_TOP, 0, 0, 0, 0, 19);
							}
						}
						goto IL_02BE;
					}
					finally
					{
						if (!flag)
						{
							this.OnOpened(new EventArgs());
						}
					}
				}
				if (this.GetVisibleCore())
				{
					ToolStripDropDownCloseReason toolStripDropDownCloseReason = this.closeReason;
					this.ResetCloseReason();
					ToolStripDropDownClosingEventArgs toolStripDropDownClosingEventArgs = new ToolStripDropDownClosingEventArgs(toolStripDropDownCloseReason);
					if (toolStripDropDownClosingEventArgs.CloseReason != ToolStripDropDownCloseReason.CloseCalled)
					{
						toolStripDropDownClosingEventArgs.Cancel = !this.AutoClose;
					}
					else
					{
						toolStripDropDownClosingEventArgs.Cancel = false;
					}
					try
					{
						this.OnClosing(toolStripDropDownClosingEventArgs);
						goto IL_02BE;
					}
					finally
					{
						if (!toolStripDropDownClosingEventArgs.Cancel || this.IsRestrictedWindow)
						{
							this.DismissActiveDropDowns();
							if (toolStripDropDownCloseReason == ToolStripDropDownCloseReason.ItemClicked)
							{
								this.DismissAll();
								ToolStripItem toplevelOwnerItem = this.GetToplevelOwnerItem();
								if (toplevelOwnerItem != null)
								{
									toplevelOwnerItem.Unselect();
								}
								this.CancelAutoExpand();
								ToolStripManager.ModalMenuFilter.RemoveActiveToolStrip(this);
								ToolStripManager.ModalMenuFilter.ExitMenuMode();
							}
							else
							{
								ToolStripManager.ModalMenuFilter.RemoveActiveToolStrip(this);
							}
							Rectangle bounds = base.Bounds;
							try
							{
								base.SetVisibleCore(visible);
							}
							finally
							{
								if (this.OwnerToolStrip != null)
								{
									this.OwnerToolStrip.ActiveDropDowns.Remove(this);
								}
								base.ActiveDropDowns.Clear();
								if (base.CaptureInternal)
								{
									base.CaptureInternal = false;
								}
							}
							ToolStripDropDownClosedEventArgs toolStripDropDownClosedEventArgs = new ToolStripDropDownClosedEventArgs(toolStripDropDownCloseReason);
							this.OnClosed(toolStripDropDownClosedEventArgs);
							if (this.TopLevel && (!base.IsDisposed || !base.Disposing))
							{
								this.ReparentToDropDownOwnerWindow();
							}
							if (toolStripDropDownCloseReason != ToolStripDropDownCloseReason.ItemClicked)
							{
								this.SourceControlInternal = null;
							}
							if (!base.DesignMode && this.IsFirstDropDown && this.OwnerItem != null && this.TopLevel)
							{
								ToolStrip toplevelOwnerToolStrip = this.GetToplevelOwnerToolStrip();
								if (toplevelOwnerToolStrip != null && !toplevelOwnerToolStrip.IsDisposed && !toplevelOwnerToolStrip.Disposing)
								{
									bounds.Location = toplevelOwnerToolStrip.PointToClient(bounds.Location);
									bounds.Intersect(toplevelOwnerToolStrip.ClientRectangle);
									if (bounds.Width > 0 && bounds.Height > 0)
									{
										toplevelOwnerToolStrip.Invalidate(bounds);
										toplevelOwnerToolStrip.Update();
									}
								}
							}
						}
					}
				}
				ToolStripManager.ModalMenuFilter.RemoveActiveToolStrip(this);
				IL_02BE:;
			}
			finally
			{
				this.state[ToolStripDropDown.stateInSetVisibleCore] = false;
			}
		}

		// Token: 0x06002533 RID: 9523 RVA: 0x00055E70 File Offset: 0x00054E70
		private bool ShouldSerializeDefaultDropDownDirection()
		{
			return this.childDropDownDirection != ToolStripDropDownDirection.Default;
		}

		// Token: 0x06002534 RID: 9524 RVA: 0x00055E80 File Offset: 0x00054E80
		private void UpdateLayered()
		{
			if (this.state[ToolStripDropDown.stateLayered] && base.IsHandleCreated && this.TopLevel && OSFeature.Feature.IsPresent(OSFeature.LayeredWindows) && !UnsafeNativeMethods.SetLayeredWindowAttributes(new HandleRef(this, base.Handle), 0, this.OpacityAsByte, 2))
			{
				throw new Win32Exception();
			}
		}

		// Token: 0x06002535 RID: 9525 RVA: 0x00055EE3 File Offset: 0x00054EE3
		[EditorBrowsable(EditorBrowsableState.Never)]
		[Browsable(false)]
		public new void Show()
		{
			base.Show();
		}

		// Token: 0x06002536 RID: 9526 RVA: 0x00055EEC File Offset: 0x00054EEC
		public void Show(Control control, Point position)
		{
			if (control == null)
			{
				throw new ArgumentNullException("control");
			}
			this.SourceControlInternal = control;
			if (this.OwnerItem == null && control.RightToLeft == RightToLeft.Yes)
			{
				this.AdjustSize();
				position.Offset(control.IsMirrored ? base.Width : (-base.Width), 0);
			}
			this.displayLocation = control.PointToScreen(position);
			this.Location = this.displayLocation;
			this.ShowCore();
		}

		// Token: 0x06002537 RID: 9527 RVA: 0x00055F64 File Offset: 0x00054F64
		public void Show(Control control, Point position, ToolStripDropDownDirection direction)
		{
			if (control == null)
			{
				throw new ArgumentNullException("control");
			}
			this.SourceControlInternal = control;
			this.displayLocation = this.CalculateDropDownLocation(control.PointToScreen(position), direction).Location;
			this.Location = this.displayLocation;
			this.ShowCore();
		}

		// Token: 0x06002538 RID: 9528 RVA: 0x00055FB4 File Offset: 0x00054FB4
		public void Show(Control control, int x, int y)
		{
			if (control == null)
			{
				throw new ArgumentNullException("control");
			}
			this.SourceControlInternal = control;
			this.Show(control, new Point(x, y));
		}

		// Token: 0x06002539 RID: 9529 RVA: 0x00055FD9 File Offset: 0x00054FD9
		public void Show(Point screenLocation)
		{
			this.displayLocation = screenLocation;
			this.Location = this.displayLocation;
			this.ShowCore();
		}

		// Token: 0x0600253A RID: 9530 RVA: 0x00055FF4 File Offset: 0x00054FF4
		public void Show(Point position, ToolStripDropDownDirection direction)
		{
			this.displayLocation = this.CalculateDropDownLocation(position, direction).Location;
			this.Location = this.displayLocation;
			this.ShowCore();
		}

		// Token: 0x0600253B RID: 9531 RVA: 0x00056029 File Offset: 0x00055029
		public void Show(int x, int y)
		{
			this.displayLocation = new Point(x, y);
			this.Location = this.displayLocation;
			this.ShowCore();
		}

		// Token: 0x0600253C RID: 9532 RVA: 0x0005604A File Offset: 0x0005504A
		private void ShowCore()
		{
			this.Show();
		}

		// Token: 0x0600253D RID: 9533 RVA: 0x00056052 File Offset: 0x00055052
		private bool ShouldSerializeDropShadowEnabled()
		{
			return !this.dropShadowEnabled;
		}

		// Token: 0x0600253E RID: 9534 RVA: 0x0005605D File Offset: 0x0005505D
		internal override bool ShouldSerializeLayoutStyle()
		{
			return base.LayoutStyle != ToolStripLayoutStyle.VerticalStackWithOverflow;
		}

		// Token: 0x0600253F RID: 9535 RVA: 0x0005606C File Offset: 0x0005506C
		internal void UnassignDropDownItem()
		{
			this.countDropDownItemsAssignedTo = Math.Max(--this.countDropDownItemsAssignedTo, 0);
		}

		// Token: 0x06002540 RID: 9536 RVA: 0x00056098 File Offset: 0x00055098
		[SecurityPermission(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]
		protected override void WndProc(ref Message m)
		{
			if (m.Msg >= 256 && m.Msg <= 264 && this.IsRestrictedWindow)
			{
				this.DefWndProc(ref m);
				return;
			}
			int msg = m.Msg;
			if (msg == 6)
			{
				if ((int)m.WParam == 1 && this.Visible && ToolStripManager.ModalMenuFilter.GetActiveToolStrip() != this)
				{
					ToolStripManager.ModalMenuFilter.SetActiveToolStrip(this);
				}
				base.WndProc(ref m);
				return;
			}
			if (msg == 134)
			{
				this.WmNCActivate(ref m);
				return;
			}
			base.WndProc(ref m);
		}

		// Token: 0x06002541 RID: 9537 RVA: 0x00056120 File Offset: 0x00055120
		internal void DismissAll()
		{
			ToolStripDropDown firstDropDown = this.GetFirstDropDown();
			firstDropDown.DismissActiveDropDowns();
			firstDropDown.Visible = false;
		}

		// Token: 0x06002542 RID: 9538 RVA: 0x00056144 File Offset: 0x00055144
		private void DismissActiveDropDowns()
		{
			int count = base.ActiveDropDowns.Count;
			if (count == 1)
			{
				ToolStripDropDown toolStripDropDown = base.ActiveDropDowns[0] as ToolStripDropDown;
				if (toolStripDropDown != null)
				{
					toolStripDropDown.Visible = false;
					return;
				}
			}
			else
			{
				ArrayList arrayList = base.ActiveDropDowns.Clone() as ArrayList;
				for (int i = 0; i < arrayList.Count; i++)
				{
					ToolStripDropDown toolStripDropDown2 = arrayList[i] as ToolStripDropDown;
					if (toolStripDropDown2 != null)
					{
						toolStripDropDown2.Visible = false;
					}
				}
			}
		}

		// Token: 0x06002543 RID: 9539 RVA: 0x000561BC File Offset: 0x000551BC
		private void WmNCActivate(ref Message m)
		{
			if (m.WParam != IntPtr.Zero)
			{
				if (!this.sendingActivateMessage)
				{
					this.sendingActivateMessage = true;
					try
					{
						HandleRef activeHwnd = ToolStripManager.ModalMenuFilter.ActiveHwnd;
						UnsafeNativeMethods.SendMessage(activeHwnd, 134, (IntPtr)1, NativeMethods.InvalidIntPtr);
						SafeNativeMethods.RedrawWindow(activeHwnd, null, NativeMethods.NullHandleRef, 1025);
						m.WParam = (IntPtr)1;
					}
					finally
					{
						this.sendingActivateMessage = false;
					}
				}
				this.DefWndProc(ref m);
				return;
			}
			base.WndProc(ref m);
		}

		// Token: 0x170005C4 RID: 1476
		// (get) Token: 0x06002544 RID: 9540 RVA: 0x00056250 File Offset: 0x00055250
		internal bool IsFirstDropDown
		{
			get
			{
				return !(this.OwnerToolStrip is ToolStripDropDown);
			}
		}

		// Token: 0x06002545 RID: 9541 RVA: 0x00056260 File Offset: 0x00055260
		internal ToolStripDropDown GetFirstDropDown()
		{
			ToolStripDropDown toolStripDropDown = this;
			for (ToolStripDropDown toolStripDropDown2 = toolStripDropDown.OwnerToolStrip as ToolStripDropDown; toolStripDropDown2 != null; toolStripDropDown2 = toolStripDropDown.OwnerToolStrip as ToolStripDropDown)
			{
				toolStripDropDown = toolStripDropDown2;
			}
			return toolStripDropDown;
		}

		// Token: 0x06002546 RID: 9542 RVA: 0x00056290 File Offset: 0x00055290
		internal static ToolStripDropDown GetFirstDropDown(ToolStrip start)
		{
			if (start == null || !start.IsDropDown)
			{
				return null;
			}
			ToolStripDropDown toolStripDropDown = start as ToolStripDropDown;
			return toolStripDropDown.GetFirstDropDown();
		}

		// Token: 0x040015B7 RID: 5559
		private ToolStripItem ownerItem;

		// Token: 0x040015B8 RID: 5560
		private bool isAutoGenerated;

		// Token: 0x040015B9 RID: 5561
		private Point dropDownLocation = Point.Empty;

		// Token: 0x040015BA RID: 5562
		private bool dropShadowEnabled = true;

		// Token: 0x040015BB RID: 5563
		private bool autoClose = true;

		// Token: 0x040015BC RID: 5564
		private bool autoSize = true;

		// Token: 0x040015BD RID: 5565
		private int countDropDownItemsAssignedTo;

		// Token: 0x040015BE RID: 5566
		private BitVector32 state = default(BitVector32);

		// Token: 0x040015BF RID: 5567
		private Point displayLocation = new Point(0, 0);

		// Token: 0x040015C0 RID: 5568
		private ToolStripDropDownDirection childDropDownDirection = ToolStripDropDownDirection.Default;

		// Token: 0x040015C1 RID: 5569
		private ToolStripDropDownCloseReason closeReason;

		// Token: 0x040015C2 RID: 5570
		private static readonly int PropOpacity = PropertyStore.CreateKey();

		// Token: 0x040015C3 RID: 5571
		private static readonly int PropDDRightToLeft = PropertyStore.CreateKey();

		// Token: 0x040015C4 RID: 5572
		private static readonly int PropSourceControl = PropertyStore.CreateKey();

		// Token: 0x040015C5 RID: 5573
		private static readonly object EventOpening = new object();

		// Token: 0x040015C6 RID: 5574
		private static readonly object EventOpened = new object();

		// Token: 0x040015C7 RID: 5575
		private static readonly object EventClosed = new object();

		// Token: 0x040015C8 RID: 5576
		private static readonly object EventClosing = new object();

		// Token: 0x040015C9 RID: 5577
		private static readonly object ToolStripParkingWindowKey = new object();

		// Token: 0x040015CA RID: 5578
		internal static TraceSwitch DropDownActivateDebug;

		// Token: 0x040015CB RID: 5579
		internal static TraceSwitch DropDownDebugBounds;

		// Token: 0x040015CC RID: 5580
		private static readonly int stateLayered = BitVector32.CreateMask();

		// Token: 0x040015CD RID: 5581
		private static readonly int stateAllowTransparency = BitVector32.CreateMask(ToolStripDropDown.stateLayered);

		// Token: 0x040015CE RID: 5582
		private static readonly int stateIsRestrictedWindow = BitVector32.CreateMask(ToolStripDropDown.stateAllowTransparency);

		// Token: 0x040015CF RID: 5583
		private static readonly int stateIsRestrictedWindowChecked = BitVector32.CreateMask(ToolStripDropDown.stateIsRestrictedWindow);

		// Token: 0x040015D0 RID: 5584
		private static readonly int stateNotWorkingAreaConstrained = BitVector32.CreateMask(ToolStripDropDown.stateIsRestrictedWindowChecked);

		// Token: 0x040015D1 RID: 5585
		private static readonly int stateInSetVisibleCore = BitVector32.CreateMask(ToolStripDropDown.stateNotWorkingAreaConstrained);

		// Token: 0x040015D2 RID: 5586
		private bool sendingActivateMessage;

		// Token: 0x020002A3 RID: 675
		[ComVisible(true)]
		public class ToolStripDropDownAccessibleObject : ToolStrip.ToolStripAccessibleObject
		{
			// Token: 0x06002548 RID: 9544 RVA: 0x0005636A File Offset: 0x0005536A
			public ToolStripDropDownAccessibleObject(ToolStripDropDown owner)
				: base(owner)
			{
				this.owner = owner;
			}

			// Token: 0x170005C5 RID: 1477
			// (get) Token: 0x06002549 RID: 9545 RVA: 0x0005637C File Offset: 0x0005537C
			// (set) Token: 0x0600254A RID: 9546 RVA: 0x000563E1 File Offset: 0x000553E1
			public override string Name
			{
				get
				{
					string text = this.owner.AccessibleName;
					if (text != null)
					{
						return text;
					}
					text = "DropDown";
					if (this.owner.OwnerItem != null && this.owner.OwnerItem.AccessibilityObject.Name != null)
					{
						text = this.owner.OwnerItem.AccessibilityObject.Name + text;
					}
					return text;
				}
				set
				{
					this.owner.AccessibleName = value;
				}
			}

			// Token: 0x170005C6 RID: 1478
			// (get) Token: 0x0600254B RID: 9547 RVA: 0x000563F0 File Offset: 0x000553F0
			public override AccessibleRole Role
			{
				get
				{
					AccessibleRole accessibleRole = base.Owner.AccessibleRole;
					if (accessibleRole != AccessibleRole.Default)
					{
						return accessibleRole;
					}
					return AccessibleRole.MenuPopup;
				}
			}

			// Token: 0x040015D3 RID: 5587
			private ToolStripDropDown owner;
		}
	}
}
