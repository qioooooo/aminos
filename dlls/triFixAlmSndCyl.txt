Properties/AssemblyInfo.cs

using System;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

[assembly: AssemblyVersion("3.7.1.0")]
[assembly: AssemblyDescription("iFix警報輪迴播音系統")]
[assembly: AssemblyProduct("triFixAlmSndCyl")]
[assembly: AssemblyTrademark("Trendtek")]
[assembly: AssemblyTitle("triFixAlmSndCyl")]
[assembly: AssemblyCompany("群泰科技")]
[assembly: AssemblyCopyright("Copyright © 群泰科技 2005")]
[assembly: AssemblyFileVersion("3.7.1")]
[assembly: Guid("46939be5-d940-48b0-9ebd-49f6cbb72125")]
[assembly: ComVisible(false)]

modDllChk.cs

using System;
using System.Reflection;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace triFixAlmSndCyl
{
	[StandardModule]
	internal sealed class modDllChk
	{
		public static void subDLLCheck()
		{
			string text = Application.StartupPath + "\\";
			modDllChk.subDLLCheck(text + "GeFanuc.iFixToolkit.Adapter", "GeFanuc.iFixToolkit.Adapter.Helper");
			modDllChk.subDLLCheck(text + "kvNetClass", "kvNetClass.clsCrypt");
			modDllChk.subDLLCheck(text + "Trendtek.iFix", "Trendtek.iFix.FixHelper");
		}
		public static void subDLLCheck(string DllName, string ClassName)
		{
			try
			{
				Assembly assembly = Assembly.LoadFrom(DllName + ".dll");
				Type type = assembly.GetType(ClassName);
				if (Information.IsNothing(type))
				{
					MessageBox.Show(string.Concat(new string[] { "In the <", DllName, ".dll> doesn't have <", ClassName, "> CLASS" }), "Class Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
					Environment.Exit(0);
				}
			}
			catch (Exception ex)
			{
				MessageBox.Show("Missing  <'" + DllName + ".dll> file", "Error", MessageBoxButtons.OK, MessageBoxIcon.Hand);
				Environment.Exit(0);
			}
		}
	}
}

modpublic.cs

using System;
using System.Data;
using System.Windows.Forms;
using Microsoft.VisualBasic.CompilerServices;

namespace triFixAlmSndCyl
{
	[StandardModule]
	internal sealed class modpublic
	{
		public static object g_Excel;
		public static frmAlarmSndCfg frmConfig;
		public static frmAlmSndRun frmRun;
		public static bool g_StopSound = false;
		public static DateTime g_DemoEndTime;
		public static bool g_biFixStarted = false;
		public static bool g_Mute = false;
		public static bool g_Demo;
		public static int g_iDelay = 0;
		public static bool g_ShowEvt = false;
		public static bool g_ShowErr = false;
		public static string g_WMCOPYDATA = "";
		public static string g_sCfgName = Application.StartupPath + "\\DEFAULT.TAC";
		public static int g_iSoundTime = 5;
		public static int g_iScanTime = 500;
		public static bool g_bMenuBar;
		public static bool g_bBackground;
		public static bool g_bPlayOnce;
		public static bool g_bMultiInstance;
		public static bool g_bUsingPlayFinishedNowFunction;
		public static int g_nPlayCount = 0;
		internal static IntPtr g_Gnum = IntPtr.Zero;
		internal static int[] g_ReadTagHadles;
		public static DataTable g_dtSoundQueue = new DataTable();
		public static string[] g_aPriorityForArea = new string[] { "CRITICAL", "HIHI", "HIGH", "MEDIUM", "LOW", "LOLO", "INFO" };
		public static string[] g_aPriorityForAnalogTag = new string[] { "HIHI", "HI", "LO", "LOLO" };
		public static string[] g_aPriorityList = new string[] { "NOPRI", "CRITICAL", "HIHI", "HIGH", "MEDIUM", "LOW", "LOLO", "INFO", "HI", "LO" };
		internal const string g_ApTitle = "iFix警報輪迴播音系統";
		internal const string cTableCfg = "Config";
		internal const string cCacheName = "cache_txiFixAlmSndCly_";
		internal const string g_Ext = ".tac";
		internal const int g_nAvailableColumns = 9;
		internal const string encryptKey = "73627273";
		internal const string encryptIV = "TrendTek";
		public static string sTrendtek = "\r\n\r\nPlease contact Trendtek Automation\r\nwww.TrendTek.com.tw";
	}
}

frmAbout.cs

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace triFixAlmSndCyl
{
	public partial class frmAbout : Form
	{
		public frmAbout()
		{
			base.Load += this.frmAbout_Load;
			base.Closed += this.frmAbout_Closed;
			this.InitializeComponent();
		}
		internal virtual Label lblApp
		{
			get
			{
				return this._lblApp;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._lblApp = value;
			}
		}
		internal virtual Label lblVersion
		{
			get
			{
				return this._lblVersion;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._lblVersion = value;
			}
		}
		internal virtual Label lblDescription
		{
			get
			{
				return this._lblDescription;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._lblDescription = value;
			}
		}
		internal virtual Label lblCopyright
		{
			get
			{
				return this._lblCopyright;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._lblCopyright = value;
			}
		}
		internal virtual Label Label1
		{
			get
			{
				return this._Label1;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}
		internal virtual Label Label2
		{
			get
			{
				return this._Label2;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label2 = value;
			}
		}
		internal virtual Label Label3
		{
			get
			{
				return this._Label3;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label3 = value;
			}
		}
		internal virtual Label lblUserName
		{
			get
			{
				return this._lblUserName;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._lblUserName = value;
			}
		}
		internal virtual Label Label4
		{
			get
			{
				return this._Label4;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label4 = value;
			}
		}
		internal virtual Label lblComputerName
		{
			get
			{
				return this._lblComputerName;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._lblComputerName = value;
			}
		}
		private void frmAbout_Load(object sender, EventArgs e)
		{
			this.Text = "關於 <iFix警報輪迴播音系統> 版本";
			this.lblApp.Text = "Product : " + Application.ProductName;
			this.lblVersion.Text = "版本 " + Application.ProductVersion;
			this.lblCopyright.Text = "Copyright (C) 2005 群泰科技版權所有";
			this.lblDescription.Text = "請尊重智慧財產權, 違者必究.\r\n\r\n<iFix警報輪迴播音系統>\r\n主要功能就是希望透過幾個簡單畫面設定便可完成\r省去攥寫一堆的警報播音程式";
			this.lblUserName.Text = SystemInformation.UserName;
			this.lblComputerName.Text = SystemInformation.ComputerName;
		}
		private void frmAbout_Closed(object sender, EventArgs e)
		{
			modpublic.frmRun.Enabled = true;
			modpublic.frmRun.Visible = true;
		}
		[AccessedThroughProperty("lblApp")]
		private Label _lblApp;
		[AccessedThroughProperty("lblVersion")]
		private Label _lblVersion;
		[AccessedThroughProperty("lblDescription")]
		private Label _lblDescription;
		[AccessedThroughProperty("lblCopyright")]
		private Label _lblCopyright;
		[AccessedThroughProperty("Label1")]
		private Label _Label1;
		[AccessedThroughProperty("Label2")]
		private Label _Label2;
		[AccessedThroughProperty("Label3")]
		private Label _Label3;
		[AccessedThroughProperty("lblUserName")]
		private Label _lblUserName;
		[AccessedThroughProperty("Label4")]
		private Label _Label4;
		[AccessedThroughProperty("lblComputerName")]
		private Label _lblComputerName;
	}
}

frmDelCache.cs

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using Microsoft.VisualBasic.CompilerServices;

namespace triFixAlmSndCyl
{
	[DesignerGenerated]
	public partial class frmDelCache : Form
	{
		public frmDelCache()
		{
			base.Load += this.frmDelCache_Load;
			base.Activated += this.frmDelCache_Activated;
			this.InitializeComponent();
		}
		internal virtual ListBox ListBox1
		{
			get
			{
				return this._ListBox1;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._ListBox1 = value;
			}
		}
		internal virtual Label Label1
		{
			get
			{
				return this._Label1;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				this._Label1 = value;
			}
		}
		internal virtual Button cmdExit
		{
			get
			{
				return this._cmdExit;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler eventHandler = new EventHandler(this.cmdExit_Click);
				if (this._cmdExit != null)
				{
					this._cmdExit.Click -= eventHandler;
				}
				this._cmdExit = value;
				if (this._cmdExit != null)
				{
					this._cmdExit.Click += eventHandler;
				}
			}
		}
		internal virtual Button cmdOK
		{
			get
			{
				return this._cmdOK;
			}
			[MethodImpl(MethodImplOptions.Synchronized)]
			set
			{
				EventHandler eventHandler = new EventHandler(this.cmdOK_Click);
				if (this._cmdOK != null)
				{
					this._cmdOK.Click -= eventHandler;
				}
				this._cmdOK = value;
				if (this._cmdOK != null)
				{
					this._cmdOK.Click += eventHandler;
				}
			}
		}
		private void frmDelCache_Load(object sender, EventArgs e)
		{
			try
			{
				string[] files = Directory.GetFiles(Application.StartupPath + "\\", "cache_txiFixAlmSndCly_*.xml");
				foreach (string text in files)
				{
					this.ListBox1.Items.Add(modSub.funGetValueInString(text, "\\cache_txiFixAlmSndCly_", ".xml"));
				}
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
		}
		private void frmDelCache_Activated(object sender, EventArgs e)
		{
			if (!this.bNoMoreCache && this.ListBox1.Items.Count < 1)
			{
				this.bNoMoreCache = true;
				string text = "沒有任合cache資料";
				MessageBox.Show(text, "刪除Cache檔案", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
				this.Close();
				this.Hide();
			}
		}
		private void cmdExit_Click(object sender, EventArgs e)
		{
			this.Hide();
		}
		private void cmdOK_Click(object sender, EventArgs e)
		{
			checked
			{
				try
				{
					int num = 0;
					int num2 = this.ListBox1.SelectedItems.Count - 1;
					for (int i = num; i <= num2; i++)
					{
						string text = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Application.StartupPath + "\\" + "cache_txiFixAlmSndCly_", this.ListBox1.SelectedItems[i]), ".xml"));
						File.Delete(text);
					}
				}
				catch (Exception ex)
				{
					throw new Exception(ex.Message);
				}
				finally
				{
					this.Hide();
				}
			}
		}
		[AccessedThroughProperty("ListBox1")]
		private ListBox _ListBox1;
		[AccessedThroughProperty("Label1")]
		private Label _Label1;
		[AccessedThroughProperty("cmdExit")]
		private Button _cmdExit;
		[AccessedThroughProperty("cmdOK")]
		private Button _cmdOK;
		private bool bNoMoreCache;
	}
}

clsPlaySound.cs

using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Speech.Synthesis;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using Microsoft.VisualBasic;

namespace triFixAlmSndCyl
{
	public class clsPlaySound
	{
		[DllImport("winmm.dll", CharSet = CharSet.Auto, SetLastError = true)]
		public static extern int PlaySound([MarshalAs(UnmanagedType.VBByRefStr)] ref string name, int hmod, int flags);
		public clsPlaySound(string sName, Callback_Method callbackDelegate)
		{
			this.speaker = new SpeechSynthesizer();
			this._sName = sName;
			this.Callback = callbackDelegate;
		}
		public void ThreadProc()
		{
			string text = "";
			try
			{
				if (!modpublic.g_StopSound)
				{
					Type typeFromHandle = typeof(clsPlaySound);
					lock (typeFromHandle)
					{
						if (Strings.InStr(this._sName, ":\\", CompareMethod.Binary) < 1)
						{
							this._sName = Application.StartupPath + "\\" + this._sName;
						}
						if (this._sName.Length < 1)
						{
							if (!modpublic.g_Mute)
							{
								text = "開始播音, 但是沒有指定聲音檔案名稱";
								if (this.Callback != null)
								{
									this.Callback(text);
								}
							}
						}
						else if (File.Exists(this._sName))
						{
							if (!modpublic.g_Mute)
							{
								text = "PlaySound " + this._sName;
								text = Strings.Format(DateAndTime.Now, "yyyy/MM/dd HH:mm:ss") + ": " + text;
								if ((this.Callback != null) & modpublic.g_ShowEvt)
								{
									this.Callback(text);
								}
								this.subPlaySound(this._sName);
							}
						}
						else if (!modpublic.g_Mute)
						{
							text = "開始播音, 但是聲音檔案不存在 (" + this._sName + ")";
							if (this.Callback != null)
							{
								this.Callback(text);
							}
						}
					}
				}
			}
			catch (ThreadAbortException ex)
			{
			}
			catch (Exception ex2)
			{
				text = Strings.Format(DateAndTime.Now, "yyyy/MM/dd HH:mm:ss") + ": " + text;
				if (this.Callback != null)
				{
					this.Callback(text);
				}
			}
		}
		public void subPlaySound(string filename)
		{
			try
			{
				if (Strings.InStr(filename.ToUpper(), ".TXT", CompareMethod.Text) > 0)
				{
					FileStream fileStream = File.Open(filename, FileMode.Open, FileAccess.Read);
					StreamReader streamReader = new StreamReader(fileStream, Encoding.Default);
					string text = streamReader.ReadToEnd();
					streamReader.Close();
					fileStream.Close();
					this.speaker.SpeakAsync(text);
				}
				else
				{
					clsPlaySound.PlaySound(ref filename, 0, 131073);
				}
			}
			catch (Exception ex)
			{
				string text2 = Strings.Format(DateAndTime.Now, "yyyy/MM/dd HH:mm:ss") + ": " + ex.Message;
				if (this.Callback != null)
				{
					this.Callback(text2);
				}
			}
			finally
			{
				StreamReader streamReader;
				if (!Information.IsNothing(streamReader))
				{
					streamReader.Close();
				}
				FileStream fileStream;
				if (!Information.IsNothing(fileStream))
				{
					fileStream.Close();
				}
			}
		}
		private string _sName;
		private SpeechSynthesizer speaker;
		private Callback_Method Callback;
		protected enum SoundFlags
		{
			SND_SYNC,
			SND_ASYNC,
			SND_NODEFAULT,
			SND_MEMORY = 4,
			SND_LOOP = 8,
			SND_NOSTOP = 16,
			SND_NOWAIT = 8192,
			SND_ALIAS = 65536,
			SND_ALIAS_ID = 1114112,
			SND_FILENAME = 131072,
			SND_RESOURCE = 262148
		}
	}
}

clsEDA.cs

using System;
using System.Data;
using System.Text;
using System.Windows.Forms;
using GeFanuc.iFixToolkit.Adapter;
using kvNetClass;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace triFixAlmSndCyl
{
	public class clsEDA
	{
		public void subGetNodeList(ComboBox myList)
		{
			string text = "";
			StringBuilder stringBuilder = new StringBuilder(9);
			checked
			{
				short num = (short)Helper.FixGetMyName(stringBuilder, (short)stringBuilder.Capacity);
				if (num == 11000)
				{
					text = stringBuilder.ToString();
				}
				int num2 = Helper.FixIsFixRunning();
				clsFixHelper clsFixHelper = new clsFixHelper();
				if (num2 == 1)
				{
					short num3 = 0;
					short num4 = 99;
					int num6;
					short num5 = (short)num6;
					string[] array;
					short num7 = Eda.EnumScadaNodes(out array, ref num3, num4, out num5);
					num6 = (int)num5;
					num = num7;
					string[] array2 = new string[num6 - 1 + 1];
					if ((num == 0) | (num == 100))
					{
						int num8 = 0;
						int num9 = num6 - 1;
						for (int i = num8; i <= num9; i++)
						{
							if (Operators.CompareString(clsFixHelper.funRemoveNull(array[i]).ToUpper(), "THISNODE", false) != 0)
							{
								array2[i] = clsFixHelper.funRemoveNull(array[i]);
							}
						}
						Array.Sort<string>(array2);
						int num10 = 0;
						int num11 = num6 - 1;
						for (int i = num10; i <= num11; i++)
						{
							if (!Information.IsNothing(array2[i]))
							{
								myList.Items.Add(array2[i]);
							}
						}
						if (myList.Items.Count > 0)
						{
							myList.SelectedIndex = 0;
						}
					}
				}
				if (myList.Items.Count < 1)
				{
					myList.Items.Add(text);
				}
				int num12 = myList.FindString(text.ToUpper());
				if (myList.Items.Count > 0 && num12 < 0)
				{
					num12 = 0;
				}
				myList.SelectedIndex = num12;
			}
		}
		public void GetTagsList(string sNode, short nType, short nStartipn, short nMax, ref DataTable dt)
		{
			try
			{
				short num = 0;
				StringBuilder stringBuilder = new StringBuilder(80);
				short num2;
				for (;;)
				{
					string[] array;
					short[] array2;
					num2 = Eda.EnumTags(sNode, out array, out array2, nType, ref nStartipn, nMax, out num);
					if (!((num2 == 0) | (num2 == 1210)))
					{
						break;
					}
					foreach (string text in array)
					{
						text = this.funRemoveNull(text).Trim();
						if (text.Length >= 1)
						{
							DataRow dataRow = dt.NewRow();
							dataRow[0] = text;
							dataRow[1] = nType;
							dt.Rows.Add(dataRow);
						}
					}
					if (nMax != num)
					{
						goto Block_5;
					}
				}
				Helper.NlsGetText((int)num2, stringBuilder, checked((short)stringBuilder.Capacity));
				throw new Exception(stringBuilder.ToString());
				Block_5:;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
		}
		public void GetAllTagsList(string sNode, short nType, short nStartipn, short numRequest, ref DataTable dt)
		{
			try
			{
				short num = 0;
				StringBuilder stringBuilder = new StringBuilder(80);
				short num2;
				for (;;)
				{
					string[] array;
					ENUMBUF enumbuf;
					num2 = Eda.EnumAllTags(sNode, nType, "", out array, numRequest, out num, out enumbuf);
					if (!((num2 == 0) | (num2 == 1210)))
					{
						break;
					}
					foreach (string text in array)
					{
						text = this.funRemoveNull(text).Trim();
						if (text.Length >= 1)
						{
							DataRow dataRow = dt.NewRow();
							dataRow[0] = text;
							dataRow[1] = nType;
							dt.Rows.Add(dataRow);
						}
					}
					if (numRequest != num)
					{
						goto Block_5;
					}
				}
				Helper.NlsGetText((int)num2, stringBuilder, checked((short)stringBuilder.Capacity));
				throw new Exception(stringBuilder.ToString());
				Block_5:;
			}
			catch (Exception ex)
			{
				throw new Exception(ex.Message);
			}
		}
		public bool FixIsFixRunning()
		{
			bool flag;
			try
			{
				int num = Helper.FixIsFixRunning();
				if (num != 1)
				{
					flag = false;
				}
				else
				{
					flag = true;
				}
			}
			catch (Exception ex)
			{
				flag = false;
			}
			return flag;
		}
		private string funRemoveNull(string sString)
		{
			if (Strings.Asc(Strings.Mid(sString, 1, 1)) == 0)
			{
				return "";
			}
			int num = checked(Strings.InStr(1, sString, "\0", CompareMethod.Binary) - 1);
			if (num > 0)
			{
				return Strings.Left(sString, num);
			}
			return Strings.Trim(sString);
		}
	}
}

MyApplication.cs

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows.Forms;
using Microsoft.VisualBasic.ApplicationServices;

namespace triFixAlmSndCyl.My
{
	[GeneratedCode("MyTemplate", "8.0.0.0")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal class MyApplication : WindowsFormsApplicationBase
	{
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		[DebuggerHidden]
		[STAThread]
		[MethodImpl(MethodImplOptions.NoInlining | MethodImplOptions.NoOptimization)]
		internal static void Main(string[] Args)
		{
			try
			{
				Application.SetCompatibleTextRenderingDefault(WindowsFormsApplicationBase.UseCompatibleTextRendering);
			}
			finally
			{
			}
			MyProject.Application.Run(Args);
		}
		[DebuggerStepThrough]
		public MyApplication()
			: base(AuthenticationMode.Windows)
		{
			this.IsSingleInstance = false;
			this.EnableVisualStyles = true;
			this.SaveMySettingsOnExit = true;
			this.ShutdownStyle = ShutdownMode.AfterMainFormCloses;
		}
		[DebuggerStepThrough]
		protected override void OnCreateMainForm()
		{
			this.MainForm = MyProject.Forms.frmAlmSndRun;
		}
	}
}

app.manifest

<?xml version="1.0" encoding="utf-8"?>
<asmv1:assembly manifestVersion="1.0" xmlns="urn:schemas-microsoft-com:asm.v1" xmlns:asmv1="urn:schemas-microsoft-com:asm.v1" xmlns:asmv2="urn:schemas-microsoft-com:asm.v2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <assemblyIdentity version="1.0.0.0" name="MyApplication.app"/>
  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v2">
    <security>
      <requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3">
        <!-- UAC 資訊清單選項
             如果您要變更 Windows 使用者帳戶控制層級，請將 
            requestedExecutionLevel 節點取代為下列其中一項。

        <requestedExecutionLevel  level="asInvoker" uiAccess="false" />
        <requestedExecutionLevel  level="requireAdministrator" uiAccess="false" />
        <requestedExecutionLevel  level="highestAvailable" uiAccess="false" />

            指定 requestedExecutionLevel 節點將會停用檔案和登錄虛擬化。
            如果您要針對回溯相容性使用檔案及登錄虛擬化，
            請刪除 requestedExecutionLevel 節點。
        -->
        <requestedExecutionLevel  level="requireAdministrator" uiAccess="false" />
      </requestedPrivileges>
    </security>
  </trustInfo>

  <compatibility xmlns="urn:schemas-microsoft-com:compatibility.v1">
    <application>
      <!-- 可配合此應用程式使用的所有 Windows 版本的清單。
      Windows 會自動選取最相容的環境。-->

      <!-- 如果您的應用程式是設計成配合 Windows Vista 運作，請取消註解下列 supportedOS 節點-->
      <!--<supportedOS Id="{e2011457-1546-43c5-a5fe-008deee3d3f0}"></supportedOS>-->

      <!-- 如果您的應用程式是設計成配合 Windows 7 運作，請取消註解下列 supportedOS 節點-->
      <!--<supportedOS Id="{35138b9a-5d96-4fbd-8e2d-a2440225f93a}"/>-->

      <!-- 如果您的應用程式是設計成配合 Windows 8 運作，請取消註解下列 supportedOS 節點-->
      <!--<supportedOS Id="{4a2f28e3-53b9-4441-ba9c-d69d4a4a6e38}"></supportedOS>-->

    </application>
  </compatibility>

  <!-- 啟用 Windows 通用控制項和對話方塊的佈景主題 (Windows XP 以後版本) -->
  <!-- <dependency>
    <dependentAssembly>
      <assemblyIdentity
          type="win32"
          name="Microsoft.Windows.Common-Controls"
          version="6.0.0.0"
          processorArchitecture="*"
          publicKeyToken="6595b64144ccf1df"
          language="*"
        />
    </dependentAssembly>
  </dependency>-->

</asmv1:assembly>

MyComputer.cs

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using Microsoft.VisualBasic.Devices;

namespace triFixAlmSndCyl.My
{
	[GeneratedCode("MyTemplate", "8.0.0.0")]
	[EditorBrowsable(EditorBrowsableState.Never)]
	internal class MyComputer : Computer
	{
		[DebuggerHidden]
		[EditorBrowsable(EditorBrowsableState.Never)]
		public MyComputer()
		{
		}
	}
}

MyProject.cs

using System;
using System.CodeDom.Compiler;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.ApplicationServices;
using Microsoft.VisualBasic.CompilerServices;

namespace triFixAlmSndCyl.My
{
	[StandardModule]
	[HideModuleName]
	[GeneratedCode("MyTemplate", "8.0.0.0")]
	internal sealed class MyProject
	{
		[HelpKeyword("My.Computer")]
		internal static MyComputer Computer
		{
			[DebuggerHidden]
			get
			{
				return MyProject.m_ComputerObjectProvider.GetInstance;
			}
		}
		[HelpKeyword("My.Application")]
		internal static MyApplication Application
		{
			[DebuggerHidden]
			get
			{
				return MyProject.m_AppObjectProvider.GetInstance;
			}
		}
		[HelpKeyword("My.User")]
		internal static User User
		{
			[DebuggerHidden]
			get
			{
				return MyProject.m_UserObjectProvider.GetInstance;
			}
		}
		[HelpKeyword("My.Forms")]
		internal static MyProject.MyForms Forms
		{
			[DebuggerHidden]
			get
			{
				return MyProject.m_MyFormsObjectProvider.GetInstance;
			}
		}
		[HelpKeyword("My.WebServices")]
		internal static MyProject.MyWebServices WebServices
		{
			[DebuggerHidden]
			get
			{
				return MyProject.m_MyWebServicesObjectProvider.GetInstance;
			}
		}
		private static readonly MyProject.ThreadSafeObjectProvider<MyComputer> m_ComputerObjectProvider = new MyProject.ThreadSafeObjectProvider<MyComputer>();
		private static readonly MyProject.ThreadSafeObjectProvider<MyApplication> m_AppObjectProvider = new MyProject.ThreadSafeObjectProvider<MyApplication>();
		private static readonly MyProject.ThreadSafeObjectProvider<User> m_UserObjectProvider = new MyProject.ThreadSafeObjectProvider<User>();
		private static MyProject.ThreadSafeObjectProvider<MyProject.MyForms> m_MyFormsObjectProvider = new MyProject.ThreadSafeObjectProvider<MyProject.MyForms>();
		private static readonly MyProject.ThreadSafeObjectProvider<MyProject.MyWebServices> m_MyWebServicesObjectProvider = new MyProject.ThreadSafeObjectProvider<MyProject.MyWebServices>();
		[MyGroupCollection("System.Windows.Forms.Form", "Create__Instance__", "Dispose__Instance__", "My.MyProject.Forms")]
		[EditorBrowsable(EditorBrowsableState.Never)]
		internal sealed class MyForms
		{
			public frmAbout frmAbout
			{
				get
				{
					this.m_frmAbout = MyProject.MyForms.Create__Instance__<frmAbout>(this.m_frmAbout);
					return this.m_frmAbout;
				}
				set
				{
					if (value == this.m_frmAbout)
					{
						return;
					}
					if (value != null)
					{
						throw new ArgumentException("Property can only be set to Nothing");
					}
					this.Dispose__Instance__<frmAbout>(ref this.m_frmAbout);
				}
			}
			public frmAlarmSndCfg frmAlarmSndCfg
			{
				get
				{
					this.m_frmAlarmSndCfg = MyProject.MyForms.Create__Instance__<frmAlarmSndCfg>(this.m_frmAlarmSndCfg);
					return this.m_frmAlarmSndCfg;
				}
				set
				{
					if (value == this.m_frmAlarmSndCfg)
					{
						return;
					}
					if (value != null)
					{
						throw new ArgumentException("Property can only be set to Nothing");
					}
					this.Dispose__Instance__<frmAlarmSndCfg>(ref this.m_frmAlarmSndCfg);
				}
			}
			public frmAlmSndRun frmAlmSndRun
			{
				get
				{
					this.m_frmAlmSndRun = MyProject.MyForms.Create__Instance__<frmAlmSndRun>(this.m_frmAlmSndRun);
					return this.m_frmAlmSndRun;
				}
				set
				{
					if (value == this.m_frmAlmSndRun)
					{
						return;
					}
					if (value != null)
					{
						throw new ArgumentException("Property can only be set to Nothing");
					}
					this.Dispose__Instance__<frmAlmSndRun>(ref this.m_frmAlmSndRun);
				}
			}
			public frmDelCache frmDelCache
			{
				get
				{
					this.m_frmDelCache = MyProject.MyForms.Create__Instance__<frmDelCache>(this.m_frmDelCache);
					return this.m_frmDelCache;
				}
				set
				{
					if (value == this.m_frmDelCache)
					{
						return;
					}
					if (value != null)
					{
						throw new ArgumentException("Property can only be set to Nothing");
					}
					this.Dispose__Instance__<frmDelCache>(ref this.m_frmDelCache);
				}
			}
			public frmTagModify frmTagModify
			{
				get
				{
					this.m_frmTagModify = MyProject.MyForms.Create__Instance__<frmTagModify>(this.m_frmTagModify);
					return this.m_frmTagModify;
				}
				set
				{
					if (value == this.m_frmTagModify)
					{
						return;
					}
					if (value != null)
					{
						throw new ArgumentException("Property can only be set to Nothing");
					}
					this.Dispose__Instance__<frmTagModify>(ref this.m_frmTagModify);
				}
			}
			[DebuggerHidden]
			private static T Create__Instance__<T>(T Instance) where T : Form, new()
			{
				if (Instance == null || Instance.IsDisposed)
				{
					if (MyProject.MyForms.m_FormBeingCreated != null)
					{
						if (MyProject.MyForms.m_FormBeingCreated.ContainsKey(typeof(T)))
						{
							throw new InvalidOperationException(Utils.GetResourceString("WinForms_RecursiveFormCreate", new string[0]));
						}
					}
					else
					{
						MyProject.MyForms.m_FormBeingCreated = new Hashtable();
					}
					MyProject.MyForms.m_FormBeingCreated.Add(typeof(T), null);
					try
					{
						return new T();
					}
					catch (TargetInvocationException ex) when (ex.InnerException != null)
					{
						string resourceString = Utils.GetResourceString("WinForms_SeeInnerException", new string[] { ex.InnerException.Message });
						throw new InvalidOperationException(resourceString, ex.InnerException);
					}
					finally
					{
						MyProject.MyForms.m_FormBeingCreated.Remove(typeof(T));
					}
					return Instance;
				}
				return Instance;
			}
			[DebuggerHidden]
			private void Dispose__Instance__<T>(ref T instance) where T : Form
			{
				instance.Dispose();
				instance = default(T);
			}
			[DebuggerHidden]
			[EditorBrowsable(EditorBrowsableState.Never)]
			public MyForms()
			{
			}
			[EditorBrowsable(EditorBrowsableState.Never)]
			public override bool Equals(object o)
			{
				return base.Equals(RuntimeHelpers.GetObjectValue(o));
			}
			[EditorBrowsable(EditorBrowsableState.Never)]
			public override int GetHashCode()
			{
				return base.GetHashCode();
			}
			[EditorBrowsable(EditorBrowsableState.Never)]
			internal new Type GetType()
			{
				return typeof(MyProject.MyForms);
			}
			[EditorBrowsable(EditorBrowsableState.Never)]
			public override string ToString()
			{
				return base.ToString();
			}
			public frmAbout m_frmAbout;
			public frmAlarmSndCfg m_frmAlarmSndCfg;
			public frmAlmSndRun m_frmAlmSndRun;
			public frmDelCache m_frmDelCache;
			public frmTagModify m_frmTagModify;
			[ThreadStatic]
			private static Hashtable m_FormBeingCreated;
		}
		[EditorBrowsable(EditorBrowsableState.Never)]
		[MyGroupCollection("System.Web.Services.Protocols.SoapHttpClientProtocol", "Create__Instance__", "Dispose__Instance__", "")]
		internal sealed class MyWebServices
		{
			[EditorBrowsable(EditorBrowsableState.Never)]
			[DebuggerHidden]
			public override bool Equals(object o)
			{
				return base.Equals(RuntimeHelpers.GetObjectValue(o));
			}
			[DebuggerHidden]
			[EditorBrowsable(EditorBrowsableState.Never)]
			public override int GetHashCode()
			{
				return base.GetHashCode();
			}
			[EditorBrowsable(EditorBrowsableState.Never)]
			[DebuggerHidden]
			internal new Type GetType()
			{
				return typeof(MyProject.MyWebServices);
			}
			[DebuggerHidden]
			[EditorBrowsable(EditorBrowsableState.Never)]
			public override string ToString()
			{
				return base.ToString();
			}
			[DebuggerHidden]
			private static T Create__Instance__<T>(T instance) where T : new()
			{
				if (instance == null)
				{
					return new T();
				}
				return instance;
			}
			[DebuggerHidden]
			private void Dispose__Instance__<T>(ref T instance)
			{
				instance = default(T);
			}
			[DebuggerHidden]
			[EditorBrowsable(EditorBrowsableState.Never)]
			public MyWebServices()
			{
			}
		}
		[ComVisible(false)]
		[EditorBrowsable(EditorBrowsableState.Never)]
		internal sealed class ThreadSafeObjectProvider<T> where T : new()
		{
			internal T GetInstance
			{
				[DebuggerHidden]
				get
				{
					if (MyProject.ThreadSafeObjectProvider<T>.m_ThreadStaticValue == null)
					{
						MyProject.ThreadSafeObjectProvider<T>.m_ThreadStaticValue = new T();
					}
					return MyProject.ThreadSafeObjectProvider<T>.m_ThreadStaticValue;
				}
			}
			[DebuggerHidden]
			[EditorBrowsable(EditorBrowsableState.Never)]
			public ThreadSafeObjectProvider()
			{
			}
			[CompilerGenerated]
			[ThreadStatic]
			private static T m_ThreadStaticValue;
		}
	}
}

MySettings.Designer.cs
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Microsoft.VisualBasic.CompilerServices;

namespace triFixAlmSndCyl.My
{
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	[GeneratedCode("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "11.0.0.0")]
	[CompilerGenerated]
	internal sealed partial class MySettings : ApplicationSettingsBase
	{
		[DebuggerNonUserCode]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		private static void AutoSaveSettings(object sender, EventArgs e)
		{
			if (MyProject.Application.SaveMySettingsOnExit)
			{
				MySettingsProperty.Settings.Save();
			}
		}
		public static MySettings Default
		{
			get
			{
				if (!MySettings.addedHandler)
				{
					object obj = MySettings.addedHandlerLockObject;
					ObjectFlowControl.CheckForSyncLockOnValueType(obj);
					lock (obj)
					{
						if (!MySettings.addedHandler)
						{
							MyProject.Application.Shutdown += MySettings.AutoSaveSettings;
							MySettings.addedHandler = true;
						}
					}
				}
				return MySettings.defaultInstance;
			}
		}
		private static MySettings defaultInstance = (MySettings)SettingsBase.Synchronized(new MySettings());
		private static bool addedHandler;
		private static object addedHandlerLockObject = RuntimeHelpers.GetObjectValue(new object());
	}
}

MySettingsProperty.cs

using System;
using System.ComponentModel.Design;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace triFixAlmSndCyl.My
{
	[CompilerGenerated]
	[DebuggerNonUserCode]
	[HideModuleName]
	[StandardModule]
	internal sealed class MySettingsProperty
	{
		[HelpKeyword("My.Settings")]
		internal static MySettings Settings
		{
			get
			{
				return MySettings.Default;
			}
		}
	}
}

Resources.cs

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.Globalization;
using System.Resources;
using System.Runtime.CompilerServices;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace triFixAlmSndCyl.My.Resources
{
	[StandardModule]
	[CompilerGenerated]
	[GeneratedCode("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
	[HideModuleName]
	[DebuggerNonUserCode]
	internal sealed class Resources
	{
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		internal static ResourceManager ResourceManager
		{
			get
			{
				if (object.ReferenceEquals(Resources.resourceMan, null))
				{
					ResourceManager resourceManager = new ResourceManager("triFixAlmSndCyl.Resources", typeof(Resources).Assembly);
					Resources.resourceMan = resourceManager;
				}
				return Resources.resourceMan;
			}
		}
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		internal static CultureInfo Culture
		{
			get
			{
				return Resources.resourceCulture;
			}
			set
			{
				Resources.resourceCulture = value;
			}
		}
		private static ResourceManager resourceMan;
		private static CultureInfo resourceCulture;
	}
}
