using System;
using System.Collections;
using System.ComponentModel;
using System.ComponentModel.Design;
using System.ComponentModel.Design.Serialization;
using System.Design;
using System.Drawing;
using System.Windows.Forms.Design.Behavior;

namespace System.Windows.Forms.Design
{
	internal class ToolStripMenuItemDesigner : ToolStripDropDownItemDesigner
	{
		public override ICollection AssociatedComponents
		{
			get
			{
				ArrayList arrayList = new ArrayList();
				if (this.MenuItem.DropDown.IsAutoGenerated)
				{
					foreach (object obj in this.MenuItem.DropDownItems)
					{
						ToolStripItem toolStripItem = (ToolStripItem)obj;
						if (!(toolStripItem is DesignerToolStripControlHost))
						{
							arrayList.Add(toolStripItem);
						}
					}
				}
				return arrayList;
			}
		}

		private bool CheckOnClick
		{
			get
			{
				return (bool)base.ShadowProperties["CheckOnClick"];
			}
			set
			{
				base.ShadowProperties["CheckOnClick"] = value;
			}
		}

		private bool DoubleClickEnabled
		{
			get
			{
				return (bool)base.ShadowProperties["DoubleClickEnabled"];
			}
			set
			{
				base.ShadowProperties["DoubleClickEnabled"] = value;
			}
		}

		private ToolStripDropDown DropDown
		{
			get
			{
				return this.customDropDown;
			}
			set
			{
				this.dropDownSetFailed = false;
				if (this.IsParentDropDown(value))
				{
					this.dropDownSetFailed = true;
					throw new ArgumentException(SR.GetString("InvalidArgument", new object[]
					{
						"DropDown",
						value.ToString()
					}));
				}
				if (this.MenuItem.DropDown != null)
				{
					this.RemoveTypeHereNode(this.MenuItem);
					if (this.MenuItem.DropDown.IsAutoGenerated && this.MenuItem.DropDownItems.Count > 0)
					{
						ComponentSerializationService componentSerializationService = this.GetService(typeof(ComponentSerializationService)) as ComponentSerializationService;
						if (componentSerializationService != null)
						{
							this.serializedDataForDropDownItems = componentSerializationService.CreateStore();
							foreach (object obj in this.MenuItem.DropDownItems)
							{
								ToolStripItem toolStripItem = (ToolStripItem)obj;
								if (!(toolStripItem is DesignerToolStripControlHost))
								{
									componentSerializationService.Serialize(this.serializedDataForDropDownItems, toolStripItem);
								}
							}
							this.serializedDataForDropDownItems.Close();
						}
						ToolStripItem[] array = new ToolStripItem[this.MenuItem.DropDownItems.Count];
						this.MenuItem.DropDownItems.CopyTo(array, 0);
						foreach (ToolStripItem toolStripItem2 in array)
						{
							this.MenuItem.DropDownItems.Remove(toolStripItem2);
							this.designerHost.DestroyComponent(toolStripItem2);
						}
					}
					this.MenuItem.HideDropDown();
				}
				this.MenuItem.DropDown = value;
				this.customDropDown = value;
				if (value == null && !this.dropDownSet && this.serializedDataForDropDownItems != null)
				{
					try
					{
						ToolStripDesigner._autoAddNewItems = false;
						this.CreatetypeHereNode();
						ComponentSerializationService componentSerializationService2 = this.GetService(typeof(ComponentSerializationService)) as ComponentSerializationService;
						if (componentSerializationService2 != null)
						{
							componentSerializationService2.Deserialize(this.serializedDataForDropDownItems);
							this.serializedDataForDropDownItems = null;
						}
					}
					finally
					{
						ToolStripDesigner._autoAddNewItems = true;
					}
				}
				this.MenuItem.DropDown.OwnerItem = this.MenuItem;
				this.MenuItem.DropDown.Disposed += this.OnDropDownDisposed;
				if (this.MenuItem.Equals(this.selSvc.PrimarySelection))
				{
					this.InitializeDropDown();
				}
			}
		}

		internal override ToolStripTemplateNode Editor
		{
			get
			{
				if (base.Editor != null)
				{
					return base.Editor;
				}
				if (this.commitedTemplateNode != null)
				{
					return this.commitedTemplateNode;
				}
				return this.typeHereTemplateNode;
			}
			set
			{
				this.commitedTemplateNode = value;
			}
		}

		private bool IsOnContextMenu
		{
			get
			{
				ToolStrip mainToolStrip = this.GetMainToolStrip();
				return mainToolStrip == null || mainToolStrip.Site == null || mainToolStrip is ContextMenuStrip;
			}
		}

		private ToolStripDropDownItem MenuItem
		{
			get
			{
				return base.ToolStripItem as ToolStripDropDownItem;
			}
		}

		private bool MenuItemSelected
		{
			get
			{
				if (this.selSvc != null)
				{
					object obj = this.selSvc.PrimarySelection;
					ToolStripItem toolStripItem;
					if (obj == null)
					{
						if (this.KeyboardHandlingService != null)
						{
							obj = this.KeyboardHandlingService.SelectedDesignerControl;
						}
						toolStripItem = obj as ToolStripItem;
					}
					else
					{
						toolStripItem = obj as ToolStripItem;
					}
					if (toolStripItem != null)
					{
						if (this.designerHost != null)
						{
							ToolStripItemDesigner toolStripItemDesigner = this.designerHost.GetDesigner(toolStripItem) as ToolStripItemDesigner;
							if (toolStripItemDesigner != null && toolStripItemDesigner.dummyItemAdded)
							{
								return toolStripItem == this.MenuItem;
							}
						}
						if (toolStripItem.IsOnDropDown && toolStripItem.Owner is ToolStripDropDown)
						{
							ToolStripDropDownItem toolStripDropDownItem = ((ToolStripDropDown)toolStripItem.Owner).OwnerItem as ToolStripDropDownItem;
							return toolStripDropDownItem == this.MenuItem;
						}
						return toolStripItem == this.MenuItem;
					}
					else if (obj is ContextMenuStrip && this.MenuItem.DropDown == obj)
					{
						return true;
					}
				}
				return false;
			}
		}

		private ToolStripKeyboardHandlingService KeyboardHandlingService
		{
			get
			{
				if (this.keyboardHandlingService == null)
				{
					this.keyboardHandlingService = this.GetService(typeof(ToolStripKeyboardHandlingService)) as ToolStripKeyboardHandlingService;
				}
				return this.keyboardHandlingService;
			}
		}

		protected override IComponent ParentComponent
		{
			get
			{
				if (base.ToolStripItem != null)
				{
					if (!base.ToolStripItem.IsOnOverflow && base.ToolStripItem.IsOnDropDown)
					{
						ToolStripDropDown toolStripDropDown = this.MenuItem.Owner as ToolStripDropDown;
						if (toolStripDropDown != null)
						{
							if (toolStripDropDown.IsAutoGenerated)
							{
								return toolStripDropDown.OwnerItem;
							}
							return toolStripDropDown;
						}
					}
					return base.ParentComponent;
				}
				return null;
			}
		}

		internal void AddNewTemplateNode(ToolStripDropDown dropDown)
		{
			foreach (object obj in dropDown.Items)
			{
				ToolStripItem toolStripItem = (ToolStripItem)obj;
				if (toolStripItem is DesignerToolStripControlHost)
				{
					this.typeHereNode = (DesignerToolStripControlHost)toolStripItem;
				}
			}
			if (this.typeHereNode != null)
			{
				dropDown.Items.Remove(this.typeHereNode);
			}
			this.typeHereTemplateNode = new ToolStripTemplateNode(base.Component, SR.GetString("ToolStripDesignerTemplateNodeEnterText"), null);
			int width = this.typeHereTemplateNode.EditorToolStrip.Width;
			this.typeHereNode = new DesignerToolStripControlHost(this.typeHereTemplateNode.EditorToolStrip);
			this.typeHereTemplateNode.ControlHost = this.typeHereNode;
			this.typeHereNode.AutoSize = false;
			this.typeHereNode.Width = width;
			dropDown.Items.Add(this.typeHereNode);
		}

		internal void AddItemBodyGlyph(ToolStripItem item)
		{
			if (item != null)
			{
				ToolStripItemDesigner toolStripItemDesigner = (ToolStripItemDesigner)this.designerHost.GetDesigner(item);
				if (toolStripItemDesigner != null)
				{
					Rectangle glyphBounds = toolStripItemDesigner.GetGlyphBounds();
					Behavior behavior = new ToolStripItemBehavior();
					ToolStripItemGlyph toolStripItemGlyph = new ToolStripItemGlyph(item, toolStripItemDesigner, glyphBounds, behavior);
					toolStripItemDesigner.bodyGlyph = toolStripItemGlyph;
					if (this.toolStripAdornerWindowService != null)
					{
						this.toolStripAdornerWindowService.DropDownAdorner.Glyphs.Insert(0, toolStripItemGlyph);
					}
				}
			}
		}

		private void AddBodyGlyphs(ToolStripDropDownItem item)
		{
			if (item != null)
			{
				ToolStripMenuItemDesigner toolStripMenuItemDesigner = (ToolStripMenuItemDesigner)this.designerHost.GetDesigner(item);
				if (toolStripMenuItemDesigner != null)
				{
					foreach (object obj in item.DropDownItems)
					{
						ToolStripItem toolStripItem = (ToolStripItem)obj;
						this.AddItemBodyGlyph(toolStripItem);
					}
				}
			}
		}

		internal override void CommitEdit(Type type, string text, bool commit, bool enterKeyPressed, bool tabKeyPressed)
		{
			base.IsEditorActive = false;
			if (!(this.MenuItem.Owner is ToolStripDropDown) && base.Editor != null)
			{
				base.CommitEdit(type, text, commit, enterKeyPressed, tabKeyPressed);
				return;
			}
			if (commit)
			{
				int num = -1;
				bool dummyItemAdded = this.dummyItemAdded;
				this.dummyItemAdded = false;
				this.MenuItem.DropDown.SuspendLayout();
				if (this.commitedEditorNode != null)
				{
					num = this.MenuItem.DropDownItems.IndexOf(this.commitedEditorNode);
					ToolStripItem toolStripItem = this.MenuItem.DropDownItems[num + 1];
					this.MenuItem.DropDown.Items.Remove(this.commitedEditorNode);
					if (this.commitedTemplateNode != null)
					{
						this.commitedTemplateNode.CloseEditor();
						this.commitedTemplateNode = null;
					}
					if (this.commitedEditorNode != null)
					{
						this.commitedEditorNode.Dispose();
						this.commitedEditorNode = null;
					}
					if (text == "-")
					{
						ToolStripItemDesigner toolStripItemDesigner = this.designerHost.GetDesigner(toolStripItem) as ToolStripItemDesigner;
						if (toolStripItemDesigner == null)
						{
							goto IL_028C;
						}
						try
						{
							try
							{
								toolStripItem = toolStripItemDesigner.MorphCurrentItem(typeof(ToolStripSeparator));
								this.RemoveItemBodyGlyph(toolStripItem);
							}
							catch
							{
								if (this.newMenuItemTransaction != null)
								{
									try
									{
										this.newMenuItemTransaction.Cancel();
									}
									catch
									{
									}
									this.newMenuItemTransaction = null;
								}
							}
							goto IL_028C;
						}
						finally
						{
							if (this.newMenuItemTransaction != null)
							{
								this.newMenuItemTransaction.Commit();
								this.newMenuItemTransaction = null;
							}
						}
					}
					if (dummyItemAdded)
					{
						try
						{
							try
							{
								this.dummyItemAdded = true;
								this.CreateNewItem(type, num, text);
								this.designerHost.DestroyComponent(toolStripItem);
								if (enterKeyPressed)
								{
									this.typeHereNode.SelectControl();
								}
							}
							catch
							{
								if (this.newMenuItemTransaction != null)
								{
									try
									{
										this.newMenuItemTransaction.Cancel();
									}
									catch
									{
									}
									this.newMenuItemTransaction = null;
								}
							}
							goto IL_028C;
						}
						finally
						{
							if (this.newMenuItemTransaction != null)
							{
								this.newMenuItemTransaction.Commit();
								this.newMenuItemTransaction = null;
							}
							this.dummyItemAdded = false;
						}
					}
					toolStripItem.Visible = true;
					DesignerTransaction designerTransaction = this.designerHost.CreateTransaction(SR.GetString("ToolStripItemPropertyChangeTransaction"));
					try
					{
						try
						{
							PropertyDescriptor propertyDescriptor = TypeDescriptor.GetProperties(toolStripItem)["Text"];
							string text2 = (string)propertyDescriptor.GetValue(toolStripItem);
							if (propertyDescriptor != null && text != text2)
							{
								propertyDescriptor.SetValue(toolStripItem, text);
							}
						}
						catch
						{
							if (designerTransaction != null)
							{
								designerTransaction.Cancel();
								designerTransaction = null;
							}
						}
						goto IL_028C;
					}
					finally
					{
						if (designerTransaction != null)
						{
							designerTransaction.Commit();
							designerTransaction = null;
						}
					}
				}
				num = this.MenuItem.DropDownItems.IndexOf(this.typeHereNode);
				try
				{
					this.dummyItemAdded = true;
					this.CreateNewItem(type, num, text);
				}
				finally
				{
					this.dummyItemAdded = false;
				}
				this.typeHereNode.SelectControl();
				IL_028C:
				this.MenuItem.DropDown.ResumeLayout(true);
				this.MenuItem.DropDown.PerformLayout();
				this.ResetGlyphs(this.MenuItem);
				if (this.selSvc != null)
				{
					if (enterKeyPressed)
					{
						ToolStripItem toolStripItem2;
						if ((this.MenuItem.DropDownDirection == ToolStripDropDownDirection.AboveLeft || this.MenuItem.DropDownDirection == ToolStripDropDownDirection.AboveRight) && num >= 1)
						{
							toolStripItem2 = this.MenuItem.DropDownItems[num - 1];
						}
						else
						{
							toolStripItem2 = this.MenuItem.DropDownItems[num + 1];
						}
						if (this.KeyboardHandlingService != null)
						{
							if (toolStripItem2 != null)
							{
								ToolStripDropDownItem toolStripDropDownItem = this.MenuItem.DropDownItems[num] as ToolStripDropDownItem;
								if (toolStripDropDownItem != null)
								{
									toolStripDropDownItem.HideDropDown();
								}
							}
							if (toolStripItem2 == this.typeHereNode)
							{
								this.KeyboardHandlingService.SelectedDesignerControl = toolStripItem2;
								this.selSvc.SetSelectedComponents(null, SelectionTypes.Replace);
								return;
							}
							this.KeyboardHandlingService.SelectedDesignerControl = null;
							this.selSvc.SetSelectedComponents(new object[] { toolStripItem2 });
							return;
						}
					}
					else if (tabKeyPressed)
					{
						this.selSvc.SetSelectedComponents(new object[] { this.MenuItem.DropDownItems[num] }, SelectionTypes.Replace);
						return;
					}
				}
			}
			else if (this.commitedEditorNode != null)
			{
				this.MenuItem.DropDown.SuspendLayout();
				bool flag = this.dummyItemAdded;
				this.dummyItemAdded = false;
				int num2 = this.MenuItem.DropDownItems.IndexOf(this.commitedEditorNode);
				ToolStripItem toolStripItem3 = this.MenuItem.DropDownItems[num2 + 1];
				this.MenuItem.DropDown.Items.Remove(this.commitedEditorNode);
				toolStripItem3.Visible = true;
				if (this.commitedTemplateNode != null)
				{
					this.commitedTemplateNode.CloseEditor();
					this.commitedTemplateNode = null;
				}
				if (this.commitedEditorNode != null)
				{
					this.commitedEditorNode.Dispose();
					this.commitedEditorNode = null;
				}
				if (flag)
				{
					this.MenuItem.DropDownItems.Remove(toolStripItem3);
					try
					{
						this.designerHost.DestroyComponent(toolStripItem3);
					}
					catch
					{
						if (this.newMenuItemTransaction != null)
						{
							try
							{
								this.newMenuItemTransaction.Cancel();
							}
							catch
							{
							}
							this.newMenuItemTransaction = null;
						}
					}
					toolStripItem3 = null;
				}
				this.MenuItem.DropDown.ResumeLayout();
				if (toolStripItem3 != null)
				{
					this.AddItemBodyGlyph(toolStripItem3);
				}
				if (flag)
				{
					SelectionManager selectionManager = (SelectionManager)this.GetService(typeof(SelectionManager));
					selectionManager.NeedRefresh = false;
					if (this.newMenuItemTransaction != null)
					{
						try
						{
							this.dummyItemAdded = true;
							this.newMenuItemTransaction.Cancel();
							this.newMenuItemTransaction = null;
							if (this.MenuItem.DropDownItems.Count == 0)
							{
								this.CreatetypeHereNode();
							}
						}
						finally
						{
							this.dummyItemAdded = false;
						}
					}
					flag = false;
				}
				this.MenuItem.DropDown.PerformLayout();
			}
		}

		private void CreatetypeHereNode()
		{
			if (this.typeHereNode == null)
			{
				this.AddNewTemplateNode(this.MenuItem.DropDown);
				if (this.MenuItem.DropDown.Site == null)
				{
					this.MenuItem.DropDown.Text = this.MenuItem.Name + ".DropDown";
				}
			}
			else if (this.typeHereNode != null && this.MenuItem.DropDownItems.IndexOf(this.typeHereNode) == -1)
			{
				this.MenuItem.DropDown.Items.Add(this.typeHereNode);
				this.typeHereNode.Visible = true;
			}
			this.MenuItem.DropDown.PerformLayout();
		}

		private void CreateDummyMenuItem(ToolStripItem item, string text, Image image)
		{
			this.commitedTemplateNode = new ToolStripTemplateNode(base.Component, text, image);
			this.commitedTemplateNode.ActiveItem = item;
			int width = this.commitedTemplateNode.EditorToolStrip.Width;
			this.commitedEditorNode = new DesignerToolStripControlHost(this.commitedTemplateNode.EditorToolStrip);
			this.commitedEditorNode.AutoSize = false;
			this.commitedEditorNode.Width = width;
		}

		private ToolStripItem CreateDummyItem(Type t, int dummyIndex)
		{
			if (this.designerHost == null)
			{
				return null;
			}
			ToolStripItem toolStripItem = null;
			if (this.MenuItem.DropDownDirection == ToolStripDropDownDirection.AboveLeft || this.MenuItem.DropDownDirection == ToolStripDropDownDirection.AboveRight)
			{
				dummyIndex++;
			}
			try
			{
				ToolStripDesigner._autoAddNewItems = false;
				this.indexToInsertNewItem = dummyIndex;
				try
				{
					if (this.newMenuItemTransaction == null)
					{
						this.newMenuItemTransaction = this.designerHost.CreateTransaction(SR.GetString("ToolStripCreatingNewItemTransaction"));
					}
					this.fireComponentChanged = true;
					toolStripItem = (ToolStripItem)this.designerHost.CreateComponent(t);
				}
				finally
				{
					this.fireComponentChanged = false;
				}
				ToolStripItemDesigner toolStripItemDesigner = this.designerHost.GetDesigner(toolStripItem) as ToolStripItemDesigner;
				try
				{
					toolStripItemDesigner.InternalCreate = true;
					if (toolStripItemDesigner != null)
					{
						toolStripItemDesigner.InitializeNewComponent(null);
					}
				}
				finally
				{
					toolStripItemDesigner.InternalCreate = false;
				}
			}
			catch (InvalidOperationException ex)
			{
				this.CommitInsertTransaction(false);
				if (this.newMenuItemTransaction != null)
				{
					this.newMenuItemTransaction.Cancel();
					this.newMenuItemTransaction = null;
				}
				IUIService iuiservice = (IUIService)this.GetService(typeof(IUIService));
				iuiservice.ShowError(ex.Message);
			}
			finally
			{
				ToolStripDesigner._autoAddNewItems = true;
				this.indexToInsertNewItem = -1;
			}
			return toolStripItem;
		}

		private ToolStripItem CreateNewItem(Type t, int dummyIndex, string newText)
		{
			if (this.designerHost == null)
			{
				return null;
			}
			ToolStripItem toolStripItem = null;
			if (this.MenuItem.DropDownDirection == ToolStripDropDownDirection.AboveLeft || this.MenuItem.DropDownDirection == ToolStripDropDownDirection.AboveRight)
			{
				dummyIndex++;
			}
			DesignerTransaction designerTransaction = this.designerHost.CreateTransaction(SR.GetString("ToolStripCreatingNewItemTransaction"));
			try
			{
				ToolStripDesigner._autoAddNewItems = false;
				this.indexToInsertNewItem = dummyIndex;
				try
				{
					this.fireComponentChanged = true;
					toolStripItem = (ToolStripItem)this.designerHost.CreateComponent(t, ToolStripDesigner.NameFromText(newText, t, this.MenuItem.Site));
				}
				finally
				{
					this.fireComponentChanged = false;
				}
				ToolStripItemDesigner toolStripItemDesigner = this.designerHost.GetDesigner(toolStripItem) as ToolStripItemDesigner;
				try
				{
					if (!string.IsNullOrEmpty(newText) || this.addingDummyItem)
					{
						toolStripItemDesigner.InternalCreate = true;
					}
					if (toolStripItemDesigner != null)
					{
						toolStripItemDesigner.InitializeNewComponent(null);
					}
				}
				finally
				{
					toolStripItemDesigner.InternalCreate = false;
				}
				if (toolStripItem != null)
				{
					PropertyDescriptor propertyDescriptor = TypeDescriptor.GetProperties(toolStripItem)["Text"];
					if (propertyDescriptor != null && !string.IsNullOrEmpty(newText))
					{
						propertyDescriptor.SetValue(toolStripItem, newText);
					}
				}
			}
			catch
			{
				this.CommitInsertTransaction(false);
				if (designerTransaction != null)
				{
					designerTransaction.Cancel();
					designerTransaction = null;
				}
			}
			finally
			{
				if (designerTransaction != null)
				{
					designerTransaction.Commit();
					designerTransaction = null;
				}
				ToolStripDesigner._autoAddNewItems = true;
				this.indexToInsertNewItem = -1;
			}
			return toolStripItem;
		}

		private bool CheckSameOwner(ToolStripDropDownItem lastSelected, ToolStripDropDownItem currentSelected)
		{
			if (lastSelected != null && currentSelected != null && lastSelected.Owner is ToolStripDropDown && currentSelected.Owner is ToolStripDropDown)
			{
				ToolStripItem ownerItem = ((ToolStripDropDown)lastSelected.Owner).OwnerItem;
				ToolStripItem ownerItem2 = ((ToolStripDropDown)currentSelected.Owner).OwnerItem;
				return ownerItem == ownerItem2;
			}
			return false;
		}

		internal void Commit()
		{
			if (this.commitedTemplateNode != null && this.commitedTemplateNode.Active)
			{
				int num = this.MenuItem.DropDownItems.IndexOf(this.commitedEditorNode);
				this.commitedTemplateNode.Commit(false, false);
				if (num != -1 && this.MenuItem.DropDownItems.Count > num)
				{
					ToolStripDropDownItem toolStripDropDownItem = this.MenuItem.DropDownItems[num] as ToolStripDropDownItem;
					if (toolStripDropDownItem != null)
					{
						toolStripDropDownItem.HideDropDown();
					}
				}
			}
			else if (this.typeHereTemplateNode != null && this.typeHereTemplateNode.Active)
			{
				this.typeHereTemplateNode.Commit(false, false);
			}
			ToolStripDropDownItem toolStripDropDownItem2 = this.MenuItem;
			while (toolStripDropDownItem2 != null && toolStripDropDownItem2.Owner is ToolStripDropDown)
			{
				toolStripDropDownItem2 = (ToolStripDropDownItem)((ToolStripDropDown)toolStripDropDownItem2.Owner).OwnerItem;
				if (toolStripDropDownItem2 != null)
				{
					ToolStripMenuItemDesigner toolStripMenuItemDesigner = (ToolStripMenuItemDesigner)this.designerHost.GetDesigner(toolStripDropDownItem2);
					if (toolStripMenuItemDesigner != null)
					{
						toolStripMenuItemDesigner.Commit();
					}
				}
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
				if (this.selSvc != null)
				{
					this.selSvc.SelectionChanged -= this.OnSelectionChanged;
				}
				if (this.undoEngine != null)
				{
					this.undoEngine.Undoing -= this.OnUndoing;
					this.undoEngine.Undone -= this.OnUndone;
				}
				if (this.MenuItem != null)
				{
					this.MenuItem.DropDown.Hide();
					this.UnHookEvents();
				}
				if (this.toolStripAdornerWindowService != null)
				{
					this.toolStripAdornerWindowService = null;
				}
				IComponentChangeService componentChangeService = (IComponentChangeService)this.GetService(typeof(IComponentChangeService));
				if (componentChangeService != null)
				{
					componentChangeService.ComponentRemoved -= this.ComponentChangeSvc_ComponentRemoved;
					componentChangeService.ComponentRemoving -= this.ComponentChangeSvc_ComponentRemoving;
					componentChangeService.ComponentAdding -= this.ComponentChangeSvc_ComponentAdding;
					componentChangeService.ComponentAdded -= this.ComponentChangeSvc_ComponentAdded;
				}
				if (this.typeHereTemplateNode != null)
				{
					this.typeHereTemplateNode.RollBack();
					this.typeHereTemplateNode.CloseEditor();
					this.typeHereTemplateNode = null;
				}
				if (this.typeHereNode != null)
				{
					this.typeHereNode.Dispose();
					this.typeHereNode = null;
				}
				if (this.commitedTemplateNode != null)
				{
					this.commitedTemplateNode.RollBack();
					this.commitedTemplateNode.CloseEditor();
					this.commitedTemplateNode = null;
				}
				if (this.commitedEditorNode != null)
				{
					this.commitedEditorNode.Dispose();
					this.commitedEditorNode = null;
				}
				if (this.parentItem != null)
				{
					this.parentItem = null;
				}
			}
			base.Dispose(disposing);
		}

		private void DropDownClick(object sender, EventArgs e)
		{
			if (this.KeyboardHandlingService != null && this.KeyboardHandlingService.TemplateNodeActive)
			{
				this.KeyboardHandlingService.ActiveTemplateNode.CommitAndSelect();
			}
		}

		private void DropDownPaint(object sender, PaintEventArgs e)
		{
			if (this.selSvc != null && this.MenuItem != null)
			{
				foreach (object obj in this.MenuItem.DropDownItems)
				{
					ToolStripItem toolStripItem = (ToolStripItem)obj;
					if (toolStripItem.Visible && this.selSvc.GetComponentSelected(toolStripItem))
					{
						ToolStripItemDesigner toolStripItemDesigner = this.designerHost.GetDesigner(toolStripItem) as ToolStripItemDesigner;
						if (toolStripItemDesigner != null)
						{
							Rectangle glyphBounds = toolStripItemDesigner.GetGlyphBounds();
							ToolStripDesignerUtils.GetAdjustedBounds(toolStripItem, ref glyphBounds);
							glyphBounds.Inflate(2, 2);
							BehaviorService behaviorService = (BehaviorService)this.GetService(typeof(BehaviorService));
							if (behaviorService != null)
							{
								behaviorService.ProcessPaintMessage(glyphBounds);
							}
						}
					}
					DesignerToolStripControlHost designerToolStripControlHost = toolStripItem as DesignerToolStripControlHost;
					if (designerToolStripControlHost != null)
					{
						designerToolStripControlHost.Control.Refresh();
					}
				}
			}
		}

		private void DropDownLocationChanged(object sender, EventArgs e)
		{
			ToolStripDropDown toolStripDropDown = sender as ToolStripDropDown;
			if (toolStripDropDown.Visible)
			{
				BehaviorService behaviorService = (BehaviorService)this.GetService(typeof(BehaviorService));
				if (behaviorService != null)
				{
					behaviorService.Invalidate();
				}
			}
		}

		private void DropDownItem_DropDownOpening(object sender, EventArgs e)
		{
			ToolStripDropDownItem toolStripDropDownItem = sender as ToolStripDropDownItem;
			if (this.toolStripAdornerWindowService != null)
			{
				toolStripDropDownItem.DropDown.TopLevel = false;
				toolStripDropDownItem.DropDown.Parent = this.toolStripAdornerWindowService.ToolStripAdornerWindowControl;
			}
		}

		private void DropDownItem_DropDownOpened(object sender, EventArgs e)
		{
			ToolStripDropDownItem toolStripDropDownItem = sender as ToolStripDropDownItem;
			if (toolStripDropDownItem != null)
			{
				this.ResetGlyphs(toolStripDropDownItem);
			}
			Control dropDown = toolStripDropDownItem.DropDown;
			if (dropDown != null)
			{
				ControlDesigner controlDesigner = this.designerHost.GetDesigner(this.designerHost.RootComponent) as ControlDesigner;
				if (controlDesigner != null)
				{
					this.rootControlGlyph = new ToolStripMenuItemDesigner.ToolStripDropDownGlyph(dropDown.Bounds, new ToolStripMenuItemDesigner.DropDownBehavior(controlDesigner, this));
				}
				if (this.toolStripAdornerWindowService != null)
				{
					this.toolStripAdornerWindowService.DropDownAdorner.Glyphs.Add(this.rootControlGlyph);
				}
			}
		}

		private void DropDownItem_DropDownClosed(object sender, EventArgs e)
		{
			ToolStripDropDownItem toolStripDropDownItem = sender as ToolStripDropDownItem;
			if (toolStripDropDownItem != null)
			{
				if (this.toolStripAdornerWindowService != null && this.rootControlGlyph != null && this.toolStripAdornerWindowService.DropDownAdorner.Glyphs.Contains(this.rootControlGlyph))
				{
					this.toolStripAdornerWindowService.DropDownAdorner.Glyphs.Remove(this.rootControlGlyph);
				}
				this.InitializeBodyGlyphsForItems(false, toolStripDropDownItem);
				this.initialized = false;
				this.UnHookEvents();
				if (toolStripDropDownItem.DropDown.Site != null || toolStripDropDownItem.DropDownItems.Count == 1)
				{
					this.RemoveTypeHereNode(toolStripDropDownItem);
					return;
				}
				if (this.toolStripAdornerWindowService != null)
				{
					this.toolStripAdornerWindowService.Invalidate(toolStripDropDownItem.DropDown.Bounds);
				}
			}
		}

		private void DropDownResize(object sender, EventArgs e)
		{
			ToolStripDropDown toolStripDropDown = sender as ToolStripDropDown;
			if (!this.dummyItemAdded)
			{
				if (toolStripDropDown != null && toolStripDropDown.Visible && this.toolStripAdornerWindowService != null && (toolStripDropDown.Width < this.dropDownSizeToInvalidate.Width || toolStripDropDown.Size.Height < this.dropDownSizeToInvalidate.Height))
				{
					using (Region region = new Region(this.dropDownSizeToInvalidate))
					{
						region.Exclude(toolStripDropDown.Bounds);
						this.toolStripAdornerWindowService.Invalidate(region);
						BehaviorService behaviorService = (BehaviorService)this.GetService(typeof(BehaviorService));
						if (behaviorService != null)
						{
							behaviorService.Invalidate(region);
						}
					}
				}
				if (this.toolStripAdornerWindowService != null)
				{
					if (this.rootControlGlyph != null && this.toolStripAdornerWindowService.DropDownAdorner.Glyphs.Contains(this.rootControlGlyph))
					{
						this.toolStripAdornerWindowService.DropDownAdorner.Glyphs.Remove(this.rootControlGlyph);
					}
					ControlDesigner controlDesigner = this.designerHost.GetDesigner(this.designerHost.RootComponent) as ControlDesigner;
					if (controlDesigner != null)
					{
						this.rootControlGlyph = new ToolStripMenuItemDesigner.ToolStripDropDownGlyph(toolStripDropDown.Bounds, new ToolStripMenuItemDesigner.DropDownBehavior(controlDesigner, this));
					}
					this.toolStripAdornerWindowService.DropDownAdorner.Glyphs.Add(this.rootControlGlyph);
				}
			}
			this.dropDownSizeToInvalidate = toolStripDropDown.Bounds;
		}

		internal void EditTemplateNode(bool clicked)
		{
			this.typeHereNode.RefreshSelectionGlyph();
			if (this.KeyboardHandlingService != null && this.KeyboardHandlingService.TemplateNodeActive)
			{
				this.KeyboardHandlingService.ActiveTemplateNode.CommitAndSelect();
			}
			if (clicked && this.MenuItem == null)
			{
				return;
			}
			try
			{
				ToolStripDesigner.editTemplateNode = true;
				this.selSvc.SetSelectedComponents(new object[] { this.MenuItem }, SelectionTypes.Replace);
			}
			finally
			{
				ToolStripDesigner.editTemplateNode = false;
			}
			ToolStripDropDownItem toolStripDropDownItem = null;
			if (this.selSvc.PrimarySelection == null && this.KeyboardHandlingService != null)
			{
				ToolStripItem toolStripItem = this.KeyboardHandlingService.SelectedDesignerControl as ToolStripItem;
				if (toolStripItem != null)
				{
					toolStripDropDownItem = ((ToolStripDropDown)toolStripItem.Owner).OwnerItem as ToolStripDropDownItem;
				}
			}
			else
			{
				toolStripDropDownItem = this.selSvc.PrimarySelection as ToolStripDropDownItem;
			}
			if (toolStripDropDownItem != null && toolStripDropDownItem != this.MenuItem)
			{
				this.HideSiblingDropDowns(toolStripDropDownItem);
			}
			this.MenuItem.DropDown.SuspendLayout();
			this.dummyItemAdded = true;
			int num = this.MenuItem.DropDownItems.IndexOf(this.typeHereNode);
			ToolStripItem toolStripItem2 = null;
			try
			{
				this.addingDummyItem = true;
				toolStripItem2 = this.CreateDummyItem(typeof(ToolStripMenuItem), num);
			}
			catch (CheckoutException ex)
			{
				if (!ex.Equals(CheckoutException.Canceled))
				{
					throw;
				}
				this.CommitInsertTransaction(false);
				if (this.newMenuItemTransaction != null)
				{
					this.newMenuItemTransaction.Cancel();
					this.newMenuItemTransaction = null;
				}
			}
			finally
			{
				this.dummyItemAdded = toolStripItem2 != null;
				this.addingDummyItem = false;
			}
			this.MenuItem.DropDown.ResumeLayout();
			if (toolStripItem2 != null)
			{
				ToolStripMenuItemDesigner toolStripMenuItemDesigner = this.designerHost.GetDesigner(toolStripItem2) as ToolStripMenuItemDesigner;
				if (toolStripMenuItemDesigner != null)
				{
					toolStripMenuItemDesigner.InitializeDropDown();
					toolStripMenuItemDesigner.ShowEditNode(clicked);
				}
			}
		}

		private void EnterInSituMode()
		{
			if (this.MenuItem.Owner is ToolStripDropDown)
			{
				ToolStripItem ownerItem = ((ToolStripDropDown)this.MenuItem.Owner).OwnerItem;
				if (this.designerHost != null)
				{
					IDesigner designer = this.designerHost.GetDesigner(ownerItem);
					if (designer is ToolStripMenuItemDesigner)
					{
						this.MenuItem.HideDropDown();
						((ToolStripMenuItemDesigner)designer).EnterInSituEdit(this.MenuItem);
					}
				}
			}
		}

		internal void EnterInSituEdit(ToolStripItem toolItem)
		{
			this.MenuItem.DropDown.SuspendLayout();
			this.RemoveItemBodyGlyph(toolItem);
			if (toolItem == null)
			{
				return;
			}
			if (base.IsEditorActive)
			{
				return;
			}
			this.CreateDummyMenuItem(toolItem, toolItem.Text, toolItem.Image);
			int num = this.MenuItem.DropDownItems.IndexOf(toolItem);
			this.MenuItem.DropDownItems.Insert(num, this.commitedEditorNode);
			if (toolItem is ToolStripControlHost)
			{
				((ToolStripControlHost)toolItem).Control.Visible = false;
			}
			toolItem.Visible = false;
			this.MenuItem.DropDown.ResumeLayout();
			if (this.commitedTemplateNode != null)
			{
				this.commitedTemplateNode.FocusEditor(toolItem);
			}
			ToolStripDropDownItem toolStripDropDownItem = toolItem as ToolStripDropDownItem;
			if (!(toolStripDropDownItem.Owner is ToolStripDropDownMenu) && toolStripDropDownItem != null && toolStripDropDownItem.Bounds.Width < this.commitedEditorNode.Bounds.Width)
			{
				toolStripDropDownItem.Width = this.commitedEditorNode.Width;
				toolStripDropDownItem.DropDown.Location = new Point(toolStripDropDownItem.DropDown.Location.X + this.commitedEditorNode.Bounds.Width - toolStripDropDownItem.Bounds.Width, toolStripDropDownItem.DropDown.Location.Y);
			}
			base.IsEditorActive = true;
		}

		private int GetItemInsertionIndex(ToolStripDropDown wb, Point ownerClientAreaRelativeDropPoint)
		{
			for (int i = 0; i < wb.Items.Count; i++)
			{
				Rectangle bounds = wb.Items[i].Bounds;
				bounds.Inflate(wb.Items[i].Margin.Size);
				if (bounds.Contains(ownerClientAreaRelativeDropPoint))
				{
					return wb.Items.IndexOf(wb.Items[i]);
				}
			}
			return -1;
		}

		protected override Component GetOwnerForActionList()
		{
			return this.MenuItem;
		}

		internal override ToolStrip GetMainToolStrip()
		{
			ToolStripDropDown firstDropDown = base.GetFirstDropDown(this.MenuItem);
			ToolStripItem toolStripItem = ((firstDropDown == null) ? null : firstDropDown.OwnerItem);
			if (toolStripItem != null)
			{
				return toolStripItem.Owner;
			}
			return this.MenuItem.Owner;
		}

		private void HideAllDropDowns(ToolStripDropDownItem item)
		{
			try
			{
				if (this.MenuItem.Owner is ToolStripDropDown)
				{
					ToolStripItem ownerItem = ((ToolStripDropDown)this.MenuItem.Owner).OwnerItem;
					while (item != ownerItem)
					{
						if (item.DropDown.Visible)
						{
							item.HideDropDown();
						}
						if (!(item.Owner is ToolStripDropDown))
						{
							break;
						}
						item = (ToolStripDropDownItem)((ToolStripDropDown)item.Owner).OwnerItem;
					}
				}
			}
			catch (Exception ex)
			{
				if (ClientUtils.IsCriticalException(ex))
				{
					throw;
				}
			}
		}

		private void HideSiblingDropDowns(ToolStripDropDownItem item)
		{
			try
			{
				ToolStripItem menuItem = this.MenuItem;
				while (item != menuItem)
				{
					item.HideDropDown();
					if (!(item.Owner is ToolStripDropDown))
					{
						break;
					}
					item = (ToolStripDropDownItem)((ToolStripDropDown)item.Owner).OwnerItem;
				}
			}
			catch (Exception ex)
			{
				if (ClientUtils.IsCriticalException(ex))
				{
					throw;
				}
			}
		}

		internal void HookEvents()
		{
			if (this.MenuItem != null)
			{
				this.MenuItem.DropDown.Closing += this.OnDropDownClosing;
				this.MenuItem.DropDownOpening += this.DropDownItem_DropDownOpening;
				this.MenuItem.DropDownOpened += this.DropDownItem_DropDownOpened;
				this.MenuItem.DropDownClosed += this.DropDownItem_DropDownClosed;
				this.MenuItem.DropDown.Resize += this.DropDownResize;
				this.MenuItem.DropDown.ItemAdded += this.OnItemAdded;
				this.MenuItem.DropDown.Paint += this.DropDownPaint;
				this.MenuItem.DropDown.Click += this.DropDownClick;
				this.MenuItem.DropDown.LocationChanged += this.DropDownLocationChanged;
			}
		}

		public override void Initialize(IComponent component)
		{
			base.Initialize(component);
			base.Visible = true;
			this.DoubleClickEnabled = this.MenuItem.DoubleClickEnabled;
			this.selSvc = (ISelectionService)this.GetService(typeof(ISelectionService));
			if (this.selSvc != null)
			{
				this.selSvc.SelectionChanged += this.OnSelectionChanged;
			}
			this.toolStripAdornerWindowService = (ToolStripAdornerWindowService)this.GetService(typeof(ToolStripAdornerWindowService));
			this.designerHost = (IDesignerHost)this.GetService(typeof(IDesignerHost));
			this.MenuItem.DoubleClickEnabled = true;
			IComponentChangeService componentChangeService = (IComponentChangeService)this.GetService(typeof(IComponentChangeService));
			if (componentChangeService != null)
			{
				componentChangeService.ComponentRemoved += this.ComponentChangeSvc_ComponentRemoved;
				componentChangeService.ComponentRemoving += this.ComponentChangeSvc_ComponentRemoving;
				componentChangeService.ComponentAdding += this.ComponentChangeSvc_ComponentAdding;
				componentChangeService.ComponentAdded += this.ComponentChangeSvc_ComponentAdded;
			}
			if (this.undoEngine == null)
			{
				this.undoEngine = this.GetService(typeof(UndoEngine)) as UndoEngine;
				if (this.undoEngine != null)
				{
					this.undoEngine.Undoing += this.OnUndoing;
					this.undoEngine.Undone += this.OnUndone;
				}
			}
		}

		internal void InitializeBodyGlyphsForItems(bool addGlyphs, ToolStripDropDownItem item)
		{
			if (addGlyphs)
			{
				this.AddBodyGlyphs(item);
				return;
			}
			this.RemoveBodyGlyphs(item);
		}

		internal void InitializeDropDown()
		{
			ToolStrip mainToolStrip = this.GetMainToolStrip();
			ToolStripDropDown firstDropDown = base.GetFirstDropDown(this.MenuItem);
			if (firstDropDown != null)
			{
				ToolStripItem ownerItem = firstDropDown.OwnerItem;
				if (ownerItem != null && ownerItem.GetCurrentParent() is ToolStripOverflow && !mainToolStrip.CanOverflow)
				{
					return;
				}
			}
			if (!this.initialized)
			{
				this.initialized = true;
				ToolStripDropDownItem toolStripDropDownItem = this.MenuItem.DropDown.OwnerItem as ToolStripDropDownItem;
				if (toolStripDropDownItem != null && toolStripDropDownItem != this.MenuItem)
				{
					ToolStripMenuItemDesigner toolStripMenuItemDesigner = this.designerHost.GetDesigner(toolStripDropDownItem) as ToolStripMenuItemDesigner;
					if (toolStripMenuItemDesigner != null)
					{
						toolStripMenuItemDesigner.RemoveTypeHereNode(toolStripDropDownItem);
					}
					toolStripDropDownItem.HideDropDown();
				}
				if (this.MenuItem.DropDown.Site != null)
				{
					ToolStripDropDownDesigner toolStripDropDownDesigner = this.designerHost.GetDesigner(this.MenuItem.DropDown) as ToolStripDropDownDesigner;
					if (toolStripDropDownDesigner != null)
					{
						toolStripDropDownDesigner.currentParent = this.MenuItem as ToolStripMenuItem;
					}
				}
				this.CreatetypeHereNode();
				this.MenuItem.DropDown.TopLevel = false;
				this.MenuItem.DropDown.AllowDrop = true;
				this.HookEvents();
				this.MenuItem.DropDown.AutoClose = false;
				this.MenuItem.ShowDropDown();
				this.ShowOwnerDropDown(this.MenuItem);
				this.ResetGlyphs(this.MenuItem);
				if (!this.IsOnContextMenu && !this.dummyItemAdded)
				{
					SelectionManager selectionManager = (SelectionManager)this.GetService(typeof(SelectionManager));
					if (selectionManager != null)
					{
						selectionManager.Refresh();
					}
				}
			}
		}

		private bool IsParentDropDown(ToolStripDropDown currentDropDown)
		{
			if (currentDropDown != null)
			{
				ToolStripDropDown toolStripDropDown = this.MenuItem.Owner as ToolStripDropDown;
				while (toolStripDropDown != null && toolStripDropDown != currentDropDown)
				{
					ToolStripDropDownItem toolStripDropDownItem = toolStripDropDown.OwnerItem as ToolStripDropDownItem;
					if (toolStripDropDownItem != null)
					{
						toolStripDropDown = toolStripDropDownItem.Owner as ToolStripDropDown;
					}
					else
					{
						toolStripDropDown = null;
					}
				}
				return toolStripDropDown != null;
			}
			return false;
		}

		internal override ToolStripItem MorphCurrentItem(Type t)
		{
			Rectangle bounds = this.MenuItem.GetCurrentParent().Bounds;
			Rectangle bounds2 = this.MenuItem.DropDown.Bounds;
			this.InitializeBodyGlyphsForItems(false, this.MenuItem);
			Rectangle rectangle = Rectangle.Union(bounds, bounds2);
			ToolStripAdornerWindowService toolStripAdornerWindowService = this.toolStripAdornerWindowService;
			ToolStripItem toolStripItem = base.MorphCurrentItem(t);
			if (toolStripAdornerWindowService != null)
			{
				toolStripAdornerWindowService.Invalidate(rectangle);
			}
			return toolStripItem;
		}

		private void ComponentChangeSvc_ComponentAdded(object sender, ComponentEventArgs e)
		{
			ToolStripItem toolStripItem = e.Component as ToolStripItem;
			IComponentChangeService componentChangeService = (IComponentChangeService)this.GetService(typeof(IComponentChangeService));
			if (toolStripItem != null && this.componentAddingFired && (this.MenuItemSelected || this.fireComponentChanged))
			{
				this.componentAddingFired = false;
				try
				{
					if (this.IsOnContextMenu && this.MenuItem.DropDown.Site != null)
					{
						if (componentChangeService != null)
						{
							MemberDescriptor memberDescriptor = TypeDescriptor.GetProperties(this.MenuItem.DropDown)["Items"];
							componentChangeService.OnComponentChanging(this.MenuItem.DropDown, memberDescriptor);
						}
					}
					else
					{
						base.RaiseComponentChanging(TypeDescriptor.GetProperties(this.MenuItem)["DropDownItems"]);
					}
					int count = this.MenuItem.DropDownItems.Count;
					if (this.indexToInsertNewItem != -1)
					{
						if (this.IsOnContextMenu && this.MenuItem.DropDown.Site != null)
						{
							this.MenuItem.DropDown.Items.Insert(this.indexToInsertNewItem, toolStripItem);
						}
						else
						{
							this.MenuItem.DropDownItems.Insert(this.indexToInsertNewItem, toolStripItem);
						}
					}
					else
					{
						ToolStripItem toolStripItem2 = this.selSvc.PrimarySelection as ToolStripItem;
						if (toolStripItem2 != null && toolStripItem2 != this.MenuItem)
						{
							int num = this.MenuItem.DropDownItems.IndexOf(toolStripItem2);
							if (this.MenuItem.DropDownDirection == ToolStripDropDownDirection.AboveLeft || this.MenuItem.DropDownDirection == ToolStripDropDownDirection.AboveRight)
							{
								if (this.IsOnContextMenu && this.MenuItem.DropDown.Site != null)
								{
									this.MenuItem.DropDown.Items.Insert(num + 1, toolStripItem);
								}
								else
								{
									this.MenuItem.DropDownItems.Insert(num + 1, toolStripItem);
								}
							}
							else if (this.IsOnContextMenu && this.MenuItem.DropDown.Site != null)
							{
								this.MenuItem.DropDown.Items.Insert(num, toolStripItem);
							}
							else
							{
								this.MenuItem.DropDownItems.Insert(num, toolStripItem);
							}
						}
						else if (count > 0)
						{
							if (this.MenuItem.DropDownDirection != ToolStripDropDownDirection.AboveLeft && this.MenuItem.DropDownDirection != ToolStripDropDownDirection.AboveRight)
							{
								if (this.IsOnContextMenu && this.MenuItem.DropDown.Site != null)
								{
									this.MenuItem.DropDown.Items.Insert(count - 1, toolStripItem);
								}
								else
								{
									this.MenuItem.DropDownItems.Insert(count - 1, toolStripItem);
								}
							}
						}
						else if (this.IsOnContextMenu && this.MenuItem.DropDown.Site != null)
						{
							this.MenuItem.DropDown.Items.Add(toolStripItem);
						}
						else
						{
							this.MenuItem.DropDownItems.Add(toolStripItem);
						}
					}
					if (this.undoingCalled && this.selSvc != null)
					{
						this.selSvc.SetSelectedComponents(new IComponent[] { toolStripItem }, SelectionTypes.Replace);
					}
					this.ResetGlyphs(this.MenuItem);
				}
				catch
				{
					this.CommitInsertTransaction(false);
				}
				finally
				{
					if (this.IsOnContextMenu && this.MenuItem.DropDown.Site != null)
					{
						if (componentChangeService != null)
						{
							MemberDescriptor memberDescriptor2 = TypeDescriptor.GetProperties(this.MenuItem.DropDown)["Items"];
							componentChangeService.OnComponentChanged(this.MenuItem.DropDown, memberDescriptor2, null, null);
						}
					}
					else
					{
						base.RaiseComponentChanged(TypeDescriptor.GetProperties(this.MenuItem)["DropDownItems"], null, null);
					}
					this.CommitInsertTransaction(true);
				}
			}
		}

		private void CommitInsertTransaction(bool commit)
		{
			if (!this.IsOnContextMenu)
			{
				ToolStrip mainToolStrip = this.GetMainToolStrip();
				ToolStripDesigner toolStripDesigner = this.designerHost.GetDesigner(mainToolStrip) as ToolStripDesigner;
				if (toolStripDesigner != null && toolStripDesigner.InsertTansaction != null)
				{
					if (commit)
					{
						toolStripDesigner.InsertTansaction.Commit();
					}
					else
					{
						toolStripDesigner.InsertTansaction.Cancel();
					}
					toolStripDesigner.InsertTansaction = null;
					return;
				}
			}
			else if (this.insertMenuItemTransaction != null)
			{
				if (commit)
				{
					this.insertMenuItemTransaction.Commit();
				}
				else
				{
					this.insertMenuItemTransaction.Cancel();
				}
				this.insertMenuItemTransaction = null;
			}
		}

		private void ComponentChangeSvc_ComponentAdding(object sender, ComponentEventArgs e)
		{
			if (this.KeyboardHandlingService != null && this.KeyboardHandlingService.CopyInProgress)
			{
				return;
			}
			if (e.Component is ToolStripItem && (this.MenuItemSelected || this.fireComponentChanged))
			{
				if (!this.IsOnContextMenu)
				{
					ToolStrip mainToolStrip = this.GetMainToolStrip();
					ToolStripDesigner toolStripDesigner = this.designerHost.GetDesigner(mainToolStrip) as ToolStripDesigner;
					if (toolStripDesigner != null && !toolStripDesigner.EditingCollection && toolStripDesigner.InsertTansaction == null)
					{
						this.componentAddingFired = true;
						toolStripDesigner.InsertTansaction = this.designerHost.CreateTransaction(SR.GetString("ToolStripInsertingIntoDropDownTransaction"));
						return;
					}
				}
				else
				{
					ToolStripItem toolStripItem = e.Component as ToolStripItem;
					if (toolStripItem != null && toolStripItem.Owner == null)
					{
						this.componentAddingFired = true;
						this.insertMenuItemTransaction = this.designerHost.CreateTransaction(SR.GetString("ToolStripInsertingIntoDropDownTransaction"));
					}
				}
			}
		}

		private void ComponentChangeSvc_ComponentRemoved(object sender, ComponentEventArgs e)
		{
			ToolStripItem toolStripItem = e.Component as ToolStripItem;
			if (toolStripItem != null && toolStripItem.IsOnDropDown)
			{
				ToolStripDropDownItem toolStripDropDownItem = (ToolStripDropDownItem)((ToolStripDropDown)toolStripItem.Owner).OwnerItem;
				if (toolStripDropDownItem != null && toolStripDropDownItem == this.MenuItem)
				{
					int num = toolStripDropDownItem.DropDownItems.IndexOf(toolStripItem);
					try
					{
						if (num != -1)
						{
							toolStripDropDownItem.DropDownItems.Remove(toolStripItem);
							base.RaiseComponentChanged(TypeDescriptor.GetProperties(toolStripDropDownItem)["DropDownItems"], null, null);
						}
					}
					finally
					{
						if (this._pendingTransaction != null)
						{
							this._pendingTransaction.Commit();
							this._pendingTransaction = null;
						}
					}
					this.ResetGlyphs(toolStripDropDownItem);
					if (toolStripDropDownItem.DropDownItems.Count > 1)
					{
						num = Math.Min(toolStripDropDownItem.DropDownItems.Count - 1, num);
						num = Math.Max(0, num);
					}
					else
					{
						num = -1;
					}
					if (this.toolStripAdornerWindowService != null && this.boundsToInvalidateOnRemove != Rectangle.Empty)
					{
						using (Region region = new Region(this.boundsToInvalidateOnRemove))
						{
							region.Exclude(this.MenuItem.DropDown.Bounds);
							this.toolStripAdornerWindowService.Invalidate(region);
							this.boundsToInvalidateOnRemove = Rectangle.Empty;
						}
					}
					if (this.KeyboardHandlingService != null && this.KeyboardHandlingService.CutOrDeleteInProgress && this.selSvc != null && !this.dummyItemAdded)
					{
						IComponent component2;
						if (num != -1)
						{
							IComponent component = toolStripDropDownItem.DropDownItems[num];
							component2 = component;
						}
						else
						{
							component2 = toolStripDropDownItem;
						}
						IComponent component3 = component2;
						if (component3 is DesignerToolStripControlHost)
						{
							this.KeyboardHandlingService.SelectedDesignerControl = component3;
							this.KeyboardHandlingService.OwnerItemAfterCut = this.MenuItem;
							this.selSvc.SetSelectedComponents(null, SelectionTypes.Replace);
							return;
						}
						this.selSvc.SetSelectedComponents(new IComponent[] { component3 }, SelectionTypes.Replace);
					}
				}
			}
		}

		private void ComponentChangeSvc_ComponentRemoving(object sender, ComponentEventArgs e)
		{
			if (this.dummyItemAdded)
			{
				return;
			}
			ToolStripItem toolStripItem = e.Component as ToolStripItem;
			if (toolStripItem != null && toolStripItem.IsOnDropDown && toolStripItem.Placement == ToolStripItemPlacement.Main)
			{
				ToolStripDropDownItem toolStripDropDownItem = (ToolStripDropDownItem)((ToolStripDropDown)toolStripItem.Owner).OwnerItem;
				if (toolStripDropDownItem != null && toolStripDropDownItem == this.MenuItem)
				{
					this.RemoveItemBodyGlyph(toolStripItem);
					this.InitializeBodyGlyphsForItems(false, toolStripDropDownItem);
					this.boundsToInvalidateOnRemove = toolStripDropDownItem.DropDown.Bounds;
					ToolStripDropDownItem toolStripDropDownItem2 = toolStripItem as ToolStripDropDownItem;
					if (toolStripDropDownItem2 != null)
					{
						this.boundsToInvalidateOnRemove = Rectangle.Union(this.boundsToInvalidateOnRemove, toolStripDropDownItem2.DropDown.Bounds);
					}
					try
					{
						this._pendingTransaction = this.designerHost.CreateTransaction(SR.GetString("ToolStripDesignerTransactionRemovingItem"));
						base.RaiseComponentChanging(TypeDescriptor.GetProperties(toolStripDropDownItem)["DropDownItems"]);
					}
					catch
					{
						if (this._pendingTransaction != null)
						{
							this._pendingTransaction.Cancel();
							this._pendingTransaction = null;
						}
					}
				}
			}
		}

		private void OnDropDownClosing(object sender, ToolStripDropDownClosingEventArgs e)
		{
			e.Cancel = e.CloseReason == ToolStripDropDownCloseReason.ItemClicked;
		}

		private void OnDropDownDisposed(object sender, EventArgs e)
		{
			if (this.MenuItem != null)
			{
				if (this.MenuItem.DropDown != null)
				{
					this.MenuItem.DropDown.Disposed -= this.OnDropDownDisposed;
				}
				this.MenuItem.DropDown = null;
			}
		}

		private void OnItemAdded(object sender, ToolStripItemEventArgs e)
		{
			if (this.MenuItem.DropDownDirection != ToolStripDropDownDirection.AboveLeft && this.MenuItem.DropDownDirection != ToolStripDropDownDirection.AboveRight && this.typeHereNode != null && e.Item != this.typeHereNode)
			{
				int num = this.MenuItem.DropDown.Items.IndexOf(this.typeHereNode);
				if (num >= 0 && num < this.MenuItem.DropDown.Items.Count - 1)
				{
					this.MenuItem.DropDown.ItemAdded -= this.OnItemAdded;
					this.MenuItem.DropDown.SuspendLayout();
					this.MenuItem.DropDown.Items.Remove(this.typeHereNode);
					this.MenuItem.DropDown.Items.Add(this.typeHereNode);
					this.MenuItem.DropDown.ResumeLayout();
					this.MenuItem.DropDown.ItemAdded += this.OnItemAdded;
					return;
				}
				this.CreatetypeHereNode();
			}
		}

		private void OnUndone(object source, EventArgs e)
		{
			if (this.undoingCalled)
			{
				if (this.dropDownSet && this.MenuItem.DropDown.IsAutoGenerated)
				{
					ToolStrip mainToolStrip = this.GetMainToolStrip();
					ToolStripDesigner toolStripDesigner = this.designerHost.GetDesigner(mainToolStrip) as ToolStripDesigner;
					if (toolStripDesigner != null && toolStripDesigner.CacheItems)
					{
						foreach (object obj in toolStripDesigner.Items)
						{
							ToolStripItem toolStripItem = (ToolStripItem)obj;
							this.MenuItem.DropDownItems.Insert(0, toolStripItem);
						}
						toolStripDesigner.CacheItems = false;
					}
					this.ResetGlyphs(this.MenuItem);
				}
				if (this.MenuItem != null && this.selSvc.GetComponentSelected(this.MenuItem))
				{
					this.InitializeDropDown();
					this.MenuItem.DropDown.PerformLayout();
				}
				this.undoingCalled = false;
				this.dropDownSet = false;
			}
			if (this.selSvc.GetComponentSelected(this.MenuItem) && !this.dropDownSetFailed)
			{
				this.InitializeDropDown();
			}
		}

		private void OnUndoing(object source, EventArgs e)
		{
			if (this.dummyItemAdded)
			{
				return;
			}
			if (!this.IsOnContextMenu && this.MenuItem.DropDown.Visible)
			{
				this.MenuItem.HideDropDown();
				if (!this.MenuItem.DropDown.IsAutoGenerated)
				{
					this.dropDownSet = true;
					ToolStrip mainToolStrip = this.GetMainToolStrip();
					ToolStripDesigner toolStripDesigner = this.designerHost.GetDesigner(mainToolStrip) as ToolStripDesigner;
					if (toolStripDesigner != null)
					{
						toolStripDesigner.CacheItems = true;
						toolStripDesigner.Items.Clear();
					}
				}
				this.undoingCalled = true;
			}
		}

		private void OnSelectionChanged(object sender, EventArgs e)
		{
			if (this.MenuItem == null)
			{
				return;
			}
			ISelectionService selectionService = sender as ISelectionService;
			if (selectionService == null)
			{
				return;
			}
			if (this.commitedTemplateNode != null && this.commitedTemplateNode.Active)
			{
				this.commitedTemplateNode.Commit(false, false);
			}
			else if (this.typeHereTemplateNode != null && this.typeHereTemplateNode.Active)
			{
				this.typeHereTemplateNode.Commit(false, false);
			}
			if (this.MenuItem.Equals(selectionService.PrimarySelection))
			{
				ArrayList arrayList = ToolStripDesignerUtils.originalSelComps;
				if (arrayList != null)
				{
					ToolStripDesignerUtils.InvalidateSelection(arrayList, this.MenuItem, this.MenuItem.Site, false);
				}
				if (this.IsOnContextMenu && !this.MenuItem.Owner.Visible)
				{
					ToolStripDropDown firstDropDown = base.GetFirstDropDown(this.MenuItem);
					ToolStripDropDownDesigner toolStripDropDownDesigner = this.designerHost.GetDesigner(firstDropDown) as ToolStripDropDownDesigner;
					if (toolStripDropDownDesigner != null)
					{
						this.InitializeDropDown();
						toolStripDropDownDesigner.ShowMenu();
						toolStripDropDownDesigner.AddSelectionGlyphs();
					}
				}
				else
				{
					this.InitializeDropDown();
				}
				ICollection collection = null;
				if (this.selSvc != null)
				{
					collection = selectionService.GetSelectedComponents();
				}
				arrayList = new ArrayList(collection);
				if (arrayList.Count == 0 && this.KeyboardHandlingService != null && this.KeyboardHandlingService.SelectedDesignerControl != null)
				{
					arrayList.Add(this.KeyboardHandlingService.SelectedDesignerControl);
				}
				if (arrayList.Count > 0)
				{
					ToolStripDesignerUtils.originalSelComps = arrayList;
					return;
				}
			}
			else
			{
				object obj = ((ISelectionService)sender).PrimarySelection;
				if (obj == null && this.KeyboardHandlingService != null)
				{
					obj = this.KeyboardHandlingService.SelectedDesignerControl;
				}
				ToolStripItem toolStripItem = obj as ToolStripItem;
				if (toolStripItem != null)
				{
					for (ToolStripDropDown toolStripDropDown = toolStripItem.Owner as ToolStripDropDown; toolStripDropDown != null; toolStripDropDown = toolStripDropDown.OwnerItem.Owner as ToolStripDropDown)
					{
						if (toolStripDropDown.OwnerItem == this.MenuItem || toolStripDropDown.OwnerItem == null)
						{
							return;
						}
					}
				}
				if (this.MenuItem.DropDown.Visible)
				{
					ToolStripDropDown toolStripDropDown2 = obj as ToolStripDropDown;
					if (toolStripDropDown2 != null && this.MenuItem.DropDown == toolStripDropDown2)
					{
						return;
					}
					ToolStripItem toolStripItem2 = obj as ToolStripItem;
					if (toolStripItem2 != null)
					{
						for (ToolStripDropDown toolStripDropDown3 = toolStripItem2.Owner as ToolStripDropDown; toolStripDropDown3 != null; toolStripDropDown3 = toolStripDropDown3.OwnerItem.Owner as ToolStripDropDown)
						{
							if (toolStripDropDown3 == this.MenuItem.DropDown)
							{
								return;
							}
						}
					}
					if (this.MenuItem.DropDown.OwnerItem == this.MenuItem)
					{
						this.MenuItem.HideDropDown();
					}
				}
			}
		}

		protected override void PreFilterProperties(IDictionary properties)
		{
			base.PreFilterProperties(properties);
			string[] array = new string[] { "Visible", "DoubleClickEnabled", "CheckOnClick", "DropDown" };
			Attribute[] array2 = new Attribute[0];
			for (int i = 0; i < array.Length; i++)
			{
				PropertyDescriptor propertyDescriptor = (PropertyDescriptor)properties[array[i]];
				if (propertyDescriptor != null)
				{
					properties[array[i]] = TypeDescriptor.CreateProperty(typeof(ToolStripMenuItemDesigner), propertyDescriptor, array2);
				}
			}
		}

		private void ResetDoubleClickEnabled()
		{
			this.DoubleClickEnabled = false;
		}

		private void ResetCheckOnClick()
		{
			this.CheckOnClick = false;
		}

		private void ResetDropDown()
		{
			this.DropDown = null;
		}

		private void ResetVisible()
		{
			base.Visible = true;
		}

		private void RestoreVisible()
		{
			this.MenuItem.Visible = base.Visible;
		}

		internal void RemoveTypeHereNode(ToolStripDropDownItem ownerItem)
		{
			Rectangle bounds = ownerItem.DropDown.Bounds;
			if (ownerItem.DropDownItems.Count > 0 && ownerItem.DropDownItems[0] is DesignerToolStripControlHost)
			{
				ownerItem.DropDownItems.RemoveAt(0);
			}
			if (this.typeHereTemplateNode != null && this.typeHereTemplateNode.Active)
			{
				this.typeHereTemplateNode.RollBack();
				this.typeHereTemplateNode.CloseEditor();
				this.typeHereTemplateNode = null;
			}
			if (this.typeHereNode != null)
			{
				this.typeHereNode.Dispose();
				this.typeHereNode = null;
			}
			if (this.toolStripAdornerWindowService != null)
			{
				this.toolStripAdornerWindowService.Invalidate(bounds);
			}
		}

		private void RollBack()
		{
			if (this.commitedEditorNode != null)
			{
				int num = this.MenuItem.DropDownItems.IndexOf(this.commitedEditorNode);
				ToolStripDropDownItem toolStripDropDownItem = (ToolStripDropDownItem)this.MenuItem.DropDownItems[num + 1];
				if (toolStripDropDownItem != null)
				{
					toolStripDropDownItem.Visible = true;
				}
				this.MenuItem.DropDown.Items.Remove(this.commitedEditorNode);
				if (this.commitedTemplateNode != null)
				{
					this.commitedTemplateNode.RollBack();
					this.commitedTemplateNode.CloseEditor();
					this.commitedTemplateNode = null;
				}
				if (this.commitedEditorNode != null)
				{
					this.commitedEditorNode.Dispose();
					this.commitedEditorNode = null;
				}
			}
		}

		private void RemoveBodyGlyphs(ToolStripDropDownItem item)
		{
			if (item != null)
			{
				foreach (object obj in item.DropDownItems)
				{
					ToolStripItem toolStripItem = (ToolStripItem)obj;
					ToolStripItemDesigner toolStripItemDesigner = (ToolStripItemDesigner)this.designerHost.GetDesigner(toolStripItem);
					if (toolStripItemDesigner != null)
					{
						ControlBodyGlyph bodyGlyph = toolStripItemDesigner.bodyGlyph;
						if (bodyGlyph != null && this.toolStripAdornerWindowService != null && this.toolStripAdornerWindowService.DropDownAdorner.Glyphs.Contains(bodyGlyph))
						{
							this.toolStripAdornerWindowService.DropDownAdorner.Glyphs.Remove(bodyGlyph);
							toolStripItemDesigner.bodyGlyph = null;
						}
					}
				}
			}
		}

		internal void RemoveItemBodyGlyph(ToolStripItem item)
		{
			if (item != null)
			{
				ToolStripItemDesigner toolStripItemDesigner = (ToolStripItemDesigner)this.designerHost.GetDesigner(item);
				if (toolStripItemDesigner != null)
				{
					ControlBodyGlyph bodyGlyph = toolStripItemDesigner.bodyGlyph;
					if (bodyGlyph != null && this.toolStripAdornerWindowService != null && this.toolStripAdornerWindowService.DropDownAdorner.Glyphs.Contains(bodyGlyph))
					{
						this.toolStripAdornerWindowService.DropDownAdorner.Glyphs.Remove(bodyGlyph);
						toolStripItemDesigner.bodyGlyph = null;
					}
				}
			}
		}

		internal void ResetGlyphs(ToolStripDropDownItem item)
		{
			if (item.DropDown.Visible)
			{
				this.InitializeBodyGlyphsForItems(false, item);
				this.InitializeBodyGlyphsForItems(true, item);
			}
		}

		internal override bool SetSelection(bool enterKeyPressed)
		{
			if (enterKeyPressed)
			{
				if (!this.initialized)
				{
					this.InitializeDropDown();
				}
				if (this.selSvc != null && this.KeyboardHandlingService != null)
				{
					int num = 0;
					if (this.MenuItem.DropDownDirection != ToolStripDropDownDirection.AboveLeft && this.MenuItem.DropDownDirection != ToolStripDropDownDirection.AboveRight)
					{
						num = this.MenuItem.DropDownItems.Count;
						num--;
					}
					this.selSvc.SetSelectedComponents(new object[] { this.MenuItem }, SelectionTypes.Replace);
					if (num >= 0)
					{
						this.KeyboardHandlingService.SelectedDesignerControl = this.MenuItem.DropDownItems[num];
						this.selSvc.SetSelectedComponents(null, SelectionTypes.Replace);
					}
				}
				return true;
			}
			return false;
		}

		private bool ShouldSerializeDoubleClickEnabled()
		{
			return (bool)base.ShadowProperties["DoubleClickEnabled"];
		}

		private bool ShouldSerializeCheckOnClick()
		{
			return (bool)base.ShadowProperties["CheckOnClick"];
		}

		private bool ShouldSerializeDropDown()
		{
			return this.customDropDown != null;
		}

		private bool ShouldSerializeVisible()
		{
			return !base.Visible;
		}

		internal override void ShowEditNode(bool clicked)
		{
			if (this.MenuItem == null)
			{
				return;
			}
			try
			{
				if (this.MenuItem.Owner is ToolStripDropDown)
				{
					this.parentItem = ((ToolStripDropDown)this.MenuItem.Owner).OwnerItem;
					if (this.designerHost != null)
					{
						IDesigner designer = this.designerHost.GetDesigner(this.parentItem);
						if (designer is ToolStripMenuItemDesigner)
						{
							((ToolStripMenuItemDesigner)designer).EnterInSituEdit(this.MenuItem);
						}
					}
				}
				else
				{
					base.ShowEditNode(clicked);
				}
			}
			catch (CheckoutException ex)
			{
				if (!ex.Equals(CheckoutException.Canceled))
				{
					throw;
				}
			}
		}

		private void SelectItems(ToolStripDropDownItem oldSelection, ISelectionService selSvc)
		{
			ToolStripDropDown toolStripDropDown = (ToolStripDropDown)this.MenuItem.Owner;
			int num = Math.Max(toolStripDropDown.Items.IndexOf(oldSelection), toolStripDropDown.Items.IndexOf(this.MenuItem));
			int i = Math.Min(toolStripDropDown.Items.IndexOf(oldSelection), toolStripDropDown.Items.IndexOf(this.MenuItem));
			ToolStripItem[] array = new ToolStripItem[num - i + 1];
			int num2 = 0;
			while (i <= num)
			{
				array[num2] = toolStripDropDown.Items[i];
				num2++;
				i++;
			}
			selSvc.SetSelectedComponents(array);
		}

		internal void ShowOwnerDropDown(ToolStripDropDownItem currentSelection)
		{
			while (currentSelection != null && currentSelection.Owner is ToolStripDropDown)
			{
				currentSelection = (ToolStripDropDownItem)((ToolStripDropDown)currentSelection.Owner).OwnerItem;
				if (currentSelection != null && !currentSelection.DropDown.Visible)
				{
					ToolStripMenuItemDesigner toolStripMenuItemDesigner = this.designerHost.GetDesigner(currentSelection) as ToolStripMenuItemDesigner;
					if (toolStripMenuItemDesigner != null)
					{
						toolStripMenuItemDesigner.InitializeDropDown();
					}
				}
			}
		}

		internal void UnHookEvents()
		{
			if (this.MenuItem != null)
			{
				this.MenuItem.DropDown.Closing -= this.OnDropDownClosing;
				this.MenuItem.DropDownOpening -= this.DropDownItem_DropDownOpening;
				this.MenuItem.DropDownOpened -= this.DropDownItem_DropDownOpened;
				this.MenuItem.DropDownClosed -= this.DropDownItem_DropDownClosed;
				this.MenuItem.DropDown.Resize -= this.DropDownResize;
				this.MenuItem.DropDown.ItemAdded -= this.OnItemAdded;
				this.MenuItem.DropDown.Paint -= this.DropDownPaint;
				this.MenuItem.DropDown.LocationChanged -= this.DropDownLocationChanged;
				this.MenuItem.DropDown.Click -= this.DropDownClick;
			}
		}

		private const int GLYPHINSET = 2;

		private DesignerToolStripControlHost typeHereNode;

		private ToolStripTemplateNode typeHereTemplateNode;

		private DesignerToolStripControlHost commitedEditorNode;

		private ToolStripTemplateNode commitedTemplateNode;

		private IDesignerHost designerHost;

		private ToolStripItem parentItem;

		private ToolStripAdornerWindowService toolStripAdornerWindowService;

		private ToolStripKeyboardHandlingService keyboardHandlingService;

		private ISelectionService selSvc;

		private DesignerTransaction _pendingTransaction;

		private bool fireComponentChanged;

		private bool componentAddingFired;

		private int indexToInsertNewItem = -1;

		private DesignerTransaction insertMenuItemTransaction;

		private DesignerTransaction newMenuItemTransaction;

		private Rectangle dropDownSizeToInvalidate = Rectangle.Empty;

		private Rectangle boundsToInvalidateOnRemove = Rectangle.Empty;

		private ToolStripMenuItemDesigner.ToolStripDropDownGlyph rootControlGlyph;

		private bool initialized;

		private UndoEngine undoEngine;

		private bool undoingCalled;

		private bool addingDummyItem;

		private ToolStripDropDown customDropDown;

		private bool dropDownSet;

		private SerializationStore serializedDataForDropDownItems;

		private bool dropDownSetFailed;

		internal class ToolStripDropDownGlyph : Glyph
		{
			internal ToolStripDropDownGlyph(Rectangle bounds, Behavior b)
				: base(b)
			{
				this._bounds = bounds;
			}

			public override Cursor GetHitTest(Point p)
			{
				if (this._bounds.Contains(p))
				{
					return Cursors.Default;
				}
				return null;
			}

			public override void Paint(PaintEventArgs pe)
			{
			}

			private Rectangle _bounds;
		}

		internal class DropDownBehavior : ControlDesigner.TransparentBehavior
		{
			internal DropDownBehavior(ControlDesigner designer, ToolStripMenuItemDesigner menuItemDesigner)
				: base(designer)
			{
				this.menuItemDesigner = menuItemDesigner;
			}

			public override void OnDragEnter(Glyph g, DragEventArgs e)
			{
				ToolStripItemDataObject toolStripItemDataObject = e.Data as ToolStripItemDataObject;
				if (toolStripItemDataObject != null)
				{
					e.Effect = ((Control.ModifierKeys == Keys.Control) ? DragDropEffects.Copy : DragDropEffects.Move);
					return;
				}
				base.OnDragEnter(g, e);
			}

			public override void OnDragOver(Glyph g, DragEventArgs e)
			{
				ToolStripItemDataObject toolStripItemDataObject = e.Data as ToolStripItemDataObject;
				if (toolStripItemDataObject != null)
				{
					e.Effect = ((Control.ModifierKeys == Keys.Control) ? DragDropEffects.Copy : DragDropEffects.Move);
					return;
				}
				base.OnDragOver(g, e);
			}

			public override void OnDragDrop(Glyph g, DragEventArgs e)
			{
				ToolStripItemDataObject toolStripItemDataObject = e.Data as ToolStripItemDataObject;
				if (toolStripItemDataObject != null)
				{
					ToolStripItem toolStripItem = toolStripItemDataObject.PrimarySelection;
					IDesignerHost designerHost = (IDesignerHost)toolStripItem.Site.GetService(typeof(IDesignerHost));
					ToolStripDropDown toolStripDropDown = toolStripItem.GetCurrentParent() as ToolStripDropDown;
					ToolStripDropDownItem toolStripDropDownItem = null;
					if (toolStripDropDown != null)
					{
						toolStripDropDownItem = toolStripDropDown.OwnerItem as ToolStripDropDownItem;
					}
					if (toolStripDropDownItem != null && designerHost != null)
					{
						ArrayList arrayList = toolStripItemDataObject.DragComponents;
						int num = -1;
						bool flag = e.Effect == DragDropEffects.Copy;
						string text2;
						if (arrayList.Count == 1)
						{
							string text = TypeDescriptor.GetComponentName(arrayList[0]);
							if (text == null || text.Length == 0)
							{
								text = arrayList[0].GetType().Name;
							}
							text2 = SR.GetString(flag ? "BehaviorServiceCopyControl" : "BehaviorServiceMoveControl", new object[] { text });
						}
						else
						{
							text2 = SR.GetString(flag ? "BehaviorServiceCopyControls" : "BehaviorServiceMoveControls", new object[] { arrayList.Count });
						}
						DesignerTransaction designerTransaction = designerHost.CreateTransaction(text2);
						try
						{
							IComponentChangeService componentChangeService = (IComponentChangeService)toolStripItem.Site.GetService(typeof(IComponentChangeService));
							if (componentChangeService != null)
							{
								componentChangeService.OnComponentChanging(toolStripDropDownItem, TypeDescriptor.GetProperties(toolStripDropDownItem)["DropDownItems"]);
							}
							if (flag)
							{
								if (toolStripItem != null)
								{
									num = arrayList.IndexOf(toolStripItem);
								}
								ToolStripKeyboardHandlingService toolStripKeyboardHandlingService = (ToolStripKeyboardHandlingService)toolStripItem.Site.GetService(typeof(ToolStripKeyboardHandlingService));
								if (toolStripKeyboardHandlingService != null)
								{
									toolStripKeyboardHandlingService.CopyInProgress = true;
								}
								arrayList = DesignerUtils.CopyDragObjects(arrayList, toolStripItem.Site) as ArrayList;
								if (toolStripKeyboardHandlingService != null)
								{
									toolStripKeyboardHandlingService.CopyInProgress = false;
								}
								if (num != -1)
								{
									toolStripItem = arrayList[num] as ToolStripItem;
								}
							}
							if (e.Effect == DragDropEffects.Move || flag)
							{
								foreach (object obj in arrayList)
								{
									ToolStripItem toolStripItem2 = (ToolStripItem)obj;
									toolStripDropDown.Items.Add(toolStripItem2);
								}
								ToolStripDropDownItem toolStripDropDownItem2 = toolStripItem as ToolStripDropDownItem;
								if (toolStripDropDownItem2 != null)
								{
									ToolStripMenuItemDesigner toolStripMenuItemDesigner = designerHost.GetDesigner(toolStripDropDownItem2) as ToolStripMenuItemDesigner;
									if (toolStripMenuItemDesigner != null)
									{
										toolStripMenuItemDesigner.InitializeDropDown();
									}
								}
								this.menuItemDesigner.selSvc.SetSelectedComponents(new IComponent[] { toolStripItem }, SelectionTypes.Replace | SelectionTypes.Click);
							}
							if (componentChangeService != null)
							{
								componentChangeService.OnComponentChanged(toolStripDropDownItem, TypeDescriptor.GetProperties(toolStripDropDownItem)["DropDownItems"], null, null);
							}
							if (flag && componentChangeService != null)
							{
								componentChangeService.OnComponentChanging(toolStripDropDownItem, TypeDescriptor.GetProperties(toolStripDropDownItem)["DropDownItems"]);
								componentChangeService.OnComponentChanged(toolStripDropDownItem, TypeDescriptor.GetProperties(toolStripDropDownItem)["DropDownItems"], null, null);
							}
							if (toolStripDropDownItem != null)
							{
								ToolStripMenuItemDesigner toolStripMenuItemDesigner2 = designerHost.GetDesigner(toolStripDropDownItem) as ToolStripMenuItemDesigner;
								if (toolStripMenuItemDesigner2 != null)
								{
									toolStripMenuItemDesigner2.InitializeBodyGlyphsForItems(false, toolStripDropDownItem);
									toolStripMenuItemDesigner2.InitializeBodyGlyphsForItems(true, toolStripDropDownItem);
								}
							}
							BehaviorService behaviorService = (BehaviorService)toolStripItem.Site.GetService(typeof(BehaviorService));
							if (behaviorService != null)
							{
								behaviorService.SyncSelection();
							}
						}
						catch
						{
							if (designerTransaction != null)
							{
								designerTransaction.Cancel();
								designerTransaction = null;
							}
						}
						finally
						{
							if (designerTransaction != null)
							{
								designerTransaction.Commit();
							}
							designerTransaction = null;
						}
					}
				}
			}

			private ToolStripMenuItemDesigner menuItemDesigner;
		}
	}
}
