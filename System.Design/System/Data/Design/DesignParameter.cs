using System;
using System.ComponentModel;

namespace System.Data.Design
{
	[DataSourceXmlClass("Parameter")]
	internal class DesignParameter : DataSourceComponent, IDbDataParameter, IDataParameter, IDataSourceNamedObject, INamedObject, ICloneable
	{
		[DefaultValue(false)]
		[DataSourceXmlAttribute]
		public bool AllowDbNull
		{
			get
			{
				return this.allowDbNull;
			}
			set
			{
				this.allowDbNull = value;
			}
		}

		[DataSourceXmlAttribute]
		[MergableProperty(false)]
		[DefaultValue("")]
		public string ParameterName
		{
			get
			{
				return this.parameterName;
			}
			set
			{
				if (!StringUtil.EqualValue(this.ParameterName, value))
				{
					if (this.CollectionParent != null)
					{
						this.CollectionParent.ValidateUniqueName(this, value);
					}
					this.parameterName = value;
				}
			}
		}

		[DataSourceXmlAttribute]
		public string ColumnName
		{
			get
			{
				return this.columnName;
			}
			set
			{
				this.columnName = value;
			}
		}

		[DataSourceXmlAttribute]
		[Browsable(false)]
		public string AutogeneratedName
		{
			get
			{
				return this.autogeneratedName;
			}
			set
			{
				this.autogeneratedName = value;
			}
		}

		[DataSourceXmlAttribute]
		public DbType DbType
		{
			get
			{
				return this.dbType;
			}
			set
			{
				this.dbType = value;
			}
		}

		[DataSourceXmlAttribute]
		public string ProviderType
		{
			get
			{
				return this.providerType;
			}
			set
			{
				this.providerType = value;
			}
		}

		[DataSourceXmlAttribute]
		[DefaultValue(0)]
		public byte Precision
		{
			get
			{
				return this.precision;
			}
			set
			{
				this.precision = value;
			}
		}

		[DataSourceXmlAttribute]
		[DefaultValue(0)]
		public byte Scale
		{
			get
			{
				return this.scale;
			}
			set
			{
				this.scale = value;
			}
		}

		[DataSourceXmlAttribute]
		[DefaultValue(0)]
		public int Size
		{
			get
			{
				return this.size;
			}
			set
			{
				this.size = value;
				if (this.size < 0)
				{
					this.size = int.MaxValue;
				}
			}
		}

		[DataSourceXmlAttribute]
		[Browsable(false)]
		public string DataTypeServer
		{
			get
			{
				return this.dataTypeServer;
			}
			set
			{
				this.dataTypeServer = value;
			}
		}

		[DefaultValue(ParameterDirection.Input)]
		[DataSourceXmlAttribute]
		public ParameterDirection Direction
		{
			get
			{
				return this.direction;
			}
			set
			{
				this.direction = value;
			}
		}

		[DataSourceXmlAttribute]
		[DefaultValue("")]
		public string SourceColumn
		{
			get
			{
				return this.sourceColumn;
			}
			set
			{
				this.sourceColumn = value;
			}
		}

		[DataSourceXmlAttribute]
		[DefaultValue(DataRowVersion.Current)]
		public DataRowVersion SourceVersion
		{
			get
			{
				return this.sourceVersion;
			}
			set
			{
				this.sourceVersion = value;
			}
		}

		[DataSourceXmlAttribute]
		[Browsable(false)]
		public string DataSourceName
		{
			get
			{
				return this.dataSourceName;
			}
			set
			{
				this.dataSourceName = value;
			}
		}

		string INamedObject.Name
		{
			get
			{
				return this.ParameterName;
			}
			set
			{
				this.ParameterName = value;
			}
		}

		string IDataSourceNamedObject.PublicTypeName
		{
			get
			{
				return "Parameter";
			}
		}

		[EditorBrowsable(EditorBrowsableState.Never)]
		[DefaultValue(false)]
		[DesignOnly(true)]
		[Browsable(false)]
		public bool IsNullable
		{
			get
			{
				return true;
			}
		}

		[Browsable(false)]
		[DefaultValue(null)]
		public object Value
		{
			get
			{
				return null;
			}
			set
			{
			}
		}

		[Browsable(false)]
		public string Name
		{
			get
			{
				return this.ParameterName;
			}
		}

		[DefaultValue(false)]
		[DataSourceXmlAttribute]
		public bool SourceColumnNullMapping
		{
			get
			{
				return this.sourceColumnNullMapping;
			}
			set
			{
				this.sourceColumnNullMapping = value;
			}
		}

		public override string ToString()
		{
			return this.ParameterName;
		}

		public DesignParameter()
			: this(string.Empty)
		{
		}

		public DesignParameter(string name)
		{
			this.parameterName = name;
			this.autogeneratedName = string.Empty;
			this.direction = ParameterDirection.Input;
			this.sourceVersion = DataRowVersion.Current;
			this.dataSourceName = string.Empty;
		}

		public override bool Equals(object o)
		{
			DesignParameter designParameter = o as DesignParameter;
			return designParameter != null && designParameter.ParameterName.Equals(this.ParameterName);
		}

		public override int GetHashCode()
		{
			return this.ParameterName.GetHashCode();
		}

		public object Clone()
		{
			return new DesignParameter(this.ParameterName)
			{
				ColumnName = this.ColumnName,
				AutogeneratedName = this.AutogeneratedName,
				DbType = this.DbType,
				Precision = this.Precision,
				Scale = this.Scale,
				Size = this.Size,
				DataTypeServer = this.DataTypeServer,
				Direction = this.Direction,
				SourceColumn = this.SourceColumn,
				SourceVersion = this.SourceVersion,
				SourceColumnNullMapping = this.SourceColumnNullMapping
			};
		}

		public static DesignParameter GetDefaultRetvalParam()
		{
			DesignParameter designParameter = new DesignParameter("RETURN_VALUE");
			designParameter.DbType = DbType.Int32;
			designParameter.Precision = (designParameter.Scale = 0);
			designParameter.Size = 4;
			designParameter.Direction = ParameterDirection.ReturnValue;
			return designParameter;
		}

		public const string DEFAULT_RETVAL_NAME = "RETURN_VALUE";

		private string parameterName;

		private string columnName;

		private string autogeneratedName;

		private DbType dbType;

		private byte precision;

		private byte scale;

		private int size;

		private string dataTypeServer;

		private ParameterDirection direction;

		private string sourceColumn;

		private DataRowVersion sourceVersion;

		private string dataSourceName;

		private bool sourceColumnNullMapping;

		private bool allowDbNull;

		private string providerType;

		private static int[] adoDataType2DbType = new int[]
		{
			8, 0, 20, 12, 128, 1, 11, 3, 129, 0,
			6, 4, 7, 5, 133, 5, 134, 6, 135, 6,
			14, 7, 5, 8, 0, 13, 10, 13, 64, 6,
			72, 9, 9, 13, 13, 13, 3, 11, 205, 1,
			201, 0, 203, 16, 131, 7, 138, 13, 4, 15,
			2, 10, 16, 14, 21, 20, 19, 19, 18, 18,
			17, 2, 204, 1, 200, 0, 139, 21, 202, 16,
			12, 13, 130, 16
		};
	}
}
